{"body":"<p>I'm using <a href=\"http://en.wikipedia.org/wiki/JSLint\" rel=\"noreferrer\">JSLint</a> to go through JavaScript, and it's returning many suggestions to replace <code>==</code> (two equals signs) with <code>===</code> (three equals signs) when doing things like comparing <code>idSele_UNVEHtype.value.length == 0</code> inside of an <code>if</code> statement.</p>\n\n<p>Is there a performance benefit to replacing <code>==</code> with <code>===</code>? </p>\n\n<p>Any performance improvement would be welcomed as many comparison operators exist.</p>\n\n<p>If no type conversion takes place, would there be a performance gain over <code>==</code>?</p>\n","title":"Which equals operator (== vs ===) should be used in JavaScript comparisons?","answers":[{"score":6670,"body":"<p>The strict equality operator (<code>===</code>) behaves identically to the abstract equality operator (<code>==</code>) except no type conversion is done, and the types must be the same to be considered equal.</p>\n\n<p>Reference: <a href=\"http://www.c-point.com/javascript_tutorial/jsgrpComparison.htm\" rel=\"noreferrer\">Javascript Tutorial: Comparison Operators</a></p>\n\n<p>The <code>==</code> operator will compare for equality <em>after doing any necessary type conversions</em>.  The <code>===</code> operator will <strong>not</strong> do the conversion, so if two values are not the same type <code>===</code> will simply return <code>false</code>. Both are equally quick.</p>\n\n<p>To quote Douglas Crockford's excellent <a href=\"https://rads.stackoverflow.com/amzn/click/com/0596517742\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">JavaScript: The Good Parts</a>,</p>\n\n<blockquote>\n  <p>JavaScript has two sets of equality operators: <code>===</code> and <code>!==</code>, and their evil twins <code>==</code> and <code>!=</code>.  The good ones work the way you would expect.  If the two operands are of the same type and have the same value, then <code>===</code> produces <code>true</code> and <code>!==</code> produces <code>false</code>.  The evil twins do the right thing when the operands are of the same type, but if they are of different types, they attempt to coerce the values.  the rules by which they do that are complicated and unmemorable.  These are some of the interesting cases:</p>\n\n<pre><code>'' == '0'           // false\n0 == ''             // true\n0 == '0'            // true\n\nfalse == 'false'    // false\nfalse == '0'        // true\n\nfalse == undefined  // false\nfalse == null       // false\nnull == undefined   // true\n\n' \\t\\r\\n ' == 0     // true\n</code></pre>\n</blockquote>\n\n<p><a href=\"https://i.stack.imgur.com/yISob.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/yISob.png\" alt=\"Equality Comparison Table \"></a></p>\n\n<blockquote>\n  <p>The lack of transitivity is alarming.  My advice is to never use the evil twins.  Instead, always use <code>===</code> and <code>!==</code>.  All of the comparisons just shown produce <code>false</code> with the <code>===</code> operator.</p>\n</blockquote>\n\n<hr>\n\n<h3>Update:</h3>\n\n<p>A good point was brought up by <a href=\"https://stackoverflow.com/users/165495/casebash\">@Casebash</a> in the comments and in <a href=\"https://stackoverflow.com/users/113570/philippe-leybaert\">@Phillipe Laybaert's</a> <a href=\"https://stackoverflow.com/a/957602/1288\">answer</a> concerning objects.  For objects, <code>==</code> and <code>===</code> act consistently with one another (except in a special case).</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\n\nvar c = { x: 1, y: 2 };\nvar d = { x: 1, y: 2 };\n\nvar e = \"text\";\nvar f = \"te\" + \"xt\";\n\na == b            // false\na === b           // false\n\nc == d            // false\nc === d           // false\n\ne == f            // true\ne === f           // true\n</code></pre>\n\n<p>The special case is when you compare a primitive with an object that evaluates to the same primitive, due to its <code>toString</code> or <code>valueOf</code> method. For example, consider the comparison of a string primitive with a string object created using the <code>String</code> constructor.</p>\n\n<pre><code>\"abc\" == new String(\"abc\")    // true\n\"abc\" === new String(\"abc\")   // false\n</code></pre>\n\n<p>Here the <code>==</code> operator is checking the values of the two objects and returning <code>true</code>, but the <code>===</code> is seeing that they're not the same type and returning <code>false</code>.  Which one is correct?  That really depends on what you're trying to compare.  My advice is to bypass the question entirely and just don't use the <code>String</code> constructor to create string objects from string literals.</p>\n\n<p><strong>Reference</strong><br>\n<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3</a></p>\n"},{"score":1170,"body":"<p>Using the <code>==</code> operator (<em>Equality</em>)</p>\n\n<pre><code>true == 1; //true, because 'true' is converted to 1 and then compared\n\"2\" == 2;  //true, because \"2\" is converted to 2 and then compared\n</code></pre>\n\n<p>Using the <code>===</code> operator (<em>Identity</em>)</p>\n\n<pre><code>true === 1; //false\n\"2\" === 2;  //false\n</code></pre>\n\n<p>This is because the <strong>equality operator <code>==</code> does type coercion</strong>, meaning that the interpreter implicitly tries to convert the values before comparing.</p>\n\n<p>On the other hand, the <strong>identity operator <code>===</code> does not do type coercion</strong>, and thus does not convert the values when comparing, and is therefore faster (as according to <a href=\"http://jsben.ch/JUOm2\" rel=\"noreferrer\">This JS benchmark</a> test) as it skips one step.</p>\n"},{"score":40,"body":"<p>There is unlikely to be any performance difference between the two operations in your usage. There is no type-conversion to be done because both parameters are already the same type. Both operations will have a type comparison followed by a value comparison.</p>\n"},{"score":90,"body":"<p>The <strong>===</strong> operator is called a strict comparison operator, it <strong>does</strong> differ from the <strong>==</strong> operator.</p>\n\n<p>Lets take 2 vars a and b.</p>\n\n<p>For <strong>\"a == b\"</strong> to evaluate to true a and b need to be the <strong>same value</strong>.</p>\n\n<p>In the case of <strong>\"a === b\"</strong> a and b must be the <strong>same value</strong> and also the <strong>same type</strong> for it to evaluate to true.  </p>\n\n<p>Take the following example</p>\n\n<pre><code>var a = 1;\nvar b = \"1\";\n\nif (a == b) //evaluates to true as a and b are both 1\n{\n    alert(\"a == b\");\n}\n\nif (a === b) //evaluates to false as a is not the same type as b\n{\n    alert(\"a === b\");\n}\n</code></pre>\n\n<p><strong>In summary</strong>; using the <strong>==</strong> operator might evaluate to true in situations where you do not want it to so using the <strong>===</strong> operator would be safer.  </p>\n\n<p>In the 90% usage scenario it won't matter which one you use, but it is handy to know the difference when you get some unexpected behaviour one day.</p>\n"},{"score":48,"body":"<p>In a typical script there will be no performance difference. More important may be the fact that thousand \"===\" is 1&nbsp;KB heavier than thousand \"==\" :) <a href=\"https://stackoverflow.com/questions/tagged/javascript+performance\">JavaScript profilers</a> can tell you if there is a performance difference in your case.</p>\n\n<p>But personally I would do what JSLint suggests. This recommendation is there not because of performance issues, but because type coercion means <code>('\\t\\r\\n' == 0)</code> is true.</p>\n"},{"score":106,"body":"<p>I tested this in Firefox with <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow noreferrer\">Firebug</a> using code like this:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.time(\"testEquality\");\nvar n = 0;\nwhile (true) {\n  n++;\n  if (n == 100000)\n    break;\n}\nconsole.timeEnd(\"testEquality\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>and</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.time(\"testTypeEquality\");\nvar n = 0;\nwhile (true) {\n  n++;\n  if (n === 100000)\n    break;\n}\nconsole.timeEnd(\"testTypeEquality\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>My results (tested five times each and averaged):</p>\n<pre><code>==: 115.2\n===: 114.4\n</code></pre>\n<p>So I'd say that the miniscule difference (this is over 100000 iterations, remember) is negligible. Performance <em><strong>isn't</strong></em> a reason to do <code>===</code>. Type safety (well, as safe as you're going to get in JavaScript), and code quality is.</p>\n"},{"score":22,"body":"<p>The problem is that you might easily get into trouble since JavaScript have a lot of implicit conversions meaning...</p>\n\n<pre><code>var x = 0;\nvar isTrue = x == null;\nvar isFalse = x === null;\n</code></pre>\n\n<p>Which pretty soon becomes a problem. The best sample of why implicit conversion is \"evil\" can be taken from this code in <a href=\"http://en.wikipedia.org/wiki/Microsoft_Foundation_Class_Library\" rel=\"noreferrer\">MFC</a> / C++ which actually will compile due to an implicit conversion from CString to HANDLE which is a pointer typedef type...</p>\n\n<pre><code>CString x;\ndelete x;\n</code></pre>\n\n<p>Which obviously during runtime does <em>very</em> undefined things...</p>\n\n<p>Google for implicit conversions in C++ and <a href=\"http://en.wikipedia.org/wiki/Standard_Template_Library\" rel=\"noreferrer\">STL</a> to get some of the arguments against it...</p>\n"},{"score":627,"body":"<p>In the answers here, I didn't read anything about what <strong>equal</strong> means. Some will say that <code>===</code> means <strong>equal and of the same type</strong>, but that's not really true. It actually means that <strong>both operands reference the same object</strong>, or in case of <strong>value types, have the same value</strong>.</p>\n<p>So, let's take the following code:</p>\n<pre><code>var a = [1,2,3];\nvar b = [1,2,3];\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n<p>The same here:</p>\n<pre><code>var a = { x: 1, y: 2 };\nvar b = { x: 1, y: 2 };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n<p>Or even:</p>\n<pre><code>var a = { };\nvar b = { };\nvar c = a;\n\nvar ab_eq = (a === b); // false (even though a and b are the same type)\nvar ac_eq = (a === c); // true\n</code></pre>\n<p>This behavior is not always obvious. There's more to the story than being equal and being of the same type.</p>\n<p>The rule is:</p>\n<p><em><strong>For value types (numbers):</strong></em><br />\n<code>a === b</code> returns true if <code>a</code> and <code>b</code> have the same value and are of the same type</p>\n<p><em><strong>For reference types:</strong></em><br />\n<code>a === b</code> returns true if <code>a</code> and <code>b</code> reference the exact same object</p>\n<p><em><strong>For strings:</strong></em><br />\n<code>a === b</code> returns true if <code>a</code> and <code>b</code> are both strings and contain the exact same characters</p>\n<hr />\n<h2>Strings: the special case...</h2>\n<p>Strings are not value types, but in Javascript they behave like value types, so they will be &quot;equal&quot; when the characters in the string are the same and when they are of the same length (as explained in the third rule)</p>\n<p>Now it becomes interesting:</p>\n<pre><code>var a = &quot;12&quot; + &quot;3&quot;;\nvar b = &quot;123&quot;;\n\nalert(a === b); // returns true, because strings behave like value types\n</code></pre>\n<p>But how about this?:</p>\n<pre><code>var a = new String(&quot;123&quot;);\nvar b = &quot;123&quot;;\n\nalert(a === b); // returns false !! (but they are equal and of the same type)\n</code></pre>\n<p>I thought strings behave like value types? Well, it depends who you ask... In this case a and b are not the same type. <code>a</code> is of type <code>Object</code>, while <code>b</code> is of type <code>string</code>. Just remember that creating a string object using the <code>String</code> constructor creates something of type <code>Object</code> that behaves as a string <em>most of the time</em>.</p>\n"},{"score":274,"body":"<p>Let me add this counsel:</p>\n<p><em><strong>If in doubt, read the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" rel=\"noreferrer\">specification</a>!</strong></em></p>\n<p>ECMA-262 is the specification for a scripting language of which JavaScript is a dialect. Of course in practice it matters more how the most important browsers behave than an esoteric definition of how something is supposed to be handled. But it is helpful to understand why <strong>new String(&quot;a&quot;) !== &quot;a&quot;</strong>.</p>\n<p>Please let me explain how to read the specification to clarify this question. I see that in this very old topic nobody had an answer for the very strange effect. So, if you can read a specification, this will help you in your profession tremendously. It is an acquired skill. So, let's continue.</p>\n<p>Searching the PDF file for === brings me to page 56 of the specification: <strong>11.9.4. The Strict Equals Operator ( === )</strong>, and after wading through the specificationalese I find:</p>\n<blockquote>\n<p><strong>11.9.6 The Strict Equality Comparison Algorithm</strong><br>\nThe comparison x === y, where x and y are values, produces <strong>true</strong> or <strong>false</strong>. Such a comparison is performed as follows:<br>\n  1. If Type(x) is different from Type(y), return <strong>false</strong>.<br>\n  2. If Type(x) is Undefined, return <strong>true</strong>.<br>\n  3. If Type(x) is Null, return <strong>true</strong>.<br>\n  4. If Type(x) is not Number, go to step 11.<br>\n  5. If x is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  6. If y is <strong>NaN</strong>, return <strong>false</strong>.<br>\n  7. If x is the same number value as y, return <strong>true</strong>.<br>\n  8. If x is +0 and y is −0, return <strong>true</strong>.<br>\n  9. If x is −0 and y is +0, return <strong>true</strong>.<br>\n  10. Return <strong>false</strong>.<br>\n  11. If Type(x) is String, then return <strong>true</strong> if x and y are exactly the same sequence of characters (same length and same characters in corresponding positions); otherwise, return <strong>false</strong>.<br>\n  12. If Type(x) is Boolean, return <strong>true</strong> if x and y are both <strong>true</strong> or both <strong>false</strong>; otherwise, return <strong>false</strong>.<br>\n  13. Return <strong>true</strong> if x and y refer to the same object or if they refer to objects joined to each other (see 13.1.2). Otherwise, return <strong>false</strong>.</p>\n</blockquote>\n<p>Interesting is step 11. Yes, strings are treated as value types. But this does not explain why <strong>new String(&quot;a&quot;) !== &quot;a&quot;</strong>. Do we have a browser not conforming to ECMA-262?</p>\n<p>Not so fast!</p>\n<p>Let's check the types of the operands. Try it out for yourself by wrapping them in <strong>typeof()</strong>. I find that <strong>new String(&quot;a&quot;)</strong> is an object, and step 1 is used: return <strong>false</strong> if the types are different.</p>\n<p>If you wonder why <strong>new String(&quot;a&quot;)</strong> does not return a string, how about some exercise reading a specification? Have fun!</p>\n<hr>\n<p>Aidiakapi wrote this in a comment below:</p>\n<blockquote>\n<p>From the specification</p>\n<p><strong>11.2.2 The new Operator</strong>:</p>\n<p>If Type(constructor) is not Object, throw a TypeError exception.</p>\n<p>With other words, if String wouldn't be of type Object it couldn't be used with the new operator.</p>\n</blockquote>\n<p><strong>new</strong> always returns an Object, even for <strong>String</strong> constructors, too. And alas! The value semantics for strings (see step 11) is lost.</p>\n<p>And this finally means: <strong>new String(&quot;a&quot;) !== &quot;a&quot;</strong>.</p>\n"},{"score":82,"body":"<h1><code>===</code> checks same sides are equal in <em>type</em> as well as <em>value</em>.</h1>\n<hr />\n<h2>Example:</h2>\n<pre><code>'1' === 1 // will return &quot;false&quot; because `string` is not a `number`\n</code></pre>\n<h2>Common example:</h2>\n<pre><code>0 == ''  // will be &quot;true&quot;, but it's very common to want this check to be &quot;false&quot;\n</code></pre>\n<h2>Another common example:</h2>\n<pre><code>null == undefined // returns &quot;true&quot;, but in most cases a distinction is necessary\n</code></pre>\n<hr />\n<p>Many times an <em>untyped</em> check would be handy because you do not care if the value is either <code>undefined</code>, <code>null</code>, <code>0</code>  or <code>&quot;&quot;</code></p>\n"},{"score":98,"body":"<p>In JavaScript it means of the same value and type.</p>\n\n<p>For example,</p>\n\n<pre><code>4 == \"4\" // will return true\n</code></pre>\n\n<p>but</p>\n\n<pre><code>4 === \"4\" // will return false \n</code></pre>\n"},{"score":102,"body":"<p>In PHP and JavaScript, it is a strict equality operator. Which means, it will compare both type and values.</p>\n"},{"score":54,"body":"<p>It means <strong>equality without type coercion</strong>\ntype coercion means JavaScript do not automatically convert any other data types to string data types </p>\n\n<pre><code>0==false   // true,although they are different types\n\n0===false  // false,as they are different types\n\n2=='2'    //true,different types,one is string and another is integer but \n            javaScript convert 2 to string by using == operator \n\n2==='2'  //false because by using === operator ,javaScript do not convert \n           integer to string \n\n2===2   //true because both have same value and same types \n</code></pre>\n"},{"score":22,"body":"<p>From the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Comparison_Operators\" rel=\"noreferrer\">core javascript reference</a></p>\n\n<blockquote>\n  <p><code>===</code> Returns <code>true</code> if the operands are strictly equal (see above)\n  with no type conversion.</p>\n</blockquote>\n"},{"score":33,"body":"<p><code>===</code> operator  checks the values as well as the types of the variables for equality.</p>\n\n<p><code>==</code> operator just checks the value of the variables for equality.</p>\n"},{"score":32,"body":"<p>It's a strict check test.</p>\n\n<p>It's a good thing especially if you're checking between 0 and false and null. </p>\n\n<p>For example, if you have:</p>\n\n<pre><code>$a = 0;\n</code></pre>\n\n<p>Then:</p>\n\n<pre><code>$a==0; \n$a==NULL;\n$a==false;\n</code></pre>\n\n<p>All returns true and you may not want this. Let's suppose you have a function that can return the 0th index of an array or false on failure. If you check with \"==\" false, you can get a confusing result.</p>\n\n<p>So with the same thing as above, but a strict test:</p>\n\n<pre><code>$a = 0;\n\n$a===0; // returns true\n$a===NULL; // returns false\n$a===false; // returns false\n</code></pre>\n"},{"score":46,"body":"<p><em><strong>The equal comparison operator == is confusing and should be avoided.</em></strong> </p>\n\n<p>If you <strong>HAVE TO</strong> live with it, then remember the following 3 things: </p>\n\n<ol>\n<li><strong>It is not transitive: <em>(a == b)</em> and <em>(b == c)</em> does not lead to <em>(a == c)</em></strong></li>\n<li><strong>It's mutually exclusive to its negation: <em>(a == b)</em> and <em>(a != b)</em> always hold opposite Boolean values, with all a and b.</strong></li>\n<li><strong>In case of doubt, learn by heart the following truth table:</strong></li>\n</ol>\n\n<p>EQUAL OPERATOR TRUTH TABLE IN JAVASCRIPT</p>\n\n<ul>\n<li>Each row in the table is a set of 3 mutually \"equal\" values, meaning that any 2 values among them are equal using the equal == sign*</li>\n</ul>\n\n<p>** STRANGE: note that any two values on the first column are not equal in that sense.**</p>\n\n<pre><code>''       == 0 == false   // Any two values among these 3 ones are equal with the == operator\n'0'      == 0 == false   // Also a set of 3 equal values, note that only 0 and false are repeated\n'\\t'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\r'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\n'     == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n'\\t\\r\\n' == 0 == false   // -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\n\nnull == undefined  // These two \"default\" values are not-equal to any of the listed values above\nNaN                // NaN is not equal to any thing, even to itself.\n</code></pre>\n"},{"score":31,"body":"<p>JSLint sometimes gives you unrealistic reasons to modify stuff. <code>===</code> has exactly the same performance as <code>==</code> if the types are already the same. </p>\n\n<p>It is faster only when the types are not the same, in which case it does not try to convert types but directly returns a false.</p>\n\n<p>So, <em>IMHO,</em> JSLint maybe used to write new code, but useless over-optimizing should be avoided at all costs. </p>\n\n<p>Meaning, there is no reason to change <code>==</code> to <code>===</code> in a check like <code>if (a == 'test')</code> when you know it for a fact that a can only be a String. </p>\n\n<p>Modifying a lot of code that way wastes developers' and reviewers' time and achieves nothing.</p>\n"},{"score":25,"body":"<p>As a rule of thumb, I would generally use <code>===</code> instead of <code>==</code> (and <code>!==</code> instead of <code>!=</code>).</p>\n\n<p>Reasons are explained in in the answers above and also Douglas Crockford is pretty clear about it (<a href=\"https://rads.stackoverflow.com/amzn/click/com/0596517742\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">JavaScript: The Good Parts</a>).</p>\n\n<p>However there is <strong>one single exception</strong>:\n<code>== null</code> is an efficient way to check for 'is null or undefined':</p>\n\n<pre><code>if( value == null ){\n    // value is either null or undefined\n}\n</code></pre>\n\n<p>For example jQuery 1.9.1 uses this pattern 43 times, and  the <a href=\"http://www.jshint.com/docs/#options\" rel=\"noreferrer\">JSHint syntax checker</a> even provides the <code>eqnull</code> relaxing option for this reason.</p>\n\n<p>From the <a href=\"http://contribute.jquery.org/style-guide/js/\" rel=\"noreferrer\">jQuery style guide</a>:</p>\n\n<blockquote>\n  <p>Strict equality checks (===) should be used in favor of ==. The only\n  exception is when checking for undefined and null by way of null.</p>\n\n<pre><code>// Check for both undefined and null values, for some important reason. \nundefOrNull == null;\n</code></pre>\n</blockquote>\n"},{"score":55,"body":"<p>JavaScript <code>===</code> <strong>vs</strong> <code>==</code> .</p>\n\n<pre><code>0==false   // true\n0===false  // false, because they are of a different type\n1==\"1\"     // true, auto type coercion\n1===\"1\"    // false, because they are of a different type\n</code></pre>\n"},{"score":25,"body":"<p>The top 2 answers both mentioned == means equality and === means identity. Unfortunately, this statement is incorrect. </p>\n\n<p>If both operands of == are objects, then they are compared to see if they are the same object. If both operands point to the same object, then the equal operator returns true. Otherwise,\nthe two are not equal. </p>\n\n<pre><code>var a = [1, 2, 3];  \nvar b = [1, 2, 3];  \nconsole.log(a == b)  // false  \nconsole.log(a === b) // false  \n</code></pre>\n\n<p>In the code above, both == and === get false because a and b are not the same objects.</p>\n\n<p>That's to say: if both operands of == are objects, == behaves same as ===, which also means identity. The essential difference of this two operators is about type conversion. == has conversion before it checks equality, but === does not.</p>\n"},{"score":21,"body":"<p><b>Equality comparison: </b></p>\n\n<p>Operator <code>==</code></p>\n\n<p>Returns true, when both operands are equal. The operands are converted to the same type before being compared.</p>\n\n<pre><code>&gt;&gt;&gt; 1 == 1\ntrue\n&gt;&gt;&gt; 1 == 2\nfalse\n&gt;&gt;&gt; 1 == '1'\ntrue\n</code></pre>\n\n<p><b>Equality and type comparison: </b></p>\n\n<p>Operator <code>===</code></p>\n\n<p>Returns true if both operands are equal and of the same type. It's generally \nbetter and safer if you compare this way, because there's no behind-the-scenes type conversions.</p>\n\n<pre><code>&gt;&gt;&gt; 1 === '1'\nfalse\n&gt;&gt;&gt; 1 === 1\ntrue\n</code></pre>\n"},{"score":18,"body":"<p>*<strong><em>Operators === vs == *</em></strong> </p>\n\n<pre><code>1 == true    =&gt;    true\ntrue == true    =&gt;    true\n1 === true    =&gt;    false\ntrue === true    =&gt;    true\n</code></pre>\n"},{"score":20,"body":"<p>Here is a handy comparison table that shows the conversions that happen and the differences between <code>==</code> and <code>===</code>.</p>\n\n<p>As the conclusion states:</p>\n\n<blockquote>\n  <p>\"Use three equals unless you fully understand the conversions that take\n  place for two-equals.\"</p>\n</blockquote>\n\n<p><a href=\"http://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">http://dorey.github.io/JavaScript-Equality-Table/</a></p>\n"},{"score":20,"body":"<p>null and undefined are nothingness, that is,</p>\n\n<pre><code>var a;\nvar b = null;\n</code></pre>\n\n<p>Here <code>a</code> and <code>b</code> do not have values. Whereas, 0, false and '' are all values. One thing common beween all these are that they are all falsy values, which means they all <strong>satisfy</strong> falsy conditions.</p>\n\n<p>So, the 0, false and '' together form a sub-group. And on other hand, null &amp; undefined form the second sub-group. Check the comparisons in the below image. null and undefined would equal. The other three would equal to each other. But, they all are treated as falsy conditions in JavaScript.</p>\n\n<p><img src=\"https://i.stack.imgur.com/11I0i.jpg\" alt=\"Enter image description here\"></p>\n\n<p>This is same as any object (like {}, arrays, etc.), non-empty string &amp; Boolean true are all truthy conditions. But, they are all not equal.</p>\n"},{"score":758,"body":"<p>An interesting pictorial representation of the equality comparison between <code>==</code> and <code>===</code>.  </p>\n\n<p><strong>Source: <a href=\"http://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">http://dorey.github.io/JavaScript-Equality-Table/</a></strong></p>\n\n<hr>\n\n<h1><code>var1 === var2</code></h1>\n\n<blockquote>\n  <p><strong><em>When using <code>===</code> for JavaScript equality testing, everything is as is. Nothing gets converted before being evaluated.</em></strong></p>\n</blockquote>\n\n<p><img src=\"https://i.stack.imgur.com/62vxI.png\" alt=\"Equality evaluation of === in JS\"></p>\n\n<hr>\n\n<h1><code>var1 == var2</code></h1>\n\n<blockquote>\n  <p><strong><em>When using <code>==</code> for JavaScript equality testing, some\n  funky conversions take place.</em></strong></p>\n</blockquote>\n\n<p><img src=\"https://i.stack.imgur.com/35MpY.png\" alt=\"Equality evaluation of == in JS\"></p>\n\n<blockquote>\n  <p><strong><em>Moral of the story:</em></strong> </p>\n  \n  <p><strong><em>Use <code>===</code> unless you fully understand the\n  conversions that take place with <code>==</code>.</em></strong></p>\n</blockquote>\n"},{"score":18,"body":"<p>JavaScript has both strict and type–converting comparisons. A strict comparison (e.g., <code>===</code>) is only true if the operands are of the same type. The more commonly used abstract comparison (e.g. <code>==</code>) converts the operands to the same Type before making the comparison.</p>\n\n<ul>\n<li><p>The equality (<code>==</code>) operator converts the operands if they are not of the same type, then applies strict comparison. If either operand is a number or a boolean, the operands are converted to numbers if possible; else if either operand is a string, the string operand is converted to a number if possible. If both operands are objects, then JavaScript compares internal references which are equal when operands refer to the same object in memory.</p>\n\n<p>Syntax:</p>\n\n<p><code>x == y</code></p>\n\n<p>Examples:</p>\n\n<pre><code>3 == 3     // true\n\"3\" == 3   // true\n3 == '3'   // true\n</code></pre></li>\n<li><p>The identity/strict equality(<code>===</code>) operator returns true if the operands are strictly equal (see above) with no type conversion.</p>\n\n<p>Syntax:</p>\n\n<p><code>x === y</code></p>\n\n<p>Examples:</p>\n\n<p><code>3 === 3   // true</code></p></li>\n</ul>\n\n<p>For reference: <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\" rel=\"noreferrer\">Comparison operators</a></em> (Mozilla Developer Network)</p>\n"},{"score":38,"body":"<p><strong>Yes!</strong> It does matter.</p>\n\n<p><code>===</code> operator in javascript <strong>checks value as well as type</strong> where as <code>==</code> operator just checks <strong>the value (does type conversion if required)</strong>.</p>\n\n<p><img src=\"https://i.stack.imgur.com/5ttlR.png\" alt=\"enter image description here\"></p>\n\n<p>You can easily test it. Paste following code in an HTML file and open it in browser</p>\n\n<pre><code>&lt;script&gt;\n\nfunction onPageLoad()\n{\n    var x = \"5\";\n    var y = 5;\n    alert(x === 5);\n};\n\n&lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body onload='onPageLoad();'&gt;\n</code></pre>\n\n<p>You will get '<strong>false</strong>' in alert. Now modify the <code>onPageLoad()</code> method to <code>alert(x == 5);</code> you will get <strong>true</strong>.</p>\n"},{"score":16,"body":"<p>If you are making a web application or a secured page you should always use (only when possible)</p>\n\n<pre><code>===\n</code></pre>\n\n<p>because it will will check if it is the same content and if it is the same type!</p>\n\n<p>so when someone enters:</p>\n\n<pre><code>var check = 1;\nif(check == '1') {\n    //someone continued with a string instead of number, most of the time useless for your webapp, most of the time entered by a user who does not now what he is doing (this will sometimes let your app crash), or even worse it is a hacker searching for weaknesses in your webapp!\n}\n</code></pre>\n\n<p>but with</p>\n\n<pre><code>var check = 1;\nif(check === 1) {\n    //some continued with a number (no string) for your script\n} else {\n    alert('please enter a real number');\n}\n</code></pre>\n\n<p>a hacker will never get deeper in the system to find bugs and hack your app or your users</p>\n\n<p>my point it is that the </p>\n\n<pre><code>===\n</code></pre>\n\n<p>will add more security to your scripts</p>\n\n<p>of course you can also check if the entered number is valid, is a string, etc.. with other if statements inside the first example, but this is for at least me more easier to understand and use</p>\n\n<p>The reason I posted this is that the word 'more secure' or 'security' has never been said in this conversation (if you look at iCloud.com it uses 2019 times === and 1308 times ==, this also means that you sometimes have the use == instead of === because it will otherwise block your function, but as said in the begin you should use === as much as possible)</p>\n"},{"score":30,"body":"<p>Simply </p>\n\n<p><code>==</code> means <strong>comparison</strong> between operands <strong>with</strong> <code>type conversion</code></p>\n\n<p>&amp;</p>\n\n<p><code>===</code> means <strong>comparison</strong> between operands <strong>without</strong> <code>type conversion</code></p>\n\n<p>Type conversion in javaScript means javaScript automatically convert any other data types to string data types.</p>\n\n<p>For example:</p>\n\n<pre><code>123=='123'   //will return true, because JS convert integer 123 to string '123'\n             //as we used '==' operator \n\n123==='123' //will return false, because JS do not convert integer 123 to string \n            //'123' as we used '===' operator \n</code></pre>\n"},{"score":13,"body":"<p><code>===</code> cares if the objects are the same. Therefore, <code>new String(\"Hello world\") === \"Hello world\"</code> returns false. However, <code>==</code> does not care about if the objects are the same; it just simply converts one argument into the other's type: if conversion is not possible, return false. Then <code>new String(\"Hello world\") == \"Hello world\"</code> returns true instead of false.</p>\n"},{"score":26,"body":"<p>A simple example is </p>\n\n<pre><code>2 == '2'  -&gt; true, values are SAME because of type conversion.\n\n2 === '2'  -&gt; false, values are NOT SAME because of no type conversion.\n</code></pre>\n"},{"score":11,"body":"<p>The javascript is a <strong>weakly typed language</strong> i.e. without any data-types as there in C,c++ eg. int, boolean, float etc. thus a variable can hold any type of value, that why these special comparison operators are there</p>\n\n<p>Eg</p>\n\n<pre><code>var i = 20;var j = \"20\";\n</code></pre>\n\n<p>if we apply comparison operators these variables result will be</p>\n\n<pre><code>i==j //result is true\n</code></pre>\n\n<p>or </p>\n\n<pre><code>j != i//result is false\n</code></pre>\n\n<p>for that we need a special comparison operators which checks for the <strong>value as well as for the data type</strong> of the variable</p>\n\n<p>if we do</p>\n\n<pre><code>i===j //result is false\n</code></pre>\n"},{"score":13,"body":"<p>My reasoning process using emacs org-mode and node.js to run a test.</p>\n\n<pre><code>| use ==     | '' | '0' | false | 'false' | undefined | null | ' \\t\\r\\n ' |\n| ''         | x  | f   | t     | f       | f         | f    | f          |\n| '0'        |    | x   | t     | f       | f         | f    | f          |\n| false      |    |     | x     | f       | f         | f    | t          |\n| 'false'    |    |     |       | x       | f         | f    | f          |\n| undefined  |    |     |       |         | x         | t    | f          |\n| null       |    |     |       |         |           | x    | f          |\n| ' \\t\\r\\n ' |    |     |       |         |           |      | x          | \n\n\n\n| use ===    | '' | '0' | false | 'false' | undefined | null | ' \\t\\r\\n ' |\n| ''         | x  | f   | f     | f       | f         | f    | f          |\n| '0'        |    | x   | f     | f       | f         | f    | f          |\n| false      |    |     | x     | f       | f         | f    | f          |\n| 'false'    |    |     |       | x       | f         | f    | f          |\n| undefined  |    |     |       |         | x         | f    | f          |\n| null       |    |     |       |         |           | x    | f          |\n| ' \\t\\r\\n ' |    |     |       |         |           |      | x          |\n</code></pre>\n\n<p>My test script below: run > node xxx.js</p>\n\n<pre><code>var rowItems = ['', '0', false, 'false', undefined, null, ' \\t\\r\\n ']\nvar colItems = rowItems\n\nfor(var i = 0; i &lt; rowItems.length; i++) {\n    for (var j = 0; j &lt; colItems.length; j++) {\n        var r = (rowItems[i] === colItems[j]) ? true : false;\n        console.log(rowItems[i] + \" = \" + colItems[j] + \" \" + r + \" [\" + i + \"] ==&gt; [\" + j + \"]\")\n    };\n}\n</code></pre>\n"},{"score":73,"body":"<p>Javascript execution flow diagram for strict equality / Comparison '==='</p>\n\n<p><a href=\"https://i.stack.imgur.com/A27Be.png\"><img src=\"https://i.stack.imgur.com/A27Be.png\" alt=\"Javascript strict equality\"></a></p>\n\n<p>Javascript execution flow diagram for non strict equality / comparison '=='</p>\n\n<p><a href=\"https://i.stack.imgur.com/Ccyb8.png\"><img src=\"https://i.stack.imgur.com/Ccyb8.png\" alt=\"Javascript non equality\"></a></p>\n"},{"score":5,"body":"<p>Yes, there is a big difference between equality <code>==</code> and identity <code>===</code> operators.<br>\nUsually the identity operator performs faster, because no types conversion is done. But if the values are of the same type, you'll see no difference.<br>\nCheck my post <a href=\"http://rainsoft.io/the-legend-of-javascript-equality-operator/\" rel=\"noreferrer\">The legend of JavaScript equality operator</a>, which explains the details, including the types conversion &amp; comparison algorithms, with a lot of examples.</p>\n"},{"score":5,"body":"<p><em>One</em> unmentioned reason to use <code>===</code> - is in the case that you are co-existing with / cross-compiling to/from <code>coffee-script</code>. From The <a href=\"https://arcturo.github.io/library/coffeescript/07_the_bad_parts.html\" rel=\"noreferrer\">Little Book on CoffeeScript</a>...</p>\n<blockquote>\n<p>The weak equality comparison in JavaScript has some confusing behavior and is often the source of confusing bugs.</p>\n<p>The solution is to instead use the strict equality operator, which consists of three equal signs: ===. It works exactly like the normal equality operator, but without any type coercion. It's recommended to always use the strict equality operator, and explicitly convert types if needs be.</p>\n</blockquote>\n<p>If you are regularly converting to and from <code>coffee-script</code>, you should just use <code>===</code>.  In fact, the <code>coffee-script</code> compiler will <strong>force you to</strong>...</p>\n<blockquote>\n<p>CoffeeScript solves this by simply replacing all weak comparisons with strict ones, in other words converting all == comparators into ===. You can't do a a weak equality comparison in CoffeeScript, and you should explicitly convert types before comparing them if necessary.</p>\n</blockquote>\n"},{"score":6,"body":"<p><strong>always</strong> use '<strong>===</strong>' and you will avoid thousand of mistakes. nowadays using <strong>triple</strong> equality is more preferable by different style guides, because it compares taking into account type of operands.</p>\n"},{"score":1,"body":"<p>Javascript is loosely typed just like php is,</p>\n\n<pre><code>var x = \"20\";\nvar y =20;\n\nif (x===y) // false\n</code></pre>\n\n<p>This will always give you a false because even though the values of the variables are the same, the data types are not</p>\n\n<p>One is string the the other is int</p>\n\n<pre><code>If(x==y)//true\n</code></pre>\n\n<p>This however just checks if the content is the same, regardless of the data types...</p>\n\n<p>I dont want to say the values are equal because a string value cannot be equal to an int value logically</p>\n"},{"score":0,"body":"<pre><code>var a = new String(\"123\");\nvar b = \"123\";\n\nalert(a === b); // returns false !! (but they are equal and of the same type)\n</code></pre>\n\n<p>Saw this in one of the answers.\n<code>a</code> and <code>b</code> are not really the same type in this case, if you will check <code>typeof(a)</code>\n you will get <em>'object'</em> and <code>typeof(b)</code> is <em>'string'</em>.</p>\n"},{"score":89,"body":"<p><strong>Why <code>==</code> is so unpredictable?</strong></p>\n\n<p>What do you get when you compare an empty string <code>\"\"</code> with the number zero <code>0</code>?</p>\n\n<p><code>true</code></p>\n\n<p>Yep, that's right according to <code>==</code> an empty string and the number zero are the same time.</p>\n\n<p>And it doesn't end there, here's another one:</p>\n\n<pre><code>'0' == false // true\n</code></pre>\n\n<p><strong>Things get really weird with arrays.</strong></p>\n\n<pre><code>[1] == true // true\n[] == false // true\n[[]] == false // true\n[0] == false // true\n</code></pre>\n\n<p><strong>Then weirder with strings</strong></p>\n\n<pre><code>[1,2,3] == '1,2,3' // true - REALLY?!\n'\\r\\n\\t' == 0 // true - Come on!\n</code></pre>\n\n<p>It get's worse:</p>\n\n<p><strong>When is equal not equal?</strong></p>\n\n<pre><code>let A = ''  // empty string\nlet B = 0   // zero\nlet C = '0' // zero string\n\nA == B // true - ok... \nB == C // true - so far so good...\nA == C // **FALSE** - Plot twist!\n</code></pre>\n\n<p>Let me say that again:</p>\n\n<pre><code>(A == B) &amp;&amp; (B == C) // true\n(A == C) // **FALSE**\n</code></pre>\n\n<p>And this is just the crazy stuff you get with primitives.</p>\n\n<p>It's a whole new level of crazy when you use <code>==</code> with objects.</p>\n\n<p>At this point your probably wondering...</p>\n\n<p><strong>Why does this happen?</strong></p>\n\n<p>Well it's because unlike \"triple equals\" (<code>===</code>) which just checks if two values are the same.</p>\n\n<p><code>==</code> does a <strong><em>whole bunch of other stuff</em></strong>.</p>\n\n<p>It has special handling for functions, special handling for nulls, undefined, strings, you name it.</p>\n\n<p>It get's pretty wacky.</p>\n\n<p>In fact, if you tried to write a function that does what <code>==</code> does it would look something like this:</p>\n\n<pre><code>function isEqual(x, y) { // if `==` were a function\n    if(typeof y === typeof x) return y === x;\n    // treat null and undefined the same\n    var xIsNothing = (y === undefined) || (y === null);\n    var yIsNothing = (x === undefined) || (x === null);\n\n    if(xIsNothing || yIsNothing) return (xIsNothing &amp;&amp; yIsNothing);\n\n    if(typeof y === \"function\" || typeof x === \"function\") {\n        // if either value is a string \n        // convert the function into a string and compare\n        if(typeof x === \"string\") {\n            return x === y.toString();\n        } else if(typeof y === \"string\") {\n            return x.toString() === y;\n        } \n        return false;\n    }\n\n    if(typeof x === \"object\") x = toPrimitive(x);\n    if(typeof y === \"object\") y = toPrimitive(y);\n    if(typeof y === typeof x) return y === x;\n\n    // convert x and y into numbers if they are not already use the \"+\" trick\n    if(typeof x !== \"number\") x = +x;\n    if(typeof y !== \"number\") y = +y;\n    // actually the real `==` is even more complicated than this, especially in ES6\n    return x === y;\n}\n\nfunction toPrimitive(obj) {\n    var value = obj.valueOf();\n    if(obj !== value) return value;\n    return obj.toString();\n}\n</code></pre>\n\n<p><strong>So what does this mean?</strong></p>\n\n<p>It means <code>==</code> is complicated.</p>\n\n<p>Because it's complicated it's hard to know what's going to happen when you use it.</p>\n\n<p>Which means you could end up with bugs.</p>\n\n<p><strong>So the moral of the story is...</strong></p>\n\n<p>Make your life less complicated.</p>\n\n<p>Use <code>===</code> instead of <code>==</code>.</p>\n\n<p>The End.</p>\n"},{"score":-5,"body":"<pre><code>1 == \"1\"    =&gt;    true(define)\ntrue === \"true\"    =&gt; false(undefined compare the type of variable)\nCase 1\nif(true === \"true\"){\n  echo 'true'\n}else{\n echo 'false undefined'\n}\nAns :- false undefined because case 1 is check data type also with ===  \nCase 2\nif(1 == \"1\"){\n  echo 'true define'\n}else{\n echo 'false undefined'\n}\nAns :- true define undefined because case 2 is not check data type with ==\n</code></pre>\n"},{"score":1,"body":"<p>First, some terminology about Javascript string equals: Double equals is officially known as the abstract equality comparison operator while triple equals is termed the strict equality comparison operator. The difference between them can be summed up as follows: Abstract equality will attempt to resolve the data types via type coercion before making a comparison. Strict equality will return false if the types are different. Consider the following example:</p>\n\n<pre><code>console.log(3 == \"3\"); // true\nconsole.log(3 === \"3\"); // false.\nconsole.log(3 == \"3\"); // true\nconsole.log(3 === \"3\"); // false.\n</code></pre>\n\n<p>Using two equal signs returns true because the string “3” is converted to the number 3 before the comparison is made. Three equal signs sees that the types are different and returns false. Here’s another:</p>\n\n<pre><code>console.log(true == '1'); // true\nconsole.log(true === '1'); // false\nconsole.log(true == '1'); // true\nconsole.log(true === '1'); // false\n</code></pre>\n\n<p>Again, the abstract equality comparison performs a type conversion. In this case both the boolean true and the string ‘1’ are converted to the number 1 and the result is true. Strict equality returns false.</p>\n\n<p>If you understand that you are well on your way to distinguishing between == and ===. However, there’s some scenarios where the behavior of these operators is non intuitive. Let’s take a look at some more examples:</p>\n\n<pre><code>console.log(undefined == null); // true\nconsole.log(undefined === null); // false. Undefined and null are distinct types and are not interchangeable.\nconsole.log(undefined == null); // true     \nconsole.log(undefined === null); // false. Undefined and null are distinct types and are not interchangeable.\n\nconsole.log(true == 'true'); // false. A string will not be converted to a boolean and vice versa.\nconsole.log(true === 'true'); // false\nconsole.log(true == 'true'); // false. A string will not be converted to a boolean and vice versa.\nconsole.log(true === 'true'); // false\n</code></pre>\n\n<p>The example below is interesting because it illustrates that string literals are different from string objects.</p>\n\n<pre><code>console.log(\"This is a string.\" == new String(\"This is a string.\")); // true\nconsole.log(\"This is a string.\" === new String(\"This is a string.\")); // false\nconsole.log(\"This is a string.\" == new String(\"This is a string.\")); // true\nconsole.log(\"This is a string.\" === new String(\"This is a string.\")); // false\n</code></pre>\n"},{"score":9,"body":"<p><code>==</code> operator just compares the values not datatype.</p>\n<p><code>===</code> operator compare the values with comparison of its datatype.</p>\n<p>eg :</p>\n<pre><code>1 == &quot;1&quot; //true\n\n1 === &quot;1&quot; //false\n</code></pre>\n<p>This operator (<code>&quot;===&quot;</code>) used in languages which performs automatic type cast eg. PHP, Javascript.<br><code>&quot;===&quot;</code> operator helps to prevent unexpected comparison caused by automatic typecast.</p>\n"},{"score":1,"body":"<p>Use <code>===</code> if you want to compare couple of things in JavaScript, it's called <strong>strict equality</strong>, it means this will return true if <strong>only both type and value are the same</strong>, so there wouldn't be any unwanted type correction for you, if you using <code>==</code>, you basically don't care about the type and in many cases you could face issues with loose equality comparison. <br><br></p>\n\n<p><strong>Strict equality using ===</strong></p>\n\n<blockquote>\n  <p>Strict equality compares two values for equality. Neither value is\n  implicitly converted to some other value before being compared. If the\n  values have different types, the values are considered unequal.\n  Otherwise, if the values have the same type and are not numbers,\n  they're considered equal if they have the same value. Finally, if both\n  values are numbers, they're considered equal if they're both not NaN\n  and are the same value, or if one is +0 and one is -0.</p>\n</blockquote>\n\n<pre><code>var num = 0;\nvar obj = new String('0');\nvar str = '0';\n\nconsole.log(num === num); // true\nconsole.log(obj === obj); // true\nconsole.log(str === str); // true\n\nconsole.log(num === obj); // false\nconsole.log(num === str); // false\nconsole.log(obj === str); // false\nconsole.log(null === undefined); // false\nconsole.log(obj === null); // false\nconsole.log(obj === undefined); // false\n</code></pre>\n\n<p><br><strong>Loose equality using ==</strong></p>\n\n<blockquote>\n  <p>Loose equality compares two values for equality, after converting both\n  values to a common type.  After conversions (one or both sides may\n  undergo conversions), the final equality comparison is performed\n  exactly as === performs it.  Loose equality is symmetric: A == B\n  always has identical semantics to B == A for any values of A and B\n  (except for the order of applied conversions).</p>\n</blockquote>\n\n<pre><code>var num = 0;\nvar obj = new String('0');\nvar str = '0';\n\nconsole.log(num == num); // true\nconsole.log(obj == obj); // true\nconsole.log(str == str); // true\n\nconsole.log(num == obj); // true\nconsole.log(num == str); // true\nconsole.log(obj == str); // true\nconsole.log(null == undefined); // true\n\n// both false, except in rare cases\nconsole.log(obj == null);\nconsole.log(obj == undefined);\n</code></pre>\n"},{"score":8,"body":"<blockquote>\n  <p>Different's Between <code>=</code> , <code>= =</code> , <code>= = =</code></p>\n</blockquote>\n\n<ul>\n<li><code>=</code> operator Used to just assign the <code>value</code>.</li>\n<li><code>= =</code> operator Used to just compares the <code>values</code> not <code>datatype</code></li>\n<li><code>= = =</code> operator Used to Compare the <code>values</code> as well as <code>datatype</code>.</li>\n</ul>\n"},{"score":1,"body":"<p>The reason it suggest to replace <code>==</code> with <code>===</code> is that the <code>===</code> operator is more reliable than <code>==</code>. In our context reliable means <code>===</code> also goes for type checking. Considering the best programming practices we should always choose more reliable feature over less reliable one. Again whenever we think about exactly equal to operator most of the time, we are by default consider the type should be same. As <code>===</code> provides the same, we should go for it.</p>\n"},{"score":3,"body":"<h1>Strict equality is for the most part better</h1>\n\n<p>The fact that Javascript is a loosely typed language needs to be in the front of your mind constantly as you work with it. As long as the data structure is the same there really is no reason as to not use strict equality, with regular equality you often have an implicit conversion of values that happens automatically, this can have far-reaching effects on your code. It is very easy to have problems with this conversion seeing as they happen automatically.</p>\n\n<p>With strict equality there is no automatic implicit conversion as the values must already be of the correct data structure.</p>\n"},{"score":1,"body":"<p>The dilemma of \"Should I use <code>==</code> or <code>===</code> in JavaScript comparison\" is equal or analogous to a question of: \"Should I use a 'spoon' or a 'fork' for eating. </p>\n\n<p>The only reasonable answer to this question is that </p>\n\n<ol>\n<li>You should use <strong>Dynamic Type</strong> comparison e.g.:<code>==</code> for <strong><em>loose Type</em></strong> comparisons. </li>\n<li>You should use <strong>Static Type</strong> comparison e.g.:<code>===</code> for <strong><em>strong Type</em></strong> comparisons. </li>\n</ol>\n\n<p>That's because they are not the same. They don't have the same purpose and are not meant to be used for the same purpose.</p>\n\n<p>Of course both 'forks' and 'spoons' are meant for 'eating', but you will chose to use them accordingly to what you've been served to eat.</p>\n\n<p>Meaning: you'll resolve to using a 'spoon' i.e.: <code>==</code> for having a 'soup', and / or the 'fork' i.e.: <code>===</code> for picking. </p>\n\n<p>Asking if it is better to use a \"fork\" or a \"spoon\" for \"eating\" - is equall to asking if it is better to use a static [===] versus dynamic [==] eq., op. in JS. Both questions are equally wrong and reflect a very narrow or shallow understanding of the subject in question.</p>\n"}],"score":5662}