{"body":"<p>How do I append an object (such as a string or number) to an array in JavaScript?          </p>\n","title":"How to append something to an array?","answers":[{"score":4606,"body":"<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\"><code>Array.prototype.push</code></a> method to append values to the end of an array:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\nvar arr = [\n  \"Hi\",\n  \"Hello\",\n  \"Bonjour\"\n];\n\n// append new value to the array\narr.push(\"Hola\");\n\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<hr />\n<p>You can use the <code>push()</code> function to append more than one value to an array in a single call:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// initialize array\nvar arr = [\"Hi\", \"Hello\", \"Bonjour\", \"Hola\"];\n\n// append multiple values to the array\narr.push(\"Salut\", \"Hey\");\n\n// display all values\nfor (var i = 0; i &lt; arr.length; i++) {\n  console.log(arr[i]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<hr />\n<p><strong>Update</strong></p>\n<p>If you want to add the items of one array to another array, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>firstArray.concat(secondArray)</code></a>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [\n  \"apple\",\n  \"banana\",\n  \"cherry\"\n];\n\narr = arr.concat([\n  \"dragonfruit\",\n  \"elderberry\",\n  \"fig\"\n]);\n\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Update</strong></p>\n<p>Just an addition to this answer if you want to prepend any value to the start of an array (i.e. first index) then you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift\" rel=\"noreferrer\"><code>Array.prototype.unshift</code></a> for this purpose.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [1, 2, 3];\narr.unshift(0);\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>It also supports appending multiple values at once just like <code>push</code>.</p>\n<hr />\n<p><strong>Update</strong></p>\n<p>Another way with <em><strong>ES6</strong></em> syntax is to return a new array with the <em><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread syntax</a></strong></em>. This leaves the original array unchanged, but returns a new array with new items appended, compliant with the spirit of functional programming.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const arr = [\n  \"Hi\",\n  \"Hello\",\n  \"Bonjour\",\n];\n\nconst newArr = [\n  ...arr,\n  \"Salut\",\n];\n\nconsole.log(newArr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1059,"body":"<p>If you're only appending a single variable, then <code>push()</code> works just fine. If you need to append another array, use <code>concat()</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ar1 = [1, 2, 3];\r\nvar ar2 = [4, 5, 6];\r\n\r\nvar ar3 = ar1.concat(ar2);\r\n\r\nalert(ar1);\r\nalert(ar2);\r\nalert(ar3);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The concat does not affect <code>ar1</code> and <code>ar2</code> unless reassigned, for example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ar1 = [1, 2, 3];\r\nvar ar2 = [4, 5, 6];\r\n\r\nar1 = ar1.concat(ar2);\r\nalert(ar1);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Lots of great info <a href=\"http://www.javascriptkit.com/jsref/\" rel=\"noreferrer\">here</a>.</p>\n"},{"score":412,"body":"<p>Some quick benchmarking (each test = 500k appended elements and the results are averages of multiple runs) showed the following:</p>\n\n<p>Firefox 3.6 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (300ms vs. 800ms)</li>\n<li>Large arrays: <strong><code>arr.push(b)</code> is faster</strong> (500ms vs. 900ms)</li>\n</ul>\n\n<p>Safari 5.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (90ms vs. 115ms)</li>\n<li>Large arrays: <strong><code>arr[arr.length] = b</code> is faster</strong> (160ms vs. 185ms)</li>\n</ul>\n\n<p>Google Chrome 6.0 (Mac):</p>\n\n<ul>\n<li>Small arrays: <strong>No significant difference</strong> (and Chrome is FAST! Only ~38ms !!)</li>\n<li>Large arrays: <strong>No significant difference</strong> (160ms)</li>\n</ul>\n\n<p>I like the <code>arr.push()</code> syntax better, but I think I'd be better off with the <code>arr[arr.length]</code> Version, at least in raw speed. I'd love to see the results of an IE run though.</p>\n\n<hr>\n\n<p>My benchmarking loops:</p>\n\n<pre><code>function arrpush_small() {\n    var arr1 = [];\n    for (a = 0; a &lt; 100; a++)\n    {\n        arr1 = [];\n        for (i = 0; i &lt; 5000; i++)\n        {\n            arr1.push('elem' + i);\n        }\n    }\n}\n\nfunction arrlen_small() {\n    var arr2 = [];\n    for (b = 0; b &lt; 100; b++)\n    {\n        arr2 = [];\n        for (j = 0; j &lt; 5000; j++)\n        {\n            arr2[arr2.length] = 'elem' + j;\n        }\n    }\n}\n\n\nfunction arrpush_large() {\n    var arr1 = [];\n    for (i = 0; i &lt; 500000; i++)\n    {\n        arr1.push('elem' + i);\n    }\n}\n\nfunction arrlen_large() {\n    var arr2 = [];\n    for (j = 0; j &lt; 500000; j++)\n    {\n        arr2[arr2.length] = 'elem' + j;\n    }\n}\n</code></pre>\n"},{"score":52,"body":"<p>If <code>arr</code> is an array, and <code>val</code> is the value you wish to add use:</p>\n\n<pre><code>arr.push(val);\n</code></pre>\n\n<p>E.g.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = ['a', 'b', 'c'];\r\narr.push('d');\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":50,"body":"<p>Use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>concat</code></a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>a = [1, 2, 3];\r\nb = [3, 4, 5];\r\na = a.concat(b);\r\nconsole.log(a);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":18,"body":"<p>If you know the highest index (such as stored in a variable \"i\") then you can do</p>\n\n<pre><code>myArray[i + 1] = someValue;\n</code></pre>\n\n<p>However if you don't know then you can either use </p>\n\n<pre><code>myArray.push(someValue);\n</code></pre>\n\n<p>as other answers suggested, or you can use</p>\n\n<pre><code>myArray[myArray.length] = someValue; \n</code></pre>\n\n<p>Note that the array is zero based so .length return the highest index plus one.</p>\n\n<p>Also note that you don't have to add in order and you can actually skip values, as in</p>\n\n<pre><code>myArray[myArray.length + 1000] = someValue;\n</code></pre>\n\n<p>In which case the values in between will have a value of undefined.</p>\n\n<p>It is therefore a good practice when looping through a JavaScript to verify that a value actually exists at that point.</p>\n\n<p>This can be done by something like the following:</p>\n\n<pre><code>if(myArray[i] === \"undefined\"){ continue; }\n</code></pre>\n\n<p>if you are certain that you don't have any zeros in the array then you can just do:</p>\n\n<pre><code>if(!myArray[i]){ continue; }\n</code></pre>\n\n<p>Of course make sure in this case that you don't use as the condition myArray[i] (as some people over the internet suggest based on the end that as soon as i is greater then the highest index it will return undefined which evaluates to false)</p>\n"},{"score":306,"body":"<p>I think it's worth mentioning that push can be called with multiple arguments, which will be appended to the array in order. For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = ['first'];\r\narr.push('second', 'third');\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>As a result of this you can use push.apply to append an array to another array like so:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = ['first'];\r\narr.push('second', 'third');\r\narr.push.apply(arr, ['forth', 'fifth']);\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"http://es5.github.com/\" rel=\"noreferrer\">Annotated ES5</a> has more info on exactly what <a href=\"http://es5.github.com/#x15.4.4.7\" rel=\"noreferrer\">push</a> and <a href=\"http://es5.github.com/#x15.3.4.3\" rel=\"noreferrer\">apply</a> do.</p>\n\n<p>2016 update: with <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread</a>, you don't need that <code>apply</code> anymore, like:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = ['first'];\r\narr.push('second', 'third');\r\n\r\narr.push(...['fourth', 'fifth']);\r\nconsole.log(arr) ;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":83,"body":"<p>You can use <code>push</code> and <code>apply</code> function to append two arrays.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var array1 = [11, 32, 75];\r\nvar array2 = [99, 67, 34];\r\n\r\nArray.prototype.push.apply(array1, array2);\r\nconsole.log(array1);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It will append <code>array2</code> to <code>array1</code>. Now <code>array1</code> contains <code>[11, 32, 75, 99, 67, 34]</code>.\nThis code is much simpler than writing <code>for</code> loops to copy each and every items in the array.</p>\n"},{"score":32,"body":"<p>If you want to append two arrays -</p>\n\n<pre><code>var a = ['a', 'b'];\nvar b = ['c', 'd'];\n</code></pre>\n\n<p>then you could use:</p>\n\n<pre><code>var c = a.concat(b);\n</code></pre>\n\n<p>And if you want to add record <code>g</code> to array  (<code>var a=[]</code>) then you could use:</p>\n\n<pre><code>a.push('g');\n</code></pre>\n"},{"score":11,"body":"<h1>Let the array length property do the work:</h1>\n\n<pre><code>myarray[myarray.length] = 'new element value added to the end of the array';\n</code></pre>\n\n<p>myarray.length returns the number of strings in the array.\n<strong>JS is zero based</strong> so the next element key of the array will be the current length of the array.\nEX:</p>\n\n<pre><code>var myarray = [0, 1, 2, 3],\n    myarrayLength = myarray.length; //myarrayLength is set to 4\n</code></pre>\n"},{"score":25,"body":"<p>The <code>push()</code> method adds new items to the end of an array, and returns the new length. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.push(\"Kiwi\");\n\n// The result of fruits will be:\nBanana, Orange, Apple, Mango, Kiwi\n</code></pre>\n\n<p>The exact answer to your question is already answered, but let's look at some other ways to add items to an array.</p>\n\n<p>The <code>unshift()</code> method adds new items to the beginning of an array, and returns the new length. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\nfruits.unshift(\"Lemon\", \"Pineapple\");\n\n// The result of fruits will be:\nLemon, Pineapple, Banana, Orange, Apple, Mango\n</code></pre>\n\n<p>And lastly, the <code>concat()</code> method is used to join two or more arrays. Example:</p>\n\n<pre><code>var fruits = [\"Banana\", \"Orange\"];\nvar moreFruits = [\"Apple\", \"Mango\", \"Lemon\"];\nvar allFruits = fruits.concat(moreFruits);\n\n// The values of the children array will be:\nBanana, Orange, Apple, Mango, Lemon\n</code></pre>\n"},{"score":65,"body":"<p>With the new ES6 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread operator</a>, joining two arrays using <code>push</code> becomes even easier:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [1, 2, 3, 4, 5];\r\nvar arr2 = [6, 7, 8, 9, 10];\r\narr.push(...arr2);\r\nconsole.log(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This adds the contents of <code>arr2</code> onto the end of <code>arr</code>.</p>\n\n<p><a href=\"https://babeljs.io/repl/#?experimental=true&amp;evaluate=true&amp;loose=false&amp;spec=false&amp;code=var%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%0Aarr.push(...%5B6%2C%207%2C%208%2C%209%2C%2010%5D)%3B%0Aconsole.log(arr)%3B\" rel=\"noreferrer\">Babel REPL Example</a></p>\n"},{"score":10,"body":"<blockquote>\n  <p>Just want to add a snippet for non-destructive addition of an element.</p>\n</blockquote>\n\n<pre><code>var newArr = oldArr.concat([newEl]);\n</code></pre>\n"},{"score":12,"body":"<p><code>concat()</code>, of course, can be used with 2 dimensional arrays as well. No looping required.</p>\n\n<blockquote>\n  <p>var a = [\n      [1, 2],\n      [3, 4] ];</p>\n  \n  <p>var b = [\n      [\"a\", \"b\"],\n      [\"c\", \"d\"] ];</p>\n  \n  <p>b = b.concat(a); </p>\n  \n  <p>alert(b[2][1]); // result 2</p>\n</blockquote>\n"},{"score":36,"body":"<p>Javascript with <strong>ECMAScript 5</strong> standard which is supported by most browsers now, you can use <code>apply()</code> to append <code>array1</code> to <code>array2</code>.</p>\n\n<pre><code>var array1 = [3, 4, 5];\nvar array2 = [1, 2];\n\nArray.prototype.push.apply(array2, array1);\n\nconsole.log(array2); // [1, 2, 3, 4, 5]\n</code></pre>\n\n<p>Javascript with <strong>ECMAScript 6</strong> standard which is supported by Chrome and FF and IE Edge, you can use the <code>spread</code> operator:</p>\n\n<pre><code>\"use strict\";\nlet array1 = [3, 4, 5];\nlet array2 = [1, 2];\n\narray2.push(...array1);\n\nconsole.log(array2); // [1, 2, 3, 4, 5]\n</code></pre>\n\n<p>The <code>spread</code> operator will replace <code>array2.push(...array1);</code> with <code>array2.push(3, 4, 5);</code> when the browser is thinking the logic.</p>\n\n<p><strong>Bonus point</strong></p>\n\n<p>If you'd like to create <em>another</em> variable to store all the items from both array, you can do this:</p>\n\n<p><strong>ES5</strong> <code>var combinedArray = array1.concat(array2);</code></p>\n\n<p><strong>ES6</strong> <code>const combinedArray = [...array1, ...array2]</code></p>\n\n<p>The spread operator (<code>...</code>) is to spread out all items from a collection.</p>\n"},{"score":4,"body":"<p>If you want to append a single value into an array, simply use the push method. It will add a new element at the end of the array.</p>\n\n<p>But if you intend to add multiple elements then store the elements in a new array and concat the second array with the first array...either way you wish.</p>\n\n<pre><code>arr=['a','b','c'];\narr.push('d');\n//now print the array in console.log and it will contain 'a','b','c','d' as elements.\nconsole.log(array);\n</code></pre>\n"},{"score":5,"body":"<p>if you want to combine 2 arrays without the duplicate you may try the code below</p>\n\n<pre><code>array_merge = function (arr1, arr2) {\n  return arr1.concat(arr2.filter(function(item){\n    return arr1.indexOf(item) &lt; 0;\n  }))\n}\n</code></pre>\n\n<p><strong>usage:</strong></p>\n\n<pre><code>array1 = ['1', '2', '3']\narray2 = ['2', '3', '4', '5']\ncombined_array = array_merge(array1, array2)\n</code></pre>\n\n<p><strong>Output:</strong>\n[1,2,3,4,5]    </p>\n"},{"score":7,"body":"<p>If you are using the ES6 you can use <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">spread</a> operator to do it.</p>\n\n<pre><code>var arr = [\n    \"apple\",\n    \"banana\",\n    \"cherry\"\n];\n\nvar arr2 = [\n    \"dragonfruit\",\n    \"elderberry\",\n    \"fig\"\n];\n\narr.push(...arr2);\n</code></pre>\n"},{"score":28,"body":"<p><strong>There are a couple of ways to append an array in JavaScript:</strong></p>\n\n<p><strong>1)</strong> The <code>push()</code> method adds one or more elements to the end of an array and returns the new length of the array.</p>\n\n<pre><code>var a = [1, 2, 3];\na.push(4, 5);\nconsole.log(a);\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[1, 2, 3, 4, 5]\n</code></pre>\n\n<p><strong>2)</strong> The <code>unshift()</code> method adds one or more elements to the beginning of an array and returns the new length of the array:</p>\n\n<pre><code>var a = [1, 2, 3];\na.unshift(4, 5);\nconsole.log(a); \n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[4, 5, 1, 2, 3]\n</code></pre>\n\n<p><strong>3)</strong> The <code>concat()</code> method is used to merge two or more arrays. This method <strong>does not change</strong> the existing arrays, but instead returns a new array.</p>\n\n<pre><code>var arr1 = [\"a\", \"b\", \"c\"];\nvar arr2 = [\"d\", \"e\", \"f\"];\nvar arr3 = arr1.concat(arr2);\nconsole.log(arr3);\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[ \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" ]\n</code></pre>\n\n<p><strong>4)</strong> You can use the array's <code>.length</code> property to add an element to the end of the array:</p>\n\n<pre><code>var ar = ['one', 'two', 'three'];\nar[ar.length] = 'four';\nconsole.log( ar ); \n</code></pre>\n\n<p>Output:</p>\n\n<pre><code> [\"one\", \"two\", \"three\", \"four\"]\n</code></pre>\n\n<p><strong>5)</strong> The <code>splice()</code> method changes the content of an array by removing existing elements and/or adding new elements:</p>\n\n<pre><code>var myFish = [\"angel\", \"clown\", \"mandarin\", \"surgeon\"];\nmyFish.splice(4, 0, \"nemo\");\n//array.splice(start, deleteCount, item1, item2, ...)\nconsole.log(myFish);\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[\"angel\", \"clown\", \"mandarin\", \"surgeon\",\"nemo\"]\n</code></pre>\n\n<p><strong>6)</strong> You can also add a new element to an array simply by specifying a new index and assigning a value:</p>\n\n<pre><code>var ar = ['one', 'two', 'three'];\nar[3] = 'four'; // add new element to ar\nconsole.log(ar);\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>[\"one\", \"two\",\"three\",\"four\"]\n</code></pre>\n"},{"score":24,"body":"<p>Now, you can take advantage of ES6 syntax and just do:</p>\n\n<pre><code>let array = [1, 2];\nconsole.log([...array, 3]);\n</code></pre>\n\n<p>keeping the original array immutable.</p>\n"},{"score":2,"body":"<p>We don't have append function for Array in javascript, but we have <strong>push</strong> and <strong>unshift</strong>, imagine you have the array below:</p>\n\n<pre><code>var arr = [1, 2, 3, 4, 5];\n</code></pre>\n\n<p>and we like append a value to this array, we can do, arr.push(6) and it will add 6 to the end of the array:</p>\n\n<pre><code>arr.push(6); // return [1, 2, 3, 4, 5, 6];\n</code></pre>\n\n<p>also we can use unshift, look at how we can apply this:</p>\n\n<pre><code>arr.unshift(0); //return [0, 1, 2, 3, 4, 5];\n</code></pre>\n\n<p>They are main functions to add or append new values to the arrays.</p>\n"},{"score":4,"body":"<p>You .push() that value in. \n<strong>Example:</strong> array.push(value);</p>\n"},{"score":7,"body":"<p><strong>you can do it using new javascript Es 6 feature :</strong></p>\n\n<pre><code>// initialize array\n\nvar arr = [\n    \"Hi\",\n    \"Hello\",\n    \"Bangladesh\"\n];\n\n// append new value to the array\n\narr= [...arr , \"Feni\"];\n\n// or you can put a variable value\n\nvar testValue = \"Cool\";\n\narr = [...arr , testValue ];\n\nconsole.log(arr); \n\n// final output  [ 'Hi', 'Hello', 'Bangladesh', 'Feni', 'Cool' ]\n</code></pre>\n"},{"score":1,"body":"<p>You can use push method.</p>\n\n<pre><code>Array.prototype.append = function(destArray){\n     destArray = destArray || [];\n     this.push.call(this,...destArray);\n     return this;\n}\nvar arr = [1,2,5,67];\nvar arr1 = [7,4,7,8];\nconsole.log(arr.append(arr1));// [7, 4, 7, 8, 1, 4, 5, 67, 7]\nconsole.log(arr.append(\"Hola\"))//[1, 2, 5, 67, 7, 4, 7, 8, \"H\", \"o\", \"l\", \"a\"]\n</code></pre>\n"},{"score":8,"body":"<h2>Append a value to an array</h2>\n\n<p>Since <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\">Array.prototype.push</a> adds one or more elements to the end of an array and <em>returns the new length of the array</em>, sometimes we want just to get the new up-to-date array so we can do something like so:</p>\n\n<pre><code>const arr = [1, 2, 3];\nconst val = 4;\n\narr.concat([val]); // [1, 2, 3, 4]\n</code></pre>\n\n<p>Or just:</p>\n\n<pre><code>[...arr, val] // [1, 2, 3, 4]\n</code></pre>\n"},{"score":0,"body":"<p><code>push()</code> adds a new element to the end of an array.<br>\n<code>pop()</code> removes an element from the end of an array.</p>\n\n<p>To append an object (such as a string or number) to an array use -<br>\n<code>array.push(toAppend);</code></p>\n"},{"score":6,"body":"<h2>Append a single item</h2>\n\n<p>To append a single item to an array, use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\"><code>push()</code></a> method provided by the Array object:</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nfruits.push('mango')\nconsole.log(fruits)\n</code></pre>\n\n<p><code>push()</code> mutates the original array.</p>\n\n<p>To create a new array instead, use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>concat()</code></a> Array method:</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nconst allfruits = fruits.concat('mango')\nconsole.log(allfruits)\n</code></pre>\n\n<p>Notice that <code>concat()</code> does not actually add an item to the array, but creates a new array, which you can assign to another variable, or reassign to the original array (declaring it as <code>let</code>, as you cannot reassign a <code>const</code>):</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nconst allfruits = fruits.concat('mango')\nconsole.log(allfruits)\n</code></pre>\n\n<pre class=\"lang-js prettyprint-override\"><code>let fruits = ['banana', 'pear', 'apple']\nfruits = fruits.concat('mango')\n</code></pre>\n\n<h2>Append multiple items</h2>\n\n<p>To append a multiple item to an array, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push\" rel=\"noreferrer\"><code>push()</code></a> by calling it with multiple arguments:</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nfruits.push('mango', 'melon', 'avocado')\nconsole.log(fruits)\n</code></pre>\n\n<p>You can also use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"noreferrer\"><code>concat()</code></a> method you saw before, passing a list of items separated by a comma:</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nconst allfruits = fruits.concat('mango', 'melon', 'avocado')\nconsole.log(allfruits)\n</code></pre>\n\n<p>or an array:</p>\n\n<pre><code>const fruits = ['banana', 'pear', 'apple']\nconst allfruits = fruits.concat(['mango', 'melon', 'avocado'])\nconsole.log(allfruits)\n</code></pre>\n\n<p>Remember that as described previously this method does not mutate the original array, but it  returns a new array.</p>\n\n<blockquote>\n  <p>Originally <a href=\"https://flaviocopes.com/how-to-append-item-to-array/\" rel=\"noreferrer\">posted at</a> </p>\n</blockquote>\n"},{"score":17,"body":"<p><strong>Append Single Element</strong></p>\n\n<pre><code>//Append to the end\narrName.push('newName1');\n\n//Prepend to the start\narrName.unshift('newName1');\n\n//Insert at index 1\narrName.splice(1, 0,'newName1');\n//1: index number, 0: number of element to remove, newName1: new element\n\n\n// Replace index 3 (of exists), add new element otherwise.\narrName[3] = 'newName1';\n</code></pre>\n\n<p><strong>Append Multiple Elements</strong></p>\n\n<pre><code>//Insert from index number 1\narrName.splice(1, 0,'newElemenet1', 'newElemenet2', 'newElemenet3');\n//1: index number from where insert starts, \n//0: number of element to remove, \n//newElemenet1,2,3: new elements\n</code></pre>\n\n<p><strong>Append array</strong></p>\n\n<pre><code>//join two or more arrays\narrName.concat(newAry1, newAry2);\n//newAry1,newAry2: Two different arrays which are to be combined (concatenated) to an existing array\n</code></pre>\n"},{"score":0,"body":"<p>Appending items on an array</p>\n\n<pre><code>let fruits =[\"orange\",\"banana\",\"apple\",\"lemon\"]; /*array declaration*/\n\nfruits.push(\"avacado\"); /* Adding an element to the array*/\n\n/*displaying elements of the array*/\n\nfor(var i=0; i &lt; fruits.length; i++){\n  console.log(fruits[i]);\n}\n</code></pre>\n"},{"score":1,"body":"<p>You can use the push() if you want to add values\ne.g. <code>arr.push(\"Test1\", \"Test2\");</code></p>\n\n<p>If you have array you can use concat()\ne.g. <code>Array1.concat(Array2)</code></p>\n\n<p>If you have just one element to add you can also try length menthod\ne.g. <code>array[aray.length] = 'test';</code></p>\n"}],"score":2893}