{"body":"<p>I have an object <code>x</code>. I'd like to copy it as object <code>y</code>, such that changes to <code>y</code> do not modify <code>x</code>. I realized that copying objects derived from built-in JavaScript objects will result in extra, unwanted properties. This isn't a problem, since I'm copying one of my own literal-constructed objects.</p>\n\n<p>How do I correctly clone a JavaScript object?</p>\n","title":"How do I correctly clone a JavaScript object?","answers":[{"score":24,"body":"<p>From this article: <a href=\"https://greywyvern.com/?post=363\" rel=\"nofollow noreferrer\">How to copy arrays and objects in Javascript</a> by Brian Huisman:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  var newObj = (this instanceof Array) ? [] : {};\n  for (var i in this) {\n    if (i == 'clone') continue;\n    if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n      newObj[i] = this[i].clone();\n    } else newObj[i] = this[i]\n  } return newObj;\n};\n</code></pre>\n"},{"score":23,"body":"<p>Here is a function you can use. </p>\n\n<pre><code>function clone(obj) {\n    if(obj == null || typeof(obj) != 'object')\n        return obj;    \n    var temp = new obj.constructor(); \n    for(var key in obj)\n        temp[key] = clone(obj[key]);    \n    return temp;\n}\n</code></pre>\n"},{"score":1,"body":"<p>If there are no circular dependencies in your object, I suggest using one of the other answers or <a href=\"https://stackoverflow.com/questions/122102/what-is-the-most-efficent-way-to-clone-a-javascript-object/122704#122704\">jQuery's copy methods</a>, as they all seem quite effective.</p>\n\n<p>If there are circular dependencies (i.e., two sub-objects link to each other), you are kind of screwed as there is (from a theoretical perspective) <a href=\"https://stackoverflow.com/questions/597588/how-do-you-clone-an-array-of-objects-in-javascript/597726#597726\">no way to solve this issue elegantly</a>.</p>\n"},{"score":0,"body":"<p>From the <a href=\"http://developer.apple.com/DOCUMENTATION/ScriptingAutomation/Conceptual/JSCodingGuide/OOJavaScript/OOJavaScript.html#//apple_ref/doc/uid/TP40006539-SW3\" rel=\"nofollow noreferrer\">Apple JavaScript Coding Guidelines</a>:</p>\n\n<pre><code>// Create an inner object with a variable x whose default\n// value is 3.\nfunction innerObj()\n{\n        this.x = 3;\n}\ninnerObj.prototype.clone = function() {\n    var temp = new innerObj();\n    for (myvar in this) {\n        // this object does not contain any objects, so\n        // use the lightweight copy code.\n        temp[myvar] = this[myvar];\n    }\n    return temp;\n}\n\n// Create an outer object with a variable y whose default\n// value is 77.\nfunction outerObj()\n{\n        // The outer object contains an inner object.  Allocate it here.\n        this.inner = new innerObj();\n        this.y = 77;\n}\nouterObj.prototype.clone = function() {\n    var temp = new outerObj();\n    for (myvar in this) {\n        if (this[myvar].clone) {\n            // This variable contains an object with a\n            // clone operator.  Call it to create a copy.\n            temp[myvar] = this[myvar].clone();\n        } else {\n            // This variable contains a scalar value,\n            // a string value, or an object with no\n            // clone function.  Assign it directly.\n            temp[myvar] = this[myvar];\n        }\n    }\n    return temp;\n}\n\n// Allocate an outer object and assign non-default values to variables in\n// both the outer and inner objects.\nouter = new outerObj;\nouter.inner.x = 4;\nouter.y = 16;\n\n// Clone the outer object (which, in turn, clones the inner object).\nnewouter = outer.clone();\n\n// Verify that both values were copied.\nalert('inner x is '+newouter.inner.x); // prints 4\nalert('y is '+newouter.y); // prints 16\n</code></pre>\n\n<p>Steve</p>\n"},{"score":1607,"body":"<p>To do this for any object in JavaScript will not be simple or straightforward. You will run into the problem of erroneously picking up attributes from the object's prototype that should be left in the prototype and not copied to the new instance. If, for instance, you are adding a <code>clone</code> method to <code>Object.prototype</code>, as some answers depict, you will need to explicitly skip that attribute. But what if there are other additional methods added to <code>Object.prototype</code>, or other intermediate prototypes, that you don't know about? In that case, you will copy attributes you shouldn't, so you need to detect unforeseen, non-local attributes with the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Object.hasOwnProperty\"><code>hasOwnProperty</code></a> method.</p>\n\n<p>In addition to non-enumerable attributes, you'll encounter a tougher problem when you try to copy objects that have hidden properties. For example, <code>prototype</code> is a hidden property of a function. Also, an object's prototype is referenced with the attribute <code>__proto__</code>, which is also hidden, and will not be copied by a for/in loop iterating over the source object's attributes. I think <code>__proto__</code> might be specific to Firefox's JavaScript interpreter and it may be something different in other browsers, but you get the picture. Not everything is enumerable. You can copy a hidden attribute if you know its name, but I don't know of any way to discover it automatically.</p>\n\n<p>Yet another snag in the quest for an elegant solution is the problem of setting up the prototype inheritance correctly. If your source object's prototype is <code>Object</code>, then simply creating a new general object with <code>{}</code> will work, but if the source's prototype is some descendant of <code>Object</code>, then you are going to be missing the additional members from that prototype which you skipped using the <code>hasOwnProperty</code> filter, or which were in the prototype, but weren't enumerable in the first place. One solution might be to call the source object's <code>constructor</code> property to get the initial copy object and then copy over the attributes, but then you still will not get non-enumerable attributes. For example, a <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\" rel=\"noreferrer\" title=\"Mozilla JavaScript Reference: Date\"><code>Date</code></a> object stores its data as a hidden member:</p>\n\n<pre><code>function clone(obj) {\n    if (null == obj || \"object\" != typeof obj) return obj;\n    var copy = obj.constructor();\n    for (var attr in obj) {\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\n    }\n    return copy;\n}\n\nvar d1 = new Date();\n\n/* Executes function after 5 seconds. */\nsetTimeout(function(){\n    var d2 = clone(d1);\n    alert(\"d1 = \" + d1.toString() + \"\\nd2 = \" + d2.toString());\n}, 5000);\n</code></pre>\n\n<p>The date string for <code>d1</code> will be 5 seconds behind that of <code>d2</code>. A way to make one <code>Date</code> the same as another is by calling the <code>setTime</code> method, but that is specific to the <code>Date</code> class. I don't think there is a bullet-proof general solution to this problem, though I would be happy to be wrong!</p>\n\n<p>When I had to implement general deep copying I ended up compromising by assuming that I would only need to copy a plain <code>Object</code>, <code>Array</code>, <code>Date</code>, <code>String</code>, <code>Number</code>, or <code>Boolean</code>. The last 3 types are immutable, so I could perform a shallow copy and not worry about it changing. I further assumed that any elements contained in <code>Object</code> or <code>Array</code> would also be one of the 6 simple types in that list. This can be accomplished with code like the following:</p>\n\n<pre><code>function clone(obj) {\n    var copy;\n\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = clone(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n</code></pre>\n\n<p>The above function will work adequately for the 6 simple types I mentioned, as long as the data in the objects and arrays form a tree structure. That is, there isn't more than one reference to the same data in the object. For example:</p>\n\n<pre><code>// This would be cloneable:\nvar tree = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"right\" : null,\n    \"data\"  : 8\n};\n\n// This would kind-of work, but you would get 2 copies of the \n// inner node instead of 2 references to the same copy\nvar directedAcylicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ndirectedAcyclicGraph[\"right\"] = directedAcyclicGraph[\"left\"];\n\n// Cloning this would cause a stack overflow due to infinite recursion:\nvar cyclicGraph = {\n    \"left\"  : { \"left\" : null, \"right\" : null, \"data\" : 3 },\n    \"data\"  : 8\n};\ncyclicGraph[\"right\"] = cyclicGraph;\n</code></pre>\n\n<p>It will not be able to handle any JavaScript object, but it may be sufficient for many purposes as long as you don't assume that it will just work for anything you throw at it.</p>\n"},{"score":42,"body":"<p>One particularly inelegant solution is to use JSON encoding to make deep copies of objects that do not have member methods. The methodology is to JSON encode your target object, then by decoding it, you get the copy you are looking for.  You can decode as many times as you want to make as many copies as you need.</p>\n\n<p>Of course, functions do not belong in JSON, so this only works for objects without member methods.</p>\n\n<p>This methodology was perfect for my use case, since I'm storing JSON blobs in a key-value store, and when they are exposed as objects in a JavaScript API, each object actually contains a copy of the original state of the object so we can calculate the delta after the caller has mutated the exposed object.</p>\n\n<pre><code>var object1 = {key:\"value\"};\nvar object2 = object1;\n\nobject2 = JSON.stringify(object1);\nobject2 = JSON.parse(object2);\n\nobject2.key = \"a change\";\nconsole.log(object1);// returns value\n</code></pre>\n"},{"score":791,"body":"<p>With jQuery, you can <strong>shallow copy</strong> with <a href=\"http://api.jquery.com/jQuery.extend\" rel=\"noreferrer\">extend</a>:</p>\n\n<pre><code>var copiedObject = jQuery.extend({}, originalObject)\n</code></pre>\n\n<p>subsequent changes to the <code>copiedObject</code> will not affect the <code>originalObject</code>, and vice versa.</p>\n\n<p>Or to make a <strong>deep copy</strong>:</p>\n\n<pre><code>var copiedObject = jQuery.extend(true, {}, originalObject)\n</code></pre>\n"},{"score":24,"body":"<p>A.Levy's answer is almost complete, here is my little contribution: <strong>there is a way how to handle recursive references</strong>, see this line</p>\n\n<p><code>if(this[attr]==this) copy[attr] = copy;</code></p>\n\n<p>If the object is XML DOM element, we must use <strong>cloneNode</strong> instead</p>\n\n<p><code>if(this.cloneNode) return this.cloneNode(true);</code></p>\n\n<p>Inspired by A.Levy's exhaustive study and Calvin's prototyping approach, I offer this solution:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  if(this.cloneNode) return this.cloneNode(true);\n  var copy = this instanceof Array ? [] : {};\n  for(var attr in this) {\n    if(typeof this[attr] == \"function\" || this[attr]==null || !this[attr].clone)\n      copy[attr] = this[attr];\n    else if(this[attr]==this) copy[attr] = copy;\n    else copy[attr] = this[attr].clone();\n  }\n  return copy;\n}\n\nDate.prototype.clone = function() {\n  var copy = new Date();\n  copy.setTime(this.getTime());\n  return copy;\n}\n\nNumber.prototype.clone = \nBoolean.prototype.clone =\nString.prototype.clone = function() {\n  return this;\n}\n</code></pre>\n\n<p>See also Andy Burke's note in the answers.</p>\n"},{"score":136,"body":"<p>There are many answers, but none that mentions <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\" rel=\"noreferrer\">Object.create</a> from ECMAScript 5, which admittedly does not give you an exact copy, but sets the source as the prototype of the new object.</p>\n\n<p>Thus, this is not an exact answer to the question, but it is a one-line solution and thus elegant. And it works best for 2 cases:</p>\n\n<ol>\n<li>Where such inheritance is useful (duh!)</li>\n<li>Where the source object won't be modified, thus making the relation between the 2 objects a non issue.</li>\n</ol>\n\n<p>Example:</p>\n\n<pre><code>var foo = { a : 1 };\nvar bar = Object.create(foo);\nfoo.a; // 1\nbar.a; // 1\nfoo.a = 2;\nbar.a; // 2 - prototype changed\nbar.a = 3;\nfoo.a; // Still 2, since setting bar.a makes it an \"own\" property\n</code></pre>\n\n<p>Why do I consider this solution to be superior? It's native, thus no looping, no recursion. However, older browsers will need a polyfill.</p>\n"},{"score":5,"body":"<p>Jan Turoň's answer above is very close, and may be the best to use in a browser due to compatibility issues, but it will potentially cause some strange enumeration issues.  For instance, executing:</p>\n\n<pre><code>for ( var i in someArray ) { ... }\n</code></pre>\n\n<p>Will assign the clone() method to i after iterating through the elements of the array.  Here's an adaptation that avoids the enumeration and works with node.js:</p>\n\n<pre><code>Object.defineProperty( Object.prototype, \"clone\", {\n    value: function() {\n        if ( this.cloneNode )\n        {\n            return this.cloneNode( true );\n        }\n\n        var copy = this instanceof Array ? [] : {};\n        for( var attr in this )\n        {\n            if ( typeof this[ attr ] == \"function\" || this[ attr ] == null || !this[ attr ].clone )\n            {\n                copy[ attr ] = this[ attr ];\n            }\n            else if ( this[ attr ] == this )\n            {\n                copy[ attr ] = copy;\n            }\n            else\n            {\n                copy[ attr ] = this[ attr ].clone();\n            }\n        }\n        return copy;\n    }\n});\n\nObject.defineProperty( Date.prototype, \"clone\", {\n    value: function() {\n        var copy = new Date();\n        copy.setTime( this.getTime() );\n        return copy;\n    }\n});\n\nObject.defineProperty( Number.prototype, \"clone\", { value: function() { return this; } } );\nObject.defineProperty( Boolean.prototype, \"clone\", { value: function() { return this; } } );\nObject.defineProperty( String.prototype, \"clone\", { value: function() { return this; } } );\n</code></pre>\n\n<p>This avoids making the clone() method enumerable because defineProperty() defaults enumerable to false.</p>\n"},{"score":14,"body":"<p>You can clone an object and remove any reference from the previous one using a single line of code. Simply do:</p>\n\n<pre><code>var obj1 = { text: 'moo1' };\nvar obj2 = Object.create(obj1); // Creates a new clone without references\n\nobj2.text = 'moo2'; // Only updates obj2's text property\n\nconsole.log(obj1, obj2); // Outputs: obj1: {text:'moo1'}, obj2: {text:'moo2'}\n</code></pre>\n\n<p>For browsers / engines that do not currently support Object.create you can use this polyfill:</p>\n\n<pre><code>// Polyfill Object.create if it does not exist\nif (!Object.create) {\n    Object.create = function (o) {\n        var F = function () {};\n        F.prototype = o;\n        return new F();\n    };\n}\n</code></pre>\n"},{"score":6,"body":"<p>I just wanted to add to all the <code>Object.create</code> solutions in this post, that this does not work in the desired way with nodejs. </p>\n\n<p>In Firefox the result of</p>\n\n<pre><code>var a = {\"test\":\"test\"};\nvar b = Object.create(a);\nconsole.log(b);´\n</code></pre>\n\n<p>is </p>\n\n<p><code>{test:\"test\"}</code>.</p>\n\n<p>In nodejs it is </p>\n\n<pre><code>{}\n</code></pre>\n"},{"score":1007,"body":"<p>If you do not use <code>Date</code>s, functions, undefined, regExp or Infinity within your object, a very simple one liner is <code>JSON.parse(JSON.stringify(object))</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const a = {\r\n  string: 'string',\r\n  number: 123,\r\n  bool: false,\r\n  nul: null,\r\n  date: new Date(),  // stringified\r\n  undef: undefined,  // lost\r\n  inf: Infinity,  // forced to 'null'\r\n}\r\nconsole.log(a);\r\nconsole.log(typeof a.date);  // Date object\r\nconst clone = JSON.parse(JSON.stringify(a));\r\nconsole.log(clone);\r\nconsole.log(typeof clone.date);  // result of .toISOString()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This works for all kind of objects containing objects, arrays, strings, booleans and numbers.</p>\n\n<p>See also <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm\" rel=\"noreferrer\">this article about the structured clone algorithm of browsers</a> which is used when posting messages to and from a worker. It also contains a function for deep cloning.</p>\n"},{"score":79,"body":"<p>If you're okay with a shallow copy, the underscore.js library has a <a href=\"http://underscorejs.org/#clone\" rel=\"noreferrer\">clone</a> method.</p>\n\n<pre><code>y = _.clone(x);\n</code></pre>\n\n<p>or you can extend it like</p>\n\n<pre><code>copiedObject = _.extend({},originalObject);\n</code></pre>\n"},{"score":8,"body":"<p>This is an adaptation of A. Levy's code to also handle the cloning of functions and multiple/cyclic references - what this means is that if two properties in the tree which is cloned are references of the same object, the cloned object tree will have these properties point to one and the same clone of the referenced object. This also solves the case of cyclic dependencies which, if left unhandled, leads to an infinite loop. The complexity of the algorithm is O(n)</p>\n\n<pre><code>function clone(obj){\n    var clonedObjectsArray = [];\n    var originalObjectsArray = []; //used to remove the unique ids when finished\n    var next_objid = 0;\n\n    function objectId(obj) {\n        if (obj == null) return null;\n        if (obj.__obj_id == undefined){\n            obj.__obj_id = next_objid++;\n            originalObjectsArray[obj.__obj_id] = obj;\n        }\n        return obj.__obj_id;\n    }\n\n    function cloneRecursive(obj) {\n        if (null == obj || typeof obj == \"string\" || typeof obj == \"number\" || typeof obj == \"boolean\") return obj;\n\n        // Handle Date\n        if (obj instanceof Date) {\n            var copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n\n        // Handle Array\n        if (obj instanceof Array) {\n            var copy = [];\n            for (var i = 0; i &lt; obj.length; ++i) {\n                copy[i] = cloneRecursive(obj[i]);\n            }\n            return copy;\n        }\n\n        // Handle Object\n        if (obj instanceof Object) {\n            if (clonedObjectsArray[objectId(obj)] != undefined)\n                return clonedObjectsArray[objectId(obj)];\n\n            var copy;\n            if (obj instanceof Function)//Handle Function\n                copy = function(){return obj.apply(this, arguments);};\n            else\n                copy = {};\n\n            clonedObjectsArray[objectId(obj)] = copy;\n\n            for (var attr in obj)\n                if (attr != \"__obj_id\" &amp;&amp; obj.hasOwnProperty(attr))\n                    copy[attr] = cloneRecursive(obj[attr]);                 \n\n            return copy;\n        }       \n\n\n        throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n    }\n    var cloneObj = cloneRecursive(obj);\n\n\n\n    //remove the unique ids\n    for (var i = 0; i &lt; originalObjectsArray.length; i++)\n    {\n        delete originalObjectsArray[i].__obj_id;\n    };\n\n    return cloneObj;\n}\n</code></pre>\n\n<p>Some quick tests</p>\n\n<pre><code>var auxobj = {\n    prop1 : \"prop1 aux val\", \n    prop2 : [\"prop2 item1\", \"prop2 item2\"]\n    };\n\nvar obj = new Object();\nobj.prop1 = \"prop1_value\";\nobj.prop2 = [auxobj, auxobj, \"some extra val\", undefined];\nobj.nr = 3465;\nobj.bool = true;\n\nobj.f1 = function (){\n    this.prop1 = \"prop1 val changed by f1\";\n};\n\nobjclone = clone(obj);\n\n//some tests i've made\nconsole.log(\"test number, boolean and string cloning: \" + (objclone.prop1 == obj.prop1 &amp;&amp; objclone.nr == obj.nr &amp;&amp; objclone.bool == obj.bool));\n\nobjclone.f1();\nconsole.log(\"test function cloning 1: \" + (objclone.prop1 == 'prop1 val changed by f1'));\nobjclone.f1.prop = 'some prop';\nconsole.log(\"test function cloning 2: \" + (obj.f1.prop == undefined));\n\nobjclone.prop2[0].prop1 = \"prop1 aux val NEW\";\nconsole.log(\"test multiple references cloning 1: \" + (objclone.prop2[1].prop1 == objclone.prop2[0].prop1));\nconsole.log(\"test multiple references cloning 2: \" + (objclone.prop2[1].prop1 != obj.prop2[0].prop1));\n</code></pre>\n"},{"score":6,"body":"<pre><code>function clone(src, deep) {\n\n    var toString = Object.prototype.toString;\n    if(!src &amp;&amp; typeof src != \"object\"){\n        //any non-object ( Boolean, String, Number ), null, undefined, NaN\n        return src;\n    }\n\n    //Honor native/custom clone methods\n    if(src.clone &amp;&amp; toString.call(src.clone) == \"[object Function]\"){\n        return src.clone(deep);\n    }\n\n    //DOM Elements\n    if(src.nodeType &amp;&amp; toString.call(src.cloneNode) == \"[object Function]\"){\n        return src.cloneNode(deep);\n    }\n\n    //Date\n    if(toString.call(src) == \"[object Date]\"){\n        return new Date(src.getTime());\n    }\n\n    //RegExp\n    if(toString.call(src) == \"[object RegExp]\"){\n        return new RegExp(src);\n    }\n\n    //Function\n    if(toString.call(src) == \"[object Function]\"){\n        //Wrap in another method to make sure == is not true;\n        //Note: Huge performance issue due to closures, comment this :)\n        return (function(){\n            src.apply(this, arguments);\n        });\n\n    }\n\n    var ret, index;\n    //Array\n    if(toString.call(src) == \"[object Array]\"){\n        //[].slice(0) would soft clone\n        ret = src.slice();\n        if(deep){\n            index = ret.length;\n            while(index--){\n                ret[index] = clone(ret[index], true);\n            }\n        }\n    }\n    //Object\n    else {\n        ret = src.constructor ? new src.constructor() : {};\n        for (var prop in src) {\n            ret[prop] = deep\n                ? clone(src[prop], true)\n                : src[prop];\n        }\n    }\n\n    return ret;\n};\n</code></pre>\n"},{"score":6,"body":"<p>Since <a href=\"https://stackoverflow.com/users/49695/mindeavor\">mindeavor</a> stated that the object to be cloned is a 'literal-constructed' object, a solution might be to simply <em>generate</em> the object multiple times rather than cloning an instance of the object:</p>\n\n<pre><code>function createMyObject()\n{\n    var myObject =\n    {\n        ...\n    };\n    return myObject;\n}\n\nvar myObjectInstance1 = createMyObject();\nvar myObjectInstance2 = createMyObject();\n</code></pre>\n"},{"score":18,"body":"<p>Using Lodash: </p>\n\n<pre><code>var y = _.clone(x, true);\n</code></pre>\n"},{"score":2,"body":"<p>In my code I frequently define a <code>function (_)</code> to handle copies so that I can pass <code>by value</code> to functions. This code creates a deep copy but maintains inheritance. It also keeps track of sub-copies so that self-referential objects can be copied without an infinite loop. Feel free to use it.</p>\n\n<p>It might not be the most elegant, but it hasn't failed me yet.</p>\n\n<pre><code>_ = function(oReferance) {\n  var aReferances = new Array();\n  var getPrototypeOf = function(oObject) {\n    if(typeof(Object.getPrototypeOf)!==\"undefined\") return Object.getPrototypeOf(oObject);\n    var oTest = new Object();\n    if(typeof(oObject.__proto__)!==\"undefined\"&amp;&amp;typeof(oTest.__proto__)!==\"undefined\"&amp;&amp;oTest.__proto__===Object.prototype) return oObject.__proto__;\n    if(typeof(oObject.constructor)!==\"undefined\"&amp;&amp;typeof(oTest.constructor)!==\"undefined\"&amp;&amp;oTest.constructor===Object&amp;&amp;typeof(oObject.constructor.prototype)!==\"undefined\") return oObject.constructor.prototype;\n    return Object.prototype;\n  };\n  var recursiveCopy = function(oSource) {\n    if(typeof(oSource)!==\"object\") return oSource;\n    if(oSource===null) return null;\n    for(var i=0;i&lt;aReferances.length;i++) if(aReferances[i][0]===oSource) return aReferances[i][1];\n    var Copy = new Function();\n    Copy.prototype = getPrototypeOf(oSource);\n    var oCopy = new Copy();\n    aReferances.push([oSource,oCopy]);\n    for(sPropertyName in oSource) if(oSource.hasOwnProperty(sPropertyName)) oCopy[sPropertyName] = recursiveCopy(oSource[sPropertyName]);\n    return oCopy;\n  };\n  return recursiveCopy(oReferance);\n};\n\n// Examples:\nWigit = function(){};\nWigit.prototype.bInThePrototype = true;\nA = new Wigit();\nA.nCoolNumber = 7;\nB = _(A);\nB.nCoolNumber = 8; // A.nCoolNumber is still 7\nB.bInThePrototype // true\nB instanceof Wigit // true\n</code></pre>\n"},{"score":4,"body":"<p>Consult <a href=\"http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#safe-passing-of-structured-data\" rel=\"nofollow\">http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#safe-passing-of-structured-data</a> for the W3C's \"Safe passing of structured data\" algorithm, intended to be implemented by browsers for passing data to eg web workers. However, it has some limitations, in that it does not handle functions. See <a href=\"https://developer.mozilla.org/en-US/docs/DOM/The_structured_clone_algorithm\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/DOM/The_structured_clone_algorithm</a> for more information, including an alternative algorithm in JS which gets you part of the way there.</p>\n"},{"score":-2,"body":"<p>My favorite &amp; elegant JS objects <strong>clone</strong> solution is</p>\n\n<pre><code>function CloneObject() {}\nfunction cloneObject(o) {\n   CloneObject.prototype = o;\n   return new CloneObject();\n}\n</code></pre>\n\n<p>Use <code>cloneObject(object)</code> to get a clone of JS object.</p>\n\n<p>Unlike many <strong>copy</strong> solutions this clone keeps prototype relationship in cloned object.</p>\n"},{"score":0,"body":"<pre><code>//\n// creates 'clone' method on context object\n//\n//  var \n//     clon = Object.clone( anyValue );\n//\n!((function (propertyName, definition) {\n    this[propertyName] = definition();\n}).call(\n    Object,\n    \"clone\",\n    function () {\n        function isfn(fn) {\n            return typeof fn === \"function\";\n        }\n\n        function isobj(o) {\n            return o === Object(o);\n        }\n\n        function isarray(o) {\n            return Object.prototype.toString.call(o) === \"[object Array]\";\n        }\n\n        function fnclon(fn) {\n            return function () {\n                fn.apply(this, arguments);\n            };\n        }\n\n        function owns(obj, p) {\n            return obj.hasOwnProperty(p);\n        }\n\n        function isemptyobj(obj) {\n            for (var p in obj) {\n                return false;\n            }\n            return true;\n        }\n\n        function isObject(o) {\n            return Object.prototype.toString.call(o) === \"[object Object]\";\n        }\n        return function (input) {\n            if (isfn(input)) {\n                return fnclon(input);\n            } else if (isobj(input)) {\n                var cloned = {};\n                for (var p in input) {\n                    owns(Object.prototype, p)\n                    || (\n                        isfn(input[p])\n                        &amp;&amp; ( cloned[p] = function () { return input[p].apply(input, arguments); } )\n                        || ( cloned[p] = input[p] )\n                    );\n                }\n                if (isarray(input)) {\n                    cloned.length = input.length;\n                    \"concat every filter forEach indexOf join lastIndexOf map pop push reduce reduceRight reverse shift slice some sort splice toLocaleString toString unshift\"\n                    .split(\" \")\n                    .forEach(\n                      function (methodName) {\n                        isfn( Array.prototype[methodName] )\n                        &amp;&amp; (\n                            cloned[methodName] =\n                            function () {\n                                return Array.prototype[methodName].apply(cloned, arguments);\n                            }\n                        );\n                      }\n                    );\n                }\n                return isemptyobj(cloned)\n                       ? (\n                          isObject(input)\n                          ? cloned\n                          : input\n                        )\n                       : cloned;\n            } else {\n                return input;\n            }\n        };\n    }\n));\n//\n</code></pre>\n"},{"score":4,"body":"<h1>Structured Cloning</h1>\n\n<p>The HTML standard includes <a href=\"https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data\" rel=\"nofollow noreferrer\"><strong>an internal structured cloning/serialization algorithm</strong></a> that can create deep clones of objects. It is still limited to certain built-in types, but in addition to the few types supported by JSON it also supports Dates, RegExps, Maps, Sets, Blobs, FileLists, ImageDatas, sparse Arrays, Typed Arrays, and probably more in the future. It also preserves references within the cloned data, allowing it to support cyclical and recursive structures that would cause errors for JSON.</p>\n\n<h2>Support in Node.js: Experimental 🙂</h2>\n\n<p>The <code>v8</code> module in Node.js currently (as of Node 11) <a href=\"https://nodejs.org/api/all.html#v8_serialization_api\" rel=\"nofollow noreferrer\">exposes the structured serialization API directly</a>, but this functionality is still marked as \"experimental\", and subject to change or removal in future versions. If you're using a compatible version, cloning an object is as simple as:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const v8 = require('v8');\n\nconst structuredClone = obj =&gt; {\n  return v8.deserialize(v8.serialize(obj));\n};\n</code></pre>\n\n<h2>Direct Support in Browsers: Maybe Eventually? 😐</h2>\n\n<p>Browsers do not currently provide a direct interface for the structured cloning algorithm, but a global <code>structuredClone()</code> function has been discussed in <a href=\"https://github.com/whatwg/html/issues/793\" rel=\"nofollow noreferrer\">whatwg/html#793 on GitHub</a>. As currently proposed, using it for most purposes would be as simple as:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const clone = structuredClone(original);\n</code></pre>\n\n<p>Unless this is shipped, browsers' structured clone implementations are only exposed indirectly.</p>\n\n<h2>Asynchronous Workaround: Usable. 😕</h2>\n\n<p>The lower-overhead way to create a structured clone with existing APIs is to post the data through one port of a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\" rel=\"nofollow noreferrer\">MessageChannels</a>. The other port will emit a <code>message</code> event with a structured clone of the attached <code>.data</code>. Unfortunately, listening for these events is necessarily asynchronous, and the synchronous alternatives are less practical.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>class StructuredCloner {\n  constructor() {\n    this.pendingClones_ = new Map();\n    this.nextKey_ = 0;\n\n    const channel = new MessageChannel();\n    this.inPort_ = channel.port1;\n    this.outPort_ = channel.port2;\n\n    this.outPort_.onmessage = ({data: {key, value}}) =&gt; {\n      const resolve = this.pendingClones_.get(key);\n      resolve(value);\n      this.pendingClones_.delete(key);\n    };\n    this.outPort_.start();\n  }\n\n  cloneAsync(value) {\n    return new Promise(resolve =&gt; {\n      const key = this.nextKey_++;\n      this.pendingClones_.set(key, resolve);\n      this.inPort_.postMessage({key, value});\n    });\n  }\n}\n\nconst structuredCloneAsync = window.structuredCloneAsync =\n    StructuredCloner.prototype.cloneAsync.bind(new StructuredCloner);\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<pre class=\"lang-js prettyprint-override\"><code>const main = async () =&gt; {\n  const original = { date: new Date(), number: Math.random() };\n  original.self = original;\n\n  const clone = await structuredCloneAsync(original);\n\n  // They're different objects:\n  console.assert(original !== clone);\n  console.assert(original.date !== clone.date);\n\n  // They're cyclical:\n  console.assert(original.self === original);\n  console.assert(clone.self === clone);\n\n  // They contain equivalent values:\n  console.assert(original.number === clone.number);\n  console.assert(Number(original.date) === Number(clone.date));\n\n  console.log(\"Assertions complete.\");\n};\n\nmain();\n</code></pre>\n\n<h2>Synchronous Workarounds: Awful! 🤢</h2>\n\n<p>There are no good options for creating structured clones synchronously. Here are a couple of impractical hacks instead.</p>\n\n<p><code>history.pushState()</code> and <code>history.replaceState()</code> both create a structured clone of their first argument, and assign that value to <code>history.state</code>. You can use this to create a structured clone of any object like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const structuredClone = obj =&gt; {\n  const oldState = history.state;\n  history.replaceState(obj, null);\n  const clonedObj = history.state;\n  history.replaceState(oldState, null);\n  return clonedObj;\n};\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';\r\n\r\nconst main = () =&gt; {\r\n  const original = { date: new Date(), number: Math.random() };\r\n  original.self = original;\r\n\r\n  const clone = structuredClone(original);\r\n  \r\n  // They're different objects:\r\n  console.assert(original !== clone);\r\n  console.assert(original.date !== clone.date);\r\n\r\n  // They're cyclical:\r\n  console.assert(original.self === original);\r\n  console.assert(clone.self === clone);\r\n\r\n  // They contain equivalent values:\r\n  console.assert(original.number === clone.number);\r\n  console.assert(Number(original.date) === Number(clone.date));\r\n  \r\n  console.log(\"Assertions complete.\");\r\n};\r\n\r\nconst structuredClone = obj =&gt; {\r\n  const oldState = history.state;\r\n  history.replaceState(obj, null);\r\n  const clonedObj = history.state;\r\n  history.replaceState(oldState, null);\r\n  return clonedObj;\r\n};\r\n\r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Though synchronous, this can be extremely slow. It incurs all of the overhead associated with manipulating the browser history. Calling this method repeatedly can cause Chrome to become temporarily unresponsive.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notification/Notification\" rel=\"nofollow noreferrer\"><code>Notification</code> constructor</a> creates a structured clone of its associated data. It also attempts to display a browser notification to the user, but this will silently fail unless you have requested notification permission. In case you have the permission for other purposes, we'll immediately close the notification we've created.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const structuredClone = obj =&gt; {\n  const n = new Notification('', {data: obj, silent: true});\n  n.onshow = n.close.bind(n);\n  return n.data;\n};\n</code></pre>\n\n<h3>Example Use:</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'use strict';\r\n\r\nconst main = () =&gt; {\r\n  const original = { date: new Date(), number: Math.random() };\r\n  original.self = original;\r\n\r\n  const clone = structuredClone(original);\r\n  \r\n  // They're different objects:\r\n  console.assert(original !== clone);\r\n  console.assert(original.date !== clone.date);\r\n\r\n  // They're cyclical:\r\n  console.assert(original.self === original);\r\n  console.assert(clone.self === clone);\r\n\r\n  // They contain equivalent values:\r\n  console.assert(original.number === clone.number);\r\n  console.assert(Number(original.date) === Number(clone.date));\r\n  \r\n  console.log(\"Assertions complete.\");\r\n};\r\n\r\nconst structuredClone = obj =&gt; {\r\n  const n = new Notification('', {data: obj, silent: true});\r\n  n.close();\r\n  return n.data;\r\n};\r\n\r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":-4,"body":"<pre><code>function clone(obj)\n{\n    var cloneObj = Object.create(obj);\n\n    return cloneObj;\n}\n</code></pre>\n\n<p>In Javascript objects individually inherit another object (Prototypal inheritance). Object.create(obj) returns an object that is a sub-object or child object of obj. In the above function it will effectively return a copy of the object.</p>\n\n<p>However, This is a very odd way to clone because I am not using inheritance for its real purpose.</p>\n"},{"score":0,"body":"<p>I came to this page due to the same question but I'm neither using JQuery and none of the clone-Methods worked for my own objects.</p>\n\n<p>I'm aware my answer isn't related too strong to this question because it's a different approach. Instead of using clone-functions I use a create function. It worked for me for the following (unfortunately restricting) purposes:</p>\n\n<ol>\n<li>I use mostly JSP-generated Javascript</li>\n<li>I know in the beginning which Object must be generated (In my case it's Information from a Database which gets fetched once and needs to be deployed more often in the JS.</li>\n</ol>\n\n<p>First I defined my Objects like this:</p>\n\n<pre><code>var obj= new Object();\nobj.Type='Row';\nobj.ID=1;\nobj.Value='Blah blah';\n</code></pre>\n\n<p>Now I moved everything like:</p>\n\n<pre><code>function getObjSelektor(id_nummer,selected){\nvar obj = document.createElement(\"select\");\nobj.setAttribute(\"id\",\"Selektor_\"+id_nummer);\nobj.setAttribute(\"name\",\"Selektor\");\nobj.setAttribute(\"size\",\"1\");\n\nvar obj_opt_1 = document.createElement(\"option\");\nobj_opt_1.setAttribute(\"value\",\"1\");\nif(1==selected)\n    posopval_opt_1.setAttribute(\"selected\",\"selected\");\nobj_opt_1.innerHTML=\"Blah blah\";\nobj.appendChild(obj_opt_1);\n\nvar obj_opt_2 = document.createElement(\"option\");\nobj_opt_2.setAttribute(\"value\",\"2\");\nif(2==selected)\n    obj_opt_2.setAttribute(\"selected\",\"selected\");\nobj_opt_2.innerHTML=\"2nd Row\";\nobj.appendChild(obj_opt_2);\n\n...\n\nreturn obj;\n}\n</code></pre>\n\n<p>And call the function in the regular code:</p>\n\n<pre><code>myDiv.getObjSelektor(getObjSelektor(anotherObject.ID));\n</code></pre>\n\n<p>As said this is a different approach which solved my issue for my purposes. </p>\n"},{"score":0,"body":"<p>If you got an Object with Functions you can do it with JSONfn, see <a href=\"http://www.eslinstructor.net/jsonfn/\" rel=\"nofollow\">http://www.eslinstructor.net/jsonfn/</a>.</p>\n\n<pre><code>var obj= {\n    name:'Marvin',\n    getName :  function(){\n      return this.name;\n    }\n}\nvar cobj = JSONfn.parse(JSONfn.stringify(obj));\n</code></pre>\n"},{"score":3,"body":"<p>You can use functional closure to gain all the benefits of a deep copy, without a deep copy. It's a very different paradigm, but works well. Instead of trying to copy an existing object, just use a function to instantiate a new object when you need one.</p>\n\n<p>First, create an function that returns an object</p>\n\n<pre><code>function template() {\n  return {\n    values: [1, 2, 3],\n    nest: {x: {a: \"a\", b: \"b\"}, y: 100}\n  };\n}\n</code></pre>\n\n<p>Then create a simple shallow copy function</p>\n\n<pre><code>function copy(a, b) {\n  Object.keys(b).forEach(function(key) {\n    a[key] = b[key];\n  });\n}\n</code></pre>\n\n<p>Create a new object, and copy the template's properties onto it</p>\n\n<pre><code>var newObject = {}; \ncopy(newObject, template());\n</code></pre>\n\n<p>But the above copy step is not necessary. All you need to do is this:</p>\n\n<pre><code>var newObject = template();\n</code></pre>\n\n<p>Now that you have a new object, test to see what its properties are:</p>\n\n<pre><code>console.log(Object.keys(newObject));\n</code></pre>\n\n<p>This displays:</p>\n\n<pre><code>[\"values\", \"nest\"]\n</code></pre>\n\n<p>Yes, those are the newObject's own properties, not references to properties on another object.\nLet's just check:</p>\n\n<pre><code>console.log(newObject.nest.x.b);\n</code></pre>\n\n<p>This displays:</p>\n\n<pre><code>\"b\"\n</code></pre>\n\n<p>The newObject has acquired all of the template object's properties, but is free of any dependency chain.</p>\n\n<p><a href=\"http://jsbin.com/ISUTIpoC/1/edit?js,console\" rel=\"nofollow\">http://jsbin.com/ISUTIpoC/1/edit?js,console</a></p>\n\n<p>I added this example to encourage some debate, so please add some comments :)</p>\n"},{"score":0,"body":"<p>The problem with copying an object that, eventually, may point at itself, can be solved with a simple check. Add this check, every time there is a copy action. It may be <strong>slow</strong>, but it <em>should</em> work.</p>\n\n<p>I use a <strong>toType()</strong> function to return the object type, explicitly. I also have my own <strong>copyObj()</strong> function, which is rather similar in logic, which answers all three Object(), Array(), and Date() cases.</p>\n\n<p>I run it in NodeJS.</p>\n\n<p><strong>NOT TESTED, YET.</strong></p>\n\n<pre><code>// Returns true, if one of the parent's children is the target.\n// This is useful, for avoiding copyObj() through an infinite loop!\nfunction isChild(target, parent) {\n  if (toType(parent) == '[object Object]') {\n    for (var name in parent) {\n      var curProperty = parent[name];\n\n      // Direct child.\n      if (curProperty = target) return true;\n\n      // Check if target is a child of this property, and so on, recursively.\n      if (toType(curProperty) == '[object Object]' || toType(curProperty) == '[object Array]') {\n        if (isChild(target, curProperty)) return true;\n      }\n    }\n  } else if (toType(parent) == '[object Array]') {\n    for (var i=0; i &lt; parent.length; i++) {\n      var curItem = parent[i];\n\n      // Direct child.\n      if (curItem = target) return true;\n\n      // Check if target is a child of this property, and so on, recursively.\n      if (toType(curItem) == '[object Object]' || toType(curItem) == '[object Array]') {\n        if (isChild(target, curItem)) return true;\n      }\n    }\n  }\n\n  return false;     // Not the target.\n}\n</code></pre>\n"},{"score":90,"body":"<p>There are several issues with most solutions on the internet. So I decided to make a follow-up, which includes, why the accepted answer shouldn't be accepted.</p>\n\n<h2>starting situation</h2>\n\n<p>I want to <strong>deep-copy</strong> a Javascript <code>Object</code> with all of its children and their children and so on. But since I'm not kind of a normal developer, my <code>Object</code> has <em>normal</em> <code>properties</code>, <code>circular structures</code> and even <code>nested objects</code>.</p>\n\n<p>So let's create a <code>circular structure</code> and a <code>nested object</code> first.</p>\n\n<pre><code>function Circ() {\n    this.me = this;\n}\n\nfunction Nested(y) {\n    this.y = y;\n}\n</code></pre>\n\n<p>Let's bring everything together in an <code>Object</code> named <code>a</code>.</p>\n\n<pre><code>var a = {\n    x: 'a',\n    circ: new Circ(),\n    nested: new Nested('a')\n};\n</code></pre>\n\n<p>Next, we want to copy <code>a</code> into a variable named <code>b</code> and mutate it.</p>\n\n<pre><code>var b = a;\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>You know what happened here because if not you wouldn't even land on this great question.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n</code></pre>\n\n<p>Now let's find a solution.</p>\n\n<h2>JSON</h2>\n\n<p>The first attempt I tried was using <code>JSON</code>.</p>\n\n<pre><code>var b = JSON.parse( JSON.stringify( a ) );\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>Don't waste too much time on it, you'll get <code>TypeError: Converting circular structure to JSON</code>.</p>\n\n<h2>Recursive copy <em>(the accepted \"answer\")</em></h2>\n\n<p>Let's have a look at the accepted answer.</p>\n\n<pre><code>function cloneSO(obj) {\n    // Handle the 3 simple types, and null or undefined\n    if (null == obj || \"object\" != typeof obj) return obj;\n\n    // Handle Date\n    if (obj instanceof Date) {\n        var copy = new Date();\n        copy.setTime(obj.getTime());\n        return copy;\n    }\n\n    // Handle Array\n    if (obj instanceof Array) {\n        var copy = [];\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\n            copy[i] = cloneSO(obj[i]);\n        }\n        return copy;\n    }\n\n    // Handle Object\n    if (obj instanceof Object) {\n        var copy = {};\n        for (var attr in obj) {\n            if (obj.hasOwnProperty(attr)) copy[attr] = cloneSO(obj[attr]);\n        }\n        return copy;\n    }\n\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\n}\n</code></pre>\n\n<p>Looks good, heh? It's a recursive copy of the object and handles other types as well, like <code>Date</code>, but that wasn't a requirement.</p>\n\n<pre><code>var b = cloneSO(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>Recursion and <code>circular structures</code> doesn't work well together... <code>RangeError: Maximum call stack size exceeded</code></p>\n\n<h2>native solution</h2>\n\n<p>After arguing with my co-worker, my boss asked us what happened, and he found a simple <em>solution</em> after some googling. It's called <code>Object.create</code>.</p>\n\n<pre><code>var b = Object.create(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>This solution was added to Javascript some time ago and even handles <code>circular structure</code>.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n</code></pre>\n\n<p>... and you see, it didn't work with the nested structure inside.</p>\n\n<h2>polyfill for the native solution</h2>\n\n<p>There's a polyfill for <code>Object.create</code> in the older browser just like the IE 8. It's something like recommended by Mozilla, and of course, it's not perfect and results in the same problem as the <em>native solution</em>.</p>\n\n<pre><code>function F() {};\nfunction clonePF(o) {\n    F.prototype = o;\n    return new F();\n}\n\nvar b = clonePF(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>I've put <code>F</code> outside the scope so we can have a look at what <code>instanceof</code> tells us.</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nb --&gt; F {\n    x: \"b\",\n    circ: Circ {\n        me: Circ { ... }\n    },\n    nested: Nested {\n        y: \"b\"\n    }\n}\n\nconsole.log(typeof a, typeof b);\n\na --&gt; object\nb --&gt; object\n\nconsole.log(a instanceof Object, b instanceof Object);\n\na --&gt; true\nb --&gt; true\n\nconsole.log(a instanceof F, b instanceof F);\n\na --&gt; false\nb --&gt; true\n</code></pre>\n\n<p>Same problem as the <em>native solution</em>, but a little bit worse output.</p>\n\n<h2>the better (but not perfect) solution</h2>\n\n<p>When digging around, I found a similar question (<a href=\"https://stackoverflow.com/questions/10728412/in-javascript-when-performing-a-deep-copy-how-do-i-avoid-a-cycle-due-to-a-pro\">In Javascript, when performing a deep copy, how do I avoid a cycle, due to a property being &quot;this&quot;?</a>) to this one, but with a way better solution.</p>\n\n<pre><code>function cloneDR(o) {\n    const gdcc = \"__getDeepCircularCopy__\";\n    if (o !== Object(o)) {\n        return o; // primitive value\n    }\n\n    var set = gdcc in o,\n        cache = o[gdcc],\n        result;\n    if (set &amp;&amp; typeof cache == \"function\") {\n        return cache();\n    }\n    // else\n    o[gdcc] = function() { return result; }; // overwrite\n    if (o instanceof Array) {\n        result = [];\n        for (var i=0; i&lt;o.length; i++) {\n            result[i] = cloneDR(o[i]);\n        }\n    } else {\n        result = {};\n        for (var prop in o)\n            if (prop != gdcc)\n                result[prop] = cloneDR(o[prop]);\n            else if (set)\n                result[prop] = cloneDR(cache);\n    }\n    if (set) {\n        o[gdcc] = cache; // reset\n    } else {\n        delete o[gdcc]; // unset again\n    }\n    return result;\n}\n\nvar b = cloneDR(a);\n\nb.x = 'b';\nb.nested.y = 'b';\n</code></pre>\n\n<p>And let's have a look at the output...</p>\n\n<pre><code>console.log(a, b);\n\na --&gt; Object {\n    x: \"a\",\n    circ: Object {\n        me: Object { ... }\n    },\n    nested: Object {\n        y: \"a\"\n    }\n}\n\nb --&gt; Object {\n    x: \"b\",\n    circ: Object {\n        me: Object { ... }\n    },\n    nested: Object {\n        y: \"b\"\n    }\n}\n\nconsole.log(typeof a, typeof b);\n\na --&gt; object\nb --&gt; object\n\nconsole.log(a instanceof Object, b instanceof Object);\n\na --&gt; true\nb --&gt; true\n\nconsole.log(a instanceof F, b instanceof F);\n\na --&gt; false\nb --&gt; false\n</code></pre>\n\n<p>The requirements are matched, but there are still some smaller issues, including changing the <code>instance</code> of <code>nested</code> and <code>circ</code> to <code>Object</code>.</p>\n\n<blockquote>\n  <p>The structure of trees that share a leaf won't be copied, they will become two independent leaves:</p>\n</blockquote>\n\n<pre><code>        [Object]                     [Object]\n         /    \\                       /    \\\n        /      \\                     /      \\\n      |/_      _\\|                 |/_      _\\|  \n  [Object]    [Object]   ===&gt;  [Object]    [Object]\n       \\        /                 |           |\n        \\      /                  |           |\n        _\\|  |/_                 \\|/         \\|/\n        [Object]               [Object]    [Object]\n</code></pre>\n\n<h2>conclusion</h2>\n\n<p>The last solution using recursion and a cache, may not be the best, but it's a <strong>real</strong> deep-copy of the object. It handles simple <code>properties</code>, <code>circular structures</code> and <code>nested object</code>, but it will mess up the instance of them while cloning.</p>\n\n<p><a href=\"http://jsfiddle.net/einfallstoll/N4mr2/\" rel=\"noreferrer\">jsfiddle</a></p>\n"},{"score":27,"body":"<p>For those using AngularJS, there is also direct method for cloning or extending of the objects in this library.</p>\n\n<pre><code>var destination = angular.copy(source);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>angular.copy(source, destination);\n</code></pre>\n\n<p>More in angular.copy <a href=\"https://docs.angularjs.org/api/ng/function/angular.copy\">documentation</a>...</p>\n"},{"score":2,"body":"<p>I've tried this in the case of a scalar object and it works for me:</p>\n\n<pre><code>function binder(i) {\n  return function () {\n    return i;\n  };\n}\n\na=1;\nb=binder(a)(); // copy value of a into b\n\nalert(++a); // 2\nalert(b); // still 1\n</code></pre>\n\n<p>Regards.</p>\n"},{"score":6,"body":"<p>I've written my own implementation. Not sure if it counts as a better solution:</p>\n\n<pre><code>/*\n    a function for deep cloning objects that contains other nested objects and circular structures.\n    objects are stored in a 3D array, according to their length (number of properties) and their depth in the original object.\n                                    index (z)\n                                         |\n                                         |\n                                         |\n                                         |\n                                         |\n                                         |                      depth (x)\n                                         |_ _ _ _ _ _ _ _ _ _ _ _\n                                        /_/_/_/_/_/_/_/_/_/\n                                       /_/_/_/_/_/_/_/_/_/\n                                      /_/_/_/_/_/_/...../\n                                     /................./\n                                    /.....            /\n                                   /                 /\n                                  /------------------\n            object length (y)    /\n*/\n</code></pre>\n\n<p>Following is the implementation:</p>\n\n<pre><code>function deepClone(obj) {\n    var depth = -1;\n    var arr = [];\n    return clone(obj, arr, depth);\n}\n\n/**\n *\n * @param obj source object\n * @param arr 3D array to store the references to objects\n * @param depth depth of the current object relative to the passed 'obj'\n * @returns {*}\n */\nfunction clone(obj, arr, depth){\n    if (typeof obj !== \"object\") {\n        return obj;\n    }\n\n    var length = Object.keys(obj).length; // native method to get the number of properties in 'obj'\n\n    var result = Object.create(Object.getPrototypeOf(obj)); // inherit the prototype of the original object\n    if(result instanceof Array){\n        result.length = length;\n    }\n\n    depth++; // depth is increased because we entered an object here\n\n    arr[depth] = []; // this is the x-axis, each index here is the depth\n    arr[depth][length] = []; // this is the y-axis, each index is the length of the object (aka number of props)\n    // start the depth at current and go down, cyclic structures won't form on depths more than the current one\n    for(var x = depth; x &gt;= 0; x--){\n        // loop only if the array at this depth and length already have elements\n        if(arr[x][length]){\n            for(var index = 0; index &lt; arr[x][length].length; index++){\n                if(obj === arr[x][length][index]){\n                    return obj;\n                }\n            }\n        }\n    }\n\n    arr[depth][length].push(obj); // store the object in the array at the current depth and length\n    for (var prop in obj) {\n        if (obj.hasOwnProperty(prop)) result[prop] = clone(obj[prop], arr, depth);\n    }\n\n    return result;\n}\n</code></pre>\n"},{"score":3,"body":"<p>Clone an object based on a <code>template</code>. What do you do if you don't want an exact copy, but you do want the robustness of some kind of reliable clone operation but you only want bits cloned or you want to make sure you can control the existence or format of each attribute value cloned?</p>\n\n<p>I am contributing this because it's useful for us and we created it because we could not find something similar. You can use it to clone an object based on a <code>template</code> object which specifies what attributes of the object I want to clone, and the template allows for functions to transform those attributes into something different if they don't exist on the source object or however you want to handle the clone. If it's not useful I am sure someone can delete this answer.</p>\n\n<pre><code>   function isFunction(functionToCheck) {\n       var getType = {};\n       return functionToCheck &amp;&amp; getType.toString.call(functionToCheck) === '[object Function]';\n   }\n\n   function cloneObjectByTemplate(obj, tpl, cloneConstructor) {\n       if (typeof cloneConstructor === \"undefined\") {\n           cloneConstructor = false;\n       }\n       if (obj == null || typeof (obj) != 'object') return obj;\n\n       //if we have an array, work through it's contents and apply the template to each item...\n       if (Array.isArray(obj)) {\n           var ret = [];\n           for (var i = 0; i &lt; obj.length; i++) {\n               ret.push(cloneObjectByTemplate(obj[i], tpl, cloneConstructor));\n           }\n           return ret;\n       }\n\n       //otherwise we have an object...\n       //var temp:any = {}; // obj.constructor(); // we can't call obj.constructor because typescript defines this, so if we are dealing with a typescript object it might reset values.\n       var temp = cloneConstructor ? new obj.constructor() : {};\n\n       for (var key in tpl) {\n           //if we are provided with a function to determine the value of this property, call it...\n           if (isFunction(tpl[key])) {\n               temp[key] = tpl[key](obj); //assign the result of the function call, passing in the value\n           } else {\n               //if our object has this property...\n               if (obj[key] != undefined) {\n                   if (Array.isArray(obj[key])) {\n                       temp[key] = [];\n                       for (var i = 0; i &lt; obj[key].length; i++) {\n                           temp[key].push(cloneObjectByTemplate(obj[key][i], tpl[key], cloneConstructor));\n                       }\n                   } else {\n                       temp[key] = cloneObjectByTemplate(obj[key], tpl[key], cloneConstructor);\n                   }\n               }\n           }\n       }\n\n       return temp;\n   }\n</code></pre>\n\n<p>A simple way to call it would be like this:</p>\n\n<pre><code>var source = {\n       a: \"whatever\",\n       b: {\n           x: \"yeah\",\n           y: \"haha\"\n       }\n   };\n   var template = {\n       a: true, //we want to clone \"a\"\n       b: {\n           x: true //we want to clone \"b.x\" too\n       }\n   }; \n   var destination = cloneObjectByTemplate(source, template);\n</code></pre>\n\n<p>If you wanted to use a function to make sure an attribute is returned or to make sure it's a particular type, use a template like this. Instead of using <code>{ ID: true }</code> we are providing a function which still just copies the <code>ID attribute</code> of the source object but it makes sure that it's a number even if it does not exist on the source object.</p>\n\n<pre><code> var template = {\n    ID: function (srcObj) {\n        if(srcObj.ID == undefined){ return -1; }\n        return parseInt(srcObj.ID.toString());\n    }\n}\n</code></pre>\n\n<p>Arrays will clone fine but if you want to you can have your own function handle those individual attributes too, and do something special like this:</p>\n\n<pre><code> var template = {\n    tags: function (srcObj) {\n        var tags = [];\n        if (process.tags != undefined) {\n            for (var i = 0; i &lt; process.tags.length; i++) {\n\n                tags.push(cloneObjectByTemplate(\n                  srcObj.tags[i],\n                  { a : true, b : true } //another template for each item in the array\n                );\n            }\n        }\n        return tags;\n    }\n }\n</code></pre>\n\n<p>So in the above, our template just copies the <code>tags</code> attribute of the source object if it exists, (it's assumed to be an array), and for each element in that array the clone function is called to individually clone it based on a second template which just copies the <code>a</code> and <code>b</code> attributes of each of those tag elements. </p>\n\n<p>If you are taking objects in and out of node and you want to control which attributes of those objects are cloned then this is a great way of controlling that in <code>node.js</code> and the code works in the browser too.</p>\n\n<p>Here is an example of it's use: <a href=\"http://jsfiddle.net/hjchyLt1/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/hjchyLt1/</a></p>\n"},{"score":718,"body":"<p>In ECMAScript 6 there is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\">Object.assign</a> method, which copies values of all enumerable own properties from one object to another. For example:</p>\n\n<pre><code>var x = {myProp: \"value\"};\nvar y = Object.assign({}, x); \n</code></pre>\n\n<p>But be aware that nested objects are still copied as reference.</p>\n"},{"score":16,"body":"<p>Interested in cloning simple objects:</p>\n\n<p><code>JSON.parse(JSON.stringify(json_original));</code></p>\n\n<p>Source : <a href=\"https://stackoverflow.com/questions/18359093/how-to-copy-javascript-object-to-new-variable-not-by-reference?answertab=votes#tab-top\">How to copy JavaScript object to new variable NOT by reference?</a></p>\n"},{"score":135,"body":"<h1>An elegant way to clone a Javascript object in one line of code</h1>\n<p>An <code>Object.assign</code> method is part of the ECMAScript 2015 (ES6) standard and does exactly what you need.</p>\n<pre><code>var clone = Object.assign({}, obj);\n</code></pre>\n<blockquote>\n<p>The Object.assign() method is used to copy the values of all enumerable own properties from one or more source objects to a target object.</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"noreferrer\">Read more...</a></p>\n<p>The <strong>polyfill</strong> to support older browsers:</p>\n<pre><code>if (!Object.assign) {\n  Object.defineProperty(Object, 'assign', {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: function(target) {\n      'use strict';\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert first argument to object');\n      }\n\n      var to = Object(target);\n      for (var i = 1; i &lt; arguments.length; i++) {\n        var nextSource = arguments[i];\n        if (nextSource === undefined || nextSource === null) {\n          continue;\n        }\n        nextSource = Object(nextSource);\n\n        var keysArray = Object.keys(nextSource);\n        for (var nextIndex = 0, len = keysArray.length; nextIndex &lt; len; nextIndex++) {\n          var nextKey = keysArray[nextIndex];\n          var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);\n          if (desc !== undefined &amp;&amp; desc.enumerable) {\n            to[nextKey] = nextSource[nextKey];\n          }\n        }\n      }\n      return to;\n    }\n  });\n}\n</code></pre>\n"},{"score":36,"body":"<p>You can simply use a <a href=\"https://github.com/sebmarkbage/ecmascript-rest-spread/blob/master/Spread.md\" rel=\"noreferrer\">spread property</a> to copy an object without references. But be careful (see comments), the 'copy' is just on the lowest object/array level. Nested properties are still references!</p>\n\n<hr>\n\n<p><strong>Complete clone:</strong></p>\n\n<pre><code>let x = {a: 'value1'}\nlet x2 = {...x}\n\n// =&gt; mutate without references:\n\nx2.a = 'value2'\nconsole.log(x.a)    // =&gt; 'value1'\n</code></pre>\n\n<p><strong>Clone with references on second level:</strong></p>\n\n<pre><code>const y = {a: {b: 'value3'}}\nconst y2 = {...y}\n\n// =&gt; nested object is still a references:\n\ny2.a.b = 'value4'\nconsole.log(y.a.b)    // =&gt; 'value4'\n</code></pre>\n\n<hr>\n\n<p>JavaScript actually does not support deep clones natively. Use an utility function. For example Ramda:</p>\n\n<blockquote>\n  <p><a href=\"http://ramdajs.com/docs/#clone\" rel=\"noreferrer\">http://ramdajs.com/docs/#clone</a></p>\n</blockquote>\n"},{"score":0,"body":"<p>To handle circular objects that that <code>JSON.stringify</code> can't handle, you can bring in a library called <a href=\"https://github.com/jsog/jsog\" rel=\"nofollow\">JSOG</a>, that serializes and deserializes arbitrary graphs into JSON format. </p>\n\n<pre><code>var clone = JSOG.parse(JSOG.stringify(original));\n</code></pre>\n\n<p>It might also be interesting to try patching JSOG for cloning with this trick (don't have time at the moment, but if someone wants to give it a shot...):</p>\n\n<p>Serialize a simple function : </p>\n\n<pre><code>foo.f = function(a) { return a }\nvar stringForm = foo.f.toString() // \"function (a) { return a }\"\n</code></pre>\n\n<p>Deserialize a function :</p>\n\n<pre><code>eval(\"foo.f = \" + stringForm)\n</code></pre>\n\n<p>Some conventions (probably in the name of the property) to identify functions vs regular strings would be needed (<code>@func_f</code> perhaps). </p>\n\n<p>Of course if the function calls a second function the second function will need to exist just as it would for the original.</p>\n\n<p>The above however is quite dangerous if you are to accept the serialized form from an untrusted source, but then accepting any function in any form from an untrusted source would be dangerous, so if you're interested in cloning functions trust must have already been established (or you're already intent on writing a security flaw!).</p>\n\n<p><strong>Disclaimer:</strong> I have not tested the speed of JSOG stringify/parse vs JSON stringify/parse, but It does work on the simple (circular) objects I tested it with.</p>\n"},{"score":4,"body":"<p>Use <code>deepcopy</code> from <code>npm</code>.  Works in both the browser and in <code>node</code> as an <code>npm module...</code></p>\n\n<p><a href=\"https://www.npmjs.com/package/deepcopy\" rel=\"nofollow noreferrer\">https://www.npmjs.com/package/deepcopy</a></p>\n\n<p><code>let a = deepcopy(b)</code></p>\n"},{"score":3,"body":"<p>I think, that <strong>recurrence with caching</strong> is the best what we can do it here without libraries.</p>\n\n<p>And underestimated <strong>WeakMap</strong> comes to the problem of cycles, wherein storing  pairs of references to old and new object can help us to recreate pretty easily whole tree.</p>\n\n<p>I prevented deep cloning of the DOM elements, probably you don't want to clone entire page :)</p>\n\n<pre><code>function deepCopy(object) {\n    const cache = new WeakMap(); // Map of old - new references\n\n    function copy(obj) {\n        if (typeof obj !== 'object' ||\n            obj === null ||\n            obj instanceof HTMLElement\n        )\n            return obj; // primitive value or HTMLElement\n\n        if (obj instanceof Date) \n            return new Date().setTime(obj.getTime());\n\n        if (obj instanceof RegExp) \n            return new RegExp(obj.source, obj.flags);\n\n        if (cache.has(obj)) \n            return cache.get(obj);\n\n        const result = obj instanceof Array ? [] : {};\n\n        cache.set(obj, result); // store reference to object before the recursive starts\n\n        if (obj instanceof Array) {\n            for(const o of obj) {\n                 result.push(copy(o));\n            }\n            return result;\n        }\n\n        const keys = Object.keys(obj); \n\n        for (const key of keys)\n            result[key] = copy(obj[key]);\n\n        return result;\n    }\n\n    return copy(object);\n}\n</code></pre>\n\n<p>Some tests:</p>\n\n<pre><code>// #1\nconst obj1 = { };\nconst obj2 = { };\nobj1.obj2 = obj2;\nobj2.obj1 = obj1; // Trivial circular reference\n\nvar copy = deepCopy(obj1);\ncopy == obj1 // false\ncopy.obj2 === obj1.obj2 // false\ncopy.obj2.obj1.obj2 // and so on - no error (correctly cloned).\n\n// #2\nconst obj = { x: 0 }\nconst clone = deepCopy({ a: obj, b: obj });\nclone.a == clone.b // true\n\n// #3\nconst arr = [];\narr[0] = arr; // A little bit weird but who cares\nclone = deepCopy(arr)\nclone == arr // false;\nclone[0][0][0][0] == clone // true;\n</code></pre>\n\n<p>NOTE: I'm using constants, for of loop, => operator and WeakMaps to create more essential code. This syntax (ES6) is supported by today's browsers</p>\n"},{"score":257,"body":"<p>Per <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Deep_Clone\" rel=\"noreferrer\">MDN</a>:</p>\n\n<ul>\n<li>If you want shallow copy, use <code>Object.assign({}, a)</code></li>\n<li>For \"deep\" copy, use <code>JSON.parse(JSON.stringify(a))</code></li>\n</ul>\n\n<p>There is no need for external libraries but you need to check <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility\" rel=\"noreferrer\">browser compatibility first</a>.</p>\n"},{"score":13,"body":"<p>New answer to an old question!  If you have the pleasure of having using ECMAScript 2016 (ES6) with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"noreferrer\">Spread Syntax</a>, it's easy.</p>\n\n<pre><code>keepMeTheSame = {first: \"Me!\", second: \"You!\"};\ncloned = {...keepMeTheSame}\n</code></pre>\n\n<p>This provides a clean method for a shallow copy of an object.  Making a deep copy, meaning makign a new copy of every value in every recursively nested object, requires on of the heavier solutions above.</p>\n\n<p>JavaScript keeps evolving.</p>\n"},{"score":1,"body":"<p>Ok so this might be the very best option for shallow copying.  If follows the many examples using assign, but it also keeps the inheritance and prototype. It's so simple too and works for most array-like and Objects except those with constructor requirements or read-only properties. But that means it fails miserably for TypedArrays, RegExp, Date, Maps, Sets and Object versions of primitives (Boolean, String, etc..).</p>\n\n<pre><code>function copy ( a ) { return Object.assign( new a.constructor, a ) }\n</code></pre>\n\n<p>Where <code>a</code> can be any Object or class constructed instance, but again not be reliable for thingies that use specialized getters and setters or have constructor requirements, but for more simple situations it rocks.  It does work on arguments as well.  </p>\n\n<p>You can also apply it to primitives to get strange results, but then...  unless it just ends up being a useful hack, who cares.</p>\n\n<p>results from basic built-in Object and Array...</p>\n\n<pre><code>&gt; a = { a: 'A', b: 'B', c: 'C', d: 'D' }\n{ a: 'A', b: 'B', c: 'C', d: 'D' }\n&gt; b = copy( a )\n{ a: 'A', b: 'B', c: 'C', d: 'D' }\n&gt; a = [1,2,3,4]\n[ 1, 2, 3, 4 ]\n&gt; b = copy( a )\n[ 1, 2, 3, 4 ]\n</code></pre>\n\n<p>And fails because of mean get/setters, constructor required arguments or read-only properties, and sins against the father.</p>\n\n<pre><code>&gt; a = /\\w+/g\n/\\w+/g\n&gt; b = copy( a )  // fails because source and flags are read-only\n/(?:)/\n&gt; a = new Date ( '1/1/2001' )\n2000-12-31T16:00:00.000Z\n&gt; b = copy( a )  // fails because Date using methods to get and set things\n2017-02-04T14:44:13.990Z\n&gt; a = new Boolean( true )\n[Boolean: true]\n&gt; b = copy( a )  // fails because of of sins against the father\n[Boolean: false]\n&gt; a = new Number( 37 )\n[Number: 37]\n&gt; b = copy( a )  // fails because of of sins against the father\n[Number: 0]\n&gt; a = new String( 'four score and seven years ago our four fathers' )\n[String: 'four score and seven years ago our four fathers']\n&gt; b = copy( a )  // fails because of of sins against the father\n{ [String: ''] '0': 'f', '1': 'o', '2': 'u', '3': 'r', '4': ' ', '5': 's', '6': 'c', '7': 'o', '8': 'r', '9': 'e', '10': ' ', '11': 'a', '12': 'n', '13': 'd', '14': ' ', '15': 's', '16': 'e', '17': 'v', '18': 'e', '19': 'n', '20': ' ', '21': 'y', '22': 'e', '23': 'a', '24': 'r', '25': 's', '26': ' ', '27': 'a', '28': 'g', '29': 'o', '30': ' ', '31': 'o', '32': 'u', '33': 'r', '34': ' ', '35': 'f', '36': 'o', '37': 'u', '38': 'r', '39': ' ', '40': 'f', '41': 'a', '42': 't', '43': 'h', '44': 'e', '45': 'r', '46': 's' } \n</code></pre>\n"},{"score":20,"body":"<p>In ES-6 you can simply use Object.assign(...).\nEx:</p>\n\n<pre><code>let obj = {person: 'Thor Odinson'};\nlet clone = Object.assign({}, obj);\n</code></pre>\n\n<p>A good reference is here:\n<a href=\"https://googlechrome.github.io/samples/object-assign-es6/\" rel=\"noreferrer\">https://googlechrome.github.io/samples/object-assign-es6/</a></p>\n"},{"score":12,"body":"<pre><code>let clone = Object.assign( Object.create( Object.getPrototypeOf(obj)), obj)\n</code></pre>\n\n<p>ES6 solution if you want to (shallow) clone a <strong>class instance</strong> and not just a property object.</p>\n"},{"score":-1,"body":"<p>Ok, I know it has many answers, but no one pointed out, EcmaScript5 has assign method, work on FF and Chrome, it copies enumerable and own properties and  Symbols.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\" rel=\"nofollow noreferrer\">Object Assign</a></p>\n"},{"score":67,"body":"<p><strong>OK,</strong> imagine you have this object below and you want to clone it:</p>\n\n<pre><code>let obj = {a:1, b:2, c:3}; //ES6\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var obj = {a:1, b:2, c:3}; //ES5\n</code></pre>\n\n<p>the answer is mainly depeneds on which <strong>ECMAscript</strong> you using, in <code>ES6+</code>, you can simply use <code>Object.assign</code> to do the clone:</p>\n\n<pre><code>let cloned = Object.assign({}, obj); //new {a:1, b:2, c:3};\n</code></pre>\n\n<p>or using spread operator like this:</p>\n\n<pre><code>let cloned = {...obj}; //new {a:1, b:2, c:3};\n</code></pre>\n\n<p>But if you using <code>ES5</code>, you can use few methods, but the <code>JSON.stringify</code>, just make sure you not using for a big chunk of data to copy, but it could be one line handy way in many cases, something like this:</p>\n\n<pre><code>let cloned = JSON.parse(JSON.stringify(obj)); \n//new {a:1, b:2, c:3};, can be handy, but avoid using on big chunk of data over and over\n</code></pre>\n"},{"score":0,"body":"<p>I don't know which cases this doesn't work for, but it got me a copy of an array. I think its cute :) Hope it helps</p>\n\n<pre><code>copiedArr = origArr.filter(function(x){return true})\n</code></pre>\n"},{"score":1,"body":"<p>Here's a modern solution that doesn't have the pitfalls of <code>Object.assign()</code> (does not copy by reference):</p>\n\n<pre><code>const cloneObj = (obj) =&gt; {\n    return Object.keys(obj).reduce((dolly, key) =&gt; {\n        dolly[key] = (obj[key].constructor === Object) ?\n            cloneObj(obj[key]) :\n            obj[key];\n        return dolly;\n    }, {});\n};\n</code></pre>\n"},{"score":0,"body":"<p>If your object is a class (e.g. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a>):</p>\n\n<pre><code>var copiedObject = jQuery.extend(true, {}, originalObject);\ncopiedObject.__proto__ = originalObject.__proto__;\n</code></pre>\n\n<p>Then in <code>copiedObject</code> you have a deep-copied instance of <code>originalObject</code> class with all its methods.</p>\n"},{"score":0,"body":"<p>If you are using TypeScript, need to support older web browsers (and so can't use  <code>Object.assign</code>), and aren't using a library with a clone method build in, you can make yourself a <code>combine</code> helper in a few lines of code. It combines objects, and if you have only one, just clones it.</p>\n\n<pre><code>/** Creates a new object that combines the properties of the specified objects. */\nfunction combine(...objs: {}[]) {\n    const combined = {};\n    objs.forEach(o =&gt; Object.keys(o).forEach(p =&gt; combined[p] = o[p]));\n    return combined;\n}\n</code></pre>\n"},{"score":0,"body":"<p>You may clone your Object without modification parent Object - </p>\n\n<pre><code>    /** [Object Extend]*/\n    ( typeof Object.extend === 'function' ? undefined : ( Object.extend = function ( destination, source ) {\n        for ( var property in source )\n            destination[property] = source[property];\n        return destination;\n    } ) );\n    /** [/Object Extend]*/\n    /** [Object clone]*/\n    ( typeof Object.clone === 'function' ? undefined : ( Object.clone = function ( object ) {\n        return this.extend( {}, object );\n    } ) );\n    /** [/Object clone]*/\n\n    let myObj = {\n        a:1, b:2, c:3, d:{\n            a:1, b:2, c:3\n        }\n    };\n\n    let clone = Object.clone( myObj );\n\n    clone.a = 10;\n\n    console.log('clone.a==&gt;', clone.a); //==&gt; 10\n\n    console.log('myObj.a==&gt;', myObj.a); //==&gt; 1 // object not modified here\n\n    let clone2 = Object.clone( clone );\n\n    clone2.a = 20;\n\n    console.log('clone2.a==&gt;', clone2.a); //==&gt; 20\n\n    console.log('clone.a==&gt;', clone.a); //==&gt; 10 // object not modified here\n</code></pre>\n"},{"score":0,"body":"<p>I'm providing an answer to this question, because I do not see any native, recursive implementations here that resolve the problem of <code>DOM</code> elements.</p>\n\n<p>The problem there is that <code>&lt;element&gt;</code> has <code>parent</code> and <code>child</code> attributes, that link to other elements with <code>parent</code> and <code>child</code> values, which point back to the original <code>&lt;element&gt;</code>, causing either an <strong>infinite recursive</strong> or <strong>cyclic redundancy</strong>.</p>\n\n<p>If your object is something safe and simple like</p>\n\n<pre><code>{\n    '123':456\n}\n</code></pre>\n\n<p>...then any other answer here will probably work.</p>\n\n<p>But if you have...</p>\n\n<pre><code>{\n    '123':&lt;reactJSComponent&gt;,\n    '456':document.createElement('div'),\n}\n</code></pre>\n\n<p>...then you need something like this:</p>\n\n<pre><code>    // cloneVariable() : Clone variable, return null for elements or components.\nvar cloneVariable = function (args) {\n    const variable = args.variable;\n\n    if(variable === null) {\n            return null;\n    }\n\n    if(typeof(variable) === 'object') {\n            if(variable instanceof HTMLElement || variable.nodeType &gt; 0) {\n                    return null;\n            }\n\n            if(Array.isArray(variable)) {\n                    var arrayclone = [];\n\n                    variable.forEach((element) =&gt; {\n                            arrayclone.push(cloneVariable({'variable':element}));\n                    });\n\n                    return arrayclone;\n            }\n\n            var objectclone = {};\n\n            Object.keys(variable).forEach((field) =&gt; {\n                    objectclone[field] = cloneVariable({'variable':variable[field]});\n            });\n\n            return objectclone;\n    }\n\n    return variable;\n}\n</code></pre>\n"},{"score":22,"body":"<p>In ECMAScript 2018</p>\n\n<pre><code>let objClone = { ...obj };\n</code></pre>\n\n<p>Be aware that <strong>nested objects</strong> are still copied <strong>as a reference.</strong></p>\n"},{"score":3,"body":"<p><strong>According to the <a href=\"https://github.com/airbnb/javascript#objects--rest-spread\" rel=\"nofollow noreferrer\">Airbnb JavaScript Style Guide</a></strong> with 404 contributors:</p>\n\n<blockquote>\n  <p>Prefer the object spread operator over Object.assign to shallow-copy\n  objects. Use the object rest operator to get a new object with certain\n  properties omitted.</p>\n</blockquote>\n\n<pre><code>// very bad\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠ\ndelete copy.a; // so does this\n\n// bad\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign({}, original, { c: 3 }); // copy =&gt; { a: 1, b: 2, c: 3 }\n\n// good\nconst original = { a: 1, b: 2 };\nconst copy = { ...original, c: 3 }; // copy =&gt; { a: 1, b: 2, c: 3 }\n\nconst { a, ...noA } = copy; // noA =&gt; { b: 2, c: 3 }\n</code></pre>\n\n<p><strong>Also I'd like to warn you that even though Airbnb hardly recommends the object spread operator approach. Keep in mind that Microsoft Edge still does not support this 2018 feature yet.</strong></p>\n\n<p><a href=\"http://kangax.github.io/compat-table/es2016plus/\" rel=\"nofollow noreferrer\">ES2016+ Compat table >></a></p>\n"},{"score":7,"body":"<p>(The following was mainly an integration of @<a href=\"https://stackoverflow.com/a/39029912\">Maciej Bukowski</a>, @<a href=\"https://stackoverflow.com/a/728694\">A. Levy</a>, @<a href=\"https://stackoverflow.com/a/9023088\">Jan Turoň</a>, @<a href=\"https://stackoverflow.com/a/37503916\">Redu</a>'s answers, and @<a href=\"https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object/53737490#comment96229185_53737490\">LeviRoberts</a>, @<a href=\"https://stackoverflow.com/q/728360#comment42972840_9023088\">RobG</a>'s comments, many thanks to them!!!)</p>\n\n<p><strong>Deep copy</strong>? — YES! (mostly);<br>\n<strong>Shallow copy</strong>? — NO! (except <code>Proxy</code>).</p>\n\n<p>I sincerely welcome everyone to test <code>clone()</code>.<br>\nIn addition, <code>defineProp()</code> is designed to easily and quickly <em>(re)define or copy</em> any type of descriptor.</p>\n\n<h1>Function</h1>\n\n<pre><code>\"use strict\"\nfunction clone(object) {\n  /*\n    Deep copy objects by value rather than by reference,\n    exception: `Proxy`\n  */\n\n  const seen = new WeakMap()\n\n  return clone(object)\n\n\n  function clone(object) {\n    if (object !== Object(object)) return object /*\n    —— Check if the object belongs to a primitive data type */\n\n    if (object instanceof Node) return object.cloneNode(true) /*\n    —— Clone DOM trees */\n\n    let _object // The clone of object\n\n    switch (object.constructor) {\n      case Array:\n      case Object:\n        _object = cloneObject(object)\n        break\n\n      case Date:\n        _object = new Date(+object)\n        break\n\n      case Function:\n        const fnStr = String(object)\n\n        _object = new Function(\"return \" +\n          (/^(?!function |[^{]+?=&gt;)[^(]+?\\(/.test(fnStr)\n            ? \"function \" : \"\"\n          ) + fnStr\n        )()\n\n        copyPropDescs(_object, object)\n        break\n\n      case RegExp:\n        _object = new RegExp(object)\n        break\n\n      default:\n        switch (Object.prototype.toString.call(object.constructor)) {\n          //                              // Stem from:\n          case \"[object Function]\":       // `class`\n          case \"[object Undefined]\":      // `Object.create(null)`\n            _object = cloneObject(object)\n            break\n\n          default:                        // `Proxy`\n            _object = object\n        }\n    }\n\n    return _object\n  }\n\n\n  function cloneObject(object) {\n    if (seen.has(object)) return seen.get(object) /*\n    —— Handle recursive references (circular structures) */\n\n    const _object = Array.isArray(object)\n      ? []\n      : Object.create(Object.getPrototypeOf(object)) /*\n        —— Assign [[Prototype]] for inheritance */\n\n    seen.set(object, _object) /*\n    —— Make `_object` the associative mirror of `object` */\n\n    Reflect.ownKeys(object).forEach(key =&gt;\n      defineProp(_object, key, { value: clone(object[key]) }, object)\n    )\n\n    return _object\n  }\n\n\n  function copyPropDescs(target, source) {\n    Object.defineProperties(target,\n      Object.getOwnPropertyDescriptors(source)\n    )\n  }\n}\n\n\nfunction defineProp(object, key, descriptor = {}, copyFrom = {}) {\n  const { configurable: _configurable, writable: _writable }\n    = Object.getOwnPropertyDescriptor(object, key)\n    || { configurable: true, writable: true }\n\n  const test = _configurable // Can redefine property\n    &amp;&amp; (_writable === undefined || _writable) // Can assign to property\n\n  if (!test || arguments.length &lt;= 2) return test\n\n  const basisDesc = Object.getOwnPropertyDescriptor(copyFrom, key)\n    || { configurable: true, writable: true } // Custom…\n    || {}; // …or left to native default settings\n\n  [\"get\", \"set\", \"value\", \"writable\", \"enumerable\", \"configurable\"]\n    .forEach(attr =&gt;\n      descriptor[attr] === undefined &amp;&amp;\n      (descriptor[attr] = basisDesc[attr])\n    )\n\n  const { get, set, value, writable, enumerable, configurable }\n    = descriptor\n\n  return Object.defineProperty(object, key, {\n    enumerable, configurable, ...get || set\n      ? { get, set } // Accessor descriptor\n      : { value, writable } // Data descriptor\n  })\n}\n</code></pre>\n\n<h2>// Tests</h2>\n\n<pre><code>\"use strict\"\nconst obj0 = {\n  u: undefined,\n  nul: null,\n  t: true,\n  num: 9,\n  str: \"\",\n  sym: Symbol(\"symbol\"),\n  [Symbol(\"e\")]: Math.E,\n  arr: [[0], [1, 2]],\n  d: new Date(),\n  re: /f/g,\n  get g() { return 0 },\n  o: {\n    n: 0,\n    o: { f: function (...args) { } }\n  },\n  f: {\n    getAccessorStr(object) {\n      return []\n        .concat(...\n          Object.values(Object.getOwnPropertyDescriptors(object))\n            .filter(desc =&gt; desc.writable === undefined)\n            .map(desc =&gt; Object.values(desc))\n        )\n        .filter(prop =&gt; typeof prop === \"function\")\n        .map(String)\n    },\n    f0: function f0() { },\n    f1: function () { },\n    f2: a =&gt; a / (a + 1),\n    f3: () =&gt; 0,\n    f4(params) { return param =&gt; param + params },\n    f5: (a, b) =&gt; ({ c = 0 } = {}) =&gt; a + b + c\n  }\n}\n\ndefineProp(obj0, \"s\", { set(v) { this._s = v } })\ndefineProp(obj0.arr, \"tint\", { value: { is: \"non-enumerable\" } })\nobj0.arr[0].name = \"nested array\"\n\n\nlet obj1 = clone(obj0)\nobj1.o.n = 1\nobj1.o.o.g = function g(a = 0, b = 0) { return a + b }\nobj1.arr[1][1] = 3\nobj1.d.setTime(+obj0.d + 60 * 1000)\nobj1.arr.tint.is = \"enumerable? no\"\nobj1.arr[0].name = \"a nested arr\"\ndefineProp(obj1, \"s\", { set(v) { this._s = v + 1 } })\ndefineProp(obj1.re, \"multiline\", { value: true })\n\nconsole.log(\"\\n\\n\" + \"-\".repeat(2 ** 6))\n\n\n\n\nconsole.log(\"&gt;:&gt;: Test - Routinely\")\n\nconsole.log(\"obj0:\\n \", JSON.stringify(obj0))\nconsole.log(\"obj1:\\n \", JSON.stringify(obj1))\nconsole.log()\n\nconsole.log(\"obj0:\\n \", obj0)\nconsole.log(\"obj1:\\n \", obj1)\nconsole.log()\n\nconsole.log(\"obj0\\n \",\n  \".arr.tint:\", obj0.arr.tint, \"\\n \",\n  \".arr[0].name:\", obj0.arr[0].name\n)\nconsole.log(\"obj1\\n \",\n  \".arr.tint:\", obj1.arr.tint, \"\\n \",\n  \".arr[0].name:\", obj1.arr[0].name\n)\nconsole.log()\n\nconsole.log(\"Accessor-type descriptor\\n \",\n  \"of obj0:\", obj0.f.getAccessorStr(obj0), \"\\n \",\n  \"of obj1:\", obj1.f.getAccessorStr(obj1), \"\\n \",\n  \"set (obj0 &amp; obj1) .s :\", obj0.s = obj1.s = 0, \"\\n \",\n  \"  → (obj0 , obj1) ._s:\", obj0._s, \",\", obj1._s\n)\n\nconsole.log(\"—— obj0 has not been interfered.\")\n\nconsole.log(\"\\n\\n\" + \"-\".repeat(2 ** 6))\n\n\n\n\nconsole.log(\"&gt;:&gt;: Test - Circular structures\")\n\nobj0.o.r = {}\nobj0.o.r.recursion = obj0.o\nobj0.arr[1] = obj0.arr\n\nobj1 = clone(obj0)\nconsole.log(\"obj0:\\n \", obj0)\nconsole.log(\"obj1:\\n \", obj1)\n\nconsole.log(\"Clear obj0's recursion:\",\n  obj0.o.r.recursion = null, obj0.arr[1] = 1\n)\nconsole.log(\n  \"obj0\\n \",\n  \".o.r:\", obj0.o.r, \"\\n \",\n  \".arr:\", obj0.arr\n)\nconsole.log(\n  \"obj1\\n \",\n  \".o.r:\", obj1.o.r, \"\\n \",\n  \".arr:\", obj1.arr\n)\nconsole.log(\"—— obj1 has not been interfered.\")\n\n\nconsole.log(\"\\n\\n\" + \"-\".repeat(2 ** 6))\n\n\n\n\nconsole.log(\"&gt;:&gt;: Test - Classes\")\n\nclass Person {\n  constructor(name) {\n    this.name = name\n  }\n}\n\nclass Boy extends Person { }\nBoy.prototype.sex = \"M\"\n\nconst boy0 = new Boy\nboy0.hobby = { sport: \"spaceflight\" }\n\nconst boy1 = clone(boy0)\nboy1.hobby.sport = \"superluminal flight\"\n\nboy0.name = \"one\"\nboy1.name = \"neo\"\n\nconsole.log(\"boy0:\\n \", boy0)\nconsole.log(\"boy1:\\n \", boy1)\nconsole.log(\"boy1's prototype === boy0's:\",\n  Object.getPrototypeOf(boy1) === Object.getPrototypeOf(boy0)\n)\n</code></pre>\n\n<h1>References</h1>\n\n<ol>\n<li><a href=\"https://mdn.io/Object/create\" rel=\"nofollow noreferrer\"><code>Object.create()</code> | MDN</a></li>\n<li><a href=\"https://mdn.io/Object/defineProperties\" rel=\"nofollow noreferrer\"><code>Object.defineProperties()</code> | MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties#Detection_Table\" rel=\"nofollow noreferrer\">Enumerability and ownership of properties | MDN</a></li>\n<li><a href=\"https://mdn.io/Errors/Cyclic_object_value\" rel=\"nofollow noreferrer\">TypeError: cyclic object value | MDN</a></li>\n</ol>\n\n<h1>Language tricks used</h1>\n\n<ol>\n<li><a href=\"https://stackoverflow.com/a/40560953\">Conditionally add prop to object</a></li>\n</ol>\n"},{"score":10,"body":"<p>I think there is a simple and working answer. In deep copying there are two concerns:</p>\n\n<ol>\n<li>Keep properties independent to each other.</li>\n<li>And keep the methods alive on cloned object.</li>\n</ol>\n\n<p>So I think one simple solution will be to first serialize and deserialize and then do an assign on it to copy functions too.</p>\n\n<pre><code>let deepCloned = JSON.parse(JSON.stringify(source));\nlet merged = Object.assign({}, source);\nObject.assign(merged, deepCloned);\n</code></pre>\n\n<p>Although this question has many answers, I hope this one helps too.</p>\n"},{"score":1,"body":"<p>Using <a href=\"https://www.npmjs.com/package/defaults\" rel=\"nofollow noreferrer\">defaults</a> (historically specific to nodejs but now usable from the browser thanks to modern JS):</p>\n\n<pre><code>import defaults from 'object.defaults';\n\nconst myCopy = defaults({}, myObject);\n</code></pre>\n"},{"score":1,"body":"<p>To support a better understanding of copying of objects, <a href=\"https://jsbin.com/sekarup/edit?js,console\" rel=\"nofollow noreferrer\">this illustrative jsbin may be of value</a></p>\n\n<pre><code>class base {\n  get under(){return true}\n}\n\nclass a extends base {}\n\nconst b = {\n  get b1(){return true},\n  b: true\n}\n\nconsole.log('Object assign')\nlet t1 = Object.create(b)\nt1.x = true\nconst c = Object.assign(t1, new a())\nconsole.log(c.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(c.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(c.under ? 'inheritance ok': 'inheritance gone')\nconsole.log(c.b1 ? 'get value unchanged' : 'get value lost')\nc.b1 = false\nconsole.log(c.b1? 'get unchanged' : 'get lost')\nconsole.log('-----------------------------------')\nconsole.log('Object assign  - order swopped')\nt1 = Object.create(b)\nt1.x = true\nconst d = Object.assign(new a(), t1)\nconsole.log(d.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(d.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(d.under ? 'inheritance n/a': 'inheritance gone')\nconsole.log(d.b1 ? 'get value copied' : 'get value lost')\nd.b1 = false\nconsole.log(d.b1? 'get copied' : 'get lost')\nconsole.log('-----------------------------------')\nconsole.log('Spread operator')\nt1 = Object.create(b)\nt2 = new a()\nt1.x = true\nconst e = { ...t1, ...t2 }\nconsole.log(e.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(e.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(e.under ? 'inheritance ok': 'inheritance gone')\nconsole.log(e.b1 ? 'get value copied' : 'get value lost')\ne.b1 = false\nconsole.log(e.b1? 'get copied' : 'get lost')\nconsole.log('-----------------------------------')\nconsole.log('Spread operator on getPrototypeOf')\nt1 = Object.create(b)\nt2 = new a()\nt1.x = true\nconst e1 = { ...Object.getPrototypeOf(t1), ...Object.getPrototypeOf(t2) }\nconsole.log(e1.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(e1.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(e1.under ? 'inheritance ok': 'inheritance gone')\nconsole.log(e1.b1 ? 'get value copied' : 'get value lost')\ne1.b1 = false\nconsole.log(e1.b1? 'get copied' : 'get lost')\nconsole.log('-----------------------------------')\nconsole.log('keys, defineProperty, getOwnPropertyDescriptor')\nf = Object.create(b)\nt2 = new a()\nf.x = 'a'\nObject.keys(t2).forEach(key=&gt; {\n  Object.defineProperty(f,key,Object.getOwnPropertyDescriptor(t2, key))\n})\nconsole.log(f.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(f.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(f.under ? 'inheritance ok': 'inheritance gone')\nconsole.log(f.b1 ? 'get value copied' : 'get value lost')\nf.b1 = false\nconsole.log(f.b1? 'get copied' : 'get lost')\nconsole.log('-----------------------------------')\nconsole.log('defineProperties, getOwnPropertyDescriptors')\nlet g = Object.create(b)\nt2 = new a()\ng.x = 'a'\nObject.defineProperties(g,Object.getOwnPropertyDescriptors(t2))\nconsole.log(g.b1 ? 'prop value copied': 'prop value gone')\nconsole.log(g.x ? 'assigned value copied': 'assigned value gone')\nconsole.log(g.under ? 'inheritance ok': 'inheritance gone')\nconsole.log(g.b1 ? 'get value copied' : 'get value lost')\ng.b1 = false\nconsole.log(g.b1? 'get copied' : 'get lost')\nconsole.log('-----------------------------------')\n</code></pre>\n"},{"score":11,"body":"<p>For a deep copy and clone, JSON.stringify then JSON.parse the object:</p>\n\n<pre><code>obj = { a: 0 , b: { c: 0}};\nlet deepClone = JSON.parse(JSON.stringify(obj));\nobj.a = 5;\nobj.b.c = 5;\nconsole.log(JSON.stringify(deepClone)); // { a: 0, b: { c: 0}}\n</code></pre>\n"},{"score":1,"body":"<p>Just as <a href=\"https://javascript.info/prototype-methods\" rel=\"nofollow noreferrer\">this link</a> says use this code: <br></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>let clone = Object.create(Object.getPrototypeOf(obj),\n Object.getOwnPropertyDescriptors(obj));\n</code></pre>\n"},{"score":3,"body":"<p>Simple</p>\n\n<pre><code>var restore = { name:'charlesi',\nage:9}\nvar prev_data ={\nname: 'charles'\nage : 10\n}\n\nvar temp = JSON.stringify(prev_data)\nrestore = JSON.parse(temp)\n\nrestore = {\nname:'charlie',\nage : 12}\n</code></pre>\n\n<p>output prev_data:</p>\n\n<pre><code>{\nname: 'charles'\nage : 10\n} \n</code></pre>\n"},{"score":7,"body":"<blockquote>\n  <p><strong><em><a href=\"https://lodash.com/docs/4.17.15#cloneDeep\" rel=\"noreferrer\">Use lodash _.cloneDeep().</a></em></strong></p>\n</blockquote>\n\n<p><strong><em>Shallow Copy: lodash _.clone()</em></strong></p>\n\n<p><em>A shallow copy can be made by simply copying the reference.</em></p>\n\n<pre><code>let obj1 = {\n    a: 0,\n    b: {\n        c: 0,\n        e: {\n            f: 0\n        }\n    }\n};\nlet obj3 = _.clone(obj1);\nobj1.a = 4;\nobj1.b.c = 4;\nobj1.b.e.f = 100;\n\nconsole.log(JSON.stringify(obj1));\n//{\"a\":4,\"b\":{\"c\":4,\"e\":{\"f\":100}}}\n\nconsole.log(JSON.stringify(obj3));\n//{\"a\":0,\"b\":{\"c\":4,\"e\":{\"f\":100}}}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/vmysI.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/vmysI.png\" alt=\"Shallow Copy: lodash _.clone()\"></a></p>\n\n<p><strong><em>Deep Copy: lodash _.cloneDeep()</em></strong></p>\n\n<p><em>fields are dereferenced: rather than references to objects being copied</em></p>\n\n<pre><code>let obj1 = {\n    a: 0,\n    b: {\n        c: 0,\n        e: {\n            f: 0\n        }\n    }\n};\nlet obj3 = _.cloneDeep(obj1);\nobj1.a = 100;\nobj1.b.c = 100;\nobj1.b.e.f = 100;\n\nconsole.log(JSON.stringify(obj1));\n{\"a\":100,\"b\":{\"c\":100,\"e\":{\"f\":100}}}\n\nconsole.log(JSON.stringify(obj3));\n{\"a\":0,\"b\":{\"c\":0,\"e\":{\"f\":0}}}\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/z0M6n.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/z0M6n.png\" alt=\"Deep Copy: lodash _.cloneDeep()\"></a></p>\n"},{"score":3,"body":"<p>Object copy using ( <strong>...</strong> )</p>\n\n<pre><code>//bad\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign({}, original, { c: 3 }); // copy =&gt; { a: 1, b: 2,c: 3 }\n\n//good\nconst originalObj = { id: 5, name: 'San Francisco'};\nconst copyObject = {...originalObj, pincode: 4444};\nconsole.log(copyObject)  //{ id: 5, name: 'San Francisco', pincode: 4444 }\n</code></pre>\n\n<p>Same can be use for <strong>copying array</strong> from one to other </p>\n\n<pre><code>const itemsCopy = [...items];\n</code></pre>\n"},{"score":0,"body":"<pre><code>var x = {'e': 2, 'd': 8, 'b': 5};\n\nconst y = {};\nfor(let key in x) {\n    y[key] = x[key];\n}\nconsole.log(y); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\n\nconst z = {};\nObject.keys(x).forEach(key =&gt; {\n    z[key] = x[key];\n});\nconsole.log(z); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\n\nconst w = {};\nfor(let i = 0; i &lt; Object.keys(x).length; i++) {\n    w[Object.keys(x)[i]] = x[Object.keys(x)[i]];\n}\nconsole.log(w); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\n\nconst v = {};\nfor(let key of Object.keys(x)) {\n    v[key] = x[key];\n}\nconsole.log(v); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\n\nx['q'] = 100;   // Altering x will not affect the other objects\n\nconsole.log(x); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5, q: 100}\nconsole.log(y); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\nconsole.log(z); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\nconsole.log(w); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\nconsole.log(v); // =&gt;&gt;&gt; {e: 2, d: 8, b: 5}\n</code></pre>\n"},{"score":4,"body":"<p>Simple recursive method to clone an object. Also could use lodash.clone.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let clone = (obj) =&gt; {\r\n\tlet obj2 = Array.isArray(obj) ? [] : {};\r\n\tfor(let k in obj) {\r\n          obj2[k] = (typeof obj[k] === 'object' ) ? clone(obj[k]) :  obj[k];\r\n        }\r\n        return obj2;\r\n    }\r\n\r\nlet w = { name: \"Apple\", types: [\"Fuji\", \"Gala\"]};\r\nlet x = clone(w);\r\nw.name = \"Orange\";\r\nw.types = [\"Navel\"];\r\nconsole.log(x);\r\nconsole.log(w);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>The solution <code>JSON.parse(JSON.stringify(orig_obj)</code> as stated by many peers here for deep_cloning has several issues which I found, and they are listed below:</p>\n\n<ol>\n<li>It discards the entries while copying whose values are <code>undefined</code> in the original object,</li>\n<li>If there are some values like <code>Infinity</code>, <code>NaN</code> etc, they will be converted into <code>null</code> while copying,</li>\n<li>If there is a <code>Date</code> type in the original object, it will be stringified in the cloned object (<code>typeof date_entry --&gt; string</code>).  </li>\n</ol>\n\n<p>Found an effective way for cloning an object, and it worked well for me in all sort of scenarios. Please have a look at below code, as it has resolved all above mentioned pitfalls of <code>JSON.parse(...)</code>, yet resulting in proper deep-cloning:</p>\n\n<pre><code>var orig_obj = {\n  string: 'my_str',\n  number: 123,\n  bool: false,\n  nul: null,\n  nested : {\n    value : true\n  },\n  nan : NaN,\n  date: new Date(), \n  undef: undefined,\n  inf: Infinity,\n}\nconsole.log(\"original_obj before modification: \", orig_obj, \"\\n\");\nconsole.log(typeof orig_obj.date, \"\\n\");\n\nvar clone_obj = Object.assign({}, orig_obj);\n\n//this below loop will help in deep cloning and solving above issues\nfor(let prop in orig_obj) {\n    if(typeof orig_obj[prop] === \"object\") {\n        if(orig_obj[prop] instanceof Date)\n            clone_obj[prop] = orig_obj[prop];\n        else {\n            clone_obj[prop] = JSON.parse(JSON.stringify(orig_obj[prop]));\n        }\n    }\n}\n\nconsole.log(\"cloned_obj before modification: \", orig_obj, \"\\n\");\n\nclone_obj.bool = true;\nclone_obj.nested.value = \"false\";\n\nconsole.log(\"original_obj post modification: \", orig_obj, \"\\n\");\nconsole.log(\"cloned_obj post modification: \", clone_obj, \"\\n\");\nconsole.log(typeof clone_obj.date);\n</code></pre>\n"},{"score":10,"body":"<h1>Performance</h1>\n\n<p>Today 2020.04.30 I perform tests of chosen solutions on Chrome v81.0, Safari v13.1 and Firefox v75.0 on MacOs High Sierra v10.13.6. </p>\n\n<p>I focus on speed of copy DATA (object with simple type fields, not methods etc.). The solutions A-I can make only shallow copy, solutions J-U can make deep copy.</p>\n\n<h3>Results for shallow copy</h3>\n\n<ul>\n<li>solution <code>{...obj}</code> (A) is fastest on chrome and firefox and medium fast on safari</li>\n<li>solution based on <code>Object.assign</code> (B) is fast on all browsers</li>\n<li>jQuery (E) and lodash (F,G,H) solutions are medium/quite fast</li>\n<li>solution <code>JSON.parse/stringify</code> (K) is quite slow</li>\n<li>solutions D and U are slow on all browsers</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/mCte1.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/mCte1.png\" alt=\"enter image description here\"></a></p>\n\n<h3>Results for deep copy</h3>\n\n<ul>\n<li>solution Q is fastest on all browsers</li>\n<li>jQuery (L) and lodash (J) are medium fast</li>\n<li>solution <code>JSON.parse/stringify</code> (K) is quite slow</li>\n<li>solution U is slowest on all browsers</li>\n<li>lodash (J) and solution U crash on Chrome for 1000 level deep object</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/KxBqv.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/KxBqv.png\" alt=\"enter image description here\"></a></p>\n\n<h2>Details</h2>\n\n<p>For choosen solutions: \n<a href=\"https://stackoverflow.com/a/44950864/860099\">A</a> \n<a href=\"https://stackoverflow.com/a/30042948/860099\">B</a>\nC(my)\n<a href=\"https://stackoverflow.com/a/49497485/860099\">D</a>\n<a href=\"https://stackoverflow.com/a/5164215/860099\">E</a>\n<a href=\"https://stackoverflow.com/a/11024936/860099\">F</a>\n<a href=\"https://stackoverflow.com/a/13850856/860099\">G</a>\n<a href=\"https://stackoverflow.com/a/11024936/860099\">H</a>\n<a href=\"https://stackoverflow.com/a/728694/860099\">I</a>\n<a href=\"https://stackoverflow.com/a/57504513/860099\">J</a>\n<a href=\"https://stackoverflow.com/a/10869248/860099\">K</a>\n<a href=\"https://stackoverflow.com/a/5164215/860099\">L</a>\n<a href=\"https://stackoverflow.com/a/728400/860099\">M</a>\n<a href=\"https://stackoverflow.com/a/728395/860099\">N</a>\n<a href=\"https://stackoverflow.com/a/1042676/860099\">O</a>\n<a href=\"https://stackoverflow.com/a/33273256/860099\">P</a>\n<a href=\"https://stackoverflow.com/a/24648941/860099\">Q</a>\n<a href=\"https://stackoverflow.com/a/24648941/860099\">R</a>\n<a href=\"https://stackoverflow.com/a/39029912/860099\">S</a>\n<a href=\"https://stackoverflow.com/a/11462081/860099\">T</a>\n<a href=\"https://stackoverflow.com/a/53737490/860099\">U</a>,\n I perform 4 tests</p>\n\n<ul>\n<li>shallow-small: object with 10 non-nested fields - you can run it <a href=\"https://jsbench.me/0xk9l5ci9x/1\" rel=\"noreferrer\">HERE</a></li>\n<li>shallow-big: object with 1000 non-nested fields - you can run it <a href=\"https://jsbench.me/t0k9l64319/1\" rel=\"noreferrer\">HERE</a></li>\n<li>deep-small: object with 10 levels-nested fields - you can run it <a href=\"https://jsbench.me/pvk9l6pzfj/1\" rel=\"noreferrer\">HERE</a></li>\n<li>deep-big: object with 1000 levels-nested fields - you can run it <a href=\"https://jsbench.me/euk9l6x9jx/1\" rel=\"noreferrer\">HERE</a></li>\n</ul>\n\n<p>Objects used in tests are show in below snippet</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let obj_ShallowSmall = {\r\n  field0: false,\r\n  field1: true,\r\n  field2: 1,\r\n  field3: 0,\r\n  field4: null,\r\n  field5: [],\r\n  field6: {},\r\n  field7: \"text7\",\r\n  field8: \"text8\",\r\n}\r\n\r\nlet obj_DeepSmall = {\r\n  level0: {\r\n   level1: {\r\n    level2: {\r\n     level3: {\r\n      level4: {\r\n       level5: {\r\n        level6: {\r\n         level7: {\r\n          level8: {\r\n           level9: [[[[[[[[[['abc']]]]]]]]]],\r\n  }}}}}}}}},\r\n};\r\n\r\nlet obj_ShallowBig = Array(1000).fill(0).reduce((a,c,i) =&gt; (a['field'+i]=getField(i),a) ,{});\r\n\r\n\r\nlet obj_DeepBig = genDeepObject(1000);\r\n\r\n\r\n\r\n// ------------------\r\n// Show objects\r\n// ------------------\r\n\r\nconsole.log('obj_ShallowSmall:',JSON.stringify(obj_ShallowSmall));\r\nconsole.log('obj_DeepSmall:',JSON.stringify(obj_DeepSmall));\r\nconsole.log('obj_ShallowBig:',JSON.stringify(obj_ShallowBig));\r\nconsole.log('obj_DeepBig:',JSON.stringify(obj_DeepBig));\r\n\r\n\r\n\r\n\r\n// ------------------\r\n// HELPERS\r\n// ------------------\r\n\r\nfunction getField(k) {\r\n  let i=k%10;\r\n  if(i==0) return false;\r\n  if(i==1) return true;\r\n  if(i==2) return k;\r\n  if(i==3) return 0;\r\n  if(i==4) return null;\r\n  if(i==5) return [];\r\n  if(i==6) return {};  \r\n  if(i&gt;=7) return \"text\"+k;\r\n}\r\n\r\nfunction genDeepObject(N) {\r\n  // generate: {level0:{level1:{...levelN: {end:[[[...N-times...['abc']...]]] }}}...}}}\r\n  let obj={};\r\n  let o=obj;\r\n  let arr = [];\r\n  let a=arr;\r\n\r\n  for(let i=0; i&lt;N; i++) {\r\n    o['level'+i]={};\r\n    o=o['level'+i];\r\n    let aa=[];\r\n    a.push(aa);\r\n    a=aa;\r\n  }\r\n\r\n  a[0]='abc';\r\n  o['end']=arr;\r\n  return obj;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Below snippet presents tested solutions and shows differences between them</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(obj) {\r\n  return {...obj}\r\n}\r\n\r\nfunction B(obj) {\r\n  return Object.assign({}, obj); \r\n}\r\n\r\nfunction C(obj) {\r\n  return Object.keys(obj).reduce( (a,c) =&gt; (a[c]=obj[c], a), {})\r\n}\r\n\r\nfunction D(obj) {\r\n  let copyOfObject = {};\r\n  Object.defineProperties(copyOfObject, Object.getOwnPropertyDescriptors(obj));\r\n  return copyOfObject;\r\n}\r\n\r\nfunction E(obj) {\r\n  return jQuery.extend({}, obj) // shallow\r\n}\r\n\r\nfunction F(obj) {\r\n  return _.clone(obj);\r\n}\r\n\r\nfunction G(obj) {\r\n  return _.clone(obj,true);\r\n}\r\n\r\nfunction H(obj) {\r\n  return _.extend({},obj);\r\n}\r\n\r\nfunction I(obj) {\r\n    if (null == obj || \"object\" != typeof obj) return obj;\r\n    var copy = obj.constructor();\r\n    for (var attr in obj) {\r\n        if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];\r\n    }\r\n    return copy;\r\n}\r\n\r\nfunction J(obj) {\r\n  return _.cloneDeep(obj,true);\r\n}\r\n\r\nfunction K(obj) {\r\n\treturn JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nfunction L(obj) {\r\n  return jQuery.extend(true, {}, obj) // deep\r\n}\r\n\r\nfunction M(obj) {\r\n  if(obj == null || typeof(obj) != 'object')\r\n    return obj;    \r\n  var temp = new obj.constructor(); \r\n  for(var key in obj)\r\n    temp[key] = M(obj[key]);    \r\n  return temp;\r\n}\r\n\r\nfunction N(obj) {\r\n  let EClone = function(obj) {\r\n    var newObj = (obj instanceof Array) ? [] : {};\r\n    for (var i in obj) {\r\n      if (i == 'EClone') continue;\r\n      if (obj[i] &amp;&amp; typeof obj[i] == \"object\") {\r\n        newObj[i] = EClone(obj[i]);\r\n      } else newObj[i] = obj[i]\r\n    } return newObj;\r\n  };\r\n\r\n\treturn EClone(obj);\r\n};\r\n\r\nfunction O(obj) {\r\n    if (obj == null || typeof obj != \"object\") return obj;\r\n    if (obj.constructor != Object &amp;&amp; obj.constructor != Array) return obj;\r\n    if (obj.constructor == Date || obj.constructor == RegExp || obj.constructor == Function ||\r\n        obj.constructor == String || obj.constructor == Number || obj.constructor == Boolean)\r\n        return new obj.constructor(obj);\r\n\r\n    let to = new obj.constructor();\r\n\r\n    for (var name in obj)\r\n    {\r\n        to[name] = typeof to[name] == \"undefined\" ? O(obj[name], null) : to[name];\r\n    }\r\n\r\n    return to;\r\n}\r\n\r\nfunction P(obj) {\r\n  function clone(target, source){\r\n\r\n      for(let key in source){\r\n\r\n          // Use getOwnPropertyDescriptor instead of source[key] to prevent from trigering setter/getter.\r\n          let descriptor = Object.getOwnPropertyDescriptor(source, key);\r\n          if(descriptor.value instanceof String){\r\n              target[key] = new String(descriptor.value);\r\n          }\r\n          else if(descriptor.value instanceof Array){\r\n              target[key] = clone([], descriptor.value);\r\n          }\r\n          else if(descriptor.value instanceof Object){\r\n              let prototype = Reflect.getPrototypeOf(descriptor.value);\r\n              let cloneObject = clone({}, descriptor.value);\r\n              Reflect.setPrototypeOf(cloneObject, prototype);\r\n              target[key] = cloneObject;\r\n          }\r\n          else {\r\n              Object.defineProperty(target, key, descriptor);\r\n          }\r\n      }\r\n      let prototype = Reflect.getPrototypeOf(source);\r\n      Reflect.setPrototypeOf(target, prototype);\r\n      return target;\r\n  }\r\n  return clone({},obj);\r\n}\r\n\r\nfunction Q(obj) {\r\n    var copy;\r\n\r\n    // Handle the 3 simple types, and null or undefined\r\n    if (null == obj || \"object\" != typeof obj) return obj;\r\n\r\n    // Handle Date\r\n    if (obj instanceof Date) {\r\n        copy = new Date();\r\n        copy.setTime(obj.getTime());\r\n        return copy;\r\n    }\r\n\r\n    // Handle Array\r\n    if (obj instanceof Array) {\r\n        copy = [];\r\n        for (var i = 0, len = obj.length; i &lt; len; i++) {\r\n            copy[i] = Q(obj[i]);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    // Handle Object\r\n    if (obj instanceof Object) {\r\n        copy = {};\r\n        for (var attr in obj) {\r\n            if (obj.hasOwnProperty(attr)) copy[attr] = Q(obj[attr]);\r\n        }\r\n        return copy;\r\n    }\r\n\r\n    throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n}\r\n\r\nfunction R(obj) {\r\n    const gdcc = \"__getDeepCircularCopy__\";\r\n    if (obj !== Object(obj)) {\r\n        return obj; // primitive value\r\n    }\r\n\r\n    var set = gdcc in obj,\r\n        cache = obj[gdcc],\r\n        result;\r\n    if (set &amp;&amp; typeof cache == \"function\") {\r\n        return cache();\r\n    }\r\n    // else\r\n    obj[gdcc] = function() { return result; }; // overwrite\r\n    if (obj instanceof Array) {\r\n        result = [];\r\n        for (var i=0; i&lt;obj.length; i++) {\r\n            result[i] = R(obj[i]);\r\n        }\r\n    } else {\r\n        result = {};\r\n        for (var prop in obj)\r\n            if (prop != gdcc)\r\n                result[prop] = R(obj[prop]);\r\n            else if (set)\r\n                result[prop] = R(cache);\r\n    }\r\n    if (set) {\r\n        obj[gdcc] = cache; // reset\r\n    } else {\r\n        delete obj[gdcc]; // unset again\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction S(obj) {\r\n    const cache = new WeakMap(); // Map of old - new references\r\n\r\n    function copy(object) {\r\n        if (typeof object !== 'object' ||\r\n            object === null ||\r\n            object instanceof HTMLElement\r\n        )\r\n            return object; // primitive value or HTMLElement\r\n\r\n        if (object instanceof Date) \r\n            return new Date().setTime(object.getTime());\r\n\r\n        if (object instanceof RegExp) \r\n            return new RegExp(object.source, object.flags);\r\n\r\n        if (cache.has(object)) \r\n            return cache.get(object);\r\n\r\n        const result = object instanceof Array ? [] : {};\r\n\r\n        cache.set(object, result); // store reference to object before the recursive starts\r\n\r\n        if (object instanceof Array) {\r\n            for(const o of object) {\r\n                 result.push(copy(o));\r\n            }\r\n            return result;\r\n        }\r\n\r\n        const keys = Object.keys(object); \r\n\r\n        for (const key of keys)\r\n            result[key] = copy(object[key]);\r\n\r\n        return result;\r\n    }\r\n\r\n    return copy(obj);\r\n}\r\n\r\nfunction T(obj){\r\n    var clonedObjectsArray = [];\r\n    var originalObjectsArray = []; //used to remove the unique ids when finished\r\n    var next_objid = 0;\r\n\r\n    function objectId(obj) {\r\n        if (obj == null) return null;\r\n        if (obj.__obj_id == undefined){\r\n            obj.__obj_id = next_objid++;\r\n            originalObjectsArray[obj.__obj_id] = obj;\r\n        }\r\n        return obj.__obj_id;\r\n    }\r\n\r\n    function cloneRecursive(obj) {\r\n        if (null == obj || typeof obj == \"string\" || typeof obj == \"number\" || typeof obj == \"boolean\") return obj;\r\n\r\n        // Handle Date\r\n        if (obj instanceof Date) {\r\n            var copy = new Date();\r\n            copy.setTime(obj.getTime());\r\n            return copy;\r\n        }\r\n\r\n        // Handle Array\r\n        if (obj instanceof Array) {\r\n            var copy = [];\r\n            for (var i = 0; i &lt; obj.length; ++i) {\r\n                copy[i] = cloneRecursive(obj[i]);\r\n            }\r\n            return copy;\r\n        }\r\n\r\n        // Handle Object\r\n        if (obj instanceof Object) {\r\n            if (clonedObjectsArray[objectId(obj)] != undefined)\r\n                return clonedObjectsArray[objectId(obj)];\r\n\r\n            var copy;\r\n            if (obj instanceof Function)//Handle Function\r\n                copy = function(){return obj.apply(this, arguments);};\r\n            else\r\n                copy = {};\r\n\r\n            clonedObjectsArray[objectId(obj)] = copy;\r\n\r\n            for (var attr in obj)\r\n                if (attr != \"__obj_id\" &amp;&amp; obj.hasOwnProperty(attr))\r\n                    copy[attr] = cloneRecursive(obj[attr]);                 \r\n\r\n            return copy;\r\n        }       \r\n\r\n\r\n        throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n    }\r\n    var cloneObj = cloneRecursive(obj);\r\n\r\n\r\n\r\n    //remove the unique ids\r\n    for (var i = 0; i &lt; originalObjectsArray.length; i++)\r\n    {\r\n        delete originalObjectsArray[i].__obj_id;\r\n    };\r\n\r\n    return cloneObj;\r\n}\r\n\r\nfunction U(obj) {\r\n  /*\r\n    Deep copy objects by value rather than by reference,\r\n    exception: `Proxy`\r\n  */\r\n\r\n  const seen = new WeakMap()\r\n\r\n  return clone(obj)\r\n\r\n  function defineProp(object, key, descriptor = {}, copyFrom = {}) {\r\n    const { configurable: _configurable, writable: _writable }\r\n      = Object.getOwnPropertyDescriptor(object, key)\r\n      || { configurable: true, writable: true }\r\n\r\n    const test = _configurable // Can redefine property\r\n      &amp;&amp; (_writable === undefined || _writable) // Can assign to property\r\n\r\n    if (!test || arguments.length &lt;= 2) return test\r\n\r\n    const basisDesc = Object.getOwnPropertyDescriptor(copyFrom, key)\r\n      || { configurable: true, writable: true } // Custom…\r\n      || {}; // …or left to native default settings\r\n\r\n    [\"get\", \"set\", \"value\", \"writable\", \"enumerable\", \"configurable\"]\r\n      .forEach(attr =&gt;\r\n        descriptor[attr] === undefined &amp;&amp;\r\n        (descriptor[attr] = basisDesc[attr])\r\n      )\r\n\r\n    const { get, set, value, writable, enumerable, configurable }\r\n      = descriptor\r\n\r\n    return Object.defineProperty(object, key, {\r\n      enumerable, configurable, ...get || set\r\n        ? { get, set } // Accessor descriptor\r\n        : { value, writable } // Data descriptor\r\n    })\r\n  }\r\n\r\n  function clone(object) {\r\n    if (object !== Object(object)) return object /*\r\n    —— Check if the object belongs to a primitive data type */\r\n\r\n    if (object instanceof Node) return object.cloneNode(true) /*\r\n    —— Clone DOM trees */\r\n\r\n    let _object // The clone of object\r\n\r\n    switch (object.constructor) {\r\n      case Array:\r\n      case Object:\r\n        _object = cloneObject(object)\r\n        break\r\n\r\n      case Date:\r\n        _object = new Date(+object)\r\n        break\r\n\r\n      case Function:\r\n        const fnStr = String(object)\r\n\r\n        _object = new Function(\"return \" +\r\n          (/^(?!function |[^{]+?=&gt;)[^(]+?\\(/.test(fnStr)\r\n            ? \"function \" : \"\"\r\n          ) + fnStr\r\n        )()\r\n\r\n        copyPropDescs(_object, object)\r\n        break\r\n\r\n      case RegExp:\r\n        _object = new RegExp(object)\r\n        break\r\n\r\n      default:\r\n        switch (Object.prototype.toString.call(object.constructor)) {\r\n          //                              // Stem from:\r\n          case \"[object Function]\":       // `class`\r\n          case \"[object Undefined]\":      // `Object.create(null)`\r\n            _object = cloneObject(object)\r\n            break\r\n\r\n          default:                        // `Proxy`\r\n            _object = object\r\n        }\r\n    }\r\n\r\n    return _object\r\n  }\r\n\r\n\r\n  function cloneObject(object) {\r\n    if (seen.has(object)) return seen.get(object) /*\r\n    —— Handle recursive references (circular structures) */\r\n\r\n    const _object = Array.isArray(object)\r\n      ? []\r\n      : Object.create(Object.getPrototypeOf(object)) /*\r\n        —— Assign [[Prototype]] for inheritance */\r\n\r\n    seen.set(object, _object) /*\r\n    —— Make `_object` the associative mirror of `object` */\r\n\r\n    Reflect.ownKeys(object).forEach(key =&gt;\r\n      defineProp(_object, key, { value: clone(object[key]) }, object)\r\n    )\r\n\r\n    return _object\r\n  }\r\n\r\n\r\n  function copyPropDescs(target, source) {\r\n    Object.defineProperties(target,\r\n      Object.getOwnPropertyDescriptors(source)\r\n    )\r\n  }\r\n}\r\n \r\n// ------------------------\r\n// Test properties\r\n// ------------------------\r\n\r\n\r\nconsole.log(`  shallow deep  func  circ  undefined date  RegExp bigInt`)\r\n\r\nlog(A);\r\nlog(B);\r\nlog(C);\r\nlog(D);\r\nlog(E);\r\nlog(F);\r\nlog(G);\r\nlog(H);\r\nlog(I);\r\nlog(J);\r\nlog(K);\r\nlog(L);\r\nlog(M);\r\nlog(N);\r\nlog(O);\r\nlog(P);\r\nlog(Q);\r\nlog(R);\r\nlog(S);\r\nlog(T);\r\nlog(U);\r\n\r\nconsole.log(`  shallow deep  func  circ  undefined date  RegExp bigInt\r\n----\r\nLEGEND:\r\nshallow - solution create shallow copy\r\ndeep - solution create deep copy\r\nfunc - solution copy functions\r\ncirc - solution can copy object with circular references\r\nundefined - solution copy fields with undefined value\r\ndate - solution can copy date\r\nRegExp - solution can copy fields with regular expressions\r\nbigInt - solution can copy BigInt\r\n`)\r\n\r\n\r\n// ------------------------\r\n// Helper functions\r\n// ------------------------\r\n\r\n\r\nfunction deepCompare(obj1,obj2) {\r\n  return JSON.stringify(obj1)===JSON.stringify(obj2);\r\n}\r\n\r\nfunction getCase() { // pure data case\r\n  return { \r\n    undef: undefined,\r\n    bool: true, num: 1, str: \"txt1\",    \r\n    e1: null, e2: [], e3: {}, e4: 0, e5: false,\r\n    arr: [ false, 2, \"txt3\", null, [], {},\r\n      [ true,4,\"txt5\",null, [], {},  [true,6,\"txt7\",null,[],{} ], \r\n        {bool: true,num: 8, str: \"txt9\", e1:null, e2:[] ,e3:{} ,e4: 0, e5: false}\r\n      ],\r\n        {bool: true,num: 10, str: \"txt11\", e1:null, e2:[] ,e3:{} ,e4: 0, e5: false}\r\n    ], \r\n    obj: { \r\n        bool: true, num: 12, str: \"txt13\",\r\n        e1: null, e2: [], e3: {}, e4: 0, e5: false,\r\n        arr: [true,14,\"txt15\",null,[],{} ],\r\n        obj: { \r\n          bool: true, num: 16, str: \"txt17\",\r\n          e1: null, e2: [], e3: {}, e4: 0, e5: false,\r\n          arr: [true,18,\"txt19\",null,[],{} ],\r\n          obj: {bool: true,num: 20, str: \"txt21\", e1:null, e2:[] ,e3:{} ,e4: 0, e5: false}\r\n      } \r\n    } \r\n  };\r\n}\r\n\r\nfunction check(org, copy, field, newValue) {\r\n  copy[field] = newValue;\r\n  return deepCompare(org,copy); \r\n}\r\n\r\nfunction testFunc(f) {\r\n\tlet o = { a:1, fun: (i,j)=&gt; i+j };\r\n  let c = f(o);\r\n  \r\n  let val = false\r\n  try{\r\n    val = c.fun(3,4)==7;\r\n  } catch(e) { }\r\n  return val;\r\n} \r\n\r\nfunction testCirc(f) {\r\n\tfunction Circ() {\r\n    this.me = this;\r\n  }\r\n\r\n  var o = {\r\n      x: 'a',\r\n      circ: new Circ(),\r\n      obj_circ: null,\r\n  };\r\n  \r\n  o.obj_circ = o;\r\n\r\n  let val = false;\r\n\r\n  try{\r\n    let c = f(o);  \r\n    val = (o.obj_circ == o) &amp;&amp; (o.circ == o.circ.me);\r\n  } catch(e) { }\r\n  return val;\r\n} \r\n\r\nfunction testRegExp(f) {\r\n  let o = {\r\n    re: /a[0-9]+/,\r\n  };\r\n  \r\n  let val = false;\r\n\r\n  try{\r\n    let c = f(o);  \r\n    val = (String(c.re) == String(/a[0-9]+/));\r\n  } catch(e) { }\r\n  return val;\r\n}\r\n\r\nfunction testDate(f) {\r\n  let o = {\r\n    date: new Date(),\r\n  };\r\n  \r\n  let val = false;\r\n\r\n  try{\r\n    let c = f(o);  \r\n    val = (+new Date(c.date) == +new Date(o.date));\r\n  } catch(e) { }\r\n  return val;\r\n}\r\n\r\nfunction testBigInt(f) {\r\n  let val = false;\r\n  \r\n  try{\r\n    let o = {\r\n      big: 123n,\r\n    };\r\n  \r\n    let c = f(o);  \r\n  \r\n    val = o.big == c.big;\r\n  } catch(e) { }\r\n  \r\n  return val;\r\n}\r\n\r\nfunction log(f) {\r\n  let o = getCase();  // orginal object\r\n  let oB = getCase(); // \"backup\" used for shallow valid test\r\n  \r\n  let c1 = f(o); // copy 1 for reference\r\n  let c2 = f(o); // copy 2 for test shallow values\r\n  let c3 = f(o); // copy 3 for test deep values\r\n\r\n  let is_proper_copy = deepCompare(c1,o);  // shoud be true\r\n  \r\n  // shallow changes\r\n  let testShallow = \r\n    [ ['bool',false],['num',666],['str','xyz'],['arr',[]],['obj',{}] ]\r\n    .reduce((acc,curr)=&gt; acc &amp;&amp; check(c1,c2,curr[0], curr[1]), true );\r\n  \r\n  // should be true (original object shoud not have changed shallow fields)\r\n  let is_valid = deepCompare(o,oB); \r\n\r\n  // deep test (intruduce some change)\r\n  if (c3.arr[6]) c3.arr[6][7].num = 777;\r\n  \r\n  let diff_shallow = !testShallow; // shoud be true (shallow field was copied)\r\n  let diff_deep = !deepCompare(c1,c3);    // shoud be true (deep field was copied)\r\n  let can_copy_functions = testFunc(f);\r\n  let can_copy_circular = testCirc(f);\r\n  let can_copy_regexp = testRegExp(f);\r\n  let can_copy_date = testDate(f);\r\n  let can_copy_bigInt = testBigInt(f);\r\n  \r\n  let has_undefined = 'undef' in c1; // field with undefined value is copied?  \r\n  let is_ok = is_valid &amp;&amp; is_proper_copy;\r\n  let b=(bool) =&gt; (bool+'').padEnd(5,' '); // bool value to formated string\r\n  \r\n  testFunc(f);\r\n  \r\n  if(is_ok) {\r\n    console.log(`${f.name} ${b(diff_shallow)}   ${b(diff_deep)} ${b(can_copy_functions)} ${b(can_copy_circular)} ${b(has_undefined)}     ${b(can_copy_date)} ${b(can_copy_regexp)}  ${b(can_copy_bigInt)}`)\r\n  } else {\r\n    console.log(`${f.name}: INVALID ${is_valid} ${is_proper_copy}`,{c1})\r\n  }\r\n  \r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://code.jquery.com/jquery-3.5.0.min.js\" integrity=\"sha256-xNzN2a4ltkB44Mc/Jz3pT4iU1cmeR0FkXs4pru/JxaQ=\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\r\n&lt;script src=\"https://cdn.jsdelivr.net/npm/lodash@4.17.15/lodash.min.js\"&gt;&lt;/script&gt;\r\n\r\nThis snippet only presents tested solutions and show differences between them (but it no make performence tests)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Below there are example results for Chrome for shallow-big object</p>\n\n<p><a href=\"https://i.stack.imgur.com/zluC1.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/zluC1.png\" alt=\"enter image description here\"></a></p>\n"},{"score":22,"body":"<h2>Update 06 July 2020</h2>\n<p>There are three (3) ways to clone objects in JavaScript. As objects in JavaScript are reference values, you can't simply just copy using the =.</p>\n<p>The ways are:</p>\n<pre><code>const food = { food: 'apple', drink: 'milk' }\n\n\n// 1. Using the &quot;Spread&quot;\n// ------------------\n\n{ ...food }\n\n\n// 2. Using &quot;Object.assign&quot;\n// ------------------\n\nObject.assign({}, food)\n\n\n// 3. &quot;JSON&quot;\n// ------------------\n\nJSON.parse(JSON.stringify(food))\n\n// RESULT:\n// { food: 'apple', drink: 'milk' }\n\n</code></pre>\n<p>Hope that this can be used as a reference summary.</p>\n"},{"score":0,"body":"<p>The most correct to copy object is use <code>Object.create</code>:</p>\n<pre class=\"lang-js prettyprint-override\"><code>Object.create(Object.getPrototypeOf(obj), Object.getOwnPropertyDescriptors(obj));\n</code></pre>\n<p>Such a notation will make identically the same object with right prototype and hidden properties.</p>\n"}],"score":3206}