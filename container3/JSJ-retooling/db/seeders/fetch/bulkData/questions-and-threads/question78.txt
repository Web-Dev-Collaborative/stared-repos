{"body":"<p>How do I determine if variable is <code>undefined</code> or <code>null</code>?</p>\n\n<p>My code is as follows:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var EmpName = $(\"div#esd-names div#name\").attr('class');\nif(EmpName == 'undefined'){\n  // DO SOMETHING\n};\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div id=\"esd-names\"&gt;\n  &lt;div id=\"name\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n\n\n<p>But if I do this, the JavaScript interpreter halts execution.</p>\n","title":"How can I determine if a variable is &#39;undefined&#39; or &#39;null&#39;?","answers":[{"score":2983,"body":"<p>You can use the qualities of the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-abstract-equality-comparison\" rel=\"noreferrer\">abstract equality operator</a> to do this:</p>\n\n<pre><code>if (variable == null){\n    // your code here.\n}\n</code></pre>\n\n<p>Because <code>null == undefined</code> is true, the above code will catch both <code>null</code> and <code>undefined</code>.</p>\n"},{"score":29,"body":"<p>jQuery <code>attr()</code> function returns either a blank string or the actual value (and never <code>null</code> or <code>undefined</code>). The only time it returns <code>undefined</code> is when your selector didn't return any element.</p>\n\n<p>So you may want to test against a blank string. Alternatively, since blank strings, null and undefined are false-y, you can just do this:</p>\n\n<pre><code>if (!EmpName) { //do something }\n</code></pre>\n"},{"score":189,"body":"<pre><code>if (variable == null) {\n    // Do stuff, will only match null or undefined, this won't match false\n}\n</code></pre>\n"},{"score":245,"body":"<p>Combining the above answers, it seems the most complete answer would be:</p>\n\n<pre><code>if( typeof variable === 'undefined' || variable === null ){\n    // Do stuff\n}\n</code></pre>\n\n<p>This should work for any variable that is either undeclared or declared and explicitly set to null or undefined.  The boolean expression should evaluate to false for any declared variable that has an actual non-null value.</p>\n"},{"score":9,"body":"<p>I've just had this problem i.e. checking if an object is null.<br>\nI simply use this:</p>\n\n<pre><code>if (object) {\n    // Your code\n}\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>if (document.getElementById(\"enterJob\")) {\n    document.getElementById(\"enterJob\").className += ' current';\n}\n</code></pre>\n"},{"score":1145,"body":"<p>The standard way to catch <code>null</code> and <code>undefined</code> simultaneously is this:</p>\n\n<pre><code>if (variable == null) {\n     // do something \n}\n</code></pre>\n\n<p>--which is 100% equivalent to the more explicit but less concise:</p>\n\n<pre><code>if (variable === undefined || variable === null) {\n     // do something \n}\n</code></pre>\n\n<p>When writing professional JS, it's taken for granted that <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">type equality and the behavior of <code>==</code> vs <code>===</code></a> is understood. Therefore we use <code>==</code> and only compare to <code>null</code>.</p>\n\n<hr>\n\n<h2><strong><em>Edit again</em></strong></h2>\n\n<p>The comments suggesting the use of <code>typeof</code> are simply <em>wrong.</em> Yes, my solution above will cause a ReferenceError if the variable doesn't exist. <em>This is a good thing.</em> This ReferenceError is desirable: it will help you find your mistakes and fix them before you ship your code, just like compiler errors would in other languages. Use <code>try</code>/<code>catch</code> if you are working with input you don't have control over.</p>\n\n<p><strong>You should not have any references to undeclared variables in your code.</strong></p>\n"},{"score":13,"body":"<p>If the variable you want to check is a global, do</p>\n\n<pre><code>if (window.yourVarName) {\n    // Your code here\n}\n</code></pre>\n\n<p>This way to check will not throw an error even if the <code>yourVarName</code> variable doesn't exist.</p>\n\n<h2>Example: I want to know if my browser supports History API</h2>\n\n<pre><code>if (window.history) {\n    history.back();\n}\n</code></pre>\n\n<h2>How this works:</h2>\n\n<p><code>window</code> is an object which holds all global variables as its properties, and in JavaScript it is legal to try to access a non-existing object property. If <code>history</code> doesn't exist then <code>window.history</code> returns <code>undefined</code>. <code>undefined</code> is falsey, so code in an <code>if(undefined){}</code> block won't run.</p>\n"},{"score":-1,"body":"<p>Calling typeof null returns a value of “object”, as the special value null is considered to be an empty object reference. Safari through version 5 and Chrome through version 7 have a quirk where calling typeof on a regular expression returns “function” while all other browsers return “object”.</p>\n"},{"score":9,"body":"<p>Since you are using <strong>jQuery</strong>, you can determine whether a variable is undefined or its value is null by using a single function.</p>\n\n<pre><code>var s; // undefined\njQuery.isEmptyObject(s); // will return true;\n\ns = null; // defined as null\njQuery.isEmptyObject(s); // will return true;\n\n// usage\nif(jQuery.isEmptyObject(s)){\n    alert('Either variable: s is undefined or its value is null');\n}else{\n     alert('variable: s has value ' + s);\n}\n\ns = 'something'; // defined with some value\njQuery.isEmptyObject(s); // will return false;\n</code></pre>\n"},{"score":6,"body":"<p>jQuery check element not null:</p>\n\n<pre><code>var dvElement = $('#dvElement');\n\nif (dvElement.length  &gt; 0) {\n    // Do something\n}\nelse{\n    // Else do something else\n}\n</code></pre>\n"},{"score":96,"body":"<pre><code>if (typeof EmpName != 'undefined' &amp;&amp; EmpName) {\n</code></pre>\n\n<p>will evaluate to true if value is not:</p>\n\n<ul>\n<li><p><strong>null</strong></p></li>\n<li><p><strong>undefined</strong></p></li>\n<li><p><strong>NaN</strong></p></li>\n<li><p><strong>empty string (\"\")</strong></p></li>\n<li><p><strong>0</strong></p></li>\n<li><p><strong>false</strong></p></li>\n</ul>\n"},{"score":-1,"body":"<pre><code>var x;\nif (x === undefined) {\n    alert (\"only declared, but not defined.\")\n};\nif (typeof y === \"undefined\") {\n    alert (\"not even declared.\")\n};\n</code></pre>\n\n<p>You can only use second one: as it will check for both definition and declaration</p>\n"},{"score":21,"body":"<p>I've come to write my own function for this. JavaScript is weird.</p>\n\n<p>It is usable on literally anything. (Note that this also checks if the variable contains any usable <em>values</em>. But since this information is usually also needed, I think it's worth posting). Please consider leaving a note.</p>\n\n<pre><code>function empty(v) {\n    let type = typeof v;\n    if (type === 'undefined') {\n        return true;\n    }\n    if (type === 'boolean') {\n        return !v;\n    }\n    if (v === null) {\n        return true;\n    }\n    if (v === undefined) {\n        return true;\n    }\n    if (v instanceof Array) {\n        if (v.length &lt; 1) {\n            return true;\n        }\n    } else if (type === 'string') {\n        if (v.length &lt; 1) {\n            return true;\n        }\n        if (v === '0') {\n            return true;\n        }\n    } else if (type === 'object') {\n        if (Object.keys(v).length &lt; 1) {\n            return true;\n        }\n    } else if (type === 'number') {\n        if (v === 0) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>TypeScript-compatible.</p>\n\n<hr>\n\n<p>This function should do <em>exactly</em> the same thing like PHP's <a href=\"http://php.net/manual/en/function.empty.php\" rel=\"nofollow noreferrer\"><code>empty()</code> function</a> (see <code>RETURN VALUES</code>)</p>\n\n<p>Considers <code>undefined</code>, <code>null</code>, <code>false</code>, <code>0</code>, <code>0.0</code>, <code>\"0\"</code> <code>{}</code>, <code>[]</code> as empty.</p>\n\n<p><code>\"0.0\"</code>, <code>NaN</code>, <code>\" \"</code>, <code>true</code> are considered non-empty.</p>\n"},{"score":2,"body":"<p>To test if a variable is null or undefined I use the below code.</p>\n\n<pre><code>    if(typeof sVal === 'undefined' || sVal === null || sVal === ''){\n      console.log('variable is undefined or null');\n    }\n</code></pre>\n"},{"score":2,"body":"<p>I run this test in the Chrome console. Using (void 0) you can check undefined:</p>\n\n<pre><code>var c;\nundefined\nif (c === void 0) alert();\n// output =  undefined\nvar c = 1;\n// output =  undefined\nif (c === void 0) alert();\n// output =   undefined\n// check c value  c\n// output =  1\nif (c === void 0) alert();\n// output =  undefined\nc = undefined;\n// output =  undefined\nif (c === void 0) alert();\n// output =   undefined\n</code></pre>\n"},{"score":0,"body":"<p>Best way:</p>\n\n<pre><code>if(typeof variable==='undefined' || variable===null) {\n\n/* do your stuff */\n}\n</code></pre>\n"},{"score":1,"body":"<pre><code>var i;\n\nif (i === null || typeof i === 'undefined') {\n    console.log(i, 'i is undefined or null')\n}\nelse {\n    console.log(i, 'i has some value')\n}\n</code></pre>\n"},{"score":-1,"body":"<p>I still think the best/safe way to test these two conditions is to cast the value to a string:</p>\n\n<pre><code>var EmpName = $(\"div#esd-names div#name\").attr('class');\n\n// Undefined check\nif (Object.prototype.toString.call(EmpName) === '[object Undefined]'){\n    // Do something with your code\n}\n\n// Nullcheck\nif (Object.prototype.toString.call(EmpName) === '[object Null]'){\n    // Do something with your code\n}\n</code></pre>\n"},{"score":-3,"body":"<p>You can check if the value is undefined or null by simply using typeof:</p>\n\n<pre><code>if(typeof value == 'undefined'){\n</code></pre>\n"},{"score":-4,"body":"<p><code>if(x==null)</code> is a bad idea in JavaScript. Judge with <code>\"==\"</code> - it may cause an unexpected type coercion, and it can't be read by CoffeeScript,\n <strong><em>never use \"==\" or \"!=\" in condition judgment!</em></strong></p>\n\n<p><code>if(x)</code> will be better, but be careful with <strong>0 and \"\"</strong>. It will be treated as <strong>false</strong>, not the equal method with <code>\"!= null\"</code> is <strong>true</strong>.</p>\n\n<p><a href=\"https://i.stack.imgur.com/gIXSe.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/gIXSe.png\" alt=\"Enter image description here\"></a></p>\n\n<p>See <em><a href=\"https://www.w3schools.com/js/js_best_practices.asp\" rel=\"nofollow noreferrer\">JavaScript Best Practices</a></em>.</p>\n"},{"score":3,"body":"<p>With the solution below: </p>\n\n<pre><code>const getType = (val) =&gt; typeof val === 'undefined' || !val ? null : typeof val;\nconst isDeepEqual = (a, b) =&gt; getType(a) === getType(b);\n\nconsole.log(isDeepEqual(1, 1)); // true\nconsole.log(isDeepEqual(null, null)); // true\nconsole.log(isDeepEqual([], [])); // true\nconsole.log(isDeepEqual(1, \"1\")); // false\netc...\n</code></pre>\n\n<p>I'm able to check for the following:</p>\n\n<ul>\n<li>null </li>\n<li>undefined </li>\n<li>NaN</li>\n<li>empty</li>\n<li>string (\"\") </li>\n<li>0</li>\n<li>false</li>\n</ul>\n"},{"score":1,"body":"<pre><code>(null == undefined)  // true\n\n(null === undefined) // false\n</code></pre>\n\n<p>Because === checks for both the type and value. Type of both are different but value is the same.</p>\n"},{"score":4,"body":"<p>The easiest way to check is:</p>\n\n<pre><code>if(!variable) {\n  // If the variable is null or undefined then execution of code will enter here.\n}\n</code></pre>\n"},{"score":6,"body":"<p>You can simply use the following (I know there are shorter ways to do this, but this may make it easier to visually observe, at least for others looking at the code).</p>\n\n<pre><code>if (x === null || x === undefined) {\n // Add your response code here, etc.\n}\n</code></pre>\n"},{"score":15,"body":"<p><strong>The shortest and easiest:</strong></p>\n\n<pre><code>if(!EmpName ){\n // DO SOMETHING\n}\n</code></pre>\n\n<p>this will evaluate true if EmpName is:</p>\n\n<ul>\n<li>null</li>\n<li>undefined</li>\n<li>NaN</li>\n<li>empty</li>\n<li>string (\"\")</li>\n<li>0</li>\n<li>false</li>\n</ul>\n"},{"score":9,"body":"<p>In <strong>JavaScript</strong>, as per my knowledge, we can check an <strong>undefined</strong>, <strong>null</strong> or <strong>empty</strong> variable like below.</p>\n<pre><code>if (variable === undefined){\n}\n\nif (variable === null){\n}\n\nif (variable === ''){\n}\n</code></pre>\n<p><strong>Check all conditions:</strong></p>\n<pre><code>if(variable === undefined || variable === null || variable === ''){\n}\n</code></pre>\n"},{"score":24,"body":"<p>Probably the shortest way to do this is:</p>\n\n<pre><code>if(EmpName == null) { /* DO SOMETHING */ };\n</code></pre>\n\n<p>Here is proof:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function check(EmpName) {\r\n  if(EmpName == null) { return true; };\r\n  return false;\r\n}\r\n\r\nvar log = (t,a) =&gt; console.log(`${t} -&gt; ${check(a)}`);\r\n\r\nlog('null', null);\r\nlog('undefined', undefined);\r\nlog('NaN', NaN);\r\nlog('\"\"', \"\");\r\nlog('{}', {});\r\nlog('[]', []);\r\nlog('[1]', [1]);\r\nlog('[0]', [0]);\r\nlog('[[]]', [[]]);\r\nlog('true', true);\r\nlog('false', false);\r\nlog('\"true\"', \"true\");\r\nlog('\"false\"', \"false\");\r\nlog('Infinity', Infinity);\r\nlog('-Infinity', -Infinity);\r\nlog('1', 1);\r\nlog('0', 0);\r\nlog('-1', -1);\r\nlog('\"1\"', \"1\");\r\nlog('\"0\"', \"0\");\r\nlog('\"-1\"', \"-1\");\r\n\r\n// \"void 0\" case\r\nconsole.log('---\\n\"true\" is:', true);\r\nconsole.log('\"void 0\" is:', void 0);\r\nlog(void 0,void 0); // \"void 0\" is \"undefined\" </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And here are more details about <code>==</code> (source <a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" rel=\"noreferrer\">here</a>)</p>\n\n<p><a href=\"https://i.stack.imgur.com/nkpj6.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/nkpj6.png\" alt=\"Enter image description here\"></a></p>\n\n<p><strong>BONUS</strong>: reason why <code>===</code> is more clear than <code>==</code> (look on <a href=\"https://stackoverflow.com/a/57255870/860099\">agc answer</a>)</p>\n\n<p><a href=\"https://i.stack.imgur.com/7MeG6.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/7MeG6.png\" alt=\"Enter image description here\"></a></p>\n"},{"score":2,"body":"<p>Let's look at this,</p>\n\n<ol>\n<li><p>&nbsp;</p>\n\n<pre><code>let apple; // Only declare the variable as apple\nalert(apple); // undefined\n</code></pre>\n\n<p>In the above, the variable is only declared as <code>apple</code>. In this case, if we call method <code>alert</code> it will display undefined.</p></li>\n<li><p>&nbsp;</p>\n\n<pre><code>   let apple = null; /* Declare the variable as apple and initialized but the value is null */\n   alert(apple); // null\n</code></pre></li>\n</ol>\n\n<p>In the second one it displays null, because variable of <code>apple</code> value is null.</p>\n\n<p>So you can check whether a value is undefined or null.</p>\n\n<pre><code>if(apple !== undefined || apple !== null) {\n    // Can use variable without any error\n}\n</code></pre>\n"},{"score":1,"body":"<p>The <code>foo == null</code> check should do the trick and resolve the \"undefined OR null\" case in the shortest manner. (Not considering \"foo is not declared\" case.) But people who are used to have 3 equals (as the best practice) might not accept it. Just look at <a href=\"https://github.com/eslint/eslint/blob/master/lib/rules/eqeqeq.js\" rel=\"nofollow noreferrer\">eqeqeq</a> or <a href=\"https://palantir.github.io/tslint/rules/triple-equals/\" rel=\"nofollow noreferrer\">triple-equals</a> rules in eslint and tslint...</p>\n\n<p>The explicit approach, when we are checking if a variable is <code>undefined</code> or <code>null</code> separately, should be applied in this case, and my contribution to the topic (27 non-negative answers for now!) is to use <code>void 0</code> as both short and safe way to perform check for <code>undefined</code>.</p>\n\n<p>Using <code>foo === undefined</code> is not safe because undefined is not a reserved word and can be shadowed (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined\" rel=\"nofollow noreferrer\">MDN</a>). Using <code>typeof === 'undefined'</code> check is safe, but if we are not going to care about foo-is-undeclared case the following approach can be used:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if (foo === void 0 || foo === null) { ... }\n</code></pre>\n"},{"score":1,"body":"<p>if you create a function to check it:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>export function isEmpty (v) {\n if (typeof v === \"undefined\") {\n   return true;\n }\n if (v === null) {\n   return true;\n }\n if (typeof v === \"object\" &amp;&amp; Object.keys(v).length === 0) {\n   return true;\n }\n\n if (Array.isArray(v) &amp;&amp; v.length === 0) {\n   return true;\n }\n\n if (typeof v === \"string\" &amp;&amp; v.trim().length === 0) {\n   return true;\n }\n\nreturn false;\n}\n</code></pre>\n"},{"score":0,"body":"<p>I know I'm 10 years late. But I'll leave my answer here just in case anybody needs a short method.</p>\n<p>Installing <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\">Lodash</a> in your project could be useful because of the helper functions that could come in handy in these situations.</p>\n<p>Using ES6 modules, import would look like this:</p>\n<pre><code>import isNull from 'lodash/isNull';\n\nimport isUndefined from 'lodash/isUndefined';\n\nimport isNil from 'lodash/isNil';\n</code></pre>\n<p>Would be better if only the used functions are imported.</p>\n<p>Lodash's <a href=\"https://lodash.com/docs/4.17.15#isNull\" rel=\"nofollow noreferrer\">isNull</a> checks if value is null.</p>\n<pre><code>const value = null;\n \n if(isNull(value)) {\n    // do something if null\n }\n</code></pre>\n<p>lodash's <a href=\"https://lodash.com/docs/4.17.15#isUndefined\" rel=\"nofollow noreferrer\">isUndefined</a> checks if value is undefined.</p>\n<pre><code>const value = undefined;\n\nif(isUndefined(value)) {\n   // do something if undefined.\n}\n</code></pre>\n<p><a href=\"https://lodash.com/docs/4.17.15#isNil\" rel=\"nofollow noreferrer\">isNil</a> Checks if value is null <strong>OR</strong> undefined. I prefer this method over other two, because it checks both undefined and null.</p>\n"}],"score":2224}