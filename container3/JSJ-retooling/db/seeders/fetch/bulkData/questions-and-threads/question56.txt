{"body":"<p>How can I display JSON in an easy-to-read (for human readers) format? I'm looking primarily for indentation and whitespace, with perhaps even colors / font-styles / etc.</p>\n","title":"pretty-print JSON using JavaScript","answers":[{"score":26,"body":"<p>I use the <a href=\"https://chrome.google.com/extensions/detail/chklaanhfefbnpoihckbnefhakgolnmc\" rel=\"noreferrer\">JSONView Chrome extension</a> (it is as pretty as it gets :):</p>\n\n<p>Edit: added <code>jsonreport.js</code></p>\n\n<p>I've also released an online stand-alone JSON pretty print viewer, jsonreport.js, that provides a human readable HTML5 report you can use to view any JSON data.</p>\n\n<p>You can read more about the format in <em><a href=\"https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat\" rel=\"noreferrer\">New JavaScript HTML5 Report Format</a></em>.</p>\n"},{"score":4,"body":"<p>Douglas Crockford's JSON in JavaScript library will pretty print JSON via the stringify method.</p>\n\n<p>You may also find the answers to this older question useful: <a href=\"https://stackoverflow.com/questions/352098/how-to-pretty-print-json-script\">How can I pretty-print JSON in (unix) shell script?</a></p>\n"},{"score":5397,"body":"<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" rel=\"noreferrer\">Pretty-printing is implemented natively in <code>JSON.stringify()</code></a></strong>. The third argument enables pretty printing and sets the spacing to use:</p>\n\n<pre><code>var str = JSON.stringify(obj, null, 2); // spacing level = 2\n</code></pre>\n\n<p>If you need syntax highlighting, you might use some regex magic like so:</p>\n\n<pre><code>function syntaxHighlight(json) {\n    if (typeof json != 'string') {\n         json = JSON.stringify(json, undefined, 2);\n    }\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\n    });\n}\n</code></pre>\n\n<p>See in action here: <a href=\"http://jsfiddle.net/KJQ9K/554/\" rel=\"noreferrer\">jsfiddle</a></p>\n\n<p><strong>Or a full snippet provided below:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function output(inp) {\r\n    document.body.appendChild(document.createElement('pre')).innerHTML = inp;\r\n}\r\n\r\nfunction syntaxHighlight(json) {\r\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\r\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n                cls = 'key';\r\n            } else {\r\n                cls = 'string';\r\n            }\r\n        } else if (/true|false/.test(match)) {\r\n            cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n            cls = 'null';\r\n        }\r\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\r\n    });\r\n}\r\n\r\nvar obj = {a:1, 'b':'foo', c:[false,'false',null, 'null', {d:{e:1.3e5,f:'1.3e5'}}]};\r\nvar str = JSON.stringify(obj, undefined, 4);\r\n\r\noutput(str);\r\noutput(syntaxHighlight(str));</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\r\n.string { color: green; }\r\n.number { color: darkorange; }\r\n.boolean { color: blue; }\r\n.null { color: magenta; }\r\n.key { color: red; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":9,"body":"<p>For debugging purpose I use:</p>\n\n<pre>\nconsole.debug(\"%o\", data);\n</pre>\n\n<ul>\n<li><a href=\"https://getfirebug.com/wiki/index.php/Console_API\">https://getfirebug.com/wiki/index.php/Console_API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/console\">https://developer.mozilla.org/en-US/docs/DOM/console</a></li>\n</ul>\n"},{"score":297,"body":"<p>User Pumbaa80's answer is great if you have an <strong>object</strong> you want pretty printed. If you're starting from a valid JSON <strong>string</strong> that you want to pretty printed, you need to convert it to an object first:</p>\n\n<pre><code>var jsonString = '{\"some\":\"json\"}';\nvar jsonPretty = JSON.stringify(JSON.parse(jsonString),null,2);  \n</code></pre>\n\n<p>This builds a JSON object from the string, and then converts it back to a string using JSON stringify's pretty print.</p>\n"},{"score":33,"body":"<p>Based on Pumbaa80's answer I have modified the code to use the console.log colours (working on Chrome for sure) and not HTML. Output can be seen inside console. You can edit the _variables inside the function adding some more styling.</p>\n\n<pre><code>function JSONstringify(json) {\n    if (typeof json != 'string') {\n        json = JSON.stringify(json, undefined, '\\t');\n    }\n\n    var \n        arr = [],\n        _string = 'color:green',\n        _number = 'color:darkorange',\n        _boolean = 'color:blue',\n        _null = 'color:magenta',\n        _key = 'color:red';\n\n    json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var style = _number;\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                style = _key;\n            } else {\n                style = _string;\n            }\n        } else if (/true|false/.test(match)) {\n            style = _boolean;\n        } else if (/null/.test(match)) {\n            style = _null;\n        }\n        arr.push(style);\n        arr.push('');\n        return '%c' + match + '%c';\n    });\n\n    arr.unshift(json);\n\n    console.log.apply(console, arr);\n}\n</code></pre>\n\n<p>Here is a bookmarklet you can use:</p>\n\n<pre><code>javascript:function JSONstringify(json) {if (typeof json != 'string') {json = JSON.stringify(json, undefined, '\\t');}var arr = [],_string = 'color:green',_number = 'color:darkorange',_boolean = 'color:blue',_null = 'color:magenta',_key = 'color:red';json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {var style = _number;if (/^\"/.test(match)) {if (/:$/.test(match)) {style = _key;} else {style = _string;}} else if (/true|false/.test(match)) {style = _boolean;} else if (/null/.test(match)) {style = _null;}arr.push(style);arr.push('');return '%c' + match + '%c';});arr.unshift(json);console.log.apply(console, arr);};void(0);\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var obj = {a:1, 'b':'foo', c:[false,null, {d:{e:1.3e5}}]};\nJSONstringify(obj);\n</code></pre>\n\n<p>Edit: I just tried to escape the % symbol with this line, after the variables declaration:</p>\n\n<pre><code>json = json.replace(/%/g, '%%');\n</code></pre>\n\n<p>But I find out that Chrome is not supporting % escaping in the console. Strange... Maybe this will work in the future.</p>\n\n<p>Cheers!</p>\n\n<p><a href=\"https://i.stack.imgur.com/GsMl9.jpg\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/GsMl9.jpg\" alt=\"enter image description here\"></a></p>\n"},{"score":4,"body":"<p>I ran into an issue today with @Pumbaa80's code. I'm trying to apply JSON syntax highlighting to data that I'm rendering in a <a href=\"http://lhorie.github.io/mithril/\" rel=\"nofollow noreferrer\">Mithril</a> view, so I need to create DOM nodes for everything in the <code>JSON.stringify</code> output.</p>\n\n<p>I split the really long regex into its component parts as well.</p>\n\n<pre class=\"lang-coffee prettyprint-override\"><code>render_json = (data) -&gt;\n  # wraps JSON data in span elements so that syntax highlighting may be\n  # applied. Should be placed in a `whitespace: pre` context\n  if typeof(data) isnt 'string'\n    data = JSON.stringify(data, undefined, 2)\n  unicode =     /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/\n  keyword =     /\\b(true|false|null)\\b/\n  whitespace =  /\\s+/\n  punctuation = /[,.}{\\[\\]]/\n  number =      /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/\n\n  syntax = '(' + [unicode, keyword, whitespace,\n            punctuation, number].map((r) -&gt; r.source).join('|') + ')'\n  parser = new RegExp(syntax, 'g')\n\n  nodes = data.match(parser) ? []\n  select_class = (node) -&gt;\n    if punctuation.test(node)\n      return 'punctuation'\n    if /^\\s+$/.test(node)\n      return 'whitespace'\n    if /^\\\"/.test(node)\n      if /:$/.test(node)\n        return 'key'\n      return 'string'\n\n    if /true|false/.test(node)\n      return 'boolean'\n\n     if /null/.test(node)\n       return 'null'\n     return 'number'\n  return nodes.map (node) -&gt;\n    cls = select_class(node)\n    return Mithril('span', {class: cls}, node)\n</code></pre>\n\n<p>Code in context on Github <a href=\"https://github.com/justjake/squidwork/blob/f0ed0a2dd25f5182ae792da0695e46ec86a665f9/squidwork/web/monitor/templates/app.coffee#L48\" rel=\"nofollow noreferrer\">here</a></p>\n"},{"score":9,"body":"<p>Unsatisfied with other pretty printers for Ruby, I wrote my own (<a href=\"http://github.com/Phrogz/NeatJSON\" rel=\"noreferrer\">NeatJSON</a>) and then <a href=\"https://github.com/Phrogz/NeatJSON/blob/master/javascript/neatjson.js\" rel=\"noreferrer\">ported it to JavaScript</a> including <a href=\"http://phrogz.net/js/neatjson/neatjson.html\" rel=\"noreferrer\">a free online formatter</a>. The code is free under MIT license (quite permissive).</p>\n\n<p>Features (all optional):</p>\n\n<ul>\n<li>Set a line width and wrap in a way that keeps objects and arrays on the same line when they fit, wrapping one value per line when they don't.</li>\n<li>Sort object keys if you like.</li>\n<li>Align object keys (line up the colons).</li>\n<li>Format floating point numbers to specific number of decimals, without messing up the integers.</li>\n<li>'Short' wrapping mode puts opening and closing brackets/braces on the same line as values, providing a format that some prefer.</li>\n<li>Granular control over spacing for arrays and objects, between brackets, before/after colons and commas.</li>\n<li>Function is made available to both web browsers and Node.js.</li>\n</ul>\n\n<p>I'll copy the source code here so that this is not just a link to a library, but I encourage you to go to the <a href=\"http://github.com/Phrogz/NeatJSON\" rel=\"noreferrer\">GitHub project page</a>, as that will be kept up-to-date and the code below will not.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(function(exports){\nexports.neatJSON = neatJSON;\n\nfunction neatJSON(value,opts){\n  opts = opts || {}\n  if (!('wrap'          in opts)) opts.wrap = 80;\n  if (opts.wrap==true) opts.wrap = -1;\n  if (!('indent'        in opts)) opts.indent = '  ';\n  if (!('arrayPadding'  in opts)) opts.arrayPadding  = ('padding' in opts) ? opts.padding : 0;\n  if (!('objectPadding' in opts)) opts.objectPadding = ('padding' in opts) ? opts.padding : 0;\n  if (!('afterComma'    in opts)) opts.afterComma    = ('aroundComma' in opts) ? opts.aroundComma : 0;\n  if (!('beforeComma'   in opts)) opts.beforeComma   = ('aroundComma' in opts) ? opts.aroundComma : 0;\n  if (!('afterColon'    in opts)) opts.afterColon    = ('aroundColon' in opts) ? opts.aroundColon : 0;\n  if (!('beforeColon'   in opts)) opts.beforeColon   = ('aroundColon' in opts) ? opts.aroundColon : 0;\n\n  var apad  = repeat(' ',opts.arrayPadding),\n      opad  = repeat(' ',opts.objectPadding),\n      comma = repeat(' ',opts.beforeComma)+','+repeat(' ',opts.afterComma),\n      colon = repeat(' ',opts.beforeColon)+':'+repeat(' ',opts.afterColon);\n\n  return build(value,'');\n\n  function build(o,indent){\n    if (o===null || o===undefined) return indent+'null';\n    else{\n      switch(o.constructor){\n        case Number:\n          var isFloat = (o === +o &amp;&amp; o !== (o|0));\n          return indent + ((isFloat &amp;&amp; ('decimals' in opts)) ? o.toFixed(opts.decimals) : (o+''));\n\n        case Array:\n          var pieces  = o.map(function(v){ return build(v,'') });\n          var oneLine = indent+'['+apad+pieces.join(comma)+apad+']';\n          if (opts.wrap===false || oneLine.length&lt;=opts.wrap) return oneLine;\n          if (opts.short){\n            var indent2 = indent+' '+apad;\n            pieces = o.map(function(v){ return build(v,indent2) });\n            pieces[0] = pieces[0].replace(indent2,indent+'['+apad);\n            pieces[pieces.length-1] = pieces[pieces.length-1]+apad+']';\n            return pieces.join(',\\n');\n          }else{\n            var indent2 = indent+opts.indent;\n            return indent+'[\\n'+o.map(function(v){ return build(v,indent2) }).join(',\\n')+'\\n'+indent+']';\n          }\n\n        case Object:\n          var keyvals=[],i=0;\n          for (var k in o) keyvals[i++] = [JSON.stringify(k), build(o[k],'')];\n          if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n          keyvals = keyvals.map(function(kv){ return kv.join(colon) }).join(comma);\n          var oneLine = indent+\"{\"+opad+keyvals+opad+\"}\";\n          if (opts.wrap===false || oneLine.length&lt;opts.wrap) return oneLine;\n          if (opts.short){\n            var keyvals=[],i=0;\n            for (var k in o) keyvals[i++] = [indent+' '+opad+JSON.stringify(k),o[k]];\n            if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n            keyvals[0][0] = keyvals[0][0].replace(indent+' ',indent+'{');\n            if (opts.aligned){\n              var longest = 0;\n              for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\n              var padding = repeat(' ',longest);\n              for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\n            }\n            for (var i=keyvals.length;i--;){\n              var k=keyvals[i][0], v=keyvals[i][1];\n              var indent2 = repeat(' ',(k+colon).length);\n              var oneLine = k+colon+build(v,'');\n              keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=\"object\") ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,''));\n            }\n            return keyvals.join(',\\n') + opad + '}';\n          }else{\n            var keyvals=[],i=0;\n            for (var k in o) keyvals[i++] = [indent+opts.indent+JSON.stringify(k),o[k]];\n            if (opts.sorted) keyvals = keyvals.sort(function(kv1,kv2){ kv1=kv1[0]; kv2=kv2[0]; return kv1&lt;kv2?-1:kv1&gt;kv2?1:0 });\n            if (opts.aligned){\n              var longest = 0;\n              for (var i=keyvals.length;i--;) if (keyvals[i][0].length&gt;longest) longest = keyvals[i][0].length;\n              var padding = repeat(' ',longest);\n              for (var i=keyvals.length;i--;) keyvals[i][0] = padRight(padding,keyvals[i][0]);\n            }\n            var indent2 = indent+opts.indent;\n            for (var i=keyvals.length;i--;){\n              var k=keyvals[i][0], v=keyvals[i][1];\n              var oneLine = k+colon+build(v,'');\n              keyvals[i] = (opts.wrap===false || oneLine.length&lt;=opts.wrap || !v || typeof v!=\"object\") ? oneLine : (k+colon+build(v,indent2).replace(/^\\s+/,''));\n            }\n            return indent+'{\\n'+keyvals.join(',\\n')+'\\n'+indent+'}'\n          }\n\n        default:\n          return indent+JSON.stringify(o);\n      }\n    }\n  }\n\n  function repeat(str,times){ // http://stackoverflow.com/a/17800645/405017\n    var result = '';\n    while(true){\n      if (times &amp; 1) result += str;\n      times &gt;&gt;= 1;\n      if (times) str += str;\n      else break;\n    }\n    return result;\n  }\n  function padRight(pad, str){\n    return (str + pad).substring(0, pad.length);\n  }\n}\nneatJSON.version = \"0.5\";\n\n})(typeof exports === 'undefined' ? this : exports);\n</code></pre>\n"},{"score":6,"body":"<p>Thanks a lot @all!\nBased on the previous answers, here is another variant method providing custom replacement rules as parameter:</p>\n\n<pre><code> renderJSON : function(json, rr, code, pre){\n   if (typeof json !== 'string') {\n      json = JSON.stringify(json, undefined, '\\t');\n   }\n  var rules = {\n   def : 'color:black;',    \n   defKey : function(match){\n             return '&lt;strong&gt;' + match + '&lt;/strong&gt;';\n          },\n   types : [\n       {\n          name : 'True',\n          regex : /true/,\n          type : 'boolean',\n          style : 'color:lightgreen;'\n       },\n\n       {\n          name : 'False',\n          regex : /false/,\n          type : 'boolean',\n          style : 'color:lightred;'\n       },\n\n       {\n          name : 'Unicode',\n          regex : /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/,\n          type : 'string',\n          style : 'color:green;'\n       },\n\n       {\n          name : 'Null',\n          regex : /null/,\n          type : 'nil',\n          style : 'color:magenta;'\n       },\n\n       {\n          name : 'Number',\n          regex : /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/,\n          type : 'number',\n          style : 'color:darkorange;'\n       },\n\n       {\n          name : 'Whitespace',\n          regex : /\\s+/,\n          type : 'whitespace',\n          style : function(match){\n             return '&amp;nbsp';\n          }\n       } \n\n    ],\n\n    keys : [\n       {\n           name : 'Testkey',\n           regex : /(\"testkey\")/,\n           type : 'key',\n           style : function(match){\n             return '&lt;h1&gt;' + match + '&lt;/h1&gt;';\n          }\n       }\n    ],\n\n    punctuation : {\n          name : 'Punctuation',\n          regex : /([\\,\\.\\}\\{\\[\\]])/,\n          type : 'punctuation',\n          style : function(match){\n             return '&lt;p&gt;________&lt;/p&gt;';\n          }\n       }\n\n  };\n\n  if('undefined' !== typeof jQuery){\n     rules = $.extend(rules, ('object' === typeof rr) ? rr : {});  \n  }else{\n     for(var k in rr ){\n        rules[k] = rr[k];\n     }\n  }\n    var str = json.replace(/([\\,\\.\\}\\{\\[\\]]|\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n    var i = 0, p;\n    if (rules.punctuation.regex.test(match)) {\n               if('string' === typeof rules.punctuation.style){\n                   return '&lt;span style=\"'+ rules.punctuation.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof rules.punctuation.style){\n                   return rules.punctuation.style(match);\n               } else{\n                  return match;\n               }            \n    }\n\n    if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n            for(i=0;i&lt;rules.keys.length;i++){\n            p = rules.keys[i];\n            if (p.regex.test(match)) {\n               if('string' === typeof p.style){\n                   return '&lt;span style=\"'+ p.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof p.style){\n                   return p.style(match);\n               } else{\n                  return match;\n               }                \n             }              \n           }   \n            return ('function'===typeof rules.defKey) ? rules.defKey(match) : '&lt;span style=\"'+ rules.defKey + '\"&gt;' + match + '&lt;/span&gt;';            \n        } else {\n            return ('function'===typeof rules.def) ? rules.def(match) : '&lt;span style=\"'+ rules.def + '\"&gt;' + match + '&lt;/span&gt;';\n        }\n    } else {\n        for(i=0;i&lt;rules.types.length;i++){\n         p = rules.types[i];\n         if (p.regex.test(match)) {\n               if('string' === typeof p.style){\n                   return '&lt;span style=\"'+ p.style + '\"&gt;' + match + '&lt;/span&gt;';\n               }else if('function' === typeof p.style){\n                   return p.style(match);\n               } else{\n                  return match;\n               }                \n          }             \n        }\n\n     }\n\n    });\n\n  if(true === pre)str = '&lt;pre&gt;' + str + '&lt;/pre&gt;';\n  if(true === code)str = '&lt;code&gt;' + str + '&lt;/code&gt;';\n  return str;\n }\n</code></pre>\n"},{"score":24,"body":"<p>You can use <code>console.dir()</code>, which is a shortcut for <code>console.log(util.inspect())</code>.\n(The only difference is that it bypasses any custom <code>inspect()</code> function defined on an object.)</p>\n\n<p>It uses <strong>syntax-highlighting</strong>, <strong>smart indentation</strong>, <strong>removes quotes from keys</strong> and just makes the output as pretty as it gets.</p>\n\n<pre><code>const object = JSON.parse(jsonString)\n\nconsole.dir(object, {depth: null, colors: true})\n</code></pre>\n\n<p>and for the command line:</p>\n\n<p><code>cat package.json | node -e \"process.stdin.pipe(new stream.Writable({write: chunk =&gt; console.dir(JSON.parse(chunk), {depth: null, colors: true})}))\"</code></p>\n"},{"score":1,"body":"<p>This is nice:</p>\n\n<p><a href=\"https://github.com/mafintosh/json-markup\" rel=\"nofollow noreferrer\">https://github.com/mafintosh/json-markup</a> from <code>mafintosh</code></p>\n\n<pre><code>const jsonMarkup = require('json-markup')\nconst html = jsonMarkup({hello:'world'})\ndocument.querySelector('#myElem').innerHTML = html\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;link ref=\"stylesheet\" href=\"style.css\"&gt;\n&lt;div id=\"myElem&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Example stylesheet can be found here</p>\n\n<pre><code>https://raw.githubusercontent.com/mafintosh/json-markup/master/style.css\n</code></pre>\n"},{"score":34,"body":"<pre><code>var jsonObj = {\"streetLabel\": \"Avenue Anatole France\", \"city\": \"Paris 07\",  \"postalCode\": \"75007\", \"countryCode\": \"FRA\",  \"countryLabel\": \"France\" };\n\ndocument.getElementById(\"result-before\").innerHTML = JSON.stringify(jsonObj);\n</code></pre>\n\n<p>In case of displaying in HTML, you should to add a balise <code>&lt;pre&gt;&lt;/pre&gt;</code></p>\n\n<pre><code>document.getElementById(\"result-after\").innerHTML = \"&lt;pre&gt;\"+JSON.stringify(jsonObj,undefined, 2) +\"&lt;/pre&gt;\"\n</code></pre>\n\n<p>Example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var jsonObj = {\"streetLabel\": \"Avenue Anatole France\", \"city\": \"Paris 07\",  \"postalCode\": \"75007\", \"countryCode\": \"FRA\",  \"countryLabel\": \"France\" };\r\n\r\ndocument.getElementById(\"result-before\").innerHTML = JSON.stringify(jsonObj);\r\n\r\ndocument.getElementById(\"result-after\").innerHTML = \"&lt;pre&gt;\"+JSON.stringify(jsonObj,undefined, 2) +\"&lt;/pre&gt;\"</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div { float:left; clear:both; margin: 1em 0; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"result-before\"&gt;&lt;/div&gt;\r\n&lt;div id=\"result-after\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":7,"body":"<p>It works well: </p>\n\n<pre><code>console.table()\n</code></pre>\n\n<p>Read more here: <a href=\"https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table\" rel=\"noreferrer\">https://developer.mozilla.org/pt-BR/docs/Web/API/Console/table</a></p>\n"},{"score":3,"body":"<p>If you need this to work in a textarea the accepted solution will not work.</p>\n\n<p><code>&lt;textarea id='textarea'&gt;&lt;/textarea&gt;</code></p>\n\n<p><code>$(\"#textarea\").append(formatJSON(JSON.stringify(jsonobject),true));</code>   </p>\n\n<pre><code>function formatJSON(json,textarea) {\n    var nl;\n    if(textarea) {\n        nl = \"&amp;#13;&amp;#10;\";\n    } else {\n        nl = \"&lt;br&gt;\";\n    }\n    var tab = \"&amp;#160;&amp;#160;&amp;#160;&amp;#160;\";\n    var ret = \"\";\n    var numquotes = 0;\n    var betweenquotes = false;\n    var firstquote = false;\n    for (var i = 0; i &lt; json.length; i++) {\n        var c = json[i];\n        if(c == '\"') {\n            numquotes ++;\n            if((numquotes + 2) % 2 == 1) {\n                betweenquotes = true;\n            } else {\n                betweenquotes = false;\n            }\n            if((numquotes + 3) % 4 == 0) {\n                firstquote = true;\n            } else {\n                firstquote = false;\n            }\n        }\n\n        if(c == '[' &amp;&amp; !betweenquotes) {\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '{' &amp;&amp; !betweenquotes) {\n            ret += tab;\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '\"' &amp;&amp; firstquote) {\n            ret += tab + tab;\n            ret += c;\n            continue;\n        } else if (c == '\"' &amp;&amp; !firstquote) {\n            ret += c;\n            continue;\n        }\n        if(c == ',' &amp;&amp; !betweenquotes) {\n            ret += c;\n            ret += nl;\n            continue;\n        }\n        if(c == '}' &amp;&amp; !betweenquotes) {\n            ret += nl;\n            ret += tab;\n            ret += c;\n            continue;\n        }\n        if(c == ']' &amp;&amp; !betweenquotes) {\n            ret += nl;\n            ret += c;\n            continue;\n        }\n        ret += c;\n    } // i loop\n    return ret;\n}\n</code></pre>\n"},{"score":51,"body":"<p>Better way.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/11359291/prettify-json-array-in-javascript\">Prettify JSON Array in Javascript</a></p>\n\n<pre><code>JSON.stringify(jsonobj,null,'\\t')\n</code></pre>\n"},{"score":3,"body":"<p>If you're looking for a nice library to prettify json on a web page...</p>\n\n<p>Prism.js is pretty good.</p>\n\n<p><a href=\"http://prismjs.com/\" rel=\"nofollow noreferrer\">http://prismjs.com/</a></p>\n\n<p>I found using JSON.stringify(obj, undefined, 2) to get the indentation, and then using prism to add a theme was a good approach.</p>\n\n<p>If you're loading in JSON via an ajax call, then you can run one of Prism's utility methods to prettify</p>\n\n<p>For example:</p>\n\n<pre><code>Prism.highlightAll()\n</code></pre>\n"},{"score":0,"body":"<p>Here is how you can print without using native function.</p>\n\n<pre><code>function pretty(ob, lvl = 0) {\n\n  let temp = [];\n\n  if(typeof ob === \"object\"){\n    for(let x in ob) {\n      if(ob.hasOwnProperty(x)) {\n        temp.push( getTabs(lvl+1) + x + \":\" + pretty(ob[x], lvl+1) );\n      }\n    }\n    return \"{\\n\"+ temp.join(\",\\n\") +\"\\n\" + getTabs(lvl) + \"}\";\n  }\n  else {\n    return ob;\n  }\n\n}\n\nfunction getTabs(n) {\n  let c = 0, res = \"\";\n  while(c++ &lt; n)\n    res+=\"\\t\";\n  return res;\n}\n\nlet obj = {a: {b: 2}, x: {y: 3}};\nconsole.log(pretty(obj));\n\n/*\n  {\n    a: {\n      b: 2\n    },\n    x: {\n      y: 3\n    }\n  }\n*/\n</code></pre>\n"},{"score":5,"body":"<p>Here is a simple JSON format/color component written in React:</p>\n\n<pre><code>const HighlightedJSON = ({ json }: Object) =&gt; {\n  const highlightedJSON = jsonObj =&gt;\n    Object.keys(jsonObj).map(key =&gt; {\n      const value = jsonObj[key];\n      let valueType = typeof value;\n      const isSimpleValue =\n        [\"string\", \"number\", \"boolean\"].includes(valueType) || !value;\n      if (isSimpleValue &amp;&amp; valueType === \"object\") {\n        valueType = \"null\";\n      }\n      return (\n        &lt;div key={key} className=\"line\"&gt;\n          &lt;span className=\"key\"&gt;{key}:&lt;/span&gt;\n          {isSimpleValue ? (\n            &lt;span className={valueType}&gt;{`${value}`}&lt;/span&gt;\n          ) : (\n            highlightedJSON(value)\n          )}\n        &lt;/div&gt;\n      );\n    });\n  return &lt;div className=\"json\"&gt;{highlightedJSON(json)}&lt;/div&gt;;\n};\n</code></pre>\n\n<p>See it working in this CodePen:\n<a href=\"https://codepen.io/benshope/pen/BxVpjo\" rel=\"noreferrer\">https://codepen.io/benshope/pen/BxVpjo</a></p>\n\n<p>Hope that helps!</p>\n"},{"score":0,"body":"<p>The simplest way to display an object for debugging purposes:</p>\n\n<pre><code>console.log(\"data\",data) // lets you unfold the object manually\n</code></pre>\n\n<p>If you want to display the object in the DOM, you should consider that it could contain strings that would be interpreted as HTML.  Therefore, you need to <a href=\"https://stackoverflow.com/a/35735254/86967\">do some escaping</a>...</p>\n\n<pre><code>var s = JSON.stringify(data,null,2) // format\nvar e = new Option(s).innerHTML // escape\ndocument.body.insertAdjacentHTML('beforeend','&lt;pre&gt;'+e+'&lt;/pre&gt;') // display\n</code></pre>\n"},{"score":4,"body":"<p>You can use <code>JSON.stringify(your object, null, 2)</code>\nThe second parameter can be used as a replacer function which takes key and Val as parameters.This can be used in case you want to modify something within your JSON object.</p>\n\n<p>more reference : <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify</a></p>\n"},{"score":13,"body":"<p>Here's user123444555621's awesome HTML one adapted for terminals. Handy for debugging Node scripts:</p>\n\n<pre><code>function prettyJ(json) {\n  if (typeof json !== 'string') {\n    json = JSON.stringify(json, undefined, 2);\n  }\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, \n    function (match) {\n      let cls = \"\\x1b[36m\";\n      if (/^\"/.test(match)) {\n        if (/:$/.test(match)) {\n          cls = \"\\x1b[34m\";\n        } else {\n          cls = \"\\x1b[32m\";\n        }\n      } else if (/true|false/.test(match)) {\n        cls = \"\\x1b[35m\"; \n      } else if (/null/.test(match)) {\n        cls = \"\\x1b[31m\";\n      }\n      return cls + match + \"\\x1b[0m\";\n    }\n  );\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>// thing = any json OR string of json\nprettyJ(thing);\n</code></pre>\n"},{"score":2,"body":"<p>Couldn't find any solution that had good syntax highlighting for the console, so here's my 2p</p>\n\n<h2>Install &amp; Add cli-highlight dependency</h2>\n\n<pre><code>npm install cli-highlight --save\n</code></pre>\n\n<h2>Define logjson globally</h2>\n\n<pre><code>const highlight = require('cli-highlight').highlight\nconsole.logjson = (obj) =&gt; console.log(\n                               highlight( JSON.stringify(obj, null, 4), \n                                          { language: 'json', ignoreIllegals: true } ));\n</code></pre>\n\n<h2>Use</h2>\n\n<pre><code>console.logjson({foo: \"bar\", someArray: [\"string1\", \"string2\"]});\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/lnJ0Z.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/lnJ0Z.png\" alt=\"output\"></a></p>\n"},{"score":0,"body":"<pre><code>&lt;!-- here is a complete example pretty print with more space between lines--&gt;\n&lt;!-- be sure to pass a json string not a json object --&gt;\n&lt;!-- use line-height to increase or decrease spacing between json lines --&gt;\n\n&lt;style  type=\"text/css\"&gt;\n.preJsonTxt{\n  font-size: 18px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  line-height: 200%;\n}\n.boxedIn{\n  border: 1px solid black;\n  margin: 20px;\n  padding: 20px;\n}\n&lt;/style&gt;\n\n&lt;div class=\"boxedIn\"&gt;\n    &lt;h3&gt;Configuration Parameters&lt;/h3&gt;\n    &lt;pre id=\"jsonCfgParams\" class=\"preJsonTxt\"&gt;{{ cfgParams }}&lt;/pre&gt;\n&lt;/div&gt;\n\n&lt;script language=\"JavaScript\"&gt;\n$( document ).ready(function()\n{\n     $(formatJson);\n\n     &lt;!-- this will do a pretty print on the json cfg params      --&gt;\n     function formatJson() {\n         var element = $(\"#jsonCfgParams\");\n         var obj = JSON.parse(element.text());\n        element.html(JSON.stringify(obj, undefined, 2));\n     }\n});\n&lt;/script&gt;\n</code></pre>\n"},{"score":0,"body":"<p>To highlight and beautify it in <code>HTML</code> using <code>Bootstrap</code>:</p>\n\n<pre><code>function prettifyJson(json, prettify) {\n    if (typeof json !== 'string') {\n        if (prettify) {\n            json = JSON.stringify(json, undefined, 4);\n        } else {\n            json = JSON.stringify(json);\n        }\n    }\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g,\n        function(match) {\n            let cls = \"&lt;span&gt;\";\n            if (/^\"/.test(match)) {\n                if (/:$/.test(match)) {\n                    cls = \"&lt;span class='text-danger'&gt;\";\n                } else {\n                    cls = \"&lt;span&gt;\";\n                }\n            } else if (/true|false/.test(match)) {\n                cls = \"&lt;span class='text-primary'&gt;\";\n            } else if (/null/.test(match)) {\n                cls = \"&lt;span class='text-info'&gt;\";\n            }\n            return cls + match + \"&lt;/span&gt;\";\n        }\n    );\n}\n</code></pre>\n"}],"score":2608}