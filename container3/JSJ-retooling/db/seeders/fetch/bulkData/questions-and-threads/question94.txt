{"body":"<p>How does data binding work in the <code>AngularJS</code> framework?</p>\n\n<p>I haven't found technical details on <a href=\"http://angularjs.org\" rel=\"noreferrer\">their site</a>. It's more or less clear how it works when data is propagated from view to model. But how does AngularJS track changes of model properties without setters and getters?</p>\n\n<p>I found that there are <a href=\"https://stackoverflow.com/questions/1029241/javascript-object-watch-for-all-browsers\">JavaScript watchers</a> that may do this work. But they are not supported in <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;6</a> and <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;7</a>. So how does AngularJS know that I changed for example the following and reflected this change on a view?</p>\n\n<pre><code>myobject.myproperty=\"new value\";\n</code></pre>\n","title":"How does data binding work in AngularJS?","answers":[{"score":82,"body":"<p>This is my basic understanding. It may well be wrong!</p>\n\n<ol>\n<li>Items are watched by passing a function (returning the thing to be\nwatched) to the <code>$watch</code> method.</li>\n<li>Changes to watched items must be made within a block of code\nwrapped by the <code>$apply</code> method.</li>\n<li>At the end of the <code>$apply</code> the <code>$digest</code> method is invoked which goes\nthrough each of the watches and checks to see if they changed since\nlast time the <code>$digest</code> ran.</li>\n<li>If any changes are found then the digest is invoked again until all changes stabilize.</li>\n</ol>\n\n<p>In normal development, data-binding syntax in the HTML tells the AngularJS compiler to create the watches for you and controller methods are run inside <code>$apply</code> already. So to the application developer it is all transparent.</p>\n"},{"score":2752,"body":"<p>AngularJS remembers the value and compares it to a previous value. This is basic dirty-checking. If there is a change in value, then it fires the change event.</p>\n\n<p>The <code>$apply()</code> method, which is what you call when you are transitioning from a non-AngularJS world into an AngularJS world, calls <code>$digest()</code>. A digest is just plain old dirty-checking. It works on all browsers and is totally predictable.</p>\n\n<p>To contrast dirty-checking (AngularJS) vs change listeners (<a href=\"http://en.wikipedia.org/wiki/KnockoutJS\">KnockoutJS</a> and <a href=\"https://en.wikipedia.org/wiki/Backbone.js\">Backbone.js</a>): While dirty-checking may seem simple, and even inefficient (I will address that later), it turns out that it is semantically correct all the time, while change listeners have lots of weird corner cases and need things like dependency tracking to make it more semantically correct. KnockoutJS dependency tracking is a clever feature for a problem which AngularJS does not have.</p>\n\n<h1>Issues with change listeners:</h1>\n\n<ul>\n<li>The syntax is atrocious, since browsers do not support it natively. Yes, there are proxies, but they are not semantically correct in all cases, and of course there are no proxies on old browsers. The bottom line is that dirty-checking allows you to do <a href=\"http://en.wikipedia.org/wiki/Plain_Old_Java_Object\">POJO</a>, whereas KnockoutJS and Backbone.js force you to inherit from their classes, and access your data through accessors.</li>\n<li>Change coalescence. Suppose you have an array of items. Say you want to add items into an array, as you are looping to add, each time you add you are firing events on change, which is rendering the UI. This is very bad for performance. What you want is to update the UI only once, at the end. The change events are too fine-grained.</li>\n<li>Change listeners fire immediately on a setter, which is a problem, since the change listener can further change data, which fires more change events. This is bad since on your stack you may have several change events happening at once. Suppose you have two arrays which need to be kept in sync for whatever reason. You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world. This is a very similar problem to thread locking, which JavaScript avoids since each callback executes exclusively and to completion. Change events break this since setters can have far-reaching consequences which are not intended and non obvious, which creates the thread problem all over again. It turns out that what you want to do is to delay the listener execution, and guarantee, that only one listener runs at a time, hence any code is free to change data, and it knows that no other code runs while it is doing so.</li>\n</ul>\n\n<h1>What about performance?</h1>\n\n<p>So it may seem that we are slow, since dirty-checking is inefficient. This is where we need to look at real numbers rather than just have theoretical arguments, but first let's define some constraints.</p>\n\n<p>Humans are:</p>\n\n<ul>\n<li><p><em>Slow</em> — Anything faster than 50&nbsp;ms is imperceptible to humans and thus can be considered as \"instant\".</p></li>\n<li><p><em>Limited</em> — You can't really show more than about 2000 pieces of information to a human on a single page. Anything more than that is really bad UI, and humans can't process this anyway.</p></li>\n</ul>\n\n<p>So the real question is this: How many comparisons can you do on a browser in 50&nbsp;ms? This is a hard question to answer as many factors come into play, but here is a test case: <a href=\"http://jsperf.com/angularjs-digest/6\">http://jsperf.com/angularjs-digest/6</a> which creates 10,000 watchers. On a modern browser this takes just under 6&nbsp;ms. On <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\">Internet&nbsp;Explorer&nbsp;8</a> it takes about 40&nbsp;ms. As you can see, this is not an issue even on slow browsers these days. There is a caveat: The comparisons need to be simple to fit into the time limit... Unfortunately it is way too easy to add a slow comparison into AngularJS, so it is easy to build slow applications when you don't know what you are doing. But we hope to have an answer by providing an instrumentation module, which would show you which are the slow comparisons.</p>\n\n<p>It turns out that video games and GPUs use the dirty-checking approach, specifically because it is consistent. As long as they get over the monitor refresh rate (typically 50-60 Hz, or every 16.6-20 ms), any performance over that is a waste, so you're better off drawing more stuff, than getting FPS higher.</p>\n"},{"score":63,"body":"<p>I wondered this myself for a while. Without setters how does <code>AngularJS</code> notice changes to the <code>$scope</code> object? Does it poll them?</p>\n\n<p>What it actually does is this: Any \"normal\" place you modify the model was already called from the guts of <code>AngularJS</code>, so it automatically calls <code>$apply</code> for you after your code runs. Say your controller has a method that's hooked up to <code>ng-click</code> on some element. Because <code>AngularJS</code> wires the calling of that method together for you, it has a chance to do an <code>$apply</code> in the appropriate place. Likewise, for expressions that appear right in the views, those are executed by <code>AngularJS</code> so it does the <code>$apply</code>.</p>\n\n<p>When the documentation talks about having to call <code>$apply</code> manually for code <em>outside of <code>AngularJS</code></em>, it's talking about code which, when run, doesn't stem from <code>AngularJS</code> itself in the call stack.</p>\n"},{"score":325,"body":"<p>Misko already gave an excellent description of how the data bindings work, but I would like to add my view on the performance issue with the data binding.</p>\n\n<p>As Misko stated, around 2000 bindings are where you start to see problems, but you shouldn't have more than 2000 pieces of information on a page anyway. This may be true, but not every data-binding is visible to the user. Once you start building any sort of widget or data grid with two-way binding you can <em>easily</em> hit 2000 bindings, without having a bad UX.</p>\n\n<p>Consider, for example, a combo box where you can type text to filter the available options. This sort of control could have ~150 items and still be highly usable. If it has some extra feature (for example a specific class on the currently selected option) you start to get 3-5 bindings per option. Put three of these widgets on a page (e.g. one to select a country, the other to select a city in the said country, and the third to select a hotel) and you are somewhere between 1000 and 2000 bindings already.</p>\n\n<p>Or consider a data-grid in a corporate web application. 50 rows per page is not unreasonable, each of which could have 10-20 columns. If you build this with ng-repeats, and/or have information in some cells which uses some bindings, you could be approaching 2000 bindings with this grid alone.</p>\n\n<p>I find this to be a <strong>huge</strong> problem when working with AngularJS, and the only solution I've been able to find so far is to construct widgets without using two-way binding, instead of using ngOnce, deregistering watchers and similar tricks, or construct directives which build the DOM with jQuery and DOM manipulation. I feel this defeats the purpose of using Angular in the first place.</p>\n\n<p>I would love to hear suggestions on other ways to handle this, but then maybe I should write my own question. I wanted to put this in a comment, but it turned out to be way too long for that...</p>\n\n<p><strong>TL;DR</strong> <br />\nThe data binding can cause performance issues on complex pages.</p>\n"},{"score":7,"body":"<p>It happened that I needed to link a data model of a person with a form, what I did was a direct mapping of the data with the form.</p>\n\n<p>For example if the model had something like:</p>\n\n<pre><code>$scope.model.people.name\n</code></pre>\n\n<p>The control input of the form:</p>\n\n<pre><code>&lt;input type=\"text\" name=\"namePeople\" model=\"model.people.name\"&gt;\n</code></pre>\n\n<p>That way if you modify the value of the object controller, this will be reflected automatically in the view.</p>\n\n<p>An example where I passed the model is updated from server data is when you ask for a zip code and zip code based on written loads a list of colonies and cities associated with that view, and by default set the first value with the user. And this I worked very well, what does happen, is that <code>angularJS</code> sometimes takes a few seconds to refresh the model, to do this you can put a spinner while displaying the data.</p>\n"},{"score":161,"body":"<h2>By dirty checking the <code>$scope</code> object</h2>\n<p>Angular maintains a simple <code>array</code> of watchers in the <code>$scope</code> objects. If you inspect any <code>$scope</code> you will find that it contains an <code>array</code> called <code>$$watchers</code>.</p>\n<p>Each watcher is an <code>object</code> that contains among other things</p>\n<ol>\n<li>An expression which the watcher is monitoring. This might just be an <code>attribute</code> name, or something more complicated.</li>\n<li>A last known value of the expression. This can be checked against the current computed value of the expression. If the values differ the watcher will trigger the function and mark the <code>$scope</code> as dirty.</li>\n<li>A function which will be executed if the watcher is dirty.</li>\n</ol>\n<h2>How watchers are defined</h2>\n<p>There are many different ways of defining a watcher in AngularJS.</p>\n<ul>\n<li><p>You can explicitly <code>$watch</code> an <code>attribute</code> on <code>$scope</code>.</p>\n<pre><code>  $scope.$watch('person.username', validateUnique);\n</code></pre>\n</li>\n<li><p>You can place a <code>{{}}</code> interpolation in your template (a watcher will be created for you on the current <code>$scope</code>).</p>\n<pre><code>  &lt;p&gt;username: {{person.username}}&lt;/p&gt;\n</code></pre>\n</li>\n<li><p>You can ask a directive such as <code>ng-model</code> to define the watcher for you.</p>\n<pre><code>  &lt;input ng-model=&quot;person.username&quot; /&gt;\n</code></pre>\n</li>\n</ul>\n<h2>The <code>$digest</code> cycle checks all watchers against their last value</h2>\n<p>When we interact with AngularJS through the normal channels (ng-model, ng-repeat, etc) a digest cycle will be triggered by the directive.</p>\n<p>A digest cycle is a <strong>depth-first traversal of <code>$scope</code> and all its children</strong>. For each <code>$scope</code> <code>object</code>, we iterate over its <code>$$watchers</code> <code>array</code> and evaluate all the expressions. If the new expression value is different from the last known value, the watcher's function is called. This function might recompile part of the DOM, recompute a value on <code>$scope</code>, trigger an <code>AJAX</code> <code>request</code>, anything you need it to do.</p>\n<p>Every scope is traversed and every watch expression evaluated and checked against the last value.</p>\n<h2>If a watcher is triggered, the <code>$scope</code> is dirty</h2>\n<p>If a watcher is triggered, the app knows something has changed, and the <code>$scope</code> is marked as dirty.</p>\n<p>Watcher functions can change other attributes on <code>$scope</code> or on a parent <code>$scope</code>. If one <code>$watcher</code> function has been triggered, we can't guarantee that our other <code>$scope</code>s are still clean, and so we execute the entire digest cycle again.</p>\n<p>This is because AngularJS has two-way binding, so data can be passed back up the <code>$scope</code> tree. We may change a value on a higher <code>$scope</code> that has already been digested. Perhaps we change a value on the <code>$rootScope</code>.</p>\n<h2>If the <code>$digest</code> is dirty, we execute the entire <code>$digest</code> cycle again</h2>\n<p>We continually loop through the <code>$digest</code> cycle until either the digest cycle comes up clean (all <code>$watch</code> expressions have the same value as they had in the previous cycle), or we reach the digest limit. By default, this limit is set at 10.</p>\n<p>If we reach the digest limit AngularJS will raise an error in the console:</p>\n<pre><code>10 $digest() iterations reached. Aborting!\n</code></pre>\n<h2>The digest is hard on the machine but easy on the developer</h2>\n<p>As you can see, every time something changes in an AngularJS app, AngularJS will check every single watcher in the <code>$scope</code> hierarchy to see how to respond. For a developer this is a massive productivity boon, as you now need to write almost no wiring code, AngularJS will just notice if a value has changed, and make the rest of the app consistent with the change.</p>\n<p>From the perspective of the machine though this is wildly inefficient and will slow our app down if we create too many watchers. Misko has quoted a figure of about 4000 watchers before your app will feel slow on older browsers.</p>\n<p>This limit is easy to reach if you <code>ng-repeat</code> over a large <code>JSON</code> <code>array</code> for example. You can mitigate against this using features like one-time binding to compile a template without creating watchers.</p>\n<h2>How to avoid creating too many watchers</h2>\n<p>Each time your user interacts with your app, every single watcher in your app will be evaluated at least once. A big part of optimising an AngularJS app is reducing the number of watchers in your <code>$scope</code> tree. One easy way to do this is with <em>one time binding</em>.</p>\n<p>If you have data which will rarely change, you can bind it only once using the :: syntax, like so:</p>\n<pre><code>&lt;p&gt;{{::person.username}}&lt;/p&gt;\n</code></pre>\n<p>or</p>\n<pre><code>&lt;p ng-bind=&quot;::person.username&quot;&gt;&lt;/p&gt;\n</code></pre>\n<p>The binding will only be triggered when the containing template is rendered and the data loaded into <code>$scope</code>.</p>\n<p>This is especially important when you have an <code>ng-repeat</code> with many items.</p>\n<pre><code>&lt;div ng-repeat=&quot;person in people track by username&quot;&gt;\n  {{::person.username}}\n&lt;/div&gt;\n</code></pre>\n"},{"score":5,"body":"<p>Here is an example of data binding with AngularJS, using an input field. I will explain later</p>\n\n<p><strong>HTML Code</strong></p>\n\n<pre><code>&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\" class=\"formInput\"&gt;\n     &lt;input type=\"text\" ng-model=\"watchInput\" Placeholder=\"type something\"/&gt;\n     &lt;p&gt;{{watchInput}}&lt;/p&gt; \n&lt;/div&gt;\n</code></pre>\n\n<p><strong>AngularJS Code</strong></p>\n\n<pre><code>myApp = angular.module (\"myApp\", []);\nmyApp.controller(\"myCtrl\", [\"$scope\", function($scope){\n  //Your Controller code goes here\n}]);\n</code></pre>\n\n<p>As you can see in the example above, <strong>AngularJS</strong> uses <code>ng-model</code> to listen and watch what happens on HTML elements, especially on <code>input</code> fields. When something happens, do something. In our case, <code>ng-model</code> is bind to our view, using the mustache notation <code>{{}}</code>. Whatever is typed inside the input field is displayed on the screen instantly. And that's the beauty of data binding, using AngularJS in its simplest form.</p>\n\n<p>Hope this helps.</p>\n\n<p>See a working example here on\n<a href=\"http://codepen.io/chrisN/pen/YqEmOO\" rel=\"noreferrer\">Codepen</a></p>\n"},{"score":16,"body":"<p>AngularJS handle data-binding mechanism with the help of three powerful functions :      <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$watch\" rel=\"noreferrer\">$watch()</a>,<a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest\" rel=\"noreferrer\">$digest()</a>and <a href=\"https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply\" rel=\"noreferrer\">$apply()</a>. Most of the time AngularJS will call the $scope.$watch() and $scope.$digest(), but\nin some cases you may have to call these functions manually to update with new values.</p>\n\n<p><strong>$watch()</strong> :- </p>\n\n<blockquote>\n  <p>This function is used to observe changes in a variable on the $scope.\n  It accepts three parameters: expression, listener and equality object,\n  where listener and equality object are optional parameters.</p>\n</blockquote>\n\n<p><strong>$digest()</strong> - </p>\n\n<blockquote>\n  <p>This function iterates through all the watches in the $scope object,\n  and its child $scope objects<br>\n     (if it has any). When $digest() iterates\n  over the watches, it checks if the value of the expression has\n  changed. If the value has changed, AngularJS calls the listener with\n  new value and old value. The $digest() function is called\n  whenever AngularJS thinks it is necessary. For example, after a button\n  click, or after an AJAX call. You may have some cases where AngularJS\n  does not call the $digest() function for you. In that case you have to\n  call it yourself.</p>\n</blockquote>\n\n<p><strong>$apply()</strong> - </p>\n\n<blockquote>\n  <p>Angular do auto-magically updates only those model changes which are\n  inside AngularJS context. When you do change in any model outside of\n  the Angular context (like browser DOM events, setTimeout, XHR or third\n  party libraries), then you need to inform Angular of the changes by\n  calling $apply() manually. When the $apply() function call finishes\n  AngularJS calls $digest() internally, so all data bindings are\n  updated.</p>\n</blockquote>\n"},{"score":33,"body":"<p>Explaining with Pictures : </p>\n\n<h2>Data-Binding needs a mapping</h2>\n\n<p>The reference in the scope is not exactly the reference   in the template. When you data-bind two objects, you need a third one that listen to the first and modify the other.</p>\n\n<p><a href=\"https://i.stack.imgur.com/zcMvf.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/zcMvf.png\" alt=\"enter image description here\"></a></p>\n\n<p>Here, when you modify the <code>&lt;input&gt;</code>, you touch the <strong>data-ref3</strong>. And the classic data-bind mecanism will change <strong>data-ref4</strong>. So how the other <code>{{data}}</code> expressions will move ?</p>\n\n<h2>Events leads to $digest()</h2>\n\n<p><a href=\"https://i.stack.imgur.com/IYRLT.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/IYRLT.png\" alt=\"enter image description here\"></a></p>\n\n<p>Angular maintains a <code>oldValue</code> and <code>newValue</code> of every binding. And after every <em>Angular event</em>, the famous <code>$digest()</code> loop will check the WatchList to see if something changed. These <em>Angular events</em> are <code>ng-click</code>, <code>ng-change</code>, <code>$http</code> completed ...  The <code>$digest()</code> will loop as long as any <code>oldValue</code> differs from the <code>newValue</code>.</p>\n\n<p>In the previous picture, it will notice that data-ref1 and data-ref2 has changed.</p>\n\n<h2>Conclusions</h2>\n\n<p>It's a little like the Egg and Chicken. You never know who starts, but hopefully it works most of the time as expected. </p>\n\n<p>The other point is that you can understand easily the impact deep of a simple binding on the memory and the CPU. Hopefully Desktops are fat enough to handle this. Mobile phones are not that strong.</p>\n"},{"score":22,"body":"<p>Obviously there is no periodic checking of <code>Scope</code> whether there is any change in the Objects attached to it. Not all the objects attached to scope are watched . Scope prototypically maintains a <strong>$$watchers</strong> . <code>Scope</code> only iterates through this <code>$$watchers</code> when <code>$digest</code> is called . </p>\n\n<p>Angular adds a watcher to the $$watchers for each of these </p>\n\n<blockquote>\n  <ol>\n  <li>{{expression}} — In your templates (and anywhere else where there’s an expression) or when we define ng-model. <br></li>\n  <li>$scope.$watch(‘expression/function’) — In your JavaScript we can just attach a scope object for angular to watch. </li>\n  </ol>\n</blockquote>\n\n<p><strong>$watch</strong> function takes in three parameters:<br></p>\n\n<blockquote>\n  <ol>\n  <li><p>First one is a watcher function which just returns the object or we can just add an expression. <br></p></li>\n  <li><p>Second one is a listener function which will be called when there is a change in the object. All the things like DOM changes will be implemented in this function.<br></p></li>\n  <li><p>The third being an optional parameter which takes in a boolean . If its true , angular deep watches the object &amp; if its false Angular just does a reference watching on the object.\n    Rough Implementation of $watch looks like this </p></li>\n  </ol>\n</blockquote>\n\n<pre><code>Scope.prototype.$watch = function(watchFn, listenerFn) {\n   var watcher = {\n       watchFn: watchFn,\n       listenerFn: listenerFn || function() { },\n       last: initWatchVal  // initWatchVal is typically undefined\n   };\n   this.$$watchers.push(watcher); // pushing the Watcher Object to Watchers  \n};\n</code></pre>\n\n<p>There is an interesting thing in Angular called Digest Cycle. The $digest cycle starts as a result of a call to $scope.$digest(). Assume that you change a $scope model in a handler function through the ng-click directive. In that case AngularJS automatically triggers a $digest cycle by calling $digest().In addition to ng-click, there are several other built-in directives/services that let you change models (e.g. ng-model, $timeout, etc) and automatically trigger a $digest cycle.  The rough implementation of $digest looks like this.</p>\n\n<pre><code>Scope.prototype.$digest = function() {\n      var dirty;\n      do {\n          dirty = this.$$digestOnce();\n      } while (dirty);\n}\nScope.prototype.$$digestOnce = function() {\n   var self = this;\n   var newValue, oldValue, dirty;\n   _.forEach(this.$$watchers, function(watcher) {\n          newValue = watcher.watchFn(self);\n          oldValue = watcher.last;   // It just remembers the last value for dirty checking\n          if (newValue !== oldValue) { //Dirty checking of References \n   // For Deep checking the object , code of Value     \n   // based checking of Object should be implemented here\n             watcher.last = newValue;\n             watcher.listenerFn(newValue,\n                  (oldValue === initWatchVal ? newValue : oldValue),\n                   self);\n          dirty = true;\n          }\n     });\n   return dirty;\n };\n</code></pre>\n\n<p>If we use JavaScript’s <strong>setTimeout()</strong> function to update a scope model, Angular has no way of knowing what you might change. In this case it’s our responsibility to call $apply() manually, which triggers a $digest cycle. Similarly, if you have a directive that sets up a DOM event listener and changes some models inside the handler function, you need to call $apply() to ensure the changes take effect. The big idea of $apply is that we can execute some code that isn't aware of Angular, that code may still change things on the scope. If we wrap that code in $apply , it will take care of calling $digest(). Rough implementation of $apply().</p>\n\n<pre><code>Scope.prototype.$apply = function(expr) {\n       try {\n         return this.$eval(expr); //Evaluating code in the context of Scope\n       } finally {\n         this.$digest();\n       }\n};\n</code></pre>\n"},{"score":5,"body":"<p>AngularJs supports <strong>Two way data-binding</strong>.<br>\nMeans you can access data <strong>View -> Controller</strong> &amp; <strong>Controller -> View</strong></p>\n\n<p><strong>For Ex.</strong></p>\n\n<p><strong>1)</strong></p>\n\n<pre><code>// If $scope have some value in Controller. \n$scope.name = \"Peter\";\n\n// HTML\n&lt;div&gt; {{ name }} &lt;/div&gt;\n</code></pre>\n\n<p><strong>O/P</strong></p>\n\n<pre><code>Peter\n</code></pre>\n\n<p>You can bind data in <code>ng-model</code> Like:-<br>\n<strong>2)</strong></p>\n\n<pre><code>&lt;input ng-model=\"name\" /&gt;\n\n&lt;div&gt; {{ name }} &lt;/div&gt;\n</code></pre>\n\n<p>Here in above example whatever input user will give, It will be visible in <code>&lt;div&gt;</code> tag.</p>\n\n<p>If want to bind input from html to controller:-<br>\n<strong>3)</strong></p>\n\n<pre><code>&lt;form name=\"myForm\" ng-submit=\"registration()\"&gt;\n   &lt;label&gt; Name &lt;/lbel&gt;\n   &lt;input ng-model=\"name\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Here if you want to use input <code>name</code> in the controller then,</p>\n\n<pre><code>$scope.name = {};\n\n$scope.registration = function() {\n   console.log(\"You will get the name here \", $scope.name);\n};\n</code></pre>\n\n<p><code>ng-model</code> binds our view and render it in expression <code>{{ }}</code>.<br>\n<code>ng-model</code> is the data which is shown to the user in the view and with which the user interacts.<br>\nSo it is easy to bind data in AngularJs.</p>\n"},{"score":4,"body":"<p>Angular.js creates a watcher for every model we create in view. Whenever a model is changed, an \"ng-dirty\" class is appeneded to the model, so the watcher will observe all models which have the class \"ng-dirty\" &amp; update their values in the controller &amp; vice versa.</p>\n"},{"score":6,"body":"<ol>\n<li><p>The one-way data binding is an approach where a value is taken from the data model and inserted into an HTML element. There is no way to update model from view. It is used in classical template systems. These systems bind data in only one direction.</p></li>\n<li><p>Data-binding in Angular apps is the automatic synchronisation of data between the model and view components.</p></li>\n</ol>\n\n<p>Data binding lets you treat the model as the single-source-of-truth in your application. The view is a projection of the model at all times. If the model is changed, the view reflects the change and vice versa.</p>\n"},{"score":3,"body":"<p><strong>data binding:</strong></p>\n\n<p><strong><em>What is data binding?</em></strong></p>\n\n<p>Whenever the user changes the data in the view , there occurs an update of that change in the scope model, and viceversa.</p>\n\n<p><strong>How is it possible?</strong></p>\n\n<p><strong>Short answer :</strong>\nWith the help of digest cycle.</p>\n\n<p><strong>Description :</strong>\nAngular js sets the watcher on the scope model, which fires the listener function if there is a change in the model.</p>\n\n<pre><code>$scope.$watch('modelVar' , function(newValue,oldValue){\n</code></pre>\n\n<p>//Dom update code with new value</p>\n\n<p>});</p>\n\n<p><strong>So When and How is the watcher function called?</strong></p>\n\n<p>Watcher function is called as part of the digest cycle.</p>\n\n<p>Digest cycle is called automatically triggered as part of angular js built in directives/services like ng-model , ng-bind , $timeout, ng-click and others.. that let you trigger the digest cycle.</p>\n\n<p>Digest cycle function:</p>\n\n<pre><code>$scope.$digest() -&gt; digest cycle against the current scope.\n$scope.$apply() -&gt; digest cycle against the parent scope \n</code></pre>\n\n<p>i.e<code>$rootScope.$apply()</code></p>\n\n<p>Note:\n$apply() is equal to $rootScope.$digest() this  means the dirty checking starts right from the root or top or the parent scope down to all the child $scopes in the angular js application.</p>\n\n<p>The above features work in the browsers IE for the mentioned versions also just by making sure your application is angular js application which means you are using the angularjs framework script file referenced in the script tag.</p>\n\n<p>Thank you.</p>\n"}],"score":1976}