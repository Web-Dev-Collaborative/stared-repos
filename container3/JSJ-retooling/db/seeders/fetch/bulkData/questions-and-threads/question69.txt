{"body":"<p>I would like a JavaScript function to have optional arguments which I set a default on, which get used if the value isn't defined (and ignored if the value is passed). In Ruby you can do it like this:</p>\n\n<pre><code>def read_file(file, delete_after = false)\n  # code\nend\n</code></pre>\n\n<p>Does this work in JavaScript?</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n","title":"Set a default parameter value for a JavaScript function","answers":[{"score":611,"body":"<pre><code>function read_file(file, delete_after) {\n    delete_after = delete_after || \"my default here\";\n    //rest of code\n}\n</code></pre>\n\n<p>This assigns to <code>delete_after</code> the value of <code>delete_after</code> if it is not a <em>falsey</em> value otherwise it assigns the string <code>\"my default here\"</code>. For more detail, check out <a href=\"http://crockford.com/javascript/survey.html\" rel=\"noreferrer\">Doug Crockford's survey of the language and check out the section on Operators</a>.</p>\n\n<p>This approach does not work if you want to pass in a <em>falsey</em> value i.e. <code>false</code>, <code>null</code>, <code>undefined</code>, <code>0</code> or <code>\"\"</code>. If you require <em>falsey</em> values to be passed in you would need to use the method in <a href=\"https://stackoverflow.com/questions/894860/how-do-i-make-a-default-value-for-a-parameter-to-a-javascript-function/894877#894877\">Tom Ritter's answer</a>.</p>\n\n<p>When dealing with a number of parameters to a function, it is often useful to allow the consumer to pass the parameter arguments in an object and then <em>merge</em> these values with an object that contains the default values for the function</p>\n\n<pre><code>function read_file(values) {\n    values = merge({ \n        delete_after : \"my default here\"\n    }, values || {});\n\n    // rest of code\n}\n\n// simple implementation based on $.extend() from jQuery\nfunction merge() {\n    var obj, name, copy,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length;\n\n    for (; i &lt; length; i++) {\n        if ((obj = arguments[i]) != null) {\n            for (name in obj) {\n                copy = obj[name];\n\n                if (target === copy) {\n                    continue;\n                }\n                else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n};\n</code></pre>\n\n<p>to use</p>\n\n<pre><code>// will use the default delete_after value\nread_file({ file: \"my file\" }); \n\n// will override default delete_after value\nread_file({ file: \"my file\", delete_after: \"my value\" }); \n</code></pre>\n"},{"score":3366,"body":"<p>From <a href=\"https://www.ecma-international.org/ecma-262/6.0/\" rel=\"noreferrer\">ES6/ES2015</a>, default parameters are in the language specification.</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n\n<p>just works.</p>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/default_parameters\" rel=\"noreferrer\">Default Parameters - MDN</a></p>\n\n<blockquote>\n  <p>Default function parameters allow formal parameters to be initialized with default values if <strong>no value</strong> or <strong>undefined</strong> is passed.</p>\n</blockquote>\n\n<p>You can also <a href=\"http://exploringjs.com/es6/ch_parameter-handling.html#sec_named-parameters\" rel=\"noreferrer\">simulate default <em>named</em> parameters via destructuring</a>:</p>\n\n<pre><code>// the `= {}` below lets you call the function without any parameters\nfunction myFor({ start = 5, end = 1, step = -1 } = {}) { // (A)\n    // Use the variables `start`, `end` and `step` here\n    ···\n}\n</code></pre>\n\n<p><strong>Pre ES2015</strong>,</p>\n\n<p>There are a lot of ways, but this is my preferred method — it lets you pass in anything you want, including false or null. (<code>typeof null == \"object\"</code>)</p>\n\n<pre><code>function foo(a, b) {\n  a = typeof a !== 'undefined' ? a : 42;\n  b = typeof b !== 'undefined' ? b : 'default_b';\n  ...\n}\n</code></pre>\n"},{"score":151,"body":"<p>I find something simple like this to be much more concise and readable personally.</p>\n\n<pre><code>function pick(arg, def) {\n   return (typeof arg == 'undefined' ? def : arg);\n}\n\nfunction myFunc(x) {\n  x = pick(x, 'my default');\n} \n</code></pre>\n"},{"score":65,"body":"<p>In ECMAScript 6 you will actually be able to write exactly what you have:</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n\n<p>This will set <code>delete_after</code> to <code>false</code> if it s not present or <code>undefined</code>. You can use ES6 features like this one today with transpilers such as <a href=\"http://babeljs.io/\" rel=\"noreferrer\">Babel</a>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\" rel=\"noreferrer\">See the MDN article for more information</a>. </p>\n"},{"score":10,"body":"<p>As an update...with ECMAScript 6 you can <strong>FINALLY</strong> set default values in function parameter declarations like so:</p>\n\n<pre><code>function f (x, y = 7, z = 42) {\n  return x + y + z\n}\n\nf(1) === 50\n</code></pre>\n\n<p>As referenced by - <a href=\"http://es6-features.org/#DefaultParameterValues\" rel=\"noreferrer\">http://es6-features.org/#DefaultParameterValues</a></p>\n"},{"score":11,"body":"<p>Just use an explicit comparison with undefined.</p>\n\n<pre><code>function read_file(file, delete_after)\n{\n    if(delete_after === undefined) { delete_after = false; }\n}\n</code></pre>\n"},{"score":15,"body":"<p>that solution is work for me in js:</p>\n\n<pre><code>function read_file(file, delete_after) {\n    delete_after = delete_after || false;\n    // Code\n}\n</code></pre>\n"},{"score":9,"body":"<p>being a long time C++ developer (Rookie to web development :)), when I first came across this situation, I did the parameter assignment in the function definition, like it is mentioned in the question, as follows. </p>\n\n<pre><code>function myfunc(a,b=10)\n</code></pre>\n\n<p>But beware that it doesn't work consistently across browsers. For me it worked on chrome on my desktop, but did not work on chrome on android.\nSafer option, as many have mentioned above is -</p>\n\n<pre><code>    function myfunc(a,b)\n    {\n    if (typeof(b)==='undefined') b = 10;\n......\n    }\n</code></pre>\n\n<p>Intention for this answer is not to repeat the same solutions, what others have already mentioned, but to inform that parameter assignment in the function definition may work on some browsers, but don't rely on it.</p>\n"},{"score":-3,"body":"<p>Yes, This will work in Javascript. You can also do that:</p>\n\n<pre><code>function func(a=10,b=20)\n{\n    alert (a+' and '+b);\n}\n\nfunc(); // Result: 10 and 20\n\nfunc(12); // Result: 12 and 20\n\nfunc(22,25); // Result: 22 and 25\n</code></pre>\n"},{"score":8,"body":"<p>To anyone interested in having there code work in Microsoft Edge, do not use defaults in function parameters. </p>\n\n<pre><code>function read_file(file, delete_after = false) {\n    #code\n}\n</code></pre>\n\n<p>In that example Edge will throw an error \"Expecting ')'\"    </p>\n\n<p>To get around this use</p>\n\n<pre><code>function read_file(file, delete_after) {\n  if(delete_after == undefined)\n  {\n    delete_after = false;\n  }\n  #code\n}\n</code></pre>\n\n<p>As of Aug 08 2016 this is still an issue</p>\n"},{"score":30,"body":"<p><strong>Default Parameter Values</strong></p>\n\n<p>With ES6, you can do perhaps one of the most common idioms in <code>JavaScript</code> relates to setting a default  value for a function parameter. The way we’ve done this for years should look quite  familiar:</p>\n\n<pre><code>function foo(x,y) {\n x = x || 11;\n y = y || 31;\n console.log( x + y );\n}\nfoo(); // 42\nfoo( 5, 6 ); // 11\nfoo( 5 ); // 36\nfoo( null, 6 ); // 17\n</code></pre>\n\n<p>This pattern is most used, but is dangerous when we pass values like </p>\n\n<pre><code>foo(0, 42)\nfoo( 0, 42 ); // 53 &lt;-- Oops, not 42\n</code></pre>\n\n<p>Why? Because the <code>0 is falsy</code>, and so the <code>x || 11 results in 11</code>, not the directly passed  in 0. To fix this gotcha, some people will instead write the check more verbosely like this:</p>\n\n<pre><code>function foo(x,y) {\n x = (x !== undefined) ? x : 11;\n y = (y !== undefined) ? y : 31;\n console.log( x + y );\n}\nfoo( 0, 42 ); // 42\nfoo( undefined, 6 ); // 17\n</code></pre>\n\n<p>we can now examine a nice helpful syntax added as of <code>ES6</code> to  streamline the assignment of default values to missing arguments:</p>\n\n<pre><code>function foo(x = 11, y = 31) {\n console.log( x + y );\n}\n\nfoo(); // 42\nfoo( 5, 6 ); // 11\nfoo( 0, 42 ); // 42\nfoo( 5 ); // 36\nfoo( 5, undefined ); // 36 &lt;-- `undefined` is missing\nfoo( 5, null ); // 5 &lt;-- null coerces to `0`\nfoo( undefined, 6 ); // 17 &lt;-- `undefined` is missing\nfoo( null, 6 ); // 6 &lt;-- null coerces to `0`\n</code></pre>\n\n<p><code>x = 11</code> in a function declaration is more like <code>x !== undefined ? x : 11</code> than the  much more common idiom <code>x || 11</code></p>\n\n<p><strong>Default Value Expressions</strong></p>\n\n<p><code>Function</code> default values can be more than just simple values like 31; they can be any  valid expression, even a <code>function call</code>:</p>\n\n<pre><code>function bar(val) {\n console.log( \"bar called!\" );\n return y + val;\n}\nfunction foo(x = y + 3, z = bar( x )) {\n console.log( x, z );\n}\nvar y = 5;\nfoo(); // \"bar called\"\n // 8 13\nfoo( 10 ); // \"bar called\"\n // 10 15\ny = 6;\nfoo( undefined, 10 ); // 9 10\n</code></pre>\n\n<p>As you can see, the default value expressions are lazily evaluated, meaning they’re  only run if and when they’re needed — that is, when a parameter’s argument is omitted or is undefined.</p>\n\n<p>A default value expression can  even be an inline function expression call — commonly referred to as an Immediately  Invoked Function Expression <code>(IIFE)</code>:</p>\n\n<pre><code>function foo( x =\n (function(v){ return v + 11; })( 31 )\n) {\n console.log( x );\n}\nfoo(); // 42\n</code></pre>\n"},{"score":5,"body":"<p>As per the syntax </p>\n\n<pre><code>function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) {\n   statements\n}\n</code></pre>\n\n<p>you can define the default value of formal parameters.\nand also check undefined value by using <strong>typeof</strong> function.</p>\n"},{"score":11,"body":"<p>I would highly recommend extreme caution when using default parameter values in javascript.  It often creates bugs when used in conjunction with higher order functions like <code>forEach</code>, <code>map</code>, and <code>reduce</code>.  For example, consider this line of code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>['1', '2', '3'].map(parseInt); // [1, NaN, NaN]\n</code></pre>\n\n<p>parseInt has an optional second parameter <code>function parseInt(s, [</code><strong>radix</strong><code>=10])</code> but map calls <code>parseInt</code> with three arguments: (<em>element</em>, <em>index</em>, and <em>array</em>).</p>\n\n<p>I suggest you separate your required parameters form your optional/default valued arguments.  If your function takes 1,2, or 3 required parameters for which no default value makes sense, make them positional parameters to the function, any optional parameters should follow as named attributes of a single object. If your function takes 4 or more, perhaps it makes more sense to supply all arguments via attributes of a single object parameter.</p>\n\n<p>In your case I would suggest you write your deleteFile function like this: (<em>edited per</em> <code>instead</code>'s <em>comments</em>)...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// unsafe\r\nfunction read_file(fileName, deleteAfter=false) {\r\n    if (deleteAfter) {\r\n        console.log(`Reading and then deleting ${fileName}`);\r\n    } else {\r\n        console.log(`Just reading ${fileName}`);\r\n    }\r\n}\r\n\r\n// better\r\nfunction readFile(fileName, options) {\r\n  const deleteAfter = !!(options &amp;&amp; options.deleteAfter === true);\r\n  read_file(fileName, deleteAfter);\r\n}\r\n\r\nconsole.log('unsafe...');\r\n['log1.txt', 'log2.txt', 'log3.txt'].map(read_file);\r\n\r\nconsole.log('better...');\r\n['log1.txt', 'log2.txt', 'log3.txt'].map(readFile);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Running the above snippet illustrates the dangers lurking behind default argument values for unused parameters.</p>\n"},{"score":5,"body":"<pre><code>function helloWorld(name, symbol = '!!!') {\n    name = name || 'worlds';\n    console.log('hello ' + name + symbol);\n}\n\nhelloWorld(); // hello worlds!!!\n\nhelloWorld('john'); // hello john!!!\n\nhelloWorld('john', '(&gt;.&lt;)'); // hello john(&gt;.&lt;)\n\nhelloWorld('john', undefined); // hello john!!!\n\nhelloWorld(undefined, undefined); // hello worlds!!!\n</code></pre>\n"},{"score":4,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function throwIfNoValue() {\r\nthrow new Error('Missing argument');\r\n}\r\nfunction foo(argValue = throwIfNoValue()) {\r\nreturn argValue ;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Here foo() is a function which has a parameter named argValue. If we don’t pass anything in the function call here, then the function throwIfNoValue() will be called and the returned result will be assigned to the only argument argValue. This is how a function call can be used as a default parameter. Which makes the code more simplified and readable.</p>\n\n<p><a href=\"http://anjandutta.com/javascript-es6-default-parameter/\" rel=\"nofollow noreferrer\">This example has been taken from here</a></p>\n"},{"score":5,"body":"<p>Use this if you want to use latest <strong><code>ECMA6</code></strong> syntax:                      </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myFunction(someValue = \"This is DEFAULT!\") {\r\n  console.log(\"someValue --&gt; \", someValue);\r\n}\r\n\r\nmyFunction(\"Not A default value\") // calling the function without default value\r\nmyFunction()  // calling the function with default value</code></pre>\r\n</div>\r\n</div>\r\n                                    </p>\n\n<p>It is called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters\" rel=\"noreferrer\"><code>default function parameters</code></a>. It allows formal parameters to be initialized with default values if no value or undefined is passed.\n<strong>NOTE</strong>: It wont work with Internet Explorer or older browsers.               </p>\n\n<p>For maximum possible <strong>compatibility</strong> use this:                       </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function myFunction(someValue) {\r\n  someValue = (someValue === undefined) ? \"This is DEFAULT!\" : someValue;\r\n  console.log(\"someValue --&gt; \", someValue);\r\n}\r\n\r\nmyFunction(\"Not A default value\") // calling the function without default value\r\nmyFunction()  // calling the function with default value</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Both functions have exact same behavior as each of these example rely on the fact that the parameter variable will be <code>undefined</code> if no parameter value was passed when calling that function.</p>\n"},{"score":5,"body":"<p>If you are using <code>ES6+</code> you can set default parameters in the following manner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function test (foo = 1, bar = 2) {\r\n  console.log(foo, bar);\r\n}\r\n\r\ntest(5); // foo gets overwritten, bar remains default parameter</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If you need <code>ES5</code> syntax you can do it in the following manner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function test(foo, bar) {\r\n  foo = foo || 2;\r\n  bar = bar || 0;\r\n  \r\n  console.log(foo, bar);\r\n}\r\n\r\ntest(5); // foo gets overwritten, bar remains default parameter</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In the above syntax the <code>OR</code> operator is used. The <code>OR</code> operator always returns the first value if this can be converted to <code>true</code> if not it returns the righthandside value. When the function is called with no corresponding argument the parameter variable (<code>bar</code> in  our example) is set to <code>undefined</code> by the JS engine. <code>undefined</code> Is then converted to false and thus does the <code>OR</code> operator return the value 0.</p>\n"},{"score":5,"body":"<p><strong>ES6:</strong> As already mentioned in most answers, in ES6, you can simply initialise a parameter along with a value.</p>\n\n<hr>\n\n<p><strong>ES5:</strong> Most of the given answers aren't good enough for me because there are occasions where I may have to pass falsey values such as <code>0</code>, <code>null</code> and <code>undefined</code> to a function. To determine if a parameter is undefined because that's the value I passed instead of undefined due to not have been defined at all I do this:</p>\n\n<pre><code>function foo (param1, param2) {\n   param1 = arguments.length &gt;= 1 ? param1 : \"default1\";\n   param2 = arguments.length &gt;= 2 ? param2 : \"default2\";\n}\n</code></pre>\n"},{"score":0,"body":"<pre><code>def read_file(file, delete_after = false)\n  # code\nend\n</code></pre>\n\n<p>Following code may work in this situation including ECMAScript 6 (ES6) as well as earlier versions.    </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function read_file(file, delete_after) {\r\n    if(delete_after == undefined)\r\n        delete_after = false;//default value\r\n\r\n    console.log('delete_after =',delete_after);\r\n}\r\nread_file('text1.txt',true);\r\nread_file('text2.txt');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>as default value in languages works when the function's parameter value is skipped when calling, in JavaScript it is assigned to <strong>undefined</strong>. This approach doesn't look attractive programmatically but have <strong>backward compatibility</strong>.</p>\n"},{"score":0,"body":"<p>Yeah this is referred to as a default parameter</p>\n\n<p>Default function parameters allow formal parameters to be initialized with default values if no value or undefined is passed.</p>\n\n<p>Syntax:</p>\n\n<pre><code>function [name]([param1[ = defaultValue1 ][, ..., paramN[ = defaultValueN ]]]) {\n   statements\n}\n</code></pre>\n\n<p><strong>Description:</strong></p>\n\n<p>Parameters of functions default to undefined However, in situations it might be useful to set a different default value.  This is where default parameters can help. </p>\n\n<p>In the past, the general strategy for setting defaults was to test parameter values in the body of the function and assign a value if they are undefined.  If no value is provided in the call, its value would be undefined.  You would have to set a conditional check to make sure the parameter is not undefined</p>\n\n<p>With default parameters in ES2015, the check in the function body is no longer necessary.  Now you can simply put a default value in the function head.</p>\n\n<p>Example of the differences:</p>\n\n<pre><code>// OLD METHOD\nfunction multiply(a, b) {\n  b = (typeof b !== 'undefined') ?  b : 1;\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5, 1); // 5\nmultiply(5);    // 5\n\n\n// NEW METHOD\nfunction multiply(a, b = 1) {\n  return a * b;\n}\n\nmultiply(5, 2); // 10\nmultiply(5, 1); // 5\nmultiply(5);    // 5\n</code></pre>\n\n<p><strong>Different Syntax Examples:</strong></p>\n\n<p>Padding undefined vs other falsy values:</p>\n\n<p>Even if the value is set explicitly when calling, the value of the num argument is the default one.</p>\n\n<pre><code>function test(num = 1) {\n  console.log(typeof num);\n}\n\ntest();          // 'number' (num is set to 1)\ntest(undefined); // 'number' (num is set to 1 too)\n\n// test with other falsy values:\ntest('');        // 'string' (num is set to '')\ntest(null);      // 'object' (num is set to null)\n</code></pre>\n\n<p>Evaluated at call time:</p>\n\n<p>The default argument gets evaluated at call time, so unlike some other languages, a new object is created each time the function is called.</p>\n\n<pre><code>function append(value, array = []) {\n  array.push(value);\n  return array;\n}\n\nappend(1); //[1]\nappend(2); //[2], not [1, 2]\n\n\n// This even applies to functions and variables\nfunction callSomething(thing = something()) {\n return thing;\n}\n\nfunction something() {\n  return 'sth';\n}\n\ncallSomething();  //sth\n</code></pre>\n\n<p>Default parameters are available to later default parameters:</p>\n\n<p>Params already encountered are available to later default parameters</p>\n\n<pre><code>function singularAutoPlural(singular, plural = singular + 's',\n                        rallyingCry = plural + ' ATTACK!!!') {\n  return [singular, plural, rallyingCry];\n}\n\n//[\"Gecko\",\"Geckos\", \"Geckos ATTACK!!!\"]\nsingularAutoPlural('Gecko');\n\n//[\"Fox\",\"Foxes\", \"Foxes ATTACK!!!\"]\nsingularAutoPlural('Fox', 'Foxes');\n\n//[\"Deer\", \"Deer\", \"Deer ... change.\"]\nsingularAutoPlural('Deer', 'Deer', 'Deer peaceably and respectfully \\ petition the government for positive change.')\n</code></pre>\n\n<p>Functions defined inside function body:</p>\n\n<p>Introduced in Gecko 33 (Firefox 33 / Thunderbird 33 / SeaMonkey 2.30). Functions declared in the function body cannot be referred inside default parameters and throw a ReferenceError (currently a TypeError in SpiderMonkey, see bug 1022967). Default parameters are always executed first, function declarations inside the function body evaluate afterwards.</p>\n\n<pre><code>// Doesn't work! Throws ReferenceError.\nfunction f(a = go()) {\n  function go() { return ':P'; }\n}\n</code></pre>\n\n<p>Parameters without defaults after default parameters:</p>\n\n<p>Prior to Gecko 26 (Firefox 26 / Thunderbird 26 / SeaMonkey 2.23 / Firefox OS 1.2), the following code resulted in a SyntaxError. This has been fixed in bug 777060 and works as expected in later versions. Parameters are still set left-to-right, overwriting default parameters even if there are later parameters without defaults.</p>\n\n<pre><code>function f(x = 1, y) {\n  return [x, y];\n}\n\nf(); // [1, undefined]\nf(2); // [2, undefined]\n</code></pre>\n\n<p>Destructured paramet with default value assignment:</p>\n\n<p>You can use default value assignment with the destructuring assignment notation</p>\n\n<pre><code>function f([x, y] = [1, 2], {z: z} = {z: 3}) {\n  return x + y + z;\n}\n\nf(); // 6\n</code></pre>\n"},{"score":3,"body":"<p>If for some reason you are <strong>not</strong> on ES6 and <strong>are</strong> using <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\"><code>lodash</code></a> here is a concise way to default function parameters via <a href=\"https://lodash.com/docs/4.17.10#defaultTo\" rel=\"nofollow noreferrer\"><code>_.defaultTo</code></a> method:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var fn = function(a, b) {\r\n  a = _.defaultTo(a, 'Hi')\r\n  b = _.defaultTo(b, 'Mom!')\r\n\r\n  console.log(a, b)\r\n}\r\n\r\nfn()                 // Hi Mom!\r\nfn(undefined, null)  // Hi Mom!\r\nfn(NaN, NaN)         // Hi Mom!\r\nfn(1)                // 1 \"Mom!\"\r\nfn(null, 2)          // Hi 2\r\nfn(false, false)     // false false\r\nfn(0, 2)             // 0 2</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Which will set the default if the current value is <strong>NaN</strong>, <strong>null</strong>, or <strong>undefined</strong></p>\n"},{"score":4,"body":"<p>Yes, using default parameters is fully supported in <strong>ES6</strong>:</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>const read_file = (file, delete_after = false) =&gt; {\n    // Code\n}\n</code></pre>\n\n<p>but prior in <strong>ES5</strong> you could easily do this:</p>\n\n<pre><code>function read_file(file, delete_after) {\n  var df = delete_after || false;\n  // Code\n}\n</code></pre>\n\n<p>Which means if the value is there, use the value, otherwise, use the second value after <code>||</code> operation which does the same thing...</p>\n\n<p><strong>Note:</strong> also there is a big difference between those if you pass a value to <strong>ES6</strong> one even the value be falsy, that will be replaced with new value, something like <code>null</code> or <code>\"\"</code>... but <strong>ES5</strong> one only will be replaced if only the passed value is truthy, that's because the way <code>||</code> working...</p>\n"},{"score":0,"body":"<p>Just a different approach to set default params is to use object map of arguments, instead of arguments directly.\nFor example, </p>\n\n<pre><code>const defaultConfig = {\n category: 'Animals',\n legs: 4\n};\n\nfunction checkOrganism(props) {\n const category = props.category || defaultConfig.category;\n const legs = props.legs || defaultConfig.legs;\n}\n</code></pre>\n\n<p>This way, it's easy to extend the arguments and not worry about argument length mismatch.</p>\n"},{"score":-1,"body":"<p>The answer is yes. In fact, there are many languages who support default parameters. Python is one of them: </p>\n\n<pre><code>def(a, enter=\"Hello\"):\n   print(a+enter)\n</code></pre>\n\n<p>Even though this is Python 3 code due to the parentheses, default parameters in functions also work in JS.</p>\n\n<p>For example, and in your case: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function read_file(file, deleteAfter=false){\r\n  console.log(deleteAfter);\r\n}\r\n\r\nread_file(\"test.txt\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>But sometimes you don't really need default parameters.</p>\n\n<p>You can just define the variable right after the start of the function, like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function read_file(file){\r\n  var deleteAfter = false;\r\n  console.log(deleteAfter);\r\n}\r\n\r\nread_file(\"test.txt\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In both of my examples, it returns the same thing. But sometimes they actually could be useful, like in very advanced projects.</p>\n\n<p>So, in conclusion, default parameter values can be used in JS. But it is almost the same thing as defining a variable right after the start of the function. However, sometimes they are still very useful. As you have may noticed, default parameter values take 1 less line of code than the standard way which is defining the parameter right after the start of the function. </p>\n\n<p><strong><em>EDIT:</em></strong> And this is super important! This will <em>not</em> work in IE. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters#Browser_compatibility\" rel=\"nofollow noreferrer\">documentation</a>. So with IE you have to use the \"define variable at top of function\" method. Default parameters won't work in IE.</p>\n"},{"score":2,"body":"<h2>Sounds of Future</h2>\n<p>In future, you will be able to &quot;spread&quot; one object to another (currently as of 2019 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals\" rel=\"nofollow noreferrer\">NOT supported by Edge</a>!) - demonstration how to use that for nice default options regardless of order:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function test(options) {\n    var options = {\n       // defaults\n       url: 'defaultURL',\n       some: 'somethingDefault',\n       // override with input options\n       ...options\n    };\n    \n    var body = document.getElementsByTagName('body')[0];\n    body.innerHTML += '&lt;br&gt;' + options.url + ' : ' + options.some;\n}\ntest();\ntest({});\ntest({url:'myURL'});\ntest({some:'somethingOfMine'});\ntest({url:'overrideURL', some:'andSomething'});\ntest({url:'overrideURL', some:'andSomething', extra:'noProblem'});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>MDN reference: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a></p>\n<p>...meanwhile what <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Browser_compatibility\" rel=\"nofollow noreferrer\">Edge DOES support is Object.assign()</a> (IE does not, but I really hope we can leave IE behind :) )</p>\n<p>Similarly you could do</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    function test(options) {\n        var options = Object.assign({\n           // defaults\n           url: 'defaultURL',\n           some: 'somethingDefault',\n        }, options); // override with input options\n        \n        var body = document.getElementsByTagName('body')[0];\n        body.innerHTML += '&lt;br&gt;' + options.url + ' : ' + options.some;\n    }\n    test();\n    test({});\n    test({url:'myURL'});\n    test({some:'somethingOfMine'});\n    test({url:'overrideURL', some:'andSomething'});\n    test({url:'overrideURL', some:'andSomething', extra:'noProblem'});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>EDIT:</strong> Due to comments regarding <code>const</code> options - the problem with using constant options in the rest of the function is actually <strong>not</strong> that you can't do that, is just that you can't use the constant variable in its own declaration - you would have to adjust the input naming to something like</p>\n<pre><code>function test(input_options){\n   const options = {\n     // defaults\n     someKey:    'someDefaultValue',\n     anotherKey: 'anotherDefaultValue',\n\n     // merge-in input options\n     ...input_options\n   };\n\n   // from now on use options with no problem\n}\n</code></pre>\n"},{"score":1,"body":"<p>Just to showcase my skills too (lol), above function can written even without having named arguments as below:</p>\n\n<p><strong>ES5 and above</strong></p>\n\n<pre><code>function foo() {\n    a = typeof arguments[0] !== 'undefined' ? a : 42;\n    b = typeof arguments[1] !== 'undefined' ? b : 'default_b';\n    ...\n}\n</code></pre>\n\n<p><strong>ES6 and above</strong></p>\n\n<pre><code>function foo(...rest) {\n    a = typeof rest[0] !== 'undefined' ? a : 42;\n    b = typeof rest[1] !== 'undefined' ? b : 'default_b';\n    ...\n}\n</code></pre>\n"},{"score":0,"body":"<h1>Yes - proof:</h1>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function read_file(file, delete_after = false) {\n  // Code\n  console.log({file,delete_after});\n}\n\n\n\n// TEST\nread_file(\"A\");\nread_file(\"B\",true);\nread_file(\"C\",false);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],"score":2434}