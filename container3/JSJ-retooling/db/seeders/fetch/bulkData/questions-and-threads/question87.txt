{"body":"<p>I have a string, <code>12345.00</code>, and I would like it to return <code>12345.0</code>.</p>\n\n<p>I have looked at <code>trim</code>, but it looks like it is only trimming whitespace and <code>slice</code> which I don't see how this would work. Any suggestions?</p>\n","title":"JavaScript chop/slice/trim off last character in string","answers":[{"score":3391,"body":"<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\" rel=\"noreferrer\">substring</a> function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let str = \"12345.00\";\r\nstr = str.substring(0, str.length - 1);\r\nconsole.log(str);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This is the accepted answer, but as per the conversations below, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"noreferrer\">slice</a> syntax is much clearer:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let str = \"12345.00\";\r\nstr = str.slice(0, -1); \r\nconsole.log(str);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":9,"body":"<p>How about:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let myString = \"12345.00\";\r\nconsole.log(myString.substring(0, myString.length - 1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":68,"body":"<p>For a number like your example, I would recommend doing this over <code>substring</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(parseFloat('12345.00').toFixed(1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Do note that this will actually round the number, though, which I would imagine is desired but maybe not:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(parseFloat('12345.46').toFixed(1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":3,"body":"<p>If you want to do generic rounding of floats, instead of just trimming the last character:</p>\n\n<pre><code>var float1 = 12345.00,\n    float2 = 12345.4567,\n    float3 = 12345.982;\n\nvar MoreMath = {\n    /**\n     * Rounds a value to the specified number of decimals\n     * @param float value The value to be rounded\n     * @param int nrDecimals The number of decimals to round value to\n     * @return float value rounded to nrDecimals decimals\n     */\n    round: function (value, nrDecimals) {\n        var x = nrDecimals &gt; 0 ? 10 * parseInt(nrDecimals, 10) : 1;\n        return Math.round(value * x) / x;\n    }\n}\n\nMoreMath.round(float1, 1) =&gt; 12345.0\nMoreMath.round(float2, 1) =&gt; 12345.5\nMoreMath.round(float3, 1) =&gt; 12346.0\n</code></pre>\n\n<p><em>EDIT:</em> Seems like there exists a built in function for this, as Paolo points out. That solution is obviously much cleaner than mine. Use <a href=\"http://www.w3schools.com/jsref/jsref_parseFloat.asp\" rel=\"nofollow noreferrer\">parseFloat</a> followed by <a href=\"http://www.w3schools.com/jsref/jsref_tofixed.asp\" rel=\"nofollow noreferrer\">toFixed</a> </p>\n"},{"score":1350,"body":"<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"noreferrer\">slice</a>! You just have to make sure you know how to use it. Positive #s are relative to the beginning, negative numbers are relative to the end.</p>\n\n<pre><code>js&gt;\"12345.00\".slice(0,-1)\n12345.0\n</code></pre>\n"},{"score":-4,"body":"<blockquote>\n  <p>@Jason S:</p>\n  \n  <p>You can use slice! You just have to\n  make sure you know how to use it.\n  Positive #s are relative to the\n  beginning, negative numbers are\n  relative to the end.</p>\n  \n  <p>js>\"12345.00\".slice(0,-1)\n  12345.0</p>\n</blockquote>\n\n<p>Sorry for my graphomany but post was tagged 'jquery' earlier. So, <strong><em>you can't use</em></strong> <strong>slice()</strong> inside jQuery because <strong>slice()</strong> is jQuery method for operations with DOM elements, not substrings ... \nIn other words answer <em>@Jon Erickson</em> suggest really perfect solution.</p>\n\n<p>However, your method will works out of jQuery function, inside simple Javascript.\nNeed to say due to last discussion in comments, that jQuery is very much more often renewable extension of JS than his own parent most known ECMAScript.</p>\n\n<p>Here also exist two methods:</p>\n\n<p><em>as our:</em></p>\n\n<p><code>string.substring(from,to)</code> <em>as plus if 'to' index nulled returns the rest of string. so:</em>\n<code>string.substring(from)</code> <em>positive or negative ...</em></p>\n\n<p><em>and some other - substr() - which provide range of substring and 'length' can be positive only:</em>\n<code>string.substr(start,length)</code></p>\n\n<p>Also some maintainers suggest that last method <code>string.substr(start,length)</code> do not works or work with error for MSIE.</p>\n"},{"score":-8,"body":"<p>Use substring to get everything to the left of _bar. But first you have to get the instr of _bar in the string:</p>\n\n<pre><code>str.substring(3, 7);\n</code></pre>\n\n<p>3 is that start and 7 is the length.</p>\n"},{"score":267,"body":"<p>You can use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/substring\" rel=\"noreferrer\">substring</a> method of JavaScript string objects:</p>\n\n<pre><code>s = s.substring(0, s.length - 4)\n</code></pre>\n\n<p>It unconditionally removes the last four characters from string <code>s</code>.</p>\n\n<p>However, if you want to <em>conditionally</em> remove the last four characters, only if they are <em>exactly</em> <code>_bar</code>:</p>\n\n<pre><code>var re = /_bar$/;\ns.replace(re, \"\");\n</code></pre>\n"},{"score":1,"body":"<pre><code>if(str.substring(str.length - 4) == \"_bar\")\n{\n    str = str.substring(0, str.length - 4);\n}\n</code></pre>\n"},{"score":19,"body":"<p>A regular expression is what you are looking for:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let str = \"foo_bar\";\r\nconsole.log(str.replace(/_bar$/, \"\"));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":163,"body":"<p>The easiest method is to use the <code>slice</code> method of the string, which allows negative positions (corresponding to offsets from the end of the string):</p>\n\n<pre><code>const s = \"your string\";\nconst withoutLastFourChars = s.slice(0, -4);\n</code></pre>\n\n<p>If you needed something more general to remove everything after (and including) the last underscore, you could do the following (so long as <code>s</code> is guaranteed to contain at least one underscore):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const s = \"your_string\";\r\nconst withoutLastChunk = s.slice(0, s.lastIndexOf(\"_\"));\r\nconsole.log(withoutLastChunk);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":-3,"body":"<p>Try this:</p>\n\n<pre><code>&lt;script&gt;\n    var x=\"foo_foo_foo_bar\";\n    for (var i=0; i&lt;=x.length; i++) {\n        if (x[i]==\"_\" &amp;&amp; x[i+1]==\"b\") {\n            break;\n        }\n        else {\n            document.write(x[i]);\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>You can also try the live working example on <a href=\"http://jsfiddle.net/informativejavascript/F7WTn/87/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/informativejavascript/F7WTn/87/</a>.</p>\n"},{"score":7,"body":"<ol>\n<li>(.*), captures any character multiple times</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\"a string\".match(/(.*).$/)[1]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<ol start=\"2\">\n<li>., matches last character, in this case</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\"a string\".match(/(.*).$/));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<ol start=\"3\">\n<li>$, matches the end of the string</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\"a string\".match(/(.*).{2}$/)[1]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":10,"body":"<p>Try this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myString = \"Hello World!\";\r\nconsole.log(myString.slice(0, -1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":6,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const str = \"test!\";\r\nconsole.log(str.slice(0, -1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":30,"body":"<p>Using JavaScript's slice function:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let string = 'foo_bar';\r\nstring = string.slice(0, -4); // Slice off last four characters here\r\nconsole.log(string);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This could be used to remove '_bar' at end of a string, of any length.</p>\n"},{"score":4,"body":"<pre><code>debris = string.split(\"_\") //explode string into array of strings indexed by \"_\"\n\ndebris.pop(); //pop last element off the array (which you didn't want)\n\nresult = debris.join(\"_\"); //fuse the remainng items together like the sun\n</code></pre>\n"},{"score":10,"body":"<p>Use regex:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let aStr = \"12345.00\";\r\naStr = aStr.replace(/.$/, '');\r\nconsole.log(aStr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p><a href=\"https://stackoverflow.com/questions/34817546/javascript-how-to-delete-last-two-characters-in-a-string\">https://stackoverflow.com/questions/34817546/javascript-how-to-delete-last-two-characters-in-a-string</a></p>\n<blockquote>\n<p>Just use trim if you don't want spaces</p>\n</blockquote>\n<p><code>&quot;11.01 °C&quot;.slice(0,-2).trim()</code></p>\n"},{"score":-1,"body":"<p>In cases where you want to remove something that is close to the end of a string (in case of variable sized strings) you can combine slice() and substr().</p>\n\n<p>I had a string with markup, dynamically built, with a list of anchor tags separated by comma. The string was something like:</p>\n\n<pre><code>var str = \"&lt;a&gt;text 1,&lt;/a&gt;&lt;a&gt;text 2,&lt;/a&gt;&lt;a&gt;text 2.3,&lt;/a&gt;&lt;a&gt;text abc,&lt;/a&gt;\";\n</code></pre>\n\n<p>To remove the last comma I did the following:</p>\n\n<pre><code>str = str.slice(0, -5) + str.substr(-4);\n</code></pre>\n"},{"score":5,"body":"<p>Here is an alternative that i don't think i've seen in the other answers, just for fun.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var strArr = \"hello i'm a string\".split(\"\");\r\nstrArr.pop();\r\ndocument.write(strArr.join(\"\"));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Not as legible or simple as slice or substring but does allow you to play with the string using some nice array methods, so worth knowing.</p>\n"},{"score":5,"body":"<p>The shortest way:</p>\n\n<pre><code>str.slice(0, -1); \n</code></pre>\n"},{"score":3,"body":"<h1>Performance</h1>\n<p>Today 2020.05.13 I perform tests of chosen solutions on Chrome v81.0, Safari v13.1 and Firefox v76.0 on MacOs High Sierra v10.13.6.</p>\n<h2>Conclusions</h2>\n<ul>\n<li>the <code>slice(0,-1)</code>(D) is fast or fastest solution for short and long strings and it is recommended as fast cross-browser solution</li>\n<li>solutions based on <code>substring</code> (C) and <code>substr</code>(E) are fast</li>\n<li>solutions based on regular expressions (A,B) are slow/medium fast</li>\n<li>solutions B, F and G are slow for long strings</li>\n<li>solution F is slowest for short strings, G is slowest for long strings</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/YfBgV.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/YfBgV.png\" alt=\"enter image description here\" /></a></p>\n<h2>Details</h2>\n<p>I perform two tests for solutions <a href=\"https://stackoverflow.com/a/31691504/860099\">A</a>, <a href=\"https://stackoverflow.com/a/14064632/860099\">B</a>, <a href=\"https://stackoverflow.com/a/952945/860099\">C</a>, <a href=\"https://stackoverflow.com/a/952945/860099\">D</a>, E(<a href=\"https://www.techiedelight.com/remove-last-character-string-javascript/\" rel=\"nofollow noreferrer\">ext</a>), <a href=\"https://stackoverflow.com/a/49255704/860099\">F</a>, G(my)</p>\n<ul>\n<li>for 8-char short string (from OP question) - you can run it <a href=\"https://jsbench.me/eoka4fqanu/1\" rel=\"nofollow noreferrer\">HERE</a></li>\n<li>for 1M long string - you can run it <a href=\"https://jsbench.me/vqka5a03al/1\" rel=\"nofollow noreferrer\">HERE</a></li>\n</ul>\n<p>Solutions are presented in below snippet</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(str) {\n  return str.replace(/.$/, '');\n}\n\nfunction B(str) {\n  return str.match(/(.*).$/)[1];\n}\n\nfunction C(str) {\n  return str.substring(0, str.length - 1);\n}\n\nfunction D(str) {\n  return str.slice(0, -1); \n}\n\nfunction E(str) {\n  return str.substr(0, str.length - 1);\n}\n\nfunction F(str) {\n  let s= str.split(\"\");\n  s.pop();\n  return s.join(\"\");\n}\n\nfunction G(str) {\n  let s='';\n  for(let i=0; i&lt;str.length-1; i++) s+=str[i];\n  return s;\n }\n\n\n\n// ---------\n// TEST\n// ---------\n\nlet log = (f)=&gt;console.log(`${f.name}: ${f(\"12345.00\")}`);\n\n[A,B,C,D,E,F,G].map(f=&gt;log(f));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>This snippet only presents soutions</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Here are example results for Chrome for short string</p>\n<p><a href=\"https://i.stack.imgur.com/JDigN.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/JDigN.png\" alt=\"enter image description here\" /></a></p>\n"},{"score":7,"body":"<h2>Be aware that <code>String.prototype.{ split, slice, substr, substring }</code> operate on UTF-16 encoded strings</h2>\n<p>None of the previous answers are Unicode-aware.\nStrings are encoded as UTF-16 in most modern JavaScript engines, but higher Unicode code points require <a href=\"https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\" rel=\"nofollow noreferrer\">surrogate pairs</a>, so older, pre-existing string methods operate on UTF-16 code units, not Unicode code points.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const string = \"ẞ🦊\";\n\nconsole.log(string.slice(0, -1)); // \"ẞ\\ud83e\"\nconsole.log(string.substr(0, string.length - 1)); // \"ẞ\\ud83e\"\nconsole.log(string.substring(0, string.length - 1)); // \"ẞ\\ud83e\"\nconsole.log(string.replace(/.$/, \"\")); // \"ẞ\\ud83e\"\nconsole.log(string.match(/(.*).$/)[1]); // \"ẞ\\ud83e\"\n\nconst utf16Chars = string.split(\"\");\n\nutf16Chars.pop();\nconsole.log(utf16Chars.join(\"\")); // \"ẞ\\ud83e\"</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In addition, <code>RegExp</code> methods, as suggested in older answers, don’t match line breaks at the end:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const string = \"Hello, world!\\n\";\n\nconsole.log(string.replace(/.$/, \"\").endsWith(\"\\n\")); // true\nconsole.log(string.match(/(.*).$/) === null); // true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<hr />\n<h2>Use the string iterator to iterate characters</h2>\n<p>Unicode-aware code utilizes the string’s iterator; see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"nofollow noreferrer\"><code>Array.from</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_array_literals\" rel=\"nofollow noreferrer\"><code>...</code> spread</a>.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator\" rel=\"nofollow noreferrer\"><code>string[Symbol.iterator]</code></a> can be used (e.g. instead of <code>string</code>) as well.</p>\n<p>Also see <a href=\"https://stackoverflow.com/q/35223206/4642212\">How to split Unicode string to characters in JavaScript</a>.</p>\n<p>Examples:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const string = \"ẞ🦊\";\n\nconsole.log(Array.from(string).slice(0, -1).join(\"\")); // \"ẞ\"\nconsole.log([\n  ...string\n].slice(0, -1).join(\"\")); // \"ẞ\"</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Use the <code>s</code> and <code>u</code> flags on a <code>RegExp</code></h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll\" rel=\"nofollow noreferrer\"><code>dotAll</code> or <code>s</code> flag</a> makes <code>.</code> match line break characters, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode\" rel=\"nofollow noreferrer\"><code>unicode</code> or <code>u</code> flag</a> enables certain Unicode-related features.\nNote that, when using the <code>u</code> flag, you eliminate unnecessary identity escapes, as <a href=\"https://stackoverflow.com/a/63007777/4642212\">these are invalid in a <code>u</code> regex</a>, e.g. <code>\\[</code> is fine, as it would start a character class without the backslash, but <code>\\:</code> isn’t, as it’s a <code>:</code> with or without the backslash, so you need to remove the backslash.</p>\n<p>Examples:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const unicodeString = \"ẞ🦊\",\n  lineBreakString = \"Hello, world!\\n\";\n\nconsole.log(lineBreakString.replace(/.$/s, \"\").endsWith(\"\\n\")); // false\nconsole.log(lineBreakString.match(/(.*).$/s) === null); // false\nconsole.log(unicodeString.replace(/.$/su, \"\")); // ẞ\nconsole.log(unicodeString.match(/(.*).$/su)[1]); // ẞ\n\n// Now `split` can be made Unicode-aware:\n\nconst unicodeCharacterArray = unicodeString.split(/(?:)/su),\n  lineBreakCharacterArray = lineBreakString.split(/(?:)/su);\n\nunicodeCharacterArray.pop();\nlineBreakCharacterArray.pop();\nconsole.log(unicodeCharacterArray.join(\"\")); // \"ẞ\"\nconsole.log(lineBreakCharacterArray.join(\"\").endsWith(\"\\n\")); // false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<hr />\n<p>Note that some graphemes consist of more than one code point, e.g. <code>🏳️‍🌈</code> which consists of the sequence <code>🏳</code> (U+1F3F3), <a href=\"https://codepoints.net/U+FE0F\" rel=\"nofollow noreferrer\"><code>VS16</code> (U+FE0F)</a>, <a href=\"https://codepoints.net/U+200D\" rel=\"nofollow noreferrer\"><code>ZWJ</code> (U+200D)</a>, <code>🌈</code> (U+1F308).\nHere, even <code>Array.from</code> will split this into four “characters”.\nMatching those is possible with the <a href=\"https://github.com/tc39/proposal-regexp-unicode-sequence-properties\" rel=\"nofollow noreferrer\">Unicode property escapes sequence properties proposal</a>.</p>\n"},{"score":0,"body":"<p>You can, in fact, remove the last <code>arr.length - 2</code> items of an array using <code>arr.length = 2</code>, which if the array length was 5, would remove the last 3 items.</p>\n<p>Sadly, this does not work for strings, but we can use <code>split()</code> to split the string, and then <code>join()</code> to join the string after we've made any modifications.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = 'string'\n\nString.prototype.removeLast = function(n) {\n  var string = this.split('')\n  string.length = string.length - n\n\n  return string.join('')\n}\n\nconsole.log(str.removeLast(3))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>Via slice(indexStart, indexEnd) method - note, this does NOT CHANGE the existing string, it creates a copy and changes the copy.</p>\n<pre><code>console.clear();\nlet str = &quot;12345.00&quot;;\nlet a = str.slice(0, str.length -1)\nconsole.log(a, &quot;&lt;= a&quot;);\nconsole.log(str, &quot;&lt;= str is NOT changed&quot;);\n</code></pre>\n<p>Via Regular Expression method - note, this does NOT CHANGE the existing string, it creates a copy and changes the copy.</p>\n<pre><code>console.clear();\nlet regExp = /.$/g\nlet b = str.replace(regExp,&quot;&quot;)\nconsole.log(b, &quot;&lt;= b&quot;);\nconsole.log(str, &quot;&lt;= str is NOT changed&quot;);\n</code></pre>\n<p>Via array.splice() method -&gt; this only works on arrays, and it CHANGES, the existing array (so careful with this one), you'll need to convert a string to an array first, then back.</p>\n<pre><code>console.clear();\nlet str = &quot;12345.00&quot;;\nlet strToArray = str.split(&quot;&quot;)\nconsole.log(strToArray, &quot;&lt;= strToArray&quot;);\nlet spliceMethod = strToArray.splice(str.length-1, 1)\nstr = strToArray.join(&quot;&quot;)\nconsole.log(str, &quot;&lt;= str is changed now&quot;);\n</code></pre>\n"}],"score":2102}