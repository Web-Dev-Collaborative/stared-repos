{"body":"<p>How can I get a timestamp in JavaScript?</p>\n\n<p>Something similar to <a href=\"https://en.wikipedia.org/wiki/Unix_time\" rel=\"noreferrer\">Unix timestamp</a>, that is, a single number that represents the current time and date. Either as a number or a string.</p>\n","title":"How do you get a timestamp in JavaScript?","answers":[{"score":5108,"body":"<h1>Short &amp; Snazzy:</h1>\n\n<pre><code>+ new Date()\n</code></pre>\n\n<p>A unary operator like <code>plus</code> triggers the <code>valueOf</code> method in the <code>Date</code> object and it returns the timestamp (without any alteration).</p>\n\n<p><strong>Details:</strong></p>\n\n<p>On almost all current browsers you can use <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.4.4\" rel=\"noreferrer\"><code>Date.now()</code></a> to get the UTC timestamp in <strong>milliseconds</strong>; a notable exception to this is IE8 and earlier (see <a href=\"http://kangax.github.io/compat-table/es5/#Date.now\" rel=\"noreferrer\">compatibility table</a>).</p>\n\n<p>You can easily make a shim for this, though:</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function() { return new Date().getTime(); }\n}\n</code></pre>\n\n<p>To get the timestamp in <strong>seconds</strong>, you can use:</p>\n\n<pre><code>Math.floor(Date.now() / 1000)\n</code></pre>\n\n<p>Or alternatively you could use:</p>\n\n<pre><code>Date.now() / 1000 | 0\n</code></pre>\n\n<p>Which should be slightly faster, but also less readable (also <a href=\"https://stackoverflow.com/questions/7487977/using-bitwise-or-0-to-floor-a-number\">see this answer</a>).</p>\n\n<p>I would recommend using <code>Date.now()</code> (with compatibility shim). It's slightly better because it's shorter &amp; doesn't create a new <code>Date</code> object. However, if you don't want a shim &amp; maximum compatibility, you could use the \"old\" method to get the timestamp in <strong>milliseconds</strong>:</p>\n\n<pre><code>new Date().getTime()\n</code></pre>\n\n<p>Which you can then convert to seconds like this:</p>\n\n<pre><code>Math.round(new Date().getTime()/1000)\n</code></pre>\n\n<p>And you can also use the <code>valueOf</code> method which we showed above:</p>\n\n<pre><code>new Date().valueOf()\n</code></pre>\n\n<p><strong>Timestamp in Milliseconds</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var timeStampInMs = window.performance &amp;&amp; window.performance.now &amp;&amp; window.performance.timing &amp;&amp; window.performance.timing.navigationStart ? window.performance.now() + window.performance.timing.navigationStart : Date.now();\r\n\r\nconsole.log(timeStampInMs, Date.now());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":152,"body":"<pre><code>var time = Date.now || function() {\n  return +new Date;\n};\n\ntime();\n</code></pre>\n"},{"score":93,"body":"<pre><code>var timestamp = Number(new Date()); // current time as number\n</code></pre>\n"},{"score":45,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(new Date().valueOf()); // returns the number of milliseconds since the epoch</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":-20,"body":"<pre><code>time = Math.round(((new Date()).getTime()-Date.UTC(1970,0,1))/1000);\n</code></pre>\n"},{"score":539,"body":"<p>I like this, because it is small:</p>\n\n<pre><code>+new Date\n</code></pre>\n\n<p>I also like this, because it is just as short and is compatible with modern browsers, and over 500 people voted that it is better: </p>\n\n<pre><code>Date.now()\n</code></pre>\n"},{"score":284,"body":"<p>JavaScript works with the number of milliseconds since the epoch whereas most other languages work with the seconds. You could work with milliseconds but as soon as you pass a value to say PHP, the PHP native functions will probably fail. So to be sure I always use the seconds, not milliseconds.</p>\n\n<p>This will give you a Unix timestamp (in seconds):</p>\n\n<pre><code>var unix = Math.round(+new Date()/1000);\n</code></pre>\n\n<p>This will give you the milliseconds since the epoch (not Unix timestamp):</p>\n\n<pre><code>var milliseconds = new Date().getTime();\n</code></pre>\n"},{"score":27,"body":"<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\"><code>Date.getTime()</code></a> method can be used with a little tweak:</p>\n\n<blockquote>\n  <p>The value returned by the getTime method is the number of milliseconds\n  since 1 January 1970 00:00:00 UTC.</p>\n</blockquote>\n\n<p>Divide the result by 1000 to get the Unix timestamp, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\"><code>floor</code></a> if necessary:</p>\n\n<pre><code>(new Date).getTime() / 1000\n</code></pre>\n\n<hr>\n\n<p><sup>The <code>Date.valueOf()</code> method is functionally equivalent to <code>Date.getTime()</code>, which makes it possible to use arithmetic operators on date object to achieve identical results. In my opinion, this approach affects readability.</sup></p>\n"},{"score":134,"body":"<p><strong><em>I provide multiple solutions with descriptions in this answer. Feel free to ask questions if anything is unclear</em></strong><br>\nPS: sadly someone merged this to the top answer without giving credit.</p>\n\n<hr>\n\n<p><strong>Quick and dirty solution:</strong></p>\n\n<pre><code>Date.now() /1000 |0\n</code></pre>\n\n<blockquote>\n  <p><strong><em>Warning</strong>: it <strong>might</strong> break in 2038 and return negative numbers if you do the <code>|0</code> magic. Use <code>Math.floor()</code> instead by that time</em></p>\n</blockquote>\n\n<p><strong><code>Math.floor()</code> solution:</strong></p>\n\n<pre><code>Math.floor(Date.now() /1000);\n</code></pre>\n\n<hr>\n\n<p><strong>Some nerdy alternative by <a href=\"//stackoverflow.com/users/283863\">Derek 朕會功夫</a> taken from the comments below this answer:</strong></p>\n\n<pre><code>new Date/1e3|0\n</code></pre>\n\n<hr>\n\n<p><strong>Polyfill to get <code>Date.now()</code> working:</strong></p>\n\n<p>To get it working in IE you could do this (Polyfill from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" rel=\"noreferrer\">MDN</a>):</p>\n\n<pre><code>if (!Date.now) {\n    Date.now = function now() {\n        return new Date().getTime();\n    };\n}\n</code></pre>\n\n<hr>\n\n<p><strong>If you do not care about the year / day of week / daylight saving time you could strip it away and use this after 2038:</strong>  </p>\n\n<pre><code>var now = (function () {\n    var year = new Date(new Date().getFullYear().toString()).getTime();\n    return function () {\n        return Date.now() - year\n    }\n})();\n</code></pre>\n\n<blockquote>\n  <p>Some output of how it will look:</p>\n\n<pre><code>new Date()\nThu Oct 29 2015 08:46:30 GMT+0100 (Mitteleuropäische Zeit )\nnew Date(now())\nThu Oct 29 1970 09:46:30 GMT+0100 (Mitteleuropäische Zeit )\n</code></pre>\n  \n  <p>Of course it will break daylight saving time but depending on what you\n  are building this might be useful to you if you need to do binary\n  operations on timestamps after int32 will break in 2038.</p>\n  \n  <p>This will also return negative values but only if the user of that PC\n  you are running your code on is changing their PC's clock at least to\n  31th of december of the previous year.</p>\n</blockquote>\n\n<hr>\n\n<p>If you just want to know the relative time from the point of when the code was run through first you could use something like this:</p>\n\n<pre><code>var relativeTime = (function () {\n    var start = Date.now();\n    return function () {\n        return Date.now() - start\n    }\n})();\n</code></pre>\n\n<hr>\n\n<p><strong>In case you are using jQuery you could use <code>$.now()</code> as described in <a href=\"http://api.jquery.com/jquery.now/\" rel=\"noreferrer\">jQuery's Docs</a> which makes the polyfill obsolete since <code>$.now()</code> internally does the same thing: <code>(new Date).getTime()</code></strong></p>\n\n<p>If you are just happy about jQuery's version consider upvoting <a href=\"//stackoverflow.com/a/15434736/1519836\"><strong>this</strong></a> answer since I did not find it myself.</p>\n\n<hr>\n\n<p><strong>Now a tiny explaination of what <code>|0</code> does:</strong></p>\n\n<p>By providing <code>|</code>, you tell the interpreter to do a binary OR operation. Bit operations require absolute numbers which turns the decimal result from <code>Date.now() / 1000</code> into an integer.  </p>\n\n<p>During that conversion, decimals are removed, resulting in the same result as using <code>Math.floor()</code> but using less code.</p>\n\n<blockquote>\n  <p><strong>Be warned though:</strong> it will convert a 64 bit double to a 32 bit integer. This will result in information loss when dealing with huge numbers. Timestamps will break after 2038 due to 32 bit integer overflow.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>For further information about <code>Date.now</code> follow this link: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" rel=\"noreferrer\"><code>Date.now()</code> @ MDN</a></strong></p>\n"},{"score":43,"body":"<p>Just to add up, here's a function to return a timestamp string in Javascript. \nExample: 15:06:38 PM</p>\n\n<pre><code>function displayTime() {\n    var str = \"\";\n\n    var currentTime = new Date()\n    var hours = currentTime.getHours()\n    var minutes = currentTime.getMinutes()\n    var seconds = currentTime.getSeconds()\n\n    if (minutes &lt; 10) {\n        minutes = \"0\" + minutes\n    }\n    if (seconds &lt; 10) {\n        seconds = \"0\" + seconds\n    }\n    str += hours + \":\" + minutes + \":\" + seconds + \" \";\n    if(hours &gt; 11){\n        str += \"PM\"\n    } else {\n        str += \"AM\"\n    }\n    return str;\n}\n</code></pre>\n"},{"score":60,"body":"<p><em>jQuery</em> provides <a href=\"http://api.jquery.com/jQuery.now/\" rel=\"noreferrer\">its own method</a> to get the timestamp:</p>\n\n<pre><code>var timestamp = $.now();\n</code></pre>\n\n<p><sup>(besides it just implements <code>(new Date).getTime()</code> expression)</sup></p>\n\n<p><strong>REF:</strong> <a href=\"http://api.jquery.com/jQuery.now/\" rel=\"noreferrer\">http://api.jquery.com/jQuery.now/</a></p>\n"},{"score":16,"body":"<p>Any browsers not supported Date.now, you can use this for get current date time:</p>\n\n<pre><code>currentTime = Date.now() || +new Date()\n</code></pre>\n"},{"score":20,"body":"<p>Here is a simple function to generate timestamp in the format: mm/dd/yy hh:mi:ss </p>\n\n<pre><code>function getTimeStamp() {\n    var now = new Date();\n    return ((now.getMonth() + 1) + '/' +\n            (now.getDate()) + '/' +\n             now.getFullYear() + \" \" +\n             now.getHours() + ':' +\n             ((now.getMinutes() &lt; 10)\n                 ? (\"0\" + now.getMinutes())\n                 : (now.getMinutes())) + ':' +\n             ((now.getSeconds() &lt; 10)\n                 ? (\"0\" + now.getSeconds())\n                 : (now.getSeconds())));\n}\n</code></pre>\n"},{"score":14,"body":"<p>This one has a solution : which converts unixtime stamp to tim in js try this</p>\n\n<pre><code>var a = new Date(UNIX_timestamp*1000);\nvar hour = a.getUTCHours();\nvar min = a.getUTCMinutes();\nvar sec = a.getUTCSeconds();\n</code></pre>\n"},{"score":8,"body":"<p>more simpler way:</p>\n\n<pre><code>var timeStamp=event.timestamp || new Date().getTime();\n</code></pre>\n"},{"score":30,"body":"<p>One I haven't seen yet </p>\n\n<pre><code>Math.floor(Date.now() / 1000); // current time in seconds\n</code></pre>\n\n<p>Another one I haven't seen yet is</p>\n\n<pre><code>var _ = require('lodash'); // from here https://lodash.com/docs#now\n_.now();\n</code></pre>\n"},{"score":7,"body":"<p>sometime I need it in objects for xmlhttp calls, so I do like this.</p>\n\n<pre><code>timestamp : parseInt(new Date().getTime()/1000, 10)\n</code></pre>\n"},{"score":1,"body":"<p>Here is another solution to generate a timestamp in JavaScript - including a padding method for single numbers - using day, month, year, hour, minute and seconds in its result (working example at <a href=\"http://jsfiddle.net/AcLzd/9/\" rel=\"nofollow\">jsfiddle</a>):</p>\n\n<pre><code>var pad = function(int) { return int &lt; 10 ? 0 + int : int; };\nvar timestamp = new Date();\n\n    timestamp.day = [\n        pad(timestamp.getDate()),\n        pad(timestamp.getMonth() + 1), // getMonth() returns 0 to 11.\n        timestamp.getFullYear()\n    ];\n\n    timestamp.time = [\n        pad(timestamp.getHours()),\n        pad(timestamp.getMinutes()),\n        pad(timestamp.getSeconds())\n    ];\n\ntimestamp.now = parseInt(timestamp.day.join(\"\") + timestamp.time.join(\"\"));\nalert(timestamp.now);\n</code></pre>\n"},{"score":10,"body":"<p><a href=\"http://momentjs.com\" rel=\"noreferrer\">Moment.js</a> can abstract away a lot of the pain in dealing with Javascript Dates. </p>\n\n<p>See: <a href=\"http://momentjs.com/docs/#/displaying/unix-timestamp/\" rel=\"noreferrer\">http://momentjs.com/docs/#/displaying/unix-timestamp/</a></p>\n\n<pre><code>moment().unix();\n</code></pre>\n"},{"score":14,"body":"<p>I learned a really cool way of converting a given Date object to a Unix timestamp from the source code of <a href=\"https://github.com/carhartl/jquery-cookie/blob/master/src/jquery.cookie.js\" rel=\"noreferrer\">JQuery Cookie</a> the other day.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>var date = new Date();\nvar timestamp = +date;\n</code></pre>\n"},{"score":3,"body":"<p><code>var my_timestamp = ~~(Date.now()/1000);</code></p>\n"},{"score":4,"body":"<p>The advised, proper way is <code>Number(new Date())</code>, \nin terms of code- readability,</p>\n\n<p>Also, UglifyJS and Google-Closure-Compiler will lower the complexity of the parsed code-logic-tree (relevant if you are using one of them to obscure/minify your code). </p>\n\n<p>for Unix timestamp, which has a lower time resolution,  just divide current number with <code>1000</code>, keeping the whole. </p>\n"},{"score":12,"body":"<p>For <a href=\"https://lodash.com/docs#now\">lodash</a> and <a href=\"http://underscorejs.org/#now\">underscore</a> users, use <code>_.now</code>.</p>\n\n<pre><code>var timestamp = _.now(); // in milliseconds\n</code></pre>\n"},{"score":4,"body":"<pre><code>var d = new Date();\nconsole.log(d.valueOf()); \n</code></pre>\n"},{"score":14,"body":"<p>If want a basic way to generate a timestamp in Node.js this works well.</p>\n\n<pre><code>var time = process.hrtime();\nvar timestamp = Math.round( time[ 0 ] * 1e3 + time[ 1 ] / 1e6 );\n</code></pre>\n\n<p>Our team is using this to bust cache in a localhost environment. The output is <code>/dist/css/global.css?v=245521377</code> where <code>245521377</code> is the timestamp generated by <code>hrtime()</code>. </p>\n\n<p>Hopefully this helps, the methods above can work as well but I found this to be the simplest approach for our needs in Node.js.</p>\n"},{"score":22,"body":"<p>For a timestamp with microsecond resolution, there's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\" rel=\"noreferrer\"><code>performance.now</code></a>:</p>\n\n<pre><code>function time() { \n  return performance.now() + performance.timing.navigationStart;\n}\n</code></pre>\n\n<p>This could for example yield <code>1436140826653.139</code>, while <code>Date.now</code> only gives <code>1436140826653</code>.</p>\n"},{"score":21,"body":"<p>I highly recommend using <code>moment.js</code>. To get the number of milliseconds since UNIX epoch, do </p>\n\n<pre><code>moment().valueOf()\n</code></pre>\n\n<p>To get the number of seconds since UNIX epoch, do</p>\n\n<pre><code>moment().unix()\n</code></pre>\n\n<p>You can also convert times like so:</p>\n\n<pre><code>moment('2015-07-12 14:59:23', 'YYYY-MM-DD HH:mm:ss').valueOf()\n</code></pre>\n\n<p>I do that all the time. No pun intended.</p>\n\n<p>To use <code>moment.js</code> in the browser:</p>\n\n<pre><code>&lt;script src=\"moment.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    moment().valueOf();\n&lt;/script&gt;\n</code></pre>\n\n<p>For more details, including other ways of installing and using MomentJS, see their <a href=\"http://momentjs.com/docs/\" rel=\"noreferrer\">docs</a></p>\n"},{"score":20,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// The Current Unix Timestamp\r\n// 1443534720 seconds since Jan 01 1970. (UTC)\r\n\r\n// seconds\r\nconsole.log(Math.floor(new Date().valueOf() / 1000)); // 1443534720\r\nconsole.log(Math.floor(Date.now() / 1000)); // 1443534720\r\nconsole.log(Math.floor(new Date().getTime() / 1000)); // 1443534720\r\n\r\n// milliseconds\r\nconsole.log(Math.floor(new Date().valueOf())); // 1443534720087\r\nconsole.log(Math.floor(Date.now())); // 1443534720087\r\nconsole.log(Math.floor(new Date().getTime())); // 1443534720087\r\n\r\n// jQuery\r\n// seconds\r\nconsole.log(Math.floor($.now() / 1000)); // 1443534720\r\n// milliseconds\r\nconsole.log($.now()); // 1443534720087</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":14,"body":"<p>This seems to work.</p>\n\n<pre><code>console.log(clock.now);\n// returns 1444356078076\n\nconsole.log(clock.format(clock.now));\n//returns 10/8/2015 21:02:16\n\nconsole.log(clock.format(clock.now + clock.add(10, 'minutes'))); \n//returns 10/8/2015 21:08:18\n\nvar clock = {\n    now:Date.now(),\n    add:function (qty, units) {\n            switch(units.toLowerCase()) {\n                case 'weeks'   :  val = qty * 1000 * 60 * 60 * 24 * 7;  break;\n                case 'days'    :  val = qty * 1000 * 60 * 60 * 24;  break;\n                case 'hours'   :  val = qty * 1000 * 60 * 60;  break;\n                case 'minutes' :  val = qty * 1000 * 60;  break;\n                case 'seconds' :  val = qty * 1000;  break;\n                default       :  val = undefined;  break;\n                }\n            return val;\n            },\n    format:function (timestamp){\n            var date = new Date(timestamp);\n            var year = date.getFullYear();\n            var month = date.getMonth() + 1;\n            var day = date.getDate();\n            var hours = date.getHours();\n            var minutes = \"0\" + date.getMinutes();\n            var seconds = \"0\" + date.getSeconds();\n            // Will display time in xx/xx/xxxx 00:00:00 format\n            return formattedTime = month + '/' + \n                                day + '/' + \n                                year + ' ' + \n                                hours + ':' + \n                                minutes.substr(-2) + \n                                ':' + seconds.substr(-2);\n            }\n};\n</code></pre>\n"},{"score":26,"body":"<p>The code <code>Math.floor(new Date().getTime() / 1000)</code> can be shortened to <code>new Date / 1E3 | 0</code>.</p>\n\n<p>Consider to skip direct <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\" rel=\"noreferrer\"><code>getTime()</code></a> invocation and use <code>| 0</code> as a replacement for <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" rel=\"noreferrer\"><code>Math.floor()</code></a> function.\nIt's also good to remember <code>1E3</code> is a shorter equivalent for <code>1000</code> (uppercase E is preferred than lowercase to indicate <code>1E3</code> as a constant).</p>\n\n<p>As a result you get the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ts = new Date / 1E3 | 0;\r\n\r\nconsole.log(ts);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":47,"body":"<p>In addition to the other options, if you want a dateformat ISO, you get can get it directly</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(new Date().toISOString());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":21,"body":"<p>You can only use </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var timestamp = new Date().getTime();\r\n    console.log(timestamp);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>to get the current timestamp. No need to do anything extra.</p>\n"},{"score":42,"body":"<p><strong>Date</strong>, a <strong>native object</strong> in JavaScript is the way we get all data about time.</p>\n\n<p>Just be careful in JavaScript the timestamp depends on the client computer set, so it's not 100% accurate timestamp. To get the best result, you need to get the timestamp from the <strong>server-side</strong>. </p>\n\n<p>Anyway, my preferred way is using vanilla. This is a common way of doing it in JavaScript:</p>\n\n<pre><code>Date.now(); //return 1495255666921\n</code></pre>\n\n<p>In MDN it's mentioned as below:</p>\n\n<blockquote>\n  <p>The Date.now() method returns the number of milliseconds elapsed since\n  1 January 1970 00:00:00 UTC.<br>\n  Because now() is a static method of Date, you always use it as Date.now().</p>\n</blockquote>\n\n<p>If you using a version below ES5, <code>Date.now();</code> not works and you need to use:</p>\n\n<pre><code>new Date().getTime();\n</code></pre>\n"},{"score":9,"body":"<p>As of writing this, the top answer is 9 years old, and a lot has changed since then - not least, we have near universal support for a non-hacky solution:</p>\n\n<pre><code>Date.now()\n</code></pre>\n\n<p>If you want to be absolutely certain that this won't break in some ancient (pre ie9) browser, you can put it behind a check, like so:</p>\n\n<pre><code>const currentTimestamp = (!Date.now ? +new Date() : Date.now());\n</code></pre>\n\n<p>This will return the milliseconds since epoch time, of course, not seconds.</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now\" rel=\"noreferrer\" title=\"Date.now on MDN\">MDN Documentation on Date.now</a></p>\n"},{"score":2,"body":"<pre><code>function getTimeStamp() {\n    var now = new Date();\n    return ((now.getMonth() + 1) + '/' +\n            (now.getDate()) + '/' +\n             now.getFullYear() + \" \" +\n             now.getHours() + ':' +\n             ((now.getMinutes() &lt; 10)\n                 ? (\"0\" + now.getMinutes())\n                 : (now.getMinutes())) + ':' +\n             ((now.getSeconds() &lt; 10)\n                 ? (\"0\" + now.getSeconds())\n                 : (now.getSeconds())));\n}\n</code></pre>\n"},{"score":33,"body":"<h1>Performance</h1>\n<p>Today - 2020.04.23 I perform tests for chosen solutions. I tested on MacOs High Sierra 10.13.6 on Chrome 81.0, Safari 13.1, Firefox 75.0</p>\n<h3>Conclusions</h3>\n<ul>\n<li>Solution <code>Date.now()</code> (E) is fastest on Chrome and Safari and second fast on Firefox and this is probably best choice for fast cross-browser solution</li>\n<li>Solution <code>performance.now()</code> (G), what is surprising, is more than 100x faster than other solutions on Firefox but slowest on Chrome</li>\n<li>Solutions C,D,F are quite slow on all browsers</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/lCTrK.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lCTrK.png\" alt=\"enter image description here\" /></a></p>\n<h3>Details</h3>\n<p>Results for chrome</p>\n<p><a href=\"https://i.stack.imgur.com/Eaco2.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/Eaco2.png\" alt=\"enter image description here\" /></a></p>\n<p>You can perform test on your machine <a href=\"https://jsbench.me/f5k9ckm6lh/1\" rel=\"noreferrer\">HERE</a></p>\n<p>Code used in tests is presented in below snippet</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A() {\n  return new Date().getTime();\n}\n\nfunction B() {\n  return new Date().valueOf();\n}\n\nfunction C() {\n  return +new Date();\n}\n\nfunction D() {\n  return new Date()*1;\n}\n\nfunction E() {\n  return Date.now();\n}\n\nfunction F() {\n  return Number(new Date());\n}\n\nfunction G() {\n  // this solution returns time counted from loading the page.\n  // (and on Chrome it gives better precission)\n  return performance.now(); \n}\n\n\n\n// TEST\n\nlog = (n,f) =&gt; console.log(`${n} : ${f()}`);\n\nlog('A',A);\nlog('B',B);\nlog('C',C);\nlog('D',D);\nlog('E',E);\nlog('F',F);\nlog('G',G);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>This snippet only presents code used in external benchmark</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":14,"body":"<p>If it is for logging purposes, you can use <strong>ISOString</strong></p>\n\n<p><code>new Date().toISOString()</code></p>\n\n<blockquote>\n  <p>\"2019-05-18T20:02:36.694Z\"</p>\n</blockquote>\n"},{"score":3,"body":"<p><strong>Get TimeStamp In JavaScript</strong></p>\n<blockquote>\n<p>In JavaScript, a timestamp is the number of milliseconds that have passed since January 1, 1970.</p>\n<p>If you don't intend to support &lt; IE8, you can use</p>\n</blockquote>\n<pre><code>new Date().getTime(); + new Date(); and Date.now();\n</code></pre>\n<p>to directly get the timestamp without having to create a new Date object.</p>\n<blockquote>\n<p>To return the required timestamp</p>\n</blockquote>\n<pre><code>new Date(&quot;11/01/2018&quot;).getTime()\n</code></pre>\n"},{"score":0,"body":"<blockquote>\n  <p>To get time, month, day, year separately this will work</p>\n</blockquote>\n\n<pre><code>var currentTime = new Date();\nvar month = currentTime.getMonth() + 1;\nvar day = currentTime.getDate();\nvar year = currentTime.getFullYear();\n</code></pre>\n"}],"score":4164}