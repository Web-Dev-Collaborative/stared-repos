{"body":"<p>How do I make the first letter of a string uppercase, but not change the case of any of the other letters?</p>\n\n<p>For example:</p>\n\n<ul>\n<li><code>\"this is a test\"</code> -> <code>\"This is a test\"</code></li>\n<li><code>\"the Eiffel Tower\"</code> -> <code>\"The Eiffel Tower\"</code></li>\n<li><code>\"/index.html\"</code> -> <code>\"/index.html\"</code></li>\n</ul>\n","title":"How do I make the first letter of a string uppercase in JavaScript?","answers":[{"score":6120,"body":"<p>The basic solution is:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalizeFirstLetter(string) {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n}\r\n\r\nconsole.log(capitalizeFirstLetter('foo')); // Foo</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Some other answers modify <code>String.prototype</code> (this answer used to as well), but I would advise against this now due to maintainability (hard to find out where the function is being added to the <code>prototype</code> and could cause conflicts if other code uses the same name / a browser adds a native function with that same name in future).</p>\n\n<p>...and then, there is so much more to this question when you consider internationalisation, as <a href=\"https://stackoverflow.com/a/53930826/38522\">this astonishingly good answer</a> (buried below) shows.</p>\n\n<p>If you want to work with Unicode code points instead of code units (for example to handle Unicode characters outside of the Basic Multilingual Plane) you can leverage the fact that <code>String#[@iterator]</code> works with code points, and you can use <code>toLocaleUpperCase</code> to get locale-correct uppercasing:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalizeFirstLetter([ first, ...rest ], locale = navigator.language) {\r\n  return [ first.toLocaleUpperCase(locale), ...rest ].join('');\r\n}\r\n\r\nconsole.log(capitalizeFirstLetter('foo')); // Foo\r\nconsole.log(capitalizeFirstLetter(\"êê∂êê≤êëåêêºêê≤êëâ\")); // \"êêéêê≤êëåêêºêê≤êëâ\" (correct!)\r\nconsole.log(capitalizeFirstLetter(\"italya\", 'tr')); // ƒ∞talya\" (correct in Turkish Latin!)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For even more internationalization options, please see the <a href=\"https://stackoverflow.com/a/53930826/38522\">original answer below</a>.</p>\n"},{"score":38,"body":"<p>Here is a function called <strong>ucfirst()</strong> (short for \"upper case first letter\"):</p>\n\n<pre><code>function ucfirst(str) {\n    var firstLetter = str.substr(0, 1);\n    return firstLetter.toUpperCase() + str.substr(1);\n}\n</code></pre>\n\n<p>You can capitalise a string by calling <strong>ucfirst(\"some string\")</strong> -- for example,</p>\n\n<pre><code>ucfirst(\"this is a test\") --&gt; \"This is a test\"\n</code></pre>\n\n<p>It works by splitting the string into two pieces.  On the first line it pulls out <strong>firstLetter</strong> and then on the second line it capitalises <strong>firstLetter</strong> by calling <strong>firstLetter.toUpperCase()</strong> and joins it with the rest of the string, which is found by calling <strong>str.substr(1)</strong>.</p>\n\n<p>You might think this would fail for an empty string, and indeed in a language like C you would have to cater for this. However in JavaScript, when you take a substring of an empty string, you just get an empty string back.</p>\n"},{"score":1391,"body":"<p>Here's a more object-oriented approach:</p>\n\n<pre><code>String.prototype.capitalize = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>You'd call the function, like this:</p>\n\n<pre><code>\"hello world\".capitalize();\n</code></pre>\n\n<p>With the expected output being:</p>\n\n<pre><code>\"Hello world\" \n</code></pre>\n"},{"score":19,"body":"<p>The <code>ucfirst</code> function works if you do it like this.</p>\n\n<pre><code>function ucfirst(str) {\n    var firstLetter = str.slice(0,1);\n    return firstLetter.toUpperCase() + str.substring(1);\n}\n</code></pre>\n\n<p>Thanks J-P for the aclaration.</p>\n"},{"score":30,"body":"<pre><code>String.prototype.capitalize = function(){\n    return this.replace( /(^|\\s)([a-z])/g , function(m,p1,p2){ return p1+p2.toUpperCase();\n    } );\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>capitalizedString = someString.capitalize();\n</code></pre>\n\n<p>This is a text string => This Is A Text String</p>\n"},{"score":-7,"body":"<p>If I may alter the code a little. I found that if I run an all caps string through this function, nothing happens. So... here is my tid bit. Force the string to lower case first. </p>\n\n<pre><code>String.prototype.capitalize = function(){\n    return this.toLowerCase().replace( /(^|\\s)([a-z])/g , function(m, p1, p2) {\n        return p1 + p2.toUpperCase();\n    });\n}\n</code></pre>\n"},{"score":8,"body":"<p>If you go with one of the regex answers, remember they will only work with ASCII characters. All your unicode letters will not be uppercased. The <a href=\"http://xregexp.com/plugins/\">XRegExp</a> library and its unicode plugins solve this problem if you want to stick with regexps. So something like this would work:</p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.replace(XRegExp(\"^\\\\p{L}\"), function ($0) { return $0.toUpperCase(); })\n}\n</code></pre>\n\n<p>Considering that it still doesn't cover all possibilities (combined characters, see <a href=\"http://www.regular-expressions.info/unicode.html\">http://www.regular-expressions.info/unicode.html</a>) it seems easier to just use the .charAt(0).toUpperCase() approach.</p>\n"},{"score":37,"body":"<p>If you are wanting to reformat all-caps text, you might want to modify the other examples as such: </p>\n\n<pre><code>function capitalize (text) {\n    return text.charAt(0).toUpperCase() + text.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>This will ensure that the following text is changed:</p>\n\n<pre><code>TEST =&gt; Test\nThis Is A TeST =&gt; This is a test\n</code></pre>\n"},{"score":310,"body":"<p>Here is a shortened version of the popular answer that gets the first letter by treating the string as an array:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>According to the comments below this doesn't work in IE 7 or below.</p>\n\n<p><strong>Update 2:</strong></p>\n\n<p>To avoid <code>undefined</code> for empty strings (see <a href=\"https://stackoverflow.com/questions/1026069/capitalize-the-first-letter-of-string-in-javascript/7224605?noredirect=1#comment40995528_7224605\">@njzk2's comment below</a>), you can check for an empty string:</p>\n\n<pre><code>function capitalize(s)\n{\n    return s &amp;&amp; s[0].toUpperCase() + s.slice(1);\n}\n</code></pre>\n"},{"score":10,"body":"<p>CoffeeScript </p>\n\n<pre><code>ucfirst = (str) -&gt; str.charAt(0).toUpperCase() + str.slice(1)\n</code></pre>\n\n<p>As String prototype method:</p>\n\n<pre><code>String::capitalize = -&gt; @charAt(0).toUpperCase() + @slice(1)\n</code></pre>\n"},{"score":64,"body":"<p>Capitalize the first letter of all words in a string: </p>\n\n<pre><code>function ucFirstAllWords( str )\n{\n    var pieces = str.split(\" \");\n    for ( var i = 0; i &lt; pieces.length; i++ )\n    {\n        var j = pieces[i].charAt(0).toUpperCase();\n        pieces[i] = j + pieces[i].substr(1);\n    }\n    return pieces.join(\" \");\n}\n</code></pre>\n"},{"score":38,"body":"<p>It seems to be easier in CSS: </p>\n\n<pre><code>&lt;style type=\"text/css\"&gt;\n    p.capitalize {text-transform:capitalize;}\n&lt;/style&gt;\n&lt;p class=\"capitalize\"&gt;This is some text.&lt;/p&gt;\n</code></pre>\n\n<p>This is from <em><a href=\"http://www.w3schools.com/cssref/pr_text_text-transform.asp\" rel=\"noreferrer\">CSS text-transform Property</a></em> (at <a href=\"http://en.wikipedia.org/wiki/W3Schools\" rel=\"noreferrer\">W3Schools</a>).</p>\n"},{"score":7,"body":"<p>Okay, so I am new to JavaScript. I wasn't able to get the above to work for me. So I started putting it together myself. Here's my idea (about the same, different and working syntax): </p>\n\n<pre><code>String name = request.getParameter(\"name\");\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Here I get the variable from a form (it also works manually):</p>\n\n<pre><code>String name = \"i am a Smartypants...\";\nname = name.toUpperCase().charAt(0) + name.substring(1);\nout.println(name);\n</code></pre>\n\n<p>Output: \"I am a Smartypants...\";</p>\n"},{"score":618,"body":"<p>In CSS:</p>\n\n<pre><code>p:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n"},{"score":12,"body":"<pre><code>// Uppercase first letter\nfunction ucfirst(field) {\n    field.value = field.value.substr(0, 1).toUpperCase() + field.value.substr(1);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;input type=\"text\" onKeyup=\"ucfirst(this)\" /&gt;\n</code></pre>\n"},{"score":13,"body":"<p>In <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow noreferrer\">CoffeeScript</a>, add to the prototype for a string:</p>\n\n<pre><code>String::capitalize = -&gt;\n  @substr(0, 1).toUpperCase() + @substr(1)\n</code></pre>\n\n<p>Usage would be:</p>\n\n<pre><code>\"woobie\".capitalize()\n</code></pre>\n\n<p>Which yields:</p>\n\n<pre><code>\"Woobie\"\n</code></pre>\n"},{"score":11,"body":"<p>One possible solution:</p>\n\n<pre><code>function ConvertFirstCharacterToUpperCase(text) {\n    return text.substr(0, 1).toUpperCase() + text.substr(1);    \n}\n</code></pre>\n\n<p>Use this:</p>\n\n<pre><code> alert(ConvertFirstCharacterToUpperCase(\"this is string\"));\n</code></pre>\n\n<p>Here is working <a href=\"http://jsfiddle.net/zaheerahmed/ffVpc/1/\" rel=\"noreferrer\">JS Fiddle</a></p>\n"},{"score":20,"body":"<pre><code>yourString.replace(/^[a-z]/, function(m){ return m.toUpperCase() });\n</code></pre>\n\n<p>(You may encapsulate it in a function or even add it to the String prototype if you use it frequently.)</p>\n"},{"score":50,"body":"<p>We could get the first character with one of my favorite <code>RegExp</code>, looks like a cute smiley: <code>/^./</code></p>\n\n<pre><code>String.prototype.capitalize = function () {\n  return this.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n};\n</code></pre>\n\n<p>And for all coffee-junkies:</p>\n\n<pre><code>String::capitalize = -&gt;\n  @replace /^./, (match) -&gt;\n    match.toUpperCase()\n</code></pre>\n\n<p>...and for all guys who think that there's a better way of doing this, without extending native prototypes:</p>\n\n<pre><code>var capitalize = function (input) {\n  return input.replace(/^./, function (match) {\n    return match.toUpperCase();\n  });\n};\n</code></pre>\n"},{"score":153,"body":"<p>For another case I need it to capitalize the first letter and lowercase the rest. The following cases made me change this function:</p>\n\n<pre><code>//es5\nfunction capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\n}\ncapitalize(\"alfredo\")  // =&gt; \"Alfredo\"\ncapitalize(\"Alejandro\")// =&gt; \"Alejandro\ncapitalize(\"ALBERTO\")  // =&gt; \"Alberto\"\ncapitalize(\"ArMaNdO\")  // =&gt; \"Armando\"\n\n// es6 using destructuring \nconst capitalize = ([first,...rest]) =&gt; first.toUpperCase() + rest.join('').toLowerCase();\n</code></pre>\n"},{"score":3,"body":"<p>The function takes 2 arguments: \nstart -  the start index;\nlength - the length of substring to Capitalise</p>\n\n<pre><code>    String.prototype.subUpper = function () {\n        var result = this.toString();\n        var start = 0;\n        var length = 1;\n        if (arguments.length &gt; 0) {\n            start = arguments[0];\n            if (start &lt; this.length) {\n                if (arguments.length &gt; 1) { length = arguments[1]; }\n                if (start + length &gt; this.length) {\n                    length = this.length - start;\n                }\n                var startRest = start + length;\n                var prefix = start &gt; 0 ? this.substr(0, start) : String.empty;\n                var sub = this.substr(start, length);\n                var suffix = this.substr(startRest, this.length - startRest);\n                result = prefix + sub.toUpperCase() + suffix;\n            }\n        }\n        return result;\n    };\n</code></pre>\n"},{"score":46,"body":"<pre><code>String.prototype.capitalize = function(allWords) {\n   return (allWords) ? // if all words\n      this.split(' ').map(word =&gt; word.capitalize()).join(' ') : //break down phrase to words then  recursive calls until capitalizing all words\n      this.charAt(0).toUpperCase() + this.slice(1); // if allWords is undefined , capitalize only the first word , mean the first char of the whole string\n}\n</code></pre>\n\n<p>And then:</p>\n\n<pre><code> \"capitalize just the first word\".capitalize(); ==&gt; \"Capitalize just the first word\"\n \"capitalize all words\".capitalize(true); ==&gt; \"Capitalize All Words\"\n</code></pre>\n\n<h2>Update Nov.2016 (ES6), just for FUN :</h2>\n\n<pre><code>const capitalize = (string = '') =&gt; [...string].map(    //convert to array with each item is a char of string by using spread operator (...)\n    (char, index) =&gt; index ? char : char.toUpperCase()  // index true means not equal 0 , so (!index) is the first char which is capitalized by `toUpperCase()` method\n ).join('')                                             //return back to string\n</code></pre>\n\n<p>then <code>capitalize(\"hello\") // Hello</code></p>\n"},{"score":5,"body":"<p>I have been trying to do same (that is; capitalize the first letter in a string while it is being typed) using jQuery. I searched all through the web for the answer but couldn't find it. However I was able to get a work around using the <code>on()</code> function in jQuery like so:</p>\n\n<pre><code>$(\"#FirstNameField\").on(\"keydown\",function(e){\n    var str = $(\"#FirstNameField\").val();\n    if(str.substring()===str.substring(0,1)){\n        $(\"#FirstNameField\").val(str.substring(0,1).toUpperCase());\n    } \n});\n</code></pre>\n\n<p>This function actually capitalizes the first letter while the data entrant is typing continuously.</p>\n"},{"score":8,"body":"<p>Here is my attempt to make a universal function that can capitalize only the first letter, or the first letter of each word, including words separated by a dash (like some first names in French).</p>\n\n<p>By default, the function capitalizes only the first letter and leave the rest untouched.</p>\n\n<p><strong>Parameters</strong>:</p>\n\n<ul>\n<li><strong>lc</strong>: <em>true</em> to lowercase the rest of the word(s)</li>\n<li><strong>all</strong>: <em>true</em> to capitalize each word</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<pre><code>if (typeof String.prototype.capitalize !== 'function') {\n    String.prototype.capitalize = function(lc, all) {\n        if (all) {\n            return this.split( \" \" ).map( function(currentValue, index, array ) {\n                return currentValue.capitalize( lc );\n            }, this).join(\" \").split(\"-\").map(function(currentValue, index, array) {\n                return currentValue.capitalize(false);\n            }, this).join(\"-\");\n        }\n        else {\n            return lc ? this.charAt(0).toUpperCase() + this.slice(1 ).toLowerCase() : this.charAt(0).toUpperCase() + this.slice(1);\n        }\n    }\n}\n</code></pre>\n"},{"score":10,"body":"<p>Or you could use <a href=\"http://sugarjs.com/\" rel=\"noreferrer\">Sugar.js</a> <a href=\"http://sugarjs.com/api/String/capitalize\" rel=\"noreferrer\">capitalize()</a></p>\n\n<p>Example:</p>\n\n<pre><code>'hello'.capitalize()           -&gt; 'Hello'\n'hello kitty'.capitalize()     -&gt; 'Hello kitty'\n'hello kitty'.capitalize(true) -&gt; 'Hello Kitty'\n</code></pre>\n"},{"score":29,"body":"<pre><code>var str = \"test string\";\nstr = str.substring(0,1).toUpperCase() + str.substring(1);\n</code></pre>\n"},{"score":45,"body":"<p>If you use <a href=\"http://underscorejs.org/\">underscore.js</a> or <a href=\"http://lodash.com/\">Lo-Dash</a>, the <a href=\"https://github.com/epeli/underscore.string\">underscore.string</a> library provides string extensions, including capitalize:</p>\n\n<blockquote>\n  <p>_.capitalize(string) Converts first letter of the string to\n  uppercase.</p>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>_.capitalize(\"foo bar\") == \"Foo bar\"\n</code></pre>\n"},{"score":16,"body":"<p>Here's my version, I think it's easy to understand and elegant too.</p>\n\n<pre><code>var str = \"foo bar baz\";\n\n// capitalize\nstr.split(' ')\n .map(w =&gt; w[0].toUpperCase() + w.substr(1).toLowerCase())\n .join(' ')\n// returns \"Foo Bar Baz\"\n\n// capitalize first letter\nstr.charAt(0).toUpperCase() + str.slice(1)\n// returns \"Foo bar baz\"\n</code></pre>\n"},{"score":3,"body":"<p>This is what I use religiously: </p>\n\n<pre><code>function capitalizeMe(str,force){\n    str=force ? str.toLowerCase() : str;  \n    return str.replace(/(\\b)([a-zA-Z])/g,\n    function(firstLetter){\n        return firstLetter.toUpperCase();\n    });\n}\n\nvar firstName = capitalizeMe($firstName.val());\n</code></pre>\n"},{"score":48,"body":"<p>Use:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = \"ruby java\";\r\n\r\nconsole.log(str.charAt(0).toUpperCase() + str.substring(1));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It will output <code>\"Ruby java\"</code> to the console.</p>\n"},{"score":2,"body":"<p>Use this module of Node.js, the <a href=\"http://stringjs.com/\" rel=\"nofollow noreferrer\">http://stringjs.com/</a> package, to capitalize your string:</p>\n\n<pre><code>var S = require('string');\nS('jon').capitalize().s; //'Jon'\nS('JP').capitalize().s; //'Jp'\n</code></pre>\n"},{"score":8,"body":"<pre><code>var capitalizeMe = \"string not starting with capital\"\n</code></pre>\n\n<p>Capitalize with substr</p>\n\n<pre><code>var capitalized = capitalizeMe.substr(0, 1).toUpperCase() + capitalizeMe.substr(1);\n</code></pre>\n"},{"score":5,"body":"<p>I use something along these lines in my development environment, especially when working with APIs like HTTP:</p>\n\n<p>Suppose you have an HTTP header in which you'd like to capitalize every initial letter in its name and add the hyphen between its constituent words. You may achieve something like that using this basic and simple routine:</p>\n\n<pre><code>'access control allow origin'\n    .replace(/\\b\\w/g, function (match) {\n        return match.toUpperCase();\n    })\n    .split(' ')\n    .join('-');\n\n// Output: 'Access-Control-Allow-Origin'\n</code></pre>\n\n<p>It is not maybe the most elegant and attractive function definition out there, but it certainly gets the job done.</p>\n"},{"score":13,"body":"<pre><code>function capitalize(string) {\n    return string.replace(/^./, Function.call.bind(\"\".toUpperCase));\n}\n</code></pre>\n"},{"score":3,"body":"<p>The currently voted answer is right, but it doesn't trim or check the length of the string before capitalising the first character.</p>\n\n<pre><code>String.prototype.ucfirst = function(notrim) {\n    s = notrim ? this : this.replace(/(?:(?:^|\\n)\\s+|\\s+(?:$|\\n))/g,'').replace(/\\s+/g,' ');\n    return s.length &gt; 0 ? s.charAt(0).toUpperCase() + s.slice(1) : s;\n}\n</code></pre>\n\n<p>Set the notrim argument to prevent trimming the string first:</p>\n\n<pre><code>'pizza'.ucfirst()         =&gt; 'Pizza'\n'   pizza'.ucfirst()      =&gt; 'Pizza'\n'   pizza'.ucfirst(true)  =&gt; '   pizza'\n</code></pre>\n"},{"score":13,"body":"<p>Posting an edit of @salim's answer to include locale letter transformation.</p>\n\n<pre><code>var str = \"test string\";\nstr = str.substring(0,1).toLocaleUpperCase() + str.substring(1);\n</code></pre>\n"},{"score":1,"body":"<p>If you want to capitalize <strong>every</strong> first letter in a string, for example <code>hello to the world</code>becomes <code>Hello To The World</code> you can use the following (repurposed from Steve Harrison):</p>\n\n<pre><code>function capitalizeEveryFirstLetter(string) {\n    var splitStr = string.split(' ')\n    var fullStr = '';\n\n    $.each(splitStr,function(index){\n        var currentSplit = splitStr[index].charAt(0).toUpperCase() + splitStr[index].slice(1);\n        fullStr += currentSplit + \" \"\n    });\n\n    return fullStr;\n}\n</code></pre>\n\n<p>Which you can call by using the following:</p>\n\n<pre><code>capitalizeFirstLetter(\"hello to the world\");\n</code></pre>\n"},{"score":34,"body":"<pre><code>function capitalize(s) {\n    // returns the first letter capitalized + the string from index 1 and out aka. the rest of the string\n    return s[0].toUpperCase() + s.substr(1);\n}\n\n\n// examples\ncapitalize('this is a test');\n=&gt; 'This is a test'\n\ncapitalize('the Eiffel Tower');\n=&gt; 'The Eiffel Tower'\n\ncapitalize('/index.html');\n=&gt; '/index.html'\n</code></pre>\n"},{"score":21,"body":"<p>Checkout this solution:  </p>\n\n<pre><code>var stringVal = 'master';\nstringVal.replace(/^./, stringVal[0].toUpperCase()); // returns Master \n</code></pre>\n"},{"score":6,"body":"<p>Like it:</p>\n\n<pre><code>function capitalize(string,a) {\n    var tempstr = string.toLowerCase();\n    if (a == false || a == undefined)\n        return tempstr.replace(tempstr[0], tempstr[0].toUpperCase());\n    else {\n        return tempstr.split(\" \").map(function (i) { return i[0].toUpperCase() + i.substring(1) }).join(\" \");\n    }\n}\n\n\ncapitalize('stack overflow yeah!',true)); //Stack Overflow Yeah!\n\ncapitalize('stack stack stack stack overflow yeah!'));//Stack overflow yeah!\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/dgmLgv7b/\" rel=\"nofollow\">https://jsfiddle.net/dgmLgv7b/</a></p>\n"},{"score":197,"body":"<h3>If you're interested in the performance of a few different methods posted:</h3>\n<p>Here are the fastest methods based on <a href=\"http://jsperf.com/capitalize-the-first-letter-of-string-in-javascript/2\" rel=\"noreferrer\">this jsperf test</a> (ordered from fastest to slowest).</p>\n<p>As you can see, the first two methods are essentially comparable in terms of performance, whereas altering the <code>String.prototype</code> is by far the slowest in terms of performance.</p>\n<pre><code>// 10,889,187 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string[0].toUpperCase() + string.slice(1);\n}\n\n// 10,875,535 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n// 4,632,536 operations/sec\nfunction capitalizeFirstLetter(string) {\n    return string.replace(/^./, string[0].toUpperCase());\n}\n\n// 1,977,828 operations/sec\nString.prototype.capitalizeFirstLetter = function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n<p><a href=\"https://i.stack.imgur.com/tNwKk.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tNwKk.png\" alt=\"enter image description here\" /></a></p>\n"},{"score":72,"body":"<p>If you're already (or considering) using <code>lodash</code>, the solution is easy:</p>\n\n<pre><code>_.upperFirst('fred');\n// =&gt; 'Fred'\n\n_.upperFirst('FRED');\n// =&gt; 'FRED'\n\n_.capitalize('fred') //=&gt; 'Fred'\n</code></pre>\n\n<p>See their docs: <a href=\"https://lodash.com/docs#capitalize\">https://lodash.com/docs#capitalize</a></p>\n\n<p><code>_.camelCase('Foo Bar'); //=&gt; 'fooBar'</code></p>\n\n<p><a href=\"https://lodash.com/docs/4.15.0#camelCase\">https://lodash.com/docs/4.15.0#camelCase</a></p>\n\n<pre><code>_.lowerFirst('Fred');\n// =&gt; 'fred'\n\n_.lowerFirst('FRED');\n// =&gt; 'fRED'\n\n_.snakeCase('Foo Bar');\n// =&gt; 'foo_bar'\n</code></pre>\n\n<p>Vanilla js for first upper case:</p>\n\n<pre><code>function upperCaseFirst(str){\n    return str.charAt(0).toUpperCase() + str.substring(1);\n}\n</code></pre>\n"},{"score":6,"body":"<p>A one-liner:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>'string'.replace(/(^[a-z])/,function (p) { return p.toUpperCase(); } )</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":4,"body":"<p>This does the same action:</p>\n\n<pre><code>var newStr = string.slice(0,1).toUpperCase() + string.slice(1);\n</code></pre>\n"},{"score":2,"body":"<p>This one will tolerate possible leading whitespaces and will not miss the target of the first letter in a string. Therefore, it might improve already good solutions available on the thread. </p>\n\n<pre><code>str = \"   the Eifel Tower\";\nstr.replace(/\\w/, str.match(/\\w/)[0].toUpperCase());\n&gt;&gt; \"   The Eifel Tower\";\n</code></pre>\n\n<p>!But, will cause a 'soft' error if executed against a blank string.\nTo avoid this possible error or unnecessary processing of a blank string or a number, a ternary conditional guarding can be used:</p>\n\n<pre><code>+str!=+str ?  str.replace(/\\w/, str.match(/\\w/)[0].toUpperCase()) : str;\n</code></pre>\n"},{"score":5,"body":"<p>Firstly just wanted to clear up what capitalize means in this context.\n \"<strong>T</strong>his <strong>S</strong>tring <strong>I</strong>s <strong>C</strong>apitalized\" <a href=\"https://en.wikipedia.org/wiki/Capitalization\" rel=\"nofollow\">Reliable source</a> </p>\n\n<p>You can see from the example provided this is not what the OP is looking for. What it should say is \"How do i make the first letter of a string uppercase\" (<strong>Not capitalize string</strong>)</p>\n\n<pre><code>function ucfirst (str) {\n    return typeof str !=\"undefined\"  ? (str += '', str[0].toUpperCase() + str.substr(1)) : '' ;\n}\n</code></pre>\n\n<p>Explained </p>\n\n<pre><code>typeof str !=\"undefined\" // is str set\n? // true \nstr += '' // turn the string variable into a string \nstr[0].toUpperCase() //get the first character and make it upper case\n+ // add\nstr.substr(1) // string starting from the index 1 ( starts at 0) \n: // false \n''; //return empty string\n</code></pre>\n\n<p>This will work with any argument or no argument at all.  </p>\n\n<pre><code>undefined         === \"\"\n\"\"                === \"\"\n\"my string\"       === \"My string\"\nnull              === \"Null\"\nundefined         === \"\";\nfalse             === \"False\"\n0                 === \"0\"\ntrue              === \"True\"\n[]                === \"\"\n[true,0,\"\",false] === \"True,0,,false\"\n</code></pre>\n"},{"score":8,"body":"<p>For just capitalizing the first letter and make the rest of the string lower case:</p>\n\n<pre><code>function capitalize(str) {\n     var splittedEnter = str.split(\" \");\n     var capitalized;\n     var capitalizedResult;\n     for (var i = 0 ; i &lt; splittedEnter.length ; i++){\n         capitalized = splittedEnter[i].charAt(0).toUpperCase();\n         splittedEnter[i] = capitalized + splittedEnter[i].substr(1).toLowerCase();\n    }\n    return splittedEnter.join(\" \");\n}\n\ncapitalize(\"tHiS wiLL be alL CapiTaLiZED.\");\n</code></pre>\n\n<p>The result will be:</p>\n\n<blockquote>\n  <p>This Will Be All Capitalized.</p>\n</blockquote>\n"},{"score":5,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalizeEachWord(str) {\r\n    return str.replace(/\\w\\S*/g, function(txt) {\r\n        return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n    });\r\n}\r\n\r\ndocument.write(capitalizeEachWord('foo BAR God bAD'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":38,"body":"<pre><code>var capitalized = yourstring[0].toUpperCase() + yourstring.substr(1);\n</code></pre>\n"},{"score":6,"body":"<p>A small improvement - every word in titlecase.</p>\n\n<pre><code>String.prototype.toTitleCase = function(){\n    return this.replace(/\\b(\\w+)/g, function(m,p){ return p[0].toUpperCase() + p.substr(1).toLowerCase() });\n}\n\nvar s = 'heLLo wOrLD';\nconsole.log(s.toTitleCase()); // Hello World\n</code></pre>\n"},{"score":3,"body":"<p>If there's <code>Lodash</code> in your project, use <code>upperFirst</code>.</p>\n"},{"score":3,"body":"<pre><code>function cap(input) {\n    return input.replace(/[\\.\\r\\n\\t\\:\\;\\?\\!]\\W*(\\w)/g, function(match, capture) {\n                  // for other sentences in text\n                  return match.toUpperCase();\n                 }).replace(/^\\W*\\w/, function(match, capture) {\n                 // for first sentence in text\n                  return match.toUpperCase();\n                 });;\n}\n\nvar a = \"hi, dear user. it is a simple test. see you later!\\r\\nbye\";\nconsole.log(cap(a));\n//output: Hi, dear user. It is a simple test. See you later!\n//Bye\n</code></pre>\n"},{"score":10,"body":"<p>Using prototypes</p>\n\n<pre><code>String.prototype.capitalize = function () {\n    return this.charAt(0) + this.slice(1).toLowerCase();\n  }\n</code></pre>\n\n<p>or Using functions</p>\n\n<pre><code>function capitalize(str) {\nreturn str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n}\n</code></pre>\n"},{"score":42,"body":"<h2>CSS only</h2>\n<pre><code>p::first-letter {\n  text-transform: uppercase;\n}\n</code></pre>\n<ul>\n<li>Despite being called <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter\" rel=\"noreferrer\"><code>::first-letter</code></a>, it applies to the first <strong>character</strong>, i.e. in case of string <code>%a</code>, this selector would apply to <code>%</code> and as such <code>a</code> would not be capitalized.</li>\n<li>In IE9+ or IE5.5+ it's supported in legacy notation with only one colon (<code>:first-letter</code>).</li>\n</ul>\n<h2>ES2015 one-liner</h2>\n<p>Since there are numerous answers, but none in ES2015 that would solve original problem efficiently, I came up with the following:</p>\n<pre><code>const capitalizeFirstChar = str =&gt; str.charAt(0).toUpperCase() + str.substring(1);\n</code></pre>\n<h3>Remarks</h3>\n<ul>\n<li><code>parameters =&gt; function</code> is so called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">arrow function</a>.</li>\n<li>I went with name <code>capitalizeFirstChar</code> instead of <code>capitalizeFirstLetter</code>, because OP didn't asked for code that capitalizes the first letter in the entire string, but the very first char (if it's letter, of course).</li>\n<li><code>const</code> gives us the ability to declare <code>capitalizeFirstChar</code> as constant, which is desired since as a programmer you should always explicitly state your intentions.</li>\n<li>In the benchmark I performed there was no significant difference between <code>string.charAt(0)</code> and <code>string[0]</code>. Note however, that <code>string[0]</code> would be <code>undefined</code> for empty string, so it should be rewritten to <code>string &amp;&amp; string[0]</code>, which is way too verbose, compared to the alternative.</li>\n<li><code>string.substring(1)</code> is faster than <code>string.slice(1)</code>.</li>\n</ul>\n<h3>Benchmark</h3>\n<ul>\n<li>4,956,962 ops/s ¬±3.03% for this solution,</li>\n<li>4,577,946 ops/s ¬±1.2% for the most voted answer.</li>\n<li>Created with <a href=\"https://jsbench.me/\" rel=\"noreferrer\">JSBench.me</a> on Google Chrome 57.</li>\n</ul>\n<p><a href=\"https://i.stack.imgur.com/FlIac.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/FlIac.png\" alt=\"Solutions' comparison\" /></a></p>\n"},{"score":37,"body":"<p>It's always better to handle these kinds of stuff using <strong>CSS first</strong>, in general, if you can solve something using CSS, go for that first, then try JavaScript to solve your problems, so in this case try using <code>:first-letter</code> in CSS and apply <code>text-transform:capitalize;</code> </p>\n\n<p>So try creating a class for that, so you can use it globally, for example: <code>.first-letter-uppercase</code> and add something like below in your CSS:</p>\n\n<pre><code>.first-letter-uppercase:first-letter {\n    text-transform:capitalize;\n}\n</code></pre>\n\n<p>Also the alternative option is JavaScript, so the best gonna be something like this:</p>\n\n<pre><code>function capitalizeTxt(txt) {\n  return txt.charAt(0).toUpperCase() + txt.slice(1); //or if you want lowercase the rest txt.slice(1).toLowerCase();\n}\n</code></pre>\n\n<p>and call it like:</p>\n\n<pre><code>capitalizeTxt('this is a test'); // return 'This is a test'\ncapitalizeTxt('the Eiffel Tower'); // return 'The Eiffel Tower'\ncapitalizeTxt('/index.html');  // return '/index.html'\ncapitalizeTxt('alireza');  // return 'Alireza'\n</code></pre>\n\n<p>If you  want to reuse it over and over, it's better attach it to javascript native String, so something like below:</p>\n\n<pre><code>String.prototype.capitalizeTxt = String.prototype.capitalizeTxt || function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n}\n</code></pre>\n\n<p>and call it as below:</p>\n\n<pre><code>'this is a test'.capitalizeTxt(); // return 'This is a test'\n'the Eiffel Tower'.capitalizeTxt(); // return 'The Eiffel Tower'\n'/index.html'.capitalizeTxt();  // return '/index.html'\n'alireza'.capitalizeTxt();  // return 'Alireza'\n</code></pre>\n"},{"score":12,"body":"<h1>ùóî ùó¶ùóºùóπùòÇùòÅùó∂ùóºùóª ùóßùóµùóÆùòÅ ùó™ùóºùóøùó∏ùòÄ ùóôùóºùóø ùóîùóπùóπ ùó®ùóªùó∂ùó∞ùóºùó±ùó≤ ùóñùóµùóÆùóøùóÆùó∞ùòÅùó≤ùóøùòÄ</h1>\n<p><strike>57</strike> 81 different answers for this question, some off-topic, and yet <b>none</b> of them raise the important issue that none of the solutions listed will work with asian characters, emoji's, and other high unicode-point-value characters in many browsers. Here is a solution that will:</p>\n<pre><code>const consistantCapitalizeFirstLetter = &quot;\\uD852\\uDF62&quot;.length === 1 ?\n    function(S) {\n        &quot;use-strict&quot;; // Hooray! The browser uses UTF32!\n        return S.charAt(0).toUpperCase() + string.substring(1);\n    } : function(S) {\n        &quot;use-strict&quot;;\n        // the browser is using UCS16 to store UTF16\n        var code = S.charCodeAt(0)|0;\n        return (\n          code &gt;= 0xD800 &amp;&amp; code &lt;= 0xDBFF ? // detect surrogate pair\n            S.slice(0,2).toUpperCase() + string.substring(2) :\n            S.charAt(0).toUpperCase() + string.substring(1)\n        );\n    };\nconst prettyCapitalizeFirstLetter = &quot;\\uD852\\uDF62&quot;.length === 1 ?\n    function(S) {\n        &quot;use-strict&quot;; // Hooray! The browser uses UTF32!\n        return S.charAt(0).toLocaleUpperCase() + string.substring(1);\n    } : function(S) {\n        &quot;use-strict&quot;;\n        // the browser is using UCS16 to store UTF16\n        var code = S.charCodeAt(0)|0;\n        return (\n          code &gt;= 0xD800 &amp;&amp; code &lt;= 0xDBFF ? // detect surrogate pair\n            S.slice(0,2).toLocaleUpperCase() + string.substring(2) :\n            S.charAt(0).toLocaleUpperCase() + string.substring(1)\n        );\n    };\n</code></pre>\n<p>Do note that the above solution tries to account for UTF32. However, the specification officially states that browsers are required to do everything in UTF16 mapped into UCS2. Nevertheless, if we all come together, do our part, and start preparing for UTF32, then there is a chance that the TC39 may allow browsers to start using UTF32 (like how Python uses 24-bits for each character of the string). This must seem silly to an english speaker: noone who uses only latin-1 has ever had to deal with <a href=\"https://en.wikipedia.org/wiki/Mojibake\" rel=\"noreferrer\">Mojibake</a> because Latin-I is supported by all character encodings. But, users in other countries (such as China, Japan, Indonesia, etc.) are not so fortunate. They constantly stuggle with encoding problems not just from the webpage, but also from the Javascript: many Chinese/Japanese characters are treated as two letters by Javascript and thus may be broken apart in the middle, resulting in ÔøΩ and ÔøΩ (two question-marks that make no sense to the end user). If we could start getting ready for UTF32, then the TC39 might just allow browsers do what Python did many years ago which had made Python very popular for working with high unicode characters: using UTF32.</p>\n<p><code>consistantCapitalizeFirstLetter</code> works correctly in <a href=\"http://www-sbras.nsc.ru/docs/ms/js/439.htm\" rel=\"noreferrer\">IE3+</a>. <code>prettyCapitalizeFirstLetter</code> requires IE5.5+ (see the top of page 250 of <a href=\"https://isvbscriptdead.com/resources/jscript.pdf#page=250\" rel=\"noreferrer\">this document</a>). However, these fact are more of just jokes because it is very likely that the rest of the code on your webpage will not even work in IE8- because of all the DOM and JScript bugs and lack of features in these older browsers. Further, noone uses IE3 or IE5.5 anymore.</p>\n"},{"score":-3,"body":"<p>Easy peasy : </p>\n\n<p>// OK agreed so here is the edited version i can't go simple beyond this</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function FirstUpperCase(inputString){\r\n  return inputString.replace(inputString[0],inputString[0].toUpperCase());\r\n};</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>input : hello student\noutput : Hello student</p>\n"},{"score":10,"body":"<p>This solution might be new and probably the simplest.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function firstUpperCase(input)\r\n{\r\n    return input[0].toUpperCase()+input.substr(1);\r\n}\r\n\r\nconsole.log(firstUpperCase(\"capitalize first letter\"));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>Try this code:</p>\n\n<pre><code>alert(\"hello\".substr(0, 1).toUpperCase() + \"hello\".substr(1));\n</code></pre>\n\n<p>What it's doing is taking the first character in hello capitalizing it and adding the rest of it on.</p>\n"},{"score":3,"body":"<p>Anotehr way using RamdaJs, the functional programming way</p>\n\n<pre><code>firstCapital(str){\n    const fn= p=&gt; R.toUpper(R.head(p))+R.tail(p);\n    return fn(str);\n  }\n</code></pre>\n\n<p>With multiple words in string</p>\n\n<pre><code>firstCapitalAllWords(str){\n    const fn = p=&gt; R.toUpper(R.head(p))+R.tail(p);\n    return R.map(fn,R.split(' ',str)).join(' ');\n}\n</code></pre>\n"},{"score":3,"body":"<p>Just because you can, doesn't mean you should, however. It requires ECMAScript&nbsp;6 as the code uses array destructuring.</p>\n\n<pre><code>const capitalizeFirstLetter = s =&gt; {\n  const type = typeof s;\n  if (type !== \"string\") {\n    throw new Error(`Expected string, instead received ${type}`);\n  }\n\n  const [firstChar, ...remainingChars] = s;\n\n  return [firstChar.toUpperCase(), ...remainingChars].join(\"\");\n};\n</code></pre>\n"},{"score":20,"body":"<p>You can do it in one line like this</p>\n\n<pre><code>string[0].toUpperCase() + string.substring(1)\n</code></pre>\n"},{"score":5,"body":"<p>One liner (\"inputString can be set to any string\"):</p>\n\n<pre><code>inputString.replace(/.{1}/, inputString.charAt(0).toUpperCase())\n</code></pre>\n"},{"score":2,"body":"<pre><code>var a = \"this is a test\"\nconsole.log(a.replace(/^[a-z]/g, txt =&gt; txt.toUpperCase()));\n</code></pre>\n"},{"score":80,"body":"<p><strong>This is the 2018 ECMAScript&nbsp;6+ Solution</strong>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const str = 'the Eiffel Tower';\r\nconst newStr = `${str[0].toUpperCase()}${str.slice(1)}`;\r\nconsole.log('Original String:', str); // the Eiffel Tower\r\nconsole.log('New String:', newStr); // The Eiffel Tower</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":3,"body":"<p>Here is the nice and cleaner version;</p>\n\n<pre><code>var str = '';\nreturn str.replace(new RegExp('^'+str[0]+''), str[0].toUpperCase());\n</code></pre>\n\n<p>Results:</p>\n\n<p>this is a test --> This is a test</p>\n"},{"score":6,"body":"<p>This one is simple</p>\n\n<pre><code>const upper = lower.replace(/^\\w/, c =&gt; c.toUpperCase());\n</code></pre>\n"},{"score":2,"body":"<p>You can do something like this:</p>\n\n<pre><code>mode =  \"string\";\nstring = mode.charAt(0).toUpperCase() + mode.substr(1,mode.length).toLowerCase();\nconsole.log(string);\n</code></pre>\n\n<p>This will print</p>\n\n<p><code>String</code></p>\n"},{"score":19,"body":"<pre class=\"lang-js prettyprint-override\"><code>yourString.replace(/\\w/, c =&gt; c.toUpperCase())\n</code></pre>\n\n<p>I found this arrow function easiest. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" rel=\"noreferrer\">Replace</a> matches the first letter character (<code>\\w</code>) of your string and converts it to uppercase. Nothing fancier necessary.</p>\n"},{"score":1,"body":"<blockquote>\n  <p>To make first Letter of String Capital</p>\n  \n  <p>1st Solution</p>\n</blockquote>\n\n<p><strong>\"this is a test\" -> \"This is a test\"</strong></p>\n\n<pre><code>var word = \"this is a test\"\nword[0].toUpperCase();\n</code></pre>\n\n<p><strong>It will give => \"This is a test\"</strong></p>\n\n<blockquote>\n  <p>2nd Solution to make first word of string capital</p>\n</blockquote>\n\n<p><strong>\"this is a test\" -> \"This Is A Test\"</strong></p>\n\n<pre><code>function capitalize(str) {\n\n    const word = [];\n\n    for(let char of str.split(' ')){\n        word.push(char[0].toUpperCase() + char.slice(1))\n    }\n\n    return word.join(' ');\n\n}\n\n capitalize(\"this is a test\");\n</code></pre>\n\n<p><strong>It will give => \"This Is A Test\"</strong></p>\n"},{"score":10,"body":"<p><code>a.slice(0,1).toUpperCase()+a.slice(1)</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a = 'hello',\r\n    fix = a.slice(0,1).toUpperCase()+a.slice(1)\r\n    \r\nconsole.log(fix)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":16,"body":"<p>A functional approach</p>\n\n<pre><code>const capitalize = ([s, ...tring]) =&gt;\n  [s.toUpperCase(), ...tring]\n    .join('');\n</code></pre>\n\n<p>Then you could</p>\n\n<pre><code>const titleCase = str =&gt; \n  str\n    .split(' ')\n    .map(capitalize)\n    .join(' ')\n</code></pre>\n"},{"score":48,"body":"<p><strong>SHORTEST</strong> 3 solutions, 1 and 2 handle cases when <code>s</code> string  is <code>\"\"</code>, <code>null</code> and <code>undefined</code>:</p>\n\n<pre><code> s&amp;&amp;s[0].toUpperCase()+s.slice(1)        // 32 char\n\n s&amp;&amp;s.replace(/./,s[0].toUpperCase())    // 36 char - using regexp\n\n'foo'.replace(/./,x=&gt;x.toUpperCase())    // 31 char - direct on string, ES6\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let s='foo bar';\r\n\r\nconsole.log( s&amp;&amp;s[0].toUpperCase()+s.slice(1) );\r\n\r\nconsole.log( s&amp;&amp;s.replace(/./,s[0].toUpperCase()) );\r\n\r\nconsole.log( 'foo bar'.replace(/./,x=&gt;x.toUpperCase()) );</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":49,"body":"<p>There is a very simple way to implement it by <strong>replace</strong>. For ECMAScript&nbsp;6:</p>\n\n<pre><code>'foo'.replace(/^./, str =&gt; str.toUpperCase())\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>'Foo'\n</code></pre>\n"},{"score":1,"body":"<p>For TypeScript</p>\n\n<pre><code>  capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n</code></pre>\n"},{"score":74,"body":"<p>I didn‚Äôt see any mention in the existing answers of issues related to <s>astral plane code points or</s> internationalization. ‚ÄúUppercase‚Äù doesn‚Äôt mean the same thing in every language using a given script.</p>\n\n<p><em>Initially I didn‚Äôt see any answers addressing issues related to astral plane code points. There <a href=\"https://stackoverflow.com/a/45224904/1631952\">is one</a>, but it‚Äôs a bit buried (like this one will be, I guess!)</em> </p>\n\n<hr>\n\n<p>Most of the proposed functions look like this:</p>\n\n<pre><code>function capitalizeFirstLetter(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n</code></pre>\n\n<p>However, some cased characters fall outside the BMP (basic multilingual plane, code points U+0 to U+FFFF). For example take this Deseret text:</p>\n\n<pre><code>capitalizeFirstLetter(\"êê∂êê≤êëåêêºêê≤êëâ\"); // \"êê∂êê≤êëåêêºêê≤êëâ\"\n</code></pre>\n\n<p>The first character here fails to capitalize because the array-indexed properties of strings don‚Äôt access ‚Äúcharacters‚Äù or code points*. They access UTF-16 code units. This is true also when slicing ‚Äî the index values point at code units.</p>\n\n<p>It happens to be that UTF-16 code units are 1:1 with USV code points within two ranges, U+0 to U+D7FF and U+E000 to U+FFFF inclusive. Most cased characters fall into those two ranges, but not all of them.</p>\n\n<p>From ES2015 on, dealing with this became a bit easier. <code>String.prototype[@@iterator]</code> yields strings corresponding to code points**. So for example, we can do this:</p>\n\n<pre><code>function capitalizeFirstLetter([ first, ...rest ]) {\n  return [ first.toUpperCase(), ...rest ].join('');\n}\n\ncapitalizeFirstLetter(\"êê∂êê≤êëåêêºêê≤êëâ\") // \"êêéêê≤êëåêêºêê≤êëâ\"\n</code></pre>\n\n<p>For longer strings, this is probably not terribly efficient*** ‚Äî we don‚Äôt really need to iterate the remainder. We could use <code>String.prototype.codePointAt</code> to get at that first (possible) letter, but we‚Äôd still need to determine where the slice should begin. One way to avoid iterating the remainder would be to test whether the first codepoint is outside the BMP; if it isn‚Äôt, the slice begins at 1, and if it is, the slice begins at 2.</p>\n\n<pre><code>function capitalizeFirstLetter(str) {\n  const firstCP = str.codePointAt(0);\n  const index = firstCP &gt; 0xFFFF ? 2 : 1;\n\n  return String.fromCodePoint(firstCP).toUpperCase() + str.slice(index);\n}\n\ncapitalizeFirstLetter(\"êê∂êê≤êëåêêºêê≤êëâ\") // \"êêéêê≤êëåêêºêê≤êëâ\"\n</code></pre>\n\n<p><em>You could use bitwise math instead of <code>&gt; 0xFFFF</code> there, but it‚Äôs probably easier to understand this way and either would achieve the same thing.</em></p>\n\n<p>We can also make this work in ES5 and below by taking that logic a bit further if necessary. There are no intrinsic methods in ES5 for working with codepoints, so we have to manually test whether the first code unit is a surrogate****:</p>\n\n<pre><code>function capitalizeFirstLetter(str) {\n  var firstCodeUnit = str[0];\n\n  if (firstCodeUnit &lt; '\\uD800' || firstCodeUnit &gt; '\\uDFFF') {\n    return str[0].toUpperCase() + str.slice(1);\n  }\n\n  return str.slice(0, 2).toUpperCase() + str.slice(2);\n}\n\ncapitalizeFirstLetter(\"êê∂êê≤êëåêêºêê≤êëâ\") // \"êêéêê≤êëåêêºêê≤êëâ\"\n</code></pre>\n\n<p>At the start I also mentioned internationalization considerations. Some of these are very difficult to account for because they require knowledge not only of <em>what</em> language is being used, but also may require specific knowledge of the words in the language. For example, the Irish digraph \"mb\" capitalizes as \"mB\" at the start of a word. Another example, the German eszett, never begins a word (afaik), but still helps illustrate the problem. The lowercase eszett (‚Äú√ü‚Äù) capitalizes to ‚ÄúSS,‚Äù but  ‚ÄúSS‚Äù could lowercase to either ‚Äú√ü‚Äù or ‚Äúss‚Äù ‚Äî you require out-of-band knowledge of the German language to know which is correct!</p>\n\n<p>The most famous example of these kinds of issues, probably, is Turkish. In Turkish Latin, the capital form of i is ƒ∞, while the lowercase form of I is ƒ± ‚Äî they‚Äôre two different letters. Fortunately we do have a way to account for this:</p>\n\n<pre><code>function capitalizeFirstLetter([ first, ...rest ], locale) {\n  return [ first.toLocaleUpperCase(locale), ...rest ].join('');\n}\n\ncapitalizeFirstLetter(\"italy\", \"en\") // \"Italy\"\ncapitalizeFirstLetter(\"italya\", \"tr\") // \"ƒ∞talya\"\n</code></pre>\n\n<p>In a browser, the user‚Äôs most-preferred language tag is indicated by <code>navigator.language</code>, a list in order of preference is found at <code>navigator.languages</code>, and a given DOM element‚Äôs language can be obtained (usually) with <code>Object(element.closest('[lang]')).lang || YOUR_DEFAULT_HERE</code> in multilanguage documents.</p>\n\n<p>In agents which support Unicode property character classes in RegExp, which were introduced in ES2018, we can clean stuff up further by directly expressing what characters we‚Äôre interested in:</p>\n\n<pre><code>function capitalizeFirstLetter(str, locale=navigator.language) {\n  return str.replace(/^\\p{CWU}/u, char =&gt; char.toLocaleUpperCase(locale));\n}\n</code></pre>\n\n<p>This could be tweaked a bit to also handle capitalizing multiple words in a string with fairly good accuracy. The <code>CWU</code> or <a href=\"https://unicode.org/reports/tr44/#CWU\" rel=\"noreferrer\">Changes_When_Uppercased</a> character property matches all code points which, well, change when uppercased. We can try this out with a titlecased digraph characters like the Dutch <a href=\"https://en.wikipedia.org/wiki/IJ_(digraph)\" rel=\"noreferrer\">ƒ≥</a> for example:</p>\n\n<pre><code>capitalizeFirstLetter('ƒ≥sselmeer'); // \"ƒ≤sselmeer\"\n</code></pre>\n\n<p>At the time of writing (Feb 2020), Firefox/Spidermonkey has not yet implemented any of the RegExp features introduced in the last two years*****. You can check the current status of this feature at the <a href=\"http://kangax.github.io/compat-table/es2016plus/#test-RegExp_Unicode_Property_Escapes\" rel=\"noreferrer\">Kangax compat table</a>. Babel is able to compile RegExp literals with property references to equivalent patterns without them, but be aware that the resulting code may be enormous.</p>\n\n<hr>\n\n<p>In all likelihood, people asking this question will not be concerned with Deseret capitalization or internationalization. But it‚Äôs good to be aware of these issues because there‚Äôs a good chance you‚Äôll encounter them eventually even if they aren‚Äôt concerns presently. They‚Äôre not ‚Äúedge‚Äù cases, or rather, they‚Äôre not <em>by-definition</em> edge cases ‚Äî there‚Äôs a whole country where most people speak Turkish, anyway, and conflating code units with codepoints is a fairly common source of bugs (especially with regard to emoji). Both strings and language are pretty complicated!</p>\n\n<hr>\n\n<p><em>* The code units of UTF-16 / UCS2 are also Unicode code points in the sense that e.g. U+D800 is technically a code point, but that‚Äôs not what it ‚Äúmeans‚Äù here ... sort of ... though it gets pretty fuzzy. What the surrogates definitely are not, though, is USVs (Unicode scalar values).</em></p>\n\n<p><em>** Though if a surrogate code unit is ‚Äúorphaned‚Äù ‚Äî i.e., not part of a logical pair ‚Äî you could still get surrogates here, too.</em></p>\n\n<p><em>*** maybe. I haven‚Äôt tested it. Unless you have determined capitalization is a meaningful bottleneck, I probably wouldn‚Äôt sweat it ‚Äî choose whatever you believe is most clear and readable.</em></p>\n\n<p><em>**** such a function might wish to test both the first and second code units instead of just the first, since it‚Äôs possible that the first unit is an orphaned surrogate. For example the input \"\\uD800x\" would capitalize the X as-is, which may or may not be expected.</em></p>\n\n<p><em>***** Here‚Äôs the <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1361876\" rel=\"noreferrer\">Bugzilla issue</a> if you want to follow the progress more directly.</em></p>\n"},{"score":10,"body":"<p>There are multiple ways of doing this try some below</p>\n\n<pre><code>var lower = 'the Eiffel Tower';\nvar upper = lower.charAt(0).toUpperCase() + lower.substr(1);\n</code></pre>\n\n<p>And if you are comfortable with regular expressions, you do things this way:</p>\n\n<pre><code>var upper = lower.replace(/^\\w/, function (chr) {\n  return chr.toUpperCase();\n});\n</code></pre>\n\n<p>And you can even take it one step further by using more modern syntax:</p>\n\n<pre><code>const upper = lower.replace(/^\\w/, c =&gt; c.toUpperCase());\n</code></pre>\n\n<p>Also this will take care of negative scenarios as mentioned in example like words starting with special characters like <code>!@#$%^&amp;*()}{{[];':\",.&lt;&gt;/?</code> .</p>\n"},{"score":3,"body":"<p>I prefer use a solution oriented to a functional way (mapping array for example):    </p>\n\n<pre><code>Array.from(str).map((letter, i) =&gt; i === 0 ? letter.toUpperCase() : letter ).join('');\n</code></pre>\n"},{"score":5,"body":"<p>The simplest solution is:</p>\n\n<pre><code>let yourSentence = 'it needs first letter upper case';\n\nyourSentence.charAt(0).toUpperCase() + yourSentence.substr(1);\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>yourSentence.charAt(0).toUpperCase() + yourSentence.slice(1);\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>yourSentence.substr(0, 1).toUpperCase() + yourSentence.substr(1);\n</code></pre>\n"},{"score":2,"body":"<p>Well, all the answers will crash if the method is passed with some unexpected type of data such as <code>Object</code> or <code>function</code>.</p>\n\n<p>So to ensure that it will not crash in any conditions we'll need to check for types.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>capitalizeFirstLetter = string =&gt; {\r\n  if (typeof string == \"string\") {\r\n      console.log(\"passed\");\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  } else {\r\n    console.log(\"error\");\r\n    return string;\r\n  }\r\n};\r\n\r\n//type function\r\nconsole.log(\r\n  capitalizeFirstLetter(() =&gt; {\r\n    return true;\r\n  })\r\n);\r\n// error\r\n//  () =&gt; { return true; }\r\n\r\n//type object\r\nconsole.log(capitalizeFirstLetter({ x: 1 }));\r\n// error\r\n// Object { x: 1 }\r\n\r\n//type boolean\r\nconsole.log(capitalizeFirstLetter(true));\r\n// error\r\n// true\r\n\r\n//type undefined\r\nconsole.log(capitalizeFirstLetter(undefined));\r\n// error\r\n// undefined\r\n\r\n//type null\r\nconsole.log(capitalizeFirstLetter(null));\r\n// error\r\n// null\r\n\r\n//type NaN\r\nconsole.log(capitalizeFirstLetter(NaN));\r\n// error\r\n// NaN\r\n\r\n//type number\r\nconsole.log(capitalizeFirstLetter(2));\r\n// error\r\n// 2\r\n\r\n//type any for e.g. class\r\nclass Jaydeep {}\r\nconsole.log(capitalizeFirstLetter(new Jaydeep()));\r\n// error\r\n// Object {}\r\n\r\n//type string\r\nconsole.log(capitalizeFirstLetter(\"1\"));\r\nconsole.log(capitalizeFirstLetter(\"a\"));\r\nconsole.log(capitalizeFirstLetter(\"@\"));\r\nconsole.log(capitalizeFirstLetter(\"\"));\r\n// 1\r\n// A\r\n// @\r\n//  :empty string</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<pre><code>string = string.replace(string.charAt(0), string.charAt(0).toUpperCase());\n</code></pre>\n"},{"score":2,"body":"<p>The method will take a value and then split it to have an array of string.</p>\n\n<pre><code>const firstLetterToUpperCase = value =&gt; {\n return value.replace(\n    value.split(\"\")[\"0\"], // Split stirng and get the first letter \n    value\n        .split(\"\")\n        [\"0\"].toString()\n        .toUpperCase() // Split string and get the first letter to replace it with an uppercase value\n  );\n};\n</code></pre>\n"},{"score":10,"body":"<pre><code>/*\n * As terse as possible, assuming you're using ES version 6+\n */\nvar upLetter1=s=&gt;s.replace(/./,m=&gt;m.toUpperCase());\n\nconsole.log(upLetter1(\"the quick brown fox jumped over the lazy dog.\"));\n//\\\\ The quick brown fox jumped over the lazy dog. //\\\\\n</code></pre>\n"},{"score":9,"body":"<h2>Unicode and Locale Aware</h2>\n\n<p>Using current language features:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalize([firstLetter, ...rest]) {\r\n  return [firstLetter.toLocaleUpperCase(), ...rest].join('');\r\n}\r\n\r\nconsole.log(capitalize('foo bar'));\r\nconsole.log(capitalize('—∑“•”ï'))\r\nconsole.log(capitalize('üéÅ‚ùÑüíäüé∏‚≠ê'));\r\n\r\n// Title Case\r\nconsole.log(\r\n  'Title Case:',\r\n  'foo bar'\r\n    .split(/\\s+/)\r\n    .map(capitalize)\r\n    .join(' '),\r\n);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>We accept a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\" rel=\"noreferrer\">destructured</a> string as the only parameter <code>[firstLetter, ...rest]</code>, assigning the first character to the variable <code>firstLetter</code> and get an array for the rest of the characters (<code>...rest</code>) bound to the <code>rest</code> variable. E.g. for the string <code>lorem ipsum</code> this should look like:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>capitalize('lorem ipsum');\n// firstLetter = 'l'\n// rest = ['o', 'r', 'e', 'm', ' ', 'i', 'p', 's', 'u', 'm'];\n</code></pre>\n\n<p>Now all we need to do is prepend an uppercased version of the first letter <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\" rel=\"noreferrer\"><code>firstLetter.toLocaleUpperCase()</code></a> to the <code>rest</code> array‚Äîusing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">spread operator</a>‚Äîand join the resulting array into a string using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join\" rel=\"noreferrer\"><code>.join('')</code></a></p>\n"},{"score":10,"body":"<p>Using the JS <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter\" rel=\"noreferrer\">replace</a> string method &amp; a regular expression w/ a <a href=\"https://www.sitepoint.com/demystifying-regex-with-practical-examples/#matching-duplicated-words\" rel=\"noreferrer\">word boundary</a> seems simple.</p>\n\n<p>Capitalize the first words' first character: \"the eiffel tower\" --> \"The eiffel tower\"</p>\n\n<pre><code>str.replace(/\\b\\w/, v =&gt; v.toUpperCase())\n</code></pre>\n\n<p>Capitalize all words' first character: \"the eiffel tower\" --> \"The Eiffel Tower\"</p>\n\n<pre><code>str.replace(/\\b\\w/g, v =&gt; v.toUpperCase())\n</code></pre>\n"},{"score":1,"body":"<p><strong>Capitalize First Word: Shortest</strong></p>\n\n<pre><code>text.replace(/(^.)/, m =&gt; m.toUpperCase())\n</code></pre>\n\n<hr>\n\n<p><strong>Capitalize Each Word: Shortest</strong></p>\n\n<pre><code>text.replace(/(^\\w|\\s\\w)/g, m =&gt; m.toUpperCase());\n</code></pre>\n\n<p>If you want to make sure the rest is in lowercase:</p>\n\n<pre><code>text.replace(/(^\\w|\\s\\w)(\\S*)/g, (_,m1,m2) =&gt; m1.toUpperCase()+m2.toLowerCase())\n</code></pre>\n"},{"score":5,"body":"<p>using simple vanilla CSS which can also be inline</p>\n\n<pre><code>&lt;span text-transform=\"capitalize \"&gt;The first letter becomes an upper case&lt;/span&gt;\n</code></pre>\n\n<p>also using vanilla JavaScript, we could do:</p>\n\n<pre><code>let string = \"where is you var\"\nstring = string[0].toUpperCase() + string.substring(1)\n</code></pre>\n\n<p>explanation:\nstring[0].toUpperCase(): converts the first letter in the string to upper case</p>\n\n<p>string.substring(1): deletes the first letter in the string and returns the remaining characters</p>\n"},{"score":4,"body":"<p><strong>Any Type of String can convert</strong>      -- </p>\n\n<h2>YoUrStRiNg  -> Yourstring</h2>\n\n<pre><code>var str = yOuRsTrING.toLowerCase(); //Output- yourstring\nstr.charAt(0).toUpperCase() + str.slice(1); //Output- Y + ourstring = Yourstring\n</code></pre>\n"},{"score":20,"body":"<p>Only because this is really a one liner I will include this answer. It's an ES6 based interpolated string one liner.</p>\n<pre><code>let setStringName = 'the Eiffel Tower';\nsetStringName = `${setStringName[0].toUpperCase()}${setStringName.substring(1)}`;\n</code></pre>\n"},{"score":14,"body":"<p>the first char of every string is capitalized.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function capitalize(word){\r\n    return word[0].toUpperCase()+word.slice(1).toLowerCase();\r\n}\r\n\r\n\r\nconsole.log(capitalize(\"john\")); //John\r\nconsole.log(capitalize(\"BRAVO\")); //Bravo\r\nconsole.log(capitalize(\"BLAne\")); //Blane</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":7,"body":"<p>I would just use regex</p>\n<pre><code>myString = '    the quick green alligator...';\nmyString.trim().replace(/^\\w/, (c) =&gt; c.toUpperCase());\n</code></pre>\n"},{"score":2,"body":"<p>If you need to have all word starting from capital you can use the next function:</p>\n<pre><code>const capitalLetters = (s) =&gt; {\n    return s.trim().split(&quot; &quot;).map(i =&gt; i[0].toUpperCase() + i.substr(1)).reduce((ac, i) =&gt; `${ac} ${i}`);\n}\n</code></pre>\n<p>Example:</p>\n<pre><code>    console.log(`result: ${capitalLetters(&quot;this is a test&quot;)}`)\n    //result: &quot;This Is A Test&quot;\n</code></pre>\n"},{"score":1,"body":"<p>Try with the following function:</p>\n<pre><code>function capitalize (string) {\n  return [].map.call(string, (char, i) =&gt; i ? char : char.toUpperCase()).join('')\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code>capitalize('hello world')\n</code></pre>\n<p>Result:</p>\n<pre><code>Hello world\n</code></pre>\n"},{"score":16,"body":"<p>There are already so many good answers above but you can also use a simple css</p>\n<pre><code>text-transform: capitalize;\n</code></pre>\n"},{"score":1,"body":"<p>You can use RegEXP as bellow:</p>\n<pre class=\"lang-js prettyprint-override\"><code>return string1.toLowerCase().replace(/^[a-zA-z]|\\s(.)/ig, L =&gt; L.toUpperCase());\n</code></pre>\n"},{"score":1,"body":"<p>You can solve it using RegEXP:</p>\n<pre class=\"lang-js prettyprint-override\"><code>return str.toLowerCase().replace(/^[a-zA-z]|\\s(.)/ig, L =&gt; L.toUpperCase());\n</code></pre>\n"},{"score":2,"body":"<p>You can do <code>str.replace(str[0], str[0].toUpperCase())</code></p>\n<p>Check this example:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let str = \"hello WORLD\"\nlet newStr =  str.replace(str[0], str[0].toUpperCase())\n\nconsole.log(\"str: \",str)\nconsole.log(\"newStr: \",newStr)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":3,"body":"<p>Just install and load lodash</p>\n<pre><code>import { capitalize } from &quot;lodash&quot;;\n\ncapitalize('test') // Test\n</code></pre>\n"},{"score":7,"body":"<p>Using an arrow function:</p>\n<pre><code>const capitalize = string =&gt; string.charAt(0).toUpperCase() + string.slice(1)\n</code></pre>\n"},{"score":0,"body":"<p>Capitalizing the first letter with validation</p>\n<pre><code>function capitalizeFirstLetter(str) {\n    return (str &amp;&amp; typeof str === 'string')? (str.charAt(0).toUpperCase() + str.slice(1)) : &quot;&quot;;\n}\n</code></pre>\n<p>Testing</p>\n<pre><code>console.log(capitalizeFirstLetter(0)); // op: &quot;&quot;\nconsole.log(capitalizeFirstLetter(null));// op: &quot;&quot;\nconsole.log(capitalizeFirstLetter(&quot;test&quot;));// op: &quot;Test&quot;\nconsole.log(capitalizeFirstLetter({}));// op: &quot;&quot;\n</code></pre>\n"}],"score":3962}