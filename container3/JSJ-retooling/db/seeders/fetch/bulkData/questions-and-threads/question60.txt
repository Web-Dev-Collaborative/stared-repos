{"body":"<p>How do you safely encode a URL using JavaScript such that it can be put into a GET string?</p>\n\n<pre><code>var myUrl = \"http://example.com/index.html?param=1&amp;anotherParam=2\";\nvar myOtherUrl = \"http://example.com/index.html?url=\" + myUrl;\n</code></pre>\n\n<p>I assume that you need to encode the <code>myUrl</code> variable on that second line?</p>\n","title":"Encode URL in JavaScript?","answers":[{"score":2867,"body":"<p>Check out the built-in function <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"noreferrer\">encodeURIComponent(str)</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" rel=\"noreferrer\">encodeURI(str)</a>.<br>\nIn your case, this should work:</p>\n\n<pre><code>var myOtherUrl = \n       \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n"},{"score":1555,"body":"<p>You have three options:</p>\n\n<ul>\n<li><p><code>escape()</code> will not encode: <code>@*/+</code></p></li>\n<li><p><code>encodeURI()</code> will not encode: <code>~!@#$&amp;*()=:/,;?+'</code></p></li>\n<li><p><code>encodeURIComponent()</code> will not encode: <code>~!*()'</code></p></li>\n</ul>\n\n<p>But in your case, if you want to pass a <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\" rel=\"noreferrer\">URL</a> into a <code>GET</code> parameter of other page, you should use <code>escape</code> or <code>encodeURIComponent</code>, but not <code>encodeURI</code>.</p>\n\n<p>See Stack Overflow question <em><a href=\"https://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent\">Best practice: escape, or encodeURI / encodeURIComponent</a></em> for further discussion.</p>\n"},{"score":187,"body":"<p>Stick with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"noreferrer\"><code>encodeURIComponent()</code></a>. The function <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\" rel=\"noreferrer\"><code>encodeURI()</code></a> does not bother to encode many characters that have semantic importance in URLs (e.g. \"#\", \"?\", and \"&amp;\"). <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/escape\" rel=\"noreferrer\"><code>escape()</code></a> is deprecated, and does not bother to encode \"+\" characters, which will be interpreted as encoded spaces on the server (and, as pointed out by others here, does not properly URL-encode non-ASCII characters).</p>\n\n<p>There is a nice <a href=\"https://stackoverflow.com/questions/75980/best-practice-escape-or-encodeuri-encodeuricomponent\">explanation of the difference between <code>encodeURI()</code> and <code>encodeURIComponent()</code></a> elsewhere. If you want to encode something so that it can safely be included as a component of a URI (e.g. as a query string parameter), you want to use <code>encodeURIComponent()</code>.</p>\n"},{"score":3,"body":"<p>Nothing worked for me. All I was seeing was the HTML of the login page, coming back to the client side with code 200. (302 at first but the same Ajax request loading login page inside another Ajax request, which was supposed to be a redirect rather than loading plain text of the login page).</p>\n\n<p>In the login controller, I added this line:</p>\n\n<pre><code>Response.Headers[\"land\"] = \"login\";\n</code></pre>\n\n<p>And in the global Ajax handler, I did this:</p>\n\n<pre><code>$(function () {\n    var $document = $(document);\n    $document.ajaxSuccess(function (e, response, request) {\n        var land = response.getResponseHeader('land');\n        var redrUrl = '/login?ReturnUrl=' + encodeURIComponent(window.location);\n        if(land) {\n            if (land.toString() === 'login') {\n                window.location = redrUrl;\n            }\n        }\n    });\n});\n</code></pre>\n\n<p>Now I don't have any issue, and it works like a charm.</p>\n"},{"score":85,"body":"<p>The best answer is to use <code>encodeURIComponent</code> on <em>values</em> in the query string (and nowhere else).</p>\n\n<p>However, I find that many APIs want to replace \" \" with \"+\" so I've had to use the following:</p>\n\n<pre><code>const value = encodeURIComponent(value).replace('%20','+');\nconst url = 'http://example.com?lang=en&amp;key=' + value\n</code></pre>\n\n<p><code>escape</code> is implemented differently in different browsers and <code>encodeURI</code> doesn't encode many characters (like # and even /) -- it's made to be used on a full URI/URL without breaking it â€“ which isn't super helpful or secure.</p>\n\n<p>And as @Jochem points out below, you may want to use <code>encodeURIComponent()</code> on a (each) folder name, but for whatever reason these APIs don't seem to want <code>+</code> in folder names so plain old <code>encodeURIComponent</code> works great.</p>\n\n<p>Example:</p>\n\n<pre><code>const escapedValue = encodeURIComponent(value).replace('%20','+');\nconst escapedFolder = encodeURIComponent('My Folder'); // no replace\nconst url = `http://example.com/${escapedFolder}/?myKey=${escapedValue}`;\n</code></pre>\n"},{"score":41,"body":"<p>I would suggest to use <a href=\"https://www.npmjs.com/package/qs\" rel=\"nofollow noreferrer\">qs npm package</a></p>\n<pre><code>qs.stringify({a:&quot;1=2&quot;, b:&quot;Test 1&quot;}); // gets a=1%3D2&amp;b=Test+1\n</code></pre>\n<p>it is easier to use with JS object and it gives you proper URL encoding for all parameters</p>\n<p>If you are using jQuery I would go for <a href=\"http://api.jquery.com/jquery.param/\" rel=\"nofollow noreferrer\"><code>$.param</code></a> method. It URL encodes an object mapping fields to values, which is easier to read than calling an escape method on each value.</p>\n<pre><code>$.param({a:&quot;1=2&quot;, b:&quot;Test 1&quot;}) // gets a=1%3D2&amp;b=Test+1\n</code></pre>\n"},{"score":6,"body":"<p>Similar kind of thing I tried with normal javascript</p>\n\n<pre><code>function fixedEncodeURIComponent(str){\n     return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\n}\n</code></pre>\n"},{"score":2,"body":"<p><strong>Encode URL String</strong>\n    <pre>\n    var url = $(location).attr('href'); //get current url\n    //OR\n    var url = 'folder/index.html?param=#23dd&amp;noob=yes'; //or specify one</p>\n\n<code>var encodedUrl = encodeURIComponent(url);\nconsole.log(encodedUrl);\n//outputs folder%2Findex.html%3Fparam%3D%2323dd%26noob%3Dyes\n\n\nfor more info go http://www.sitepoint.com/jquery-decode-url-string\n</code></pre>\n"},{"score":13,"body":"<p>encodeURIComponent() is the way to go.</p>\n\n<pre><code>var myOtherUrl = \"http://example.com/index.html?url=\" + encodeURIComponent(myUrl);\n</code></pre>\n\n<p>BUT you should keep in mind that there are small differences from php version <code>urlencode()</code> and as @CMS mentioned, it will not encode every char. Guys at <a href=\"http://phpjs.org/functions/urlencode/\" rel=\"nofollow noreferrer\">http://phpjs.org/functions/urlencode/</a> made js equivalent to <code>phpencode()</code>:</p>\n\n<pre><code>function urlencode(str) {\n  str = (str + '').toString();\n\n  // Tilde should be allowed unescaped in future versions of PHP (as reflected below), but if you want to reflect current\n  // PHP behavior, you would need to add \".replace(/~/g, '%7E');\" to the following.\n  return encodeURIComponent(str)\n    .replace('!', '%21')\n    .replace('\\'', '%27')\n    .replace('(', '%28')\n    .replace(')', '%29')\n    .replace('*', '%2A')\n    .replace('%20', '+');\n}\n</code></pre>\n"},{"score":1,"body":"<p>You can use esapi library and encode your url using the below function. The function ensures that '/' are not lost to encoding while the remainder of the text contents are encoded:</p>\n\n<pre><code>function encodeUrl(url)\n{\n    String arr[] = url.split(\"/\");\n    String encodedUrl = \"\";\n    for(int i = 0; i&lt;arr.length; i++)\n    {\n        encodedUrl = encodedUrl + ESAPI.encoder().encodeForHTML(ESAPI.encoder().encodeForURL(arr[i]));\n        if(i&lt;arr.length-1) encodedUrl = encodedUrl + \"/\";\n    }\n    return url;\n}\n</code></pre>\n\n<p><a href=\"https://www.owasp.org/index.php/ESAPI_JavaScript_Readme\" rel=\"nofollow noreferrer\">https://www.owasp.org/index.php/ESAPI_JavaScript_Readme</a></p>\n"},{"score":4,"body":"<p>To prevent double encoding it's a good idea to decode the url before encoding (if you are dealing with user entered urls for example, which might be already encoded).</p>\n\n<p>Lets say we have <code>abc%20xyz 123</code> as input (one space is already encoded):</p>\n\n<pre><code>encodeURI(\"abc%20xyz 123\")            //   wrong: \"abc%2520xyz%20123\"\nencodeURI(decodeURI(\"abc%20xyz 123\")) // correct: \"abc%20xyz%20123\"\n</code></pre>\n"},{"score":11,"body":"<p>To encode a URL, as has been said before, you have two functions:</p>\n\n<pre><code>encodeURI()\n</code></pre>\n\n<p>and </p>\n\n<pre><code>encodeURIComponent()\n</code></pre>\n\n<p>The reason both exist is that the first preserves the URL with the risk of leaving too many things unescaped, while the second encodes everything needed.</p>\n\n<p>With the first, you could copy the newly escaped URL into address bar (for example) and it would work.  However your unescaped '&amp;'s would interfere with field delimiters, the '='s would interfere with field names and values, and the '+'s would look like spaces.  But for simple data when you want to preserve the URL nature of what you are escaping, this works.</p>\n\n<p>The second is everything you need to do to make sure nothing in your string interfers with a URL.  It leaves various unimportant characters unescaped so that the URL remains as human readable as possible without interference.  A URL encoded this way will no longer work as a URL without unescaping it.</p>\n\n<p>So if you can take the time, you always want to use encodeURIComponent() -- before adding on name/value pairs encode both the name and the value using this function before adding it to the query string.</p>\n\n<p>I'm having a tough time coming up with reasons to use the encodeURI() -- I'll leave that to the smarter people.</p>\n"},{"score":5,"body":"<h2>What is URL encoding:</h2>\n\n<p>A URL should be encoded when there are special characters located inside the URL. For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(encodeURIComponent('?notEncoded=&amp;+'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>We can observe in this example that all characters except the string <code>notEncoded</code> are encoded with % signs. URL encoding is also known as <strong>percentage encoding</strong> because it escapes all special characters with a %. Then after this % sign every special character has a unique code</p>\n\n<h2>Why do we need URL encoding:</h2>\n\n<p>Certain characters have a special value in a URL string. For example, the ? character denotes the beginning of a query string. In order to succesfully locate a resource on the web, it is necesarry to distinguish between when a character is meant as a part of string or part of the url structure.</p>\n\n<h2>How can we achieve URL encoding in JS:</h2>\n\n<p>JS offers a bunch of build in utility function which we can use to easily encode URL's. These are two convenient options:</p>\n\n<ol>\n<li><code>encodeURIComponent()</code>: Takes a component of a URI as an argument and returns the encoded URI string.</li>\n<li><code>encodeURI()</code>:  Takes a  URI as an argument and returns the encoded URI string.</li>\n</ol>\n\n<h2>Example and caveats:</h2>\n\n<p>Be aware of not passing in the whole URL (including scheme, e.g https://) into <code>encodeURIComponent()</code>. This can actually transform it into a not functional URL. For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// for a whole URI don't use encodeURIComponent it will transform\r\n// the / characters and the URL won't fucntion properly\r\nconsole.log(encodeURIComponent(\"http://www.random.com/specials&amp;char.html\"));\r\n\r\n// instead use encodeURI for whole URL's\r\nconsole.log(encodeURI(\"http://www.random.com/specials&amp;char.html\"));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>We can observe f we put the whole URL in <code>encodeURIComponent</code> that the foward slashes (/) are also converted to special characters. This will cause the URL to not function properly anymore. </p>\n\n<p>Therefore (as the name implies) use:</p>\n\n<ol>\n<li><code>encodeURIComponent</code> on a certain part of a URL which you want to encode.</li>\n<li><code>encodeURI</code> on a whole URL which you want to encode.</li>\n</ol>\n"},{"score":2,"body":"<p>Here is a <a href=\"https://codverter.com/src/webeditor?query=64199300-c557-4048-b924-c2561dcfbf17\" rel=\"nofollow noreferrer\">LIVE DEMO</a> of <code>encodeURIComponent()</code> and <code>decodeURIComponent()</code> JS built in functions:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      textarea{\n        width:30%;\n        height:100px;\n      }\n    &lt;/style&gt;\n    &lt;script&gt;\n      // encode string to base64\n      function encode()\n      {\n        var txt = document.getElementById(\"txt1\").value;\n        var result = btoa(txt);\n        document.getElementById(\"txt2\").value = result;\n      }\n      // decode base64 back to original string\n      function decode()\n      {\n        var txt = document.getElementById(\"txt3\").value;\n        var result = atob(txt);\n        document.getElementById(\"txt4\").value = result;\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;textarea id=\"txt1\"&gt;Some text to decode\n      &lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;input type=\"button\" id=\"btnencode\" value=\"Encode\" onClick=\"encode()\"/&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;textarea id=\"txt2\"&gt;\n      &lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;br/&gt;\n    &lt;div&gt;\n      &lt;textarea id=\"txt3\"&gt;U29tZSB0ZXh0IHRvIGRlY29kZQ==\n      &lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;input type=\"button\" id=\"btndecode\" value=\"Decode\" onClick=\"decode()\"/&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n      &lt;textarea id=\"txt4\"&gt;\n      &lt;/textarea&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":1,"body":"<p>Use <code>fixedEncodeURIComponent</code> function to strictly comply with <a href=\"https://tools.ietf.org/html/rfc3986\" rel=\"nofollow noreferrer\">RFC 3986</a>:</p>\n\n<pre><code>function fixedEncodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  });\n}\n</code></pre>\n"},{"score":7,"body":"<h1>Elegant way</h1>\n\n<p>In my humble opinion the most elegant way to encode query params is to create an object with params like </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const queryParams = { param1: 'value1', param2: 'value2' }\n</code></pre>\n\n<p>and then encode it using: </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const queryString = new URLSearchParams(queryParams).toString()\n</code></pre>\n\n<p>as mentioned in this answer: \n<a href=\"https://stackoverflow.com/a/53171438/7284582\">https://stackoverflow.com/a/53171438/7284582</a></p>\n"},{"score":2,"body":"<p><em>You should not use <code>encodeURIComponent()</code> directly.</em></p>\n\n<p><a href=\"https://tools.ietf.org/html/rfc3986\" rel=\"nofollow noreferrer\">Take a look at RFC3986: Uniform Resource Identifier (URI): Generic Syntax</a></p>\n\n<blockquote>\n  <p>sub-delims  = \"!\" / \"$\" / \"&amp;\" / \"'\" / \"(\" / \")\"\n                   / \"*\" / \"+\" / \",\" / \";\" / \"=\"</p>\n  \n  <p>The purpose of reserved characters is to provide a set of delimiting characters that are distinguishable from other data within a URI.</p>\n</blockquote>\n\n<p><strong><em>These reserved characters from the URI definition in RFC3986 ARE NOT escaped by <code>encodeURIComponent()</code>.</em></strong></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"nofollow noreferrer\">MDN Web Docs: encodeURIComponent()</a></p>\n\n<blockquote>\n  <p>To be more stringent in adhering to RFC 3986 (which reserves !, ', (, ), and *), even though these characters have no formalized URI delimiting uses, the following can be safely used:</p>\n</blockquote>\n\n<p>Use the MDN Web Docs function...</p>\n\n<pre><code>function fixedEncodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {\n    return '%' + c.charCodeAt(0).toString(16);\n  });\n}\n</code></pre>\n"},{"score":0,"body":"<h2>Performance</h2>\n\n<p>Today (2020.06.12) I perform speed test for chosen solutions on MacOs HighSierra 10.13.6 on browsers Chrome 83.0, Safari 13.1, Firefox 77.0. This results can be useful for massive urls encoding.</p>\n\n<h2>Conclusions</h2>\n\n<ul>\n<li><code>encodeURI</code> (B) seems to be fastest but it is not <a href=\"https://stackoverflow.com/a/332897/860099\">recommended for url-s</a>  </li>\n<li><code>escape</code> (A) is fast cross-browser solution</li>\n<li>solution F recommended by <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\" rel=\"nofollow noreferrer\">MDN</a> is medium fast</li>\n<li>solution D is slowest</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/Z9Xjl.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/Z9Xjl.png\" alt=\"enter image description here\"></a></p>\n\n<h2>Details</h2>\n\n<p>For solutions \n<a href=\"https://stackoverflow.com/a/332897/860099\">A</a>\n<a href=\"https://stackoverflow.com/a/332897/860099\">B</a>\n<a href=\"https://stackoverflow.com/a/332888/860099\">C</a>\n<a href=\"https://stackoverflow.com/a/58879100/860099\">D</a>\n<a href=\"https://stackoverflow.com/a/16536783/860099\">E</a>\n<a href=\"https://stackoverflow.com/a/61843371/860099\">F</a>\nI perform two tests</p>\n\n<ul>\n<li>for short url - 50 char - you can run it <a href=\"https://jsbench.me/9hkbbw4580/1\" rel=\"nofollow noreferrer\">HERE</a></li>\n<li>for long url - 1M char - you can run it <a href=\"https://jsbench.me/ffkbbw662s/1\" rel=\"nofollow noreferrer\">HERE</a></li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(url) {\r\n\treturn escape(url);\r\n}\r\n\r\nfunction B(url) {\r\n\treturn encodeURI(url);\r\n}\r\n\r\nfunction C(url) {\r\n\treturn encodeURIComponent(url);\r\n}\r\n\r\nfunction D(url) {\r\n\treturn new URLSearchParams({url}).toString();\r\n}\r\n\r\nfunction E(url){\r\n     return encodeURIComponent(url).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");\r\n}\r\n\r\nfunction F(url) {\r\n  return encodeURIComponent(url).replace(/[!'()*]/g, function(c) {\r\n    return '%' + c.charCodeAt(0).toString(16);\r\n  });\r\n}\r\n\r\n\r\n\r\n// ----------\r\n// TEST\r\n// ----------\r\n\r\nvar myUrl = \"http://example.com/index.html?param=1&amp;anotherParam=2\";\r\n\r\n[A,B,C,D,E,F]\r\n  .forEach(f=&gt; console.log(`${f.name} ?url=${f(myUrl).replace(/^url=/,'')}`));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>This snippet only presents code of choosen solutions</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Example results for Chrome</p>\n\n<p><a href=\"https://i.stack.imgur.com/HBWv9.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/HBWv9.png\" alt=\"enter image description here\"></a></p>\n"},{"score":0,"body":"<pre><code>var myOtherUrl = \n   &quot;http://example.com/index.html?url=&quot; + encodeURIComponent(myUrl).replace(/%20/g,'+');\n</code></pre>\n<p>Don't forget the /g flag to replace all encoded ' '</p>\n"}],"score":2544}