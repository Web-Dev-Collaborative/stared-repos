{"body":"<p>I saw <a href=\"https://stackoverflow.com/questions/10230/checking-for-string-contents-string-length-vs-empty-string\">this question</a>, but I didn't see a JavaScript specific example. Is there a simple <code>string.Empty</code> available in JavaScript, or is it just a case of checking for <code>\"\"</code>?</p>\n","title":"How can I check for an empty/undefined/null string in JavaScript?","answers":[{"score":3830,"body":"<p>If you just want to check whether there's any value, you can do </p>\n\n<pre><code>if (strValue) {\n    //do something\n}\n</code></pre>\n\n<p>If you need to check specifically for an empty string over null, I would think checking against <code>\"\"</code> is your best bet, using <a href=\"http://webreference.com/js/column26/stricteq.html\" rel=\"noreferrer\">the <code>===</code> operator</a> (so that you know that it is, in fact, a string you're comparing against).</p>\n\n<pre><code>if (strValue === \"\") {\n    //...\n}\n</code></pre>\n"},{"score":31,"body":"<p>I would not worry too much about the most <strong>efficient</strong> method. Use what is most clear to your intention. For me that's usually <code>strVar == \"\"</code>.</p>\n\n<p>As per the comment from <a href=\"https://stackoverflow.com/users/20310/constantin\">Constantin</a>, if strVar could some how end up containing an integer 0 value, then that would indeed be one of those intention-clarifying situations.</p>\n"},{"score":38,"body":"<pre><code>var s; // undefined\nvar s = \"\"; // \"\"\ns.length // 0\n</code></pre>\n\n<p>There's nothing representing an empty string in JavaScript. Do a check against either <code>length</code> (if you know that the var will always be a string) or against <code>\"\"</code></p>\n"},{"score":111,"body":"<p>The closest thing you can get to <code>str.Empty</code> (with the precondition that str is a String) is:</p>\n\n<pre><code>if (!str.length) { ...\n</code></pre>\n"},{"score":106,"body":"<p>If you need to make sure that the string is not just a bunch of empty spaces (I'm assuming this is for form validation) you need to do a replace on the spaces.</p>\n\n<pre><code>if(str.replace(/\\s/g,\"\") == \"\"){\n}\n</code></pre>\n"},{"score":7,"body":"<p>I usually use something like:</p>\n\n<pre><code>if (str == \"\") {\n     //Do Something\n}\nelse {\n     //Do Something Else\n}\n</code></pre>\n"},{"score":21,"body":"<p>You could also go with regular expressions:</p>\n\n<pre><code>if((/^\\s*$/).test(str)) { }\n</code></pre>\n\n<p>Checks for strings that are either empty or filled with whitespace.</p>\n"},{"score":69,"body":"<p>I use:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function empty(e) {\n  switch (e) {\n    case \"\":\n    case 0:\n    case \"0\":\n    case null:\n    case false:\n    case typeof(e) == \"undefined\":\n      return true;\n    default:\n      return false;\n  }\n}\n\nempty(null) // true\nempty(0) // true\nempty(7) // false\nempty(\"\") // true\nempty((function() {\n    return \"\"\n})) // false\n</code></pre>\n"},{"score":1179,"body":"<p>For checking if a string is empty, null or undefined I use:</p>\n\n<pre><code>function isEmpty(str) {\n    return (!str || 0 === str.length);\n}\n</code></pre>\n\n<p>For checking if a string is blank, null or undefined I use:</p>\n\n<pre><code>function isBlank(str) {\n    return (!str || /^\\s*$/.test(str));\n}\n</code></pre>\n\n<p>For checking if a string is blank or contains only white-space:</p>\n\n<pre><code>String.prototype.isEmpty = function() {\n    return (this.length === 0 || !this.trim());\n};\n</code></pre>\n"},{"score":8,"body":"<p>Try this</p>\n\n<pre><code>str.value.length == 0\n</code></pre>\n"},{"score":4,"body":"<pre><code>function tell()\n{\n    var pass = document.getElementById('pasword').value;\n    var plen = pass.length;\n\n    // Now you can check if your string is empty as like\n    if(plen==0)\n    {\n        alert('empty');\n    }\n    else\n    {\n        alert('you entered something');\n    }\n}\n\n&lt;input type='text' id='pasword' /&gt;\n</code></pre>\n\n<p>This is also a generic way to check if field is empty.</p>\n"},{"score":353,"body":"<p>All the previous answers are good, but this will be even better. Use dual NOT operators (<code>!!</code>):</p>\n<pre class=\"lang-js prettyprint-override\"><code>if (!!str) {\n    // Some code here\n}\n</code></pre>\n<p>Or use type casting:</p>\n<pre class=\"lang-js prettyprint-override\"><code>if (Boolean(str)) {\n    // Code here\n}\n</code></pre>\n<p>Both do the same function. Typecast the variable to Boolean, where <code>str</code> is a variable.<br />\nIt returns <code>false</code> for <code>null</code>, <code>undefined</code>, <code>0</code>, <code>000</code>, <code>&quot;&quot;</code>, <code>false</code>.<br />\nIt returns <code>true</code> for string <code>&quot;0&quot;</code> and whitespace <code>&quot; &quot;</code>.</p>\n"},{"score":7,"body":"<p>I use a combination, and the fastest checks are first.</p>\n\n<pre><code>function isBlank(pString) {\n    if (!pString || pString.length == 0) {\n        return true;\n    }\n    // Checks for a non-white space character\n    // which I think [citation needed] is faster\n    // than removing all the whitespace and checking\n    // against an empty string\n    return !/[^\\s]+/.test(pString);\n}\n</code></pre>\n"},{"score":8,"body":"<p>Ignoring whitespace strings, you could use this to check for null, empty and undefined:</p>\n\n<pre><code>var obj = {};\n(!!obj.str) // Returns false\n\nobj.str = \"\";\n(!!obj.str) // Returns false\n\nobj.str = null;\n(!!obj.str) // Returns false\n</code></pre>\n\n<p>It is concise and it works for undefined properties, although it's not the most readable.</p>\n"},{"score":11,"body":"<p>I have not noticed an answer that takes into account the possibility of null characters in a string. For example, if we have a null character string:</p>\n\n<pre><code>var y = \"\\0\"; // an empty string, but has a null character\n(y === \"\") // false, testing against an empty string does not work\n(y.length === 0) // false\n(y) // true, this is also not expected\n(y.match(/^[\\s]*$/)) // false, again not wanted\n</code></pre>\n\n<p>To test its nullness one could do something like this:</p>\n\n<pre><code>String.prototype.isNull = function(){ \n  return Boolean(this.match(/^[\\0]*$/)); \n}\n...\n\"\\0\".isNull() // true\n</code></pre>\n\n<p>It works on a null string, and on an empty string and it is accessible for all strings. In addition, it could be expanded to contain other JavaScript empty or whitespace characters (i.e. nonbreaking space, byte order mark, line/paragraph separator, etc.).</p>\n"},{"score":3,"body":"<p>It's a good idea too to check that you are not trying to pass an undefined term.</p>\n\n<pre><code>function TestMe() {\n  if((typeof str != 'undefined') &amp;&amp; str) {\n    alert(str);\n  }\n };\n\nTestMe();\n\nvar str = 'hello';\n\nTestMe();\n</code></pre>\n\n<p>I usually run into the case where I want to do something when a string attribute for an object instance is not empty.  Which is fine, except that attribute is not always present.</p>\n"},{"score":38,"body":"<p>Try:</p>\n\n<pre><code>if (str &amp;&amp; str.trim().length) {  \n    //...\n}\n</code></pre>\n"},{"score":2,"body":"<p>An alternative way, but I believe <a href=\"https://stackoverflow.com/questions/154059/how-can-i-check-for-an-empty-undefined-null-string-in-javascript/154068#154068\">bdukes's answer</a> is best.</p>\n\n<pre><code>var myString = 'hello'; \nif(myString.charAt(0)){\n    alert('no empty');\n}\nalert('empty');\n</code></pre>\n"},{"score":10,"body":"<p>All these answers are nice.</p>\n\n<p>But I cannot be sure that variable is a string, doesn't contain only spaces (this is important for me), and can contain '0' (string).</p>\n\n<p>My version:</p>\n\n<pre><code>function empty(str){\n    return !str || !/[^\\s]+/.test(str);\n}\n\nempty(null); // true\nempty(0); // true\nempty(7); // false\nempty(\"\"); // true\nempty(\"0\"); // false\nempty(\"  \"); // true\n</code></pre>\n\n<p>Sample on <a href=\"http://jsfiddle.net/YZfGs/\" rel=\"nofollow noreferrer\">jsfiddle</a>.</p>\n"},{"score":9,"body":"<p>I did some research on what happens if you pass a non-string and non-empty/null value to a tester function. As many know, (0 == \"\") is true in JavaScript, but since 0 is a value and not empty or null, you may want to test for it.</p>\n\n<p>The following two functions return true only for undefined, null, empty/whitespace values and false for everything else, such as numbers, Boolean, objects, expressions, etc.</p>\n\n<pre><code>function IsNullOrEmpty(value)\n{\n    return (value == null || value === \"\");\n}\nfunction IsNullOrWhiteSpace(value)\n{\n    return (value == null || !/\\S/.test(value));\n}\n</code></pre>\n\n<p>More complicated examples exists, but these are simple and give consistent results. There is no need to test for undefined, since it's included in (value == null) check. You may also mimic <a href=\"https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29\" rel=\"nofollow noreferrer\">C#</a> behaviour by adding them to String like this:</p>\n\n<pre><code>String.IsNullOrEmpty = function (value) { ... }\n</code></pre>\n\n<p>You do not want to put it in Strings prototype, because if the instance of the String-class is null, it will error:</p>\n\n<pre><code>String.prototype.IsNullOrEmpty = function (value) { ... }\nvar myvar = null;\nif (1 == 2) { myvar = \"OK\"; } // Could be set\nmyvar.IsNullOrEmpty(); // Throws error\n</code></pre>\n\n<p>I tested with the following value array. You can loop it through to test your functions if in doubt.</p>\n\n<pre><code>// Helper items\nvar MyClass = function (b) { this.a = \"Hello World!\"; this.b = b; };\nMyClass.prototype.hello = function () { if (this.b == null) { alert(this.a); } else { alert(this.b); } };\nvar z;\nvar arr = [\n// 0: Explanation for printing, 1: actual value\n    ['undefined', undefined],\n    ['(var) z', z],\n    ['null', null],\n    ['empty', ''],\n    ['space', ' '],\n    ['tab', '\\t'],\n    ['newline', '\\n'],\n    ['carriage return', '\\r'],\n    ['\"\\\\r\\\\n\"', '\\r\\n'],\n    ['\"\\\\n\\\\r\"', '\\n\\r'],\n    ['\" \\\\t \\\\n \"', ' \\t \\n '],\n    ['\" txt \\\\t test \\\\n\"', ' txt \\t test \\n'],\n    ['\"txt\"', \"txt\"],\n    ['\"undefined\"', 'undefined'],\n    ['\"null\"', 'null'],\n    ['\"0\"', '0'],\n    ['\"1\"', '1'],\n    ['\"1.5\"', '1.5'],\n    ['\"1,5\"', '1,5'], // Valid number in some locales, not in JavaScript\n    ['comma', ','],\n    ['dot', '.'],\n    ['\".5\"', '.5'],\n    ['0', 0],\n    ['0.0', 0.0],\n    ['1', 1],\n    ['1.5', 1.5],\n    ['NaN', NaN],\n    ['/\\S/', /\\S/],\n    ['true', true],\n    ['false', false],\n    ['function, returns true', function () { return true; } ],\n    ['function, returns false', function () { return false; } ],\n    ['function, returns null', function () { return null; } ],\n    ['function, returns string', function () { return \"test\"; } ],\n    ['function, returns undefined', function () { } ],\n    ['MyClass', MyClass],\n    ['new MyClass', new MyClass()],\n    ['empty object', {}],\n    ['non-empty object', { a: \"a\", match: \"bogus\", test: \"bogus\"}],\n    ['object with toString: string', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return \"test\"; } }],\n    ['object with toString: null', { a: \"a\", match: \"bogus\", test: \"bogus\", toString: function () { return null; } }]\n];\n</code></pre>\n"},{"score":17,"body":"<p>Also, in case you consider a whitespace filled string as \"empty\".</p>\n\n<p>You can test it with this regular expression:</p>\n\n<pre><code>!/\\S/.test(string); // Returns true if blank.\n</code></pre>\n"},{"score":4,"body":"<p>I prefer to use not blank test instead of blank </p>\n\n<pre><code>function isNotBlank(str) {\n   return (str &amp;&amp; /^\\s*$/.test(str));\n}\n</code></pre>\n"},{"score":6,"body":"<p>Don't assume that the variable you check is a string. Don't assume that if this var has a length, then it's a string.</p>\n\n<p>The thing is: think carefully about what your app must do and can accept. Build something robust.</p>\n\n<p>If your method / function should only process a non empty string then test if the argument is a non empty string and don't do some 'trick'.</p>\n\n<p>As an example of something that will explode if you follow some advices here not carefully.</p>\n\n<pre><code>\nvar getLastChar = function (str) {\n if (str.length > 0)\n   return str.charAt(str.length - 1)\n}\n\ngetLastChar('hello')\n=> \"o\"\n\ngetLastChar([0,1,2,3])\n=> TypeError: Object [object Array] has no method 'charAt'\n</code>\n</pre>\n\n<p>So, I'd stick with</p>\n\n<pre><code>\nif (myVar === '')\n  ...\n</code>\n</pre>\n"},{"score":16,"body":"<p>I usually use something like this,</p>\n\n<pre><code>if (!str.length) {\n    // Do something\n}\n</code></pre>\n"},{"score":42,"body":"<p>Very generic &quot;All-In-One&quot; Function (<em>not recommended though</em>):</p>\n<pre><code>function is_empty(x)\n{\n    return (                                                           //don't put newline after return\n        (typeof x == 'undefined')\n              ||\n        (x == null)\n              ||\n        (x == false)        //same as: !x\n              ||\n        (x.length == 0)\n              ||\n        (x == 0)            // note this line, you might not need this. \n              ||\n        (x == &quot;&quot;)\n              ||\n        (x.replace(/\\s/g,&quot;&quot;) == &quot;&quot;)\n              ||\n        (!/[^\\s]/.test(x))\n              ||\n        (/^\\s*$/.test(x))\n    );\n}\n</code></pre>\n<p>However, I don't recommend to use that, because your target variable should be of specific type (i.e. string, or numeric, or object?), so apply the checks that are relative to that variable.</p>\n"},{"score":-2,"body":"<pre><code>var x =\"  \";\nvar patt = /^\\s*$/g;\nisBlank = patt.test(x);\nalert(isBlank); // Is it blank or not??\nx = x.replace(/\\s*/g, \"\"); // Another way of replacing blanks with \"\"\nif (x===\"\"){\n    alert(\"ya it is blank\")\n}\n</code></pre>\n"},{"score":6,"body":"<p>You should always check for the type too, since JavaScript is a duck typed language, so you may not know when and how the data changed in the middle of the process. So, here's the better solution:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    let undefinedStr;\n    if (!undefinedStr) {\n      console.log(\"String is undefined\");\n    }\n    \n    let emptyStr = \"\";\n    if (!emptyStr) {\n      console.log(\"String is empty\");\n    }\n    \n    let nullStr = null;\n    if (!nullStr) {\n      console.log(\"String is null\");\n    }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":-11,"body":"<p>To check if it is empty:</p>\n\n<pre><code>var str = \"Hello World!\";\nvar n = str.length;\nif(n === ''){alert(\"THE STRING str is EMPTY\");}\n</code></pre>\n\n<p>To check if it isn't empty</p>\n\n<pre><code>var str = \"Hello World!\";\nvar n = str.length;\nif(n != ''){alert(\"THE STRING str isn't EMPTY\");}\n</code></pre>\n"},{"score":12,"body":"<p>If one needs to detect not only empty but also blank strings, I'll add to Goral's answer:</p>\n\n<pre><code>function isEmpty(s){\n    return !s.length;    \n}\n\nfunction isBlank(s){\n    return isEmpty(s.trim());    \n}\n</code></pre>\n"},{"score":21,"body":"<ol>\n<li>check that <code>var a;</code> exist</li>\n<li><p>trim out the <code>false spaces</code> in the value, then test for <code>emptiness</code></p>\n\n<pre><code>if ((a)&amp;&amp;(a.trim()!=''))\n{\n  // if variable a is not empty do this \n}\n</code></pre></li>\n</ol>\n"},{"score":-5,"body":"<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script lang=\"javascript\"&gt;\n\n            function nullcheck()\n            {\n                var n = \"fdgdfg\";\n                var e = n.length;\n                if (e == 0)\n                {\n                    return true;\n                }\n                else\n                {\n                    alert(\"success\");\n                    return false;\n                }\n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;button type=\"submit\" value=\"add\" onclick=\"nullcheck()\"&gt;&lt;/button&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":5,"body":"<p>The <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow noreferrer\">Underscore.js</a> JavaScript library, <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\">http://underscorejs.org/</a>, provides a very useful <code>_.isEmpty()</code> function for checking for empty strings and other empty objects.</p>\n\n<p>Reference: <a href=\"http://underscorejs.org/#isEmpty\" rel=\"nofollow noreferrer\">http://underscorejs.org/#isEmpty</a></p>\n\n<blockquote>\n  <p><strong>isEmpty</strong>  <code>_.isEmpty(object)</code> <br/>\n  Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.</p>\n  \n  <p><code>_.isEmpty([1, 2, 3]);</code> <br/>\n   => false</p>\n  \n  <p><code>_.isEmpty({});</code> <br/>\n  => true</p>\n</blockquote>\n\n<p>Other very useful Underscore.js functions include:</p>\n\n<ul>\n<li><a href=\"http://underscorejs.org/#isNull\" rel=\"nofollow noreferrer\">http://underscorejs.org/#isNull</a>  <code>_.isNull(object)</code></li>\n<li><a href=\"http://underscorejs.org/#isUndefined\" rel=\"nofollow noreferrer\">http://underscorejs.org/#isUndefined</a></li>\n<li><code>_.isUndefined(value)</code></li>\n<li><a href=\"http://underscorejs.org/#has\" rel=\"nofollow noreferrer\">http://underscorejs.org/#has</a> <code>_.has(object, key)</code></li>\n</ul>\n"},{"score":21,"body":"<p>A lot of answers, and a lot of different possibilities!</p>\n<p>Without a doubt for quick and simple implementation the winner is: <code>if (!str.length) {...}</code></p>\n<p>However, as many other examples are available. The best functional method to go about this, I would suggest:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function empty(str)\n{\n    if (typeof str == 'undefined' || !str || str.length === 0 || str === \"\" || !/[^\\s]/.test(str) || /^\\s*$/.test(str) || str.replace(/\\s/g,\"\") === \"\")\n        return true;\n    else\n        return false;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>A bit excessive, I know.</p>\n"},{"score":8,"body":"<p>There's no <code>isEmpty()</code> method, you have to check for the type and the length:</p>\n\n<pre><code>if (typeof test === 'string' &amp;&amp; test.length === 0){\n  ...\n</code></pre>\n\n<p>The type check is needed in order to avoid runtime errors when <code>test</code> is <code>undefined</code> or <code>null</code>.</p>\n"},{"score":10,"body":"<p>To check if it is exactly an empty string:</p>\n\n<pre><code>if(val===\"\")...\n</code></pre>\n\n<p>To check if it is an empty string OR a logical equivalent for no-value (null, undefined, 0, NaN, false, ...):</p>\n\n<pre><code>if(!val)...\n</code></pre>\n"},{"score":47,"body":"<p>You can use <a href=\"https://lodash.com/\" rel=\"noreferrer\">lodash</a>:\n_.isEmpty(value).</p>\n\n<p>It covers a lot of cases like <code>{}</code>, <code>''</code>, <code>null</code>, <code>undefined</code>, etc.</p>\n\n<p>But it always returns <code>true</code> for <code>Number</code> type of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\" rel=\"noreferrer\">JavaScript primitive data types</a> like <code>_.isEmpty(10)</code> or <code>_.isEmpty(Number.MAX_VALUE)</code> both returns <code>true</code>.</p>\n"},{"score":8,"body":"<p>You can easily add it to native <strong>String</strong> object in <strong>JavaScript</strong> and reuse it over and over...<br>\nSomething simple like below code can do the job for you if you want to check <code>''</code> empty strings:</p>\n\n<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {\n  return !(!!this.length);\n}\n</code></pre>\n\n<p>Otherwise if you'd like to check both <code>''</code> empty string and <code>'   '</code> with space, you can do that by just adding <code>trim()</code>, something like the code below:</p>\n\n<pre><code>String.prototype.isEmpty = String.prototype.isEmpty || function() {\n   return !(!!this.trim().length);\n}\n</code></pre>\n\n<p>and you can call it this way:</p>\n\n<pre><code>''.isEmpty(); //return true\n'alireza'.isEmpty(); //return false\n</code></pre>\n"},{"score":6,"body":"<p>You can able to validate following ways and understand the difference.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var j = undefined;\r\nconsole.log((typeof j == 'undefined') ? \"true\":\"false\");\r\nvar j = null; \r\nconsole.log((j == null) ? \"true\":\"false\");\r\nvar j = \"\";\r\nconsole.log((!j) ? \"true\":\"false\");\r\nvar j = \"Hi\";\r\nconsole.log((!j) ? \"true\":\"false\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":11,"body":"<p>Meanwhile we can have one function that checks for all 'empties' like <strong>null, undefined, '', ' ', {}, []</strong>.\nSo I just wrote this.</p>\n\n<pre><code>var isEmpty = function(data) {\n    if(typeof(data) === 'object'){\n        if(JSON.stringify(data) === '{}' || JSON.stringify(data) === '[]'){\n            return true;\n        }else if(!data){\n            return true;\n        }\n        return false;\n    }else if(typeof(data) === 'string'){\n        if(!data.trim()){\n            return true;\n        }\n        return false;\n    }else if(typeof(data) === 'undefined'){\n        return true;\n    }else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>Use cases and results.</p>\n\n<pre><code>console.log(isEmpty()); // true\nconsole.log(isEmpty(null)); // true\nconsole.log(isEmpty('')); // true\nconsole.log(isEmpty('  ')); // true\nconsole.log(isEmpty(undefined)); // true\nconsole.log(isEmpty({})); // true\nconsole.log(isEmpty([])); // true\nconsole.log(isEmpty(0)); // false\nconsole.log(isEmpty('Hey')); // false\n</code></pre>\n"},{"score":11,"body":"<p>As of now there is no direct method like string.empty to check whether a string is empty or not. But in your code you can use a wrapper check for an empty string like:</p>\n\n<pre><code>// considering the variable in which your string is saved is named str.\n\nif (str &amp;&amp; str.length&gt;0) { \n\n  // Your code here which you want to run if the string is not empty.\n\n}\n</code></pre>\n\n<p>Using this you can also make sure that string is not undefined or null too. Remember, undefined, null and empty are three different things.</p>\n"},{"score":9,"body":"<p>Try this:</p>\n\n<pre><code>export const isEmpty = string =&gt; (!string || !string.length);\n</code></pre>\n"},{"score":6,"body":"<p>The following regular expression is another solution, that can be used for null, empty or undefined string.</p>\n\n<pre><code>(/(null|undefined|^$)/).test(null)\n</code></pre>\n\n<p>I added this solution, because it can be extended further to check empty or some value like as follow. The following regular expression is checking either string can be empty null undefined or it has integers only.</p>\n\n<pre><code>(/(null|undefined|^$|^\\d+$)/).test()\n</code></pre>\n"},{"score":11,"body":"<p>I didn't see a good answer here (at least not an answer that fits for me)</p>\n\n<p>So I decided to answer myself:</p>\n\n<p><code>value === undefined || value === null || value === \"\";</code></p>\n\n<p>You need to start checking if it's undefined. Otherwise your method can explode, and then you can check if it equals null or is equal to an empty string.</p>\n\n<p>You cannot have !! or only <code>if(value)</code> since if you check <code>0</code> it's going to give you a false answer (0 is false).</p>\n\n<p>With that said, wrap it up in a method like:</p>\n\n<p><code>public static isEmpty(value: any): boolean {\n    return value === undefined || value === null || value === \"\";\n}</code></p>\n\n<p>PS.: <strong>You don't need to check typeof</strong>, since it would explode and throw even before it enters the method</p>\n"},{"score":1,"body":"<p>Check all the below scenarios:</p>\n\n<ol>\n<li><p>null</p></li>\n<li><p>undefined</p></li>\n<li><p>0</p></li>\n<li><p>\"\" (the empty string)</p></li>\n<li><p>false</p></li>\n<li><p>NaN</p></li>\n</ol>\n"},{"score":36,"body":"<h2>Performance</h2>\n\n<p>I perform tests on <a href=\"https://en.wikipedia.org/wiki/MacOS_High_Sierra\" rel=\"noreferrer\">macOS v10.13.6</a> (High Sierra) for 18 chosen solutions. Solutions works slightly different (for corner-case input data) which was presented in the snippet below.</p>\n\n<p><strong>Conclusions</strong></p>\n\n<ul>\n<li>the simple solutions based on <code>!str</code>,<code>==</code>,<code>===</code> and <code>length</code> are fast for all browsers (A,B,C,G,I,J)</li>\n<li>the solutions based on the regular expression (<code>test</code>,<code>replace</code>) and <code>charAt</code> are slowest for all browsers (H,L,M,P)</li>\n<li>the solutions marked as fastest was fastest only for one test run - but in many runs it changes inside 'fast' solutions group</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/bFeGV.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/bFeGV.png\" alt=\"Enter image description here\"></a></p>\n\n<h2>Details</h2>\n\n<p>In the below snippet I compare results of chosen 18 methods by use different input parameters</p>\n\n<ul>\n<li><code>\"\"</code> <code>\"a\"</code> <code>\" \"</code>- empty string, string with letter and string with space</li>\n<li><code>[]</code> <code>{}</code> <code>f</code>- array, object and function</li>\n<li><code>0</code> <code>1</code> <code>NaN</code> <code>Infinity</code> - numbers</li>\n<li><code>true</code> <code>false</code> - Boolean</li>\n<li><code>null</code> <code>undefined</code></li>\n</ul>\n\n<p>Not all tested methods support all input cases.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(str) {\r\n  let r=1;\r\n  if (!str)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction B(str) {\r\n  let r=1;\r\n  if (str == \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction C(str) {\r\n  let r=1;\r\n  if (str === \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction D(str) {\r\n  let r=1;\r\n  if(!str || 0 === str.length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction E(str) {\r\n  let r=1;\r\n  if(!str || /^\\s*$/.test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction F(str) {\r\n  let r=1;\r\n  if(!Boolean(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction G(str) {\r\n  let r=1;\r\n  if(! ((typeof str != 'undefined') &amp;&amp; str) )\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction H(str) {\r\n  let r=1;\r\n  if(!/\\S/.test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction I(str) {\r\n  let r=1;\r\n  if (!str.length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction J(str) {\r\n  let r=1;\r\n  if(str.length &lt;= 0)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction K(str) {\r\n  let r=1;\r\n  if(str.length === 0 || !str.trim())\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction L(str) {\r\n  let r=1;\r\n  if ( str.replace(/\\s/g,\"\") == \"\")\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction M(str) {\r\n  let r=1;\r\n  if((/^\\s*$/).test(str))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\n\r\nfunction N(str) {\r\n  let r=1;\r\n  if(!str || !str.trim().length)\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction O(str) {\r\n  let r=1;\r\n  if(!str || !str.trim())\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction P(str) {\r\n  let r=1;\r\n  if(!str.charAt(0))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction Q(str) {\r\n  let r=1;\r\n  if(!str || (str.trim()==''))\r\n    r=0;\r\n  return r;\r\n}\r\n\r\nfunction R(str) {\r\n  let r=1;\r\n  if (typeof str == 'undefined' ||\r\n      !str ||\r\n      str.length === 0 ||\r\n      str === \"\" ||\r\n      !/[^\\s]/.test(str) ||\r\n      /^\\s*$/.test(str) ||\r\n      str.replace(/\\s/g,\"\") === \"\")\r\n\r\n    r=0;\r\n  return r;\r\n}\r\n\r\n\r\n\r\n\r\n// --- TEST ---\r\n\r\nconsole.log(                  '   \"\"  \"a\"  \" \" [] {} 0 1 NaN Infinity f true false null undefined ');\r\nlet log1 = (s,f)=&gt; console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}     ${f(null)}    ${f(undefined)}`);\r\nlet log2 = (s,f)=&gt; console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}   ${f([])}  ${f({})}  ${f(0)} ${f(1)} ${f(NaN)}   ${f(Infinity)}        ${f(f)} ${f(true)}    ${f(false)}`);\r\nlet log3 = (s,f)=&gt; console.log(`${s}: ${f(\"\")}   ${f(\"a\")}    ${f(\" \")}`);\r\n\r\nlog1('A', A);\r\nlog1('B', B);\r\nlog1('C', C);\r\nlog1('D', D);\r\nlog1('E', E);\r\nlog1('F', F);\r\nlog1('G', G);\r\nlog1('H', H);\r\n\r\nlog2('I', I);\r\nlog2('J', J);\r\n\r\nlog3('K', K);\r\nlog3('L', L);\r\nlog3('M', M);\r\nlog3('N', N);\r\nlog3('O', O);\r\nlog3('P', P);\r\nlog3('Q', Q);\r\nlog3('R', R);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>And then for all methods I perform speed test case <code>str = \"\"</code> for browsers Chrome v78.0.0, Safari v13.0.4, and Firefox v71.0.0 - you can run tests on your machine <a href=\"https://jsperf.com/empty-string-checking/1\" rel=\"noreferrer\">here</a></p>\n\n<p><a href=\"https://i.stack.imgur.com/IxaPG.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/IxaPG.png\" alt=\"Enter image description here\"></a></p>\n"},{"score":12,"body":"<p>Starting with:</p>\n\n<pre><code>return (!value || value == undefined || value == \"\" || value.length == 0);\n</code></pre>\n\n<p>Looking at the last condition, if value == \"\", its length <em>must</em> be 0. Therefore drop it:</p>\n\n<pre><code>return (!value || value == undefined || value == \"\");\n</code></pre>\n\n<p>But wait! In JavaScript, an empty string is false. Therefore, drop value == \"\":</p>\n\n<pre><code>return (!value || value == undefined);\n</code></pre>\n\n<p>And !undefined is true, so that check isn't needed. So we have:</p>\n\n<pre><code>return (!value);\n</code></pre>\n\n<p>And we don't need parentheses:</p>\n\n<pre><code>return !value\n</code></pre>\n"},{"score":6,"body":"<pre><code>if ((str?.trim()?.length || 0) &gt; 0) {\n   // str must not be any of:\n   // undefined\n   // null\n   // &quot;&quot;\n   // &quot; &quot; or just whitespace\n}\n</code></pre>\n<p><strong>Update:</strong>\nSince this answer is getting popular I thought I'd write a function form too:</p>\n<pre><code>const isNotNilOrWhitespace = input =&gt; (input?.trim()?.length || 0) &gt; 0;\n\nconst isNilOrWhitespace = input =&gt; (input?.trim()?.length || 0) === 0;\n</code></pre>\n"},{"score":1,"body":"<p>Lots of useful information here, but in my opinion, one of the most important elements was not addressed.</p>\n<p><code>null</code>, <code>undefined</code>, and <code>&quot;&quot;</code> are all <em>falsy</em>.</p>\n<p>When evaluating for an empty string, it's often because you need to replace it with something else.</p>\n<p>In which case, you can expect the following behavior.</p>\n<pre><code>var a = &quot;&quot;\nvar b = null\nvar c = undefined\n\nconsole.log(a || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;\nconsole.log(b || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;\nconsole.log(c || &quot;falsy string provided&quot;) // prints -&gt;&quot;falsy string provided&quot;\n</code></pre>\n<p>With that in mind, a method or function that can return whether or not a string is <code>&quot;&quot;</code>, <code>null</code>, or <code>undefined</code> (an invalid string) versus a valid string is as simple as this:</p>\n<pre><code>const validStr = (str) =&gt; str ? true : false\n\nvalidStr(undefined) // returns false\nvalidStr(null) // returns false\nvalidStr(&quot;&quot;) // returns false\nvalidStr(&quot;My String&quot;) // returns true\n</code></pre>\n<p>I hope that's helpful.</p>\n"},{"score":1,"body":"<p>Trimming whitespace with the null-coalescing operator:</p>\n<pre class=\"lang-js prettyprint-override\"><code>if (!str?.trim()) {\n  // do something...\n}\n</code></pre>\n"}],"score":3063}