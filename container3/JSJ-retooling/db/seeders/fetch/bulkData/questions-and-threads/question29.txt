{"body":"<p>In Java you can use a <code>for</code> loop to traverse objects in an array as follows:</p>\n\n<pre><code>String[] myStringArray = {\"Hello\", \"World\"};\nfor (String s : myStringArray)\n{\n    // Do something\n}\n</code></pre>\n\n<p>Can you do the same in JavaScript?</p>\n","title":"Loop through an array in JavaScript","answers":[{"score":4189,"body":"<p>You have several options:</p>\n<h1>1. Sequential <code>for</code> loop:</h1>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"Hello\",\"World\"];\nvar arrayLength = myStringArray.length;\nfor (var i = 0; i &lt; arrayLength; i++) {\n    console.log(myStringArray[i]);\n    //Do something\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>Pros</strong></p>\n<ul>\n<li>Works on every environment</li>\n<li>You can use <code>break</code> and <code>continue</code> flow control statements</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Too verbose</li>\n<li>Imperative</li>\n<li>Easy to have <a href=\"https://en.wikipedia.org/wiki/Off-by-one_error#Looping_over_arrays\" rel=\"noreferrer\">off-by-one errors</a> (sometimes also called a <em>fence post error</em>)</li>\n</ul>\n<h1>2. Array.prototype.forEach</h1>\n<p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript#5th_Edition\" rel=\"noreferrer\">ES5</a> specification introduced a lot of beneficial array methods. One of them, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\"><code>Array.prototype.forEach</code></a>, gave us a concise way to iterate over an array:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const array = [\"one\", \"two\", \"three\"]\narray.forEach(function (item, index) {\n  console.log(item, index);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Being almost ten years as the time of writing that the ES5 specification was released (Dec. 2009), it has been implemented by nearly all modern engines in the desktop, server, and mobile environments, so it's safe to use them.</p>\n<p>And with the ES6 arrow function syntax, it's even more succinct:</p>\n<pre><code>array.forEach(item =&gt; console.log(item));\n</code></pre>\n<p>Arrow functions are also widely implemented unless you plan to support ancient platforms (e.g., <a href=\"https://en.wikipedia.org/wiki/Internet_Explorer_11#Internet_Explorer_11\" rel=\"noreferrer\">Internet Explorer 11</a>); you are also safe to go.</p>\n<p><strong>Pros</strong></p>\n<ul>\n<li>Very short and succinct.</li>\n<li>Declarative</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>Cannot use <code>break</code> / <code>continue</code></li>\n</ul>\n<p>Normally, you can replace the need to <code>break</code> out of imperative loops by filtering the array elements before iterating them, for example:</p>\n<pre><code>array.filter(item =&gt; item.condition &lt; 10)\n     .forEach(item =&gt; console.log(item))\n</code></pre>\n<p>Keep in mind if you are iterating an array <em>to build another array from it</em>, you should use <code>map</code>. I've seen this anti-pattern so many times.</p>\n<p><strong>Anti-pattern:</strong></p>\n<pre><code>const numbers = [1,2,3,4,5], doubled = [];\n\nnumbers.forEach((n, i) =&gt; { doubled[i] = n * 2 });\n</code></pre>\n<p><strong>Proper use case of <em>map</em>:</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const numbers = [1,2,3,4,5];\nconst doubled = numbers.map(n =&gt; n * 2);\n\nconsole.log(doubled);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Also, if you are trying to <em>reduce</em> the array to a value, for example, you want to sum an array of numbers, you should use the <em>reduce</em> method.</p>\n<p><strong>Anti-pattern:</strong></p>\n<pre><code>const numbers = [1,2,3,4,5];\nconst sum = 0;\nnumbers.forEach(num =&gt; { sum += num });\n</code></pre>\n<p><strong>Proper use of <em>reduce</em>:</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const numbers = [1,2,3,4,5];\nconst sum = numbers.reduce((total, n) =&gt; total + n, 0);\n\nconsole.log(sum);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h1>3. ES6 <code>for-of</code> statement</h1>\n<p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_%E2%80%93_ECMAScript_2015\" rel=\"noreferrer\">ES6</a> standard introduces the concept of iterable objects and defines a new construct for traversing data, the <code>for...of</code> statement.</p>\n<p>This statement works for any kind of iterable object and also for generators (any object that has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\" rel=\"noreferrer\"><code>\\[Symbol.iterator\\]</code></a> property).</p>\n<p>Array objects are by definition built-in iterables in ES6, so you can use this statement on them:</p>\n<pre><code>let colors = ['red', 'green', 'blue'];\nfor (const color of colors){\n    console.log(color);\n}\n</code></pre>\n<p><strong>Pros</strong></p>\n<ul>\n<li>It can iterate over a large variety of objects.</li>\n<li>Can use normal flow control statements (<code>break</code> / <code>continue</code>).</li>\n<li>Useful to iterate serially asynchronous values.</li>\n</ul>\n<p><strong>Cons</strong></p>\n<ul>\n<li>If you are targeting older browsers, the transpiled output <a href=\"https://babeljs.io/repl#?babili=false&amp;browsers=&amp;build=&amp;builtIns=false&amp;spec=false&amp;loose=false&amp;code_lz=GYewTgBAFAxiB2BnALhOAbcETDSTYiAlAN4BQEeS-ApgHSYDms-4RA3GQL5A&amp;debug=false&amp;forceAllTransforms=false&amp;shippedProposals=false&amp;circleciRepo=&amp;evaluate=true&amp;fileSize=false&amp;timeTravel=false&amp;sourceType=module&amp;lineWrap=false&amp;presets=es2015&amp;prettier=false&amp;targets=&amp;version=7.4.4&amp;externalPlugins=\" rel=\"noreferrer\">might surprise you</a>.</li>\n</ul>\n<h1>Do not use <code>for...in</code></h1>\n<p>@zipcodeman suggests the use of the <code>for...in</code> statement, but for iterating arrays <code>for-in</code> should be avoided, that statement is meant to <strong>enumerate</strong> object properties.</p>\n<p>It shouldn't be used for array-like objects because:</p>\n<ul>\n<li>The order of iteration is not guaranteed; the array indexes may not be visited in numeric order.</li>\n<li>Inherited properties are also enumerated.</li>\n</ul>\n<p>The second point is that it can give you a lot of problems, for example, if you extend the <code>Array.prototype</code> object to include a method there, that property will also be enumerated.</p>\n<p>For example:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Array.prototype.foo = \"foo!\";\nvar array = ['a', 'b', 'c'];\n\nfor (var i in array) {\n    console.log(array[i]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The above code will console log &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, and &quot;foo!&quot;.</p>\n<p>That can be particularly a problem if you use some library that relies heavily on native prototypes augmentation (such as <a href=\"https://en.wikipedia.org/wiki/MooTools\" rel=\"noreferrer\">MooTools</a>).</p>\n<p>The <code>for-in</code> statement, as I said before, is there to <em>enumerate</em> object properties, for example:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj = {\n    \"a\": 1,\n    \"b\": 2,\n    \"c\": 3\n};\n\nfor (var prop in obj) {\n    if (obj.hasOwnProperty(prop)) {\n        // or if (Object.prototype.hasOwnProperty.call(obj,prop)) for safety...\n        console.log(\"prop: \" + prop + \" value: \" + obj[prop])\n    }\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In the above example, the <code>hasOwnProperty</code> method allows you to enumerate only <em>own properties</em>. That's it, only the properties that the object physically has, no inherited properties.</p>\n<p>I would recommend you to read the following article:</p>\n<ul>\n<li><a href=\"http://web.archive.org/web/20101213150231/http://dhtmlkitchen.com/?category=/JavaScript/&amp;date=2007/10/21/&amp;entry=Iteration-Enumeration-Primitives-and-Objects\" rel=\"noreferrer\">Enumeration VS Iteration</a></li>\n</ul>\n"},{"score":447,"body":"<p>You can use <code>map</code>, which is a functional programming technique that's also available in other languages like <a href=\"http://en.wikipedia.org/wiki/Python_%28programming_language%29\" rel=\"noreferrer\">Python</a> and <a href=\"http://en.wikipedia.org/wiki/Haskell_%28programming_language%29\" rel=\"noreferrer\">Haskell</a>.</p>\n\n<pre><code>[1,2,3,4].map( function(item) {\n     alert(item);\n})\n</code></pre>\n\n<p>The general syntax is:</p>\n\n<pre><code>array.map(func)\n</code></pre>\n\n<p>In general <code>func</code> would take one parameter, which is an item of the array. But in the case of JavaScript, it can take a second parameter which is the item's index, and a third parameter which is the array itself.</p>\n\n<p>The return value of <code>array.map</code> is another array, so you can use it like this:</p>\n\n<pre><code>var x = [1,2,3,4].map( function(item) {return item * 10;});\n</code></pre>\n\n<p>And now x is <code>[10,20,30,40]</code>.</p>\n\n<p>You don't have to write the function inline. It could be a separate function.</p>\n\n<pre><code>var item_processor = function(item) {\n      // Do something complicated to an item\n}\n\nnew_list = my_list.map(item_processor);\n</code></pre>\n\n<p>which would be sort-of equivalent to:</p>\n\n<pre><code> for (item in my_list) {item_processor(item);}\n</code></pre>\n\n<p>Except you don't get the <code>new_list</code>.</p>\n"},{"score":92,"body":"<p>Opera, Safari, Firefox and Chrome now all share a set of enhanced Array methods for optimizing many common loops.</p>\n\n<p>You may not need all of them, but they can be very useful, or would be if every browser supported them.</p>\n\n<p>Mozilla Labs published the algorithms they and <a href=\"http://en.wikipedia.org/wiki/WebKit\" rel=\"noreferrer\">WebKit</a> both use, so that you can add them yourself.</p>\n\n<p><strong>filter</strong> returns an array of items that satisfy some condition or test.</p>\n\n<p><strong>every</strong> returns true if every array member passes the test.</p>\n\n<p><strong>some</strong> returns true if any pass the test.</p>\n\n<p><strong>forEach</strong> runs a function on each array member and doesn't return anything.</p>\n\n<p><strong>map</strong> is like forEach, but it returns an array of the results of the operation for each element.</p>\n\n<p>These methods all take a function for their first argument and have an optional second argument, which is an object whose scope you want to impose on the array members as they loop through the function.</p>\n\n<p>Ignore it until you need it.</p>\n\n<p><strong>indexOf</strong> and <strong>lastIndexOf</strong> find the appropriate position of the first or last element that matches its argument exactly.</p>\n\n<pre><code>(function(){\n    var p, ap= Array.prototype, p2={\n        filter: function(fun, scope){\n            var L= this.length, A= [], i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        val= this[i];\n                        if(fun.call(scope, val, i, this)){\n                            A[A.length]= val;\n                        }\n                    }\n                    ++i;\n                }\n            }\n            return A;\n        },\n        every: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; !fun.call(scope, this[i], i, this))\n                        return false;\n                    ++i;\n                }\n                return true;\n            }\n            return null;\n        },\n        forEach: function(fun, scope){\n            var L= this.length, i= 0;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n            }\n            return this;\n        },\n        indexOf: function(what, i){\n            i= i || 0;\n            var L= this.length;\n            while(i&lt; L){\n                if(this[i]=== what)\n                    return i;\n                ++i;\n            }\n            return -1;\n        },\n        lastIndexOf: function(what, i){\n            var L= this.length;\n            i= i || L-1;\n            if(isNaN(i) || i&gt;= L)\n                i= L-1;\n            else\n                if(i&lt; 0) i += L;\n            while(i&gt; -1){\n                if(this[i]=== what)\n                    return i;\n                --i;\n            }\n            return -1;\n        },\n        map: function(fun, scope){\n            var L= this.length, A= Array(this.length), i= 0, val;\n            if(typeof fun== 'function'){\n                while(i&lt; L){\n                    if(i in this){\n                        A[i]= fun.call(scope, this[i], i, this);\n                    }\n                    ++i;\n                }\n                return A;\n            }\n        },\n        some: function(fun, scope){\n            var i= 0, L= this.length;\n            if(typeof fun== 'function'){\n                while(i&lt;L){\n                    if(i in this &amp;&amp; fun.call(scope, this[i], i, this))\n                        return true;\n                    ++i;\n                }\n                return false;\n            }\n        }\n    }\n    for(p in p2){\n        if(!ap[p])\n            ap[p]= p2[p];\n    }\n    return true;\n})();\n</code></pre>\n"},{"score":123,"body":"<p>In JavaScript it's not advisable to loop through an Array with a for-in loop, but it's better to use a <code>for</code> loop such as:</p>\n\n<pre><code>for(var i=0, len=myArray.length; i &lt; len; i++){}\n</code></pre>\n\n<p>It's optimized as well (\"caching\" the array length). If you'd like to learn more, <a href=\"http://blog.sebarmeli.com/2010/12/06/best-way-to-loop-through-an-array-in-javascript/\" rel=\"noreferrer\">read my post on the subject</a>.</p>\n"},{"score":31,"body":"<p>There is a way to do it where you have very little implicit scope in your loop and do away with extra variables.</p>\n<pre><code>var i = 0,\n     item;\n\n// Note this is weak to sparse arrays or falsey values\nfor ( ; item = myStringArray[i++] ; ){\n    item; // This is the string at the index.\n}\n</code></pre>\n<p>Or if you really want to get the id and have a really classical <code>for</code> loop:</p>\n<pre><code>var i = 0,\n    len = myStringArray.length; // Cache the length\n\nfor ( ; i &lt; len ; i++ ){\n    myStringArray[i]; // Don't use this if you plan on changing the length of the array\n}\n</code></pre>\n<p>Modern browsers all support iterator methods <code>forEach</code>, <code>map</code>, <code>reduce</code>, <code>filter</code> and a host of other methods on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array?redirectlocale=en-US&amp;redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FArray\" rel=\"nofollow noreferrer\">Array prototype</a>.</p>\n"},{"score":69,"body":"<p>Use the <em>while</em> loop...</p>\n<pre><code>var i = 0, item, items = ['one', 'two', 'three'];\nwhile(item = items[i++]){\n    console.log(item);\n}\n</code></pre>\n<p>It logs: 'one', 'two', and 'three'</p>\n<p>And for the reverse order, an even more efficient loop:</p>\n<pre><code>var items = ['one', 'two', 'three'], i = items.length;\nwhile(i--){\n    console.log(items[i]);\n}\n</code></pre>\n<p>It logs: 'three', 'two', and 'one'</p>\n<p>Or the classical <code>for</code> loop:</p>\n<pre><code>var items = ['one', 'two', 'three']\nfor(var i=0, l = items.length; i &lt; l; i++){\n    console.log(items[i]);\n}\n</code></pre>\n<p>It logs: 'one','two','three'</p>\n<p>Reference: <em><a href=\"http://www.sitepoint.com/google-closure-how-not-to-write-javascript/\" rel=\"nofollow noreferrer\">Google Closure: How not to write JavaScript</a></em></p>\n"},{"score":18,"body":"<p>There's a method to iterate over only own object properties, not including prototype's ones:</p>\n\n<pre><code>for (var i in array) if (array.hasOwnProperty(i)) {\n    // Do something with array[i]\n}\n</code></pre>\n\n<p>but it still will iterate over custom-defined properties.</p>\n\n<p>In JavaScript any custom property could be assigned to any object, including an array.</p>\n\n<p>If one wants to iterate over sparsed array, <code>for (var i = 0; i &lt; array.length; i++) if (i in array)</code> or <code>array.forEach</code> with <code>es5shim</code> should be used.</p>\n"},{"score":1126,"body":"<p>Yes, assuming your implementation includes the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements\" rel=\"noreferrer\"><code>for</code>...<code>of</code></a> feature introduced in <a href=\"http://www.ecma-international.org/ecma-262/6.0/\" rel=\"noreferrer\">ECMAScript 2015</a> (the \"Harmony\" release)... which is a pretty safe assumption these days.</p>\n\n<p>It works like this:</p>\n\n<pre><code>// REQUIRES ECMASCRIPT 2015+\nvar s, myStringArray = [\"Hello\", \"World\"];\nfor (s of myStringArray) {\n  // ... do something with s ...\n}\n</code></pre>\n\n<p>Or better yet, since ECMAScript 2015 also provides block-scoped variables:</p>\n\n<pre><code>// REQUIRES ECMASCRIPT 2015+\nconst myStringArray = [\"Hello\", \"World\"];\nfor (const s of myStringArray) {\n  // ... do something with s ...\n}\n// s is no longer defined here\n</code></pre>\n\n<p>(The variable <code>s</code> is different on each iteration, but can still be declared <code>const</code> inside the loop body as long as it isn't modified there.)</p>\n\n<p>A note on sparse arrays: an array in JavaScript may not actually store as many items as reported by its <code>length</code>; that reported number is simply one greater than the highest index at which a value is stored. If the array holds fewer elements than indicated by its length, its said to be <em>sparse</em>. For example, it's perfectly legitimate to have an array with items only at indexes 3, 12, and 247; the <code>length</code> of such an array is reported as 248, though it is only actually storing 3 values.  If you try to access an item at any other index, the array will appear to have the <code>undefined</code> value there. So when you want to \"loop through\" an array, you have a question to answer: do you want to loop over the full range indicated by its length and process <code>undefined</code>s for any missing elements, or do you only want to process the elements actually present? There are plenty of applications for both approaches; it just depends on what you're using the array for.</p>\n\n<p>If you iterate over an array with <code>for</code>..<code>of</code>, the body of the loop is executed <code>length</code> times, and the loop control variable is set to <code>undefined</code> for any items not actually present in the array. Depending on the details of your \"do something with\" code, that behavior may be what you want, but if not, you should use a different approach.</p>\n\n<p>Of course, some developers have no choice but to use a different approach anyway, because for whatever reason they're targeting a version of JavaScript that doesn't yet support <code>for</code>...<code>of</code>.</p>\n\n<p>As long as your JavaScript implementation is compliant with the <em>previous</em> edition of the ECMAScript specification (which rules out, for example, versions of Internet Explorer before 9), then you can use the <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.foreach\" rel=\"noreferrer\"><code>Array#forEach</code></a> iterator method instead of a loop. In that case, you pass a function to be called on each item in the array:</p>\n\n<pre><code>var myStringArray = [ \"Hello\", \"World\" ];\nmyStringArray.forEach( function(s) { \n     // ... do something with s ...\n} );\n</code></pre>\n\n<p>Unlike <code>for</code>...<code>of</code>, <code>.forEach</code> only calls the function for elements that are actually present in the array. If passed our hypothetical array with three elements and a length of 248, it will only call the function three times, not 248 times. It also distinguishes between missing elements and elements that are actually set to <code>undefined</code>; for the latter, it will still call the function, passing <code>undefined</code> as the argument. If this is how you want to handle sparse arrays, <code>.forEach</code> may be the way to go even if your interpreter supports <code>for</code>...<code>of</code>.</p>\n\n<p>The final option, which works in <em>all</em> versions of JavaScript, is <a href=\"http://www.ecma-international.org/ecma-262/6.0/#sec-for-statement\" rel=\"noreferrer\">an explicit counting loop</a>. You simply count from 0 up to one less than the length and use the counter as an index. The basic loop looks like this:</p>\n\n<pre><code>var i, s, myStringArray = [ \"Hello\", \"World\" ], len = myStringArray.length;\nfor (i=0; i&lt;len; ++i) {\n  s = myStringArray[i];\n  // ... do something with s ...\n}\n</code></pre>\n\n<p>One advantage of this approach is that you can choose how to handle sparse arrays; the above code will run the body of the loop the full <code>length</code> times, with <code>s</code> set to <code>undefined</code> for any missing elements, just like <code>for</code>..<code>of</code>. If you instead want to handle only the actually-present elements of a sparse array, like <code>.forEach</code>, you can add a simple <code>in</code> test on the index:</p>\n\n<pre><code>var i, s, myStringArray = [ \"Hello\", \"World\" ], len = myStringArray.length;\nfor (i=0; i&lt;len; ++i) {\n  if (i in myStringArray) {\n    s = myStringArray[i];\n    // ... do something with s ...\n  }\n}\n</code></pre>\n\n<p>Assigning the length value to the local variable (as opposed to including the full <code>myStringArray.length</code> expression in the loop condition) can make a significant difference in performance since it skips a property lookup each time through; using Rhino on my machine, the speedup is 43%. </p>\n\n<p>You may see the length caching done in the loop initialization clause, like this:</p>\n\n<pre><code>var i, len, myStringArray = [ \"Hello\", \"World\" ];\nfor (len = myStringArray.length, i=0; i&lt;len; ++i) {\n</code></pre>\n\n<p>The explicit counting loop also means you have access to the index of each value, should you want it. The index is also passed as an extra parameter to the function you pass to <code>forEach</code>, so you can access it that way as well:</p>\n\n<pre><code>myStringArray.forEach( function(s, i) {\n   // ... do something with s and i ...\n});\n</code></pre>\n\n<p><code>for</code>...<code>of</code> doesn't give you the index associated with each object, but as long as the object you're iterating over is actually an <code>Array</code> (<code>for</code>..<code>of</code> works for other iterable types which may not have this method), you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries\" rel=\"noreferrer\">Array#entries</a> method to change it to an array of [index, item] pairs, and then iterate over that:</p>\n\n<pre><code>for (const [i, s] of myStringArray.entries()) {\n  // ... do something with s and i ...\n}\n</code></pre>\n\n<p>The <code>for</code>...<code>in</code> syntax mentioned by others is for looping over an object's properties; since an Array in JavaScript is just an object with numeric property names (and an automatically-updated <code>length</code> property), you can theoretically loop over an Array with it.  But the problem is that it doesn't restrict itself to the numeric property values (remember that even methods are actually just properties whose value is a closure), nor is it guaranteed to iterate over those in numeric order. Therefore, the <code>for</code>...<code>in</code> syntax should <em>not</em> be used for looping through Arrays. </p>\n"},{"score":28,"body":"<p>I would thoroughly recommend making use of the <a href=\"http://documentcloud.github.com/underscore\" rel=\"nofollow noreferrer\">Underscore.js</a> library. It provides you with various functions that you can use to iterate over arrays/collections.</p>\n<p>For instance:</p>\n<pre><code>_.each([1, 2, 3], function(num){ alert(num); });\n=&gt; alerts each number in turn...\n</code></pre>\n"},{"score":11,"body":"<p>It's not 100% identical, but similar:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>   var myStringArray = ['Hello', 'World']; // The array uses [] not {}\n    for (var i in myStringArray) {\n        console.log(i + ' -&gt; ' + myStringArray[i]); // i is the index/key, not the item\n    }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":40,"body":"<p>If you want a terse way to write a fast loop <em>and</em> you can iterate in reverse:</p>\n\n<pre><code>for (var i=myArray.length;i--;){\n  var item=myArray[i];\n}\n</code></pre>\n\n<p>This has the benefit of caching the length (similar to <code>for (var i=0, len=myArray.length; i&lt;len; ++i)</code> and unlike <code>for (var i=0; i&lt;myArray.length; ++i)</code>) while being fewer characters to type.</p>\n\n<p>There are even some times when you ought to iterate in reverse, such as when iterating over a <a href=\"https://developer.mozilla.org/En/DOM/NodeList#A_.22live.22_collection\">live NodeList</a> where you plan on removing items from the DOM during iteration.</p>\n"},{"score":21,"body":"<p>If you're using the jQuery library, consider using \n<a href=\"http://api.jquery.com/jQuery.each/\" rel=\"noreferrer\">http://api.jquery.com/jQuery.each/</a></p>\n\n<p>From the documentation:</p>\n\n<blockquote>\n  <p><strong><code>jQuery.each( collection, callback(indexInArray, valueOfElement) )</code></strong> </p>\n  \n  <p><strong>Returns:</strong> <em>Object</em></p>\n  \n  <p><strong>Description:</strong> <em>A generic iterator function, which can be used to\n  seamlessly iterate over both objects and arrays. Arrays and array-like\n  objects with a length property (such as a function's arguments object)\n  are iterated by numeric index, from 0 to length-1. Other objects are\n  iterated via their named properties.</em></p>\n  \n  <p>The <code>$.each()</code> function is not the same as <code>$(selector).each()</code>, which is\n  used to iterate, exclusively, over a jQuery object. The <code>$.each()</code>\n  function can be used to iterate over any collection, whether it is a\n  map (JavaScript object) or an array. In the case of an array, the\n  callback is passed an array index and a corresponding array value each\n  time. (The value can also be accessed through the <code>this</code> keyword, but\n  Javascript will always wrap the <code>this</code> value as an <code>Object</code> even if it is\n  a simple string or number value.) The method returns its first\n  argument, the object that was iterated.</p>\n</blockquote>\n"},{"score":21,"body":"<p>I did not yet see this variation, which I personally like the best:</p>\n\n<p>Given an array:</p>\n\n<pre><code>var someArray = [\"some\", \"example\", \"array\"];\n</code></pre>\n\n<p>You can loop over it without ever accessing the length property:</p>\n\n<pre><code>for (var i=0, item; item=someArray[i]; i++) {\n  // item is \"some\", then \"example\", then \"array\"\n  // i is the index of item in the array\n  alert(\"someArray[\" + i + \"]: \" + item);\n}\n</code></pre>\n\n<p>See this JsFiddle demonstrating that: <a href=\"http://jsfiddle.net/prvzk/\" rel=\"noreferrer\">http://jsfiddle.net/prvzk/</a></p>\n\n<p>This only works for arrays that are <em>not</em> sparse. Meaning that there actually is a value at each index in the array. However, I found that in practice I hardly ever use sparse arrays in JavaScript... In such cases it's usually a lot easier to use an object as a map/hashtable. If you do have a sparse array, and want to loop over 0 .. length-1, you need the for (var i=0; i&lt;someArray.length; ++i) construct, but you still need an <code>if</code> inside the loop to check whether the element at the current index is actually defined.</p>\n\n<p>Also, as CMS mentions in a comment below, you can only use this on arrays that don't contain any falsish values. The array of strings from the example works, but if you have empty strings, or numbers that are 0 or NaN, etc. the loop will break off prematurely. Again in practice this is hardly ever a problem for me, but it is something to keep in mind, which makes this a loop to think about before you use it... That may disqualify it for some people :)</p>\n\n<p>What I like about this loop is:</p>\n\n<ul>\n<li>It's short to write</li>\n<li>No need to access (let alone cache) the length property</li>\n<li>The item to access is automatically defined within the loop\nbody under the name you pick.</li>\n<li>Combines very naturally with array.push and array.splice to use arrays like lists/stacks</li>\n</ul>\n\n<p>The reason this works is that the array specification mandates that when you read an item from an index >= the array's length, it will return undefined. When you write to such a location it will actually update the length.</p>\n\n<p>For me, this construct most closely emulates the Java 5 syntax that I love:</p>\n\n<pre><code>for (String item : someArray) {\n}\n</code></pre>\n\n<p>... with the added benefit of also knowing about the current index inside the loop</p>\n"},{"score":9,"body":"<pre><code>var x = [4, 5, 6];\nfor (i = 0, j = x[i]; i &lt; x.length; j = x[++i]) {\n    console.log(i,j);\n}\n</code></pre>\n\n<p>A lot cleaner...</p>\n"},{"score":131,"body":"<h1>for (const s of myStringArray) {</h1>\n<p>(Directly answering your question: now you can!)</p>\n<p>Most other answers are right, but they do not mention (as of this writing) that <em><strong>ECMAScript <strike> 6 </strike> 2015</strong></em> is bringing a new mechanism for doing iteration, the <strong><code>for..of</code></strong> loop.</p>\n<p>This new syntax is the most elegant way to iterate an array in JavaScript (as long you don't need the iteration index).</p>\n<p>It currently works with Firefox 13+, Chrome 37+ and it does not natively work with other browsers (see browser compatibility below). Luckily we have JavaScript compilers (such as <a href=\"https://babeljs.io/\" rel=\"nofollow noreferrer\">Babel</a>) that allow us to use next-generation features today.</p>\n<p>It also works on Node.js (I tested it on version 0.12.0).</p>\n<p><strong>Iterating an array</strong></p>\n<pre><code>// You could also use &quot;let&quot; or &quot;const&quot; instead of &quot;var&quot; for block scope.\nfor (var letter of [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]) {\n   console.log(letter);\n}\n</code></pre>\n<p><strong>Iterating an array of objects</strong></p>\n<pre><code>const band = [\n  {firstName : 'John', lastName: 'Lennon'},\n  {firstName : 'Paul', lastName: 'McCartney'}\n];\n\nfor(const member of band){\n  console.log(member.firstName + ' ' + member.lastName);\n}\n</code></pre>\n<p><strong>Iterating a generator:</strong></p>\n<p><em>(example extracted from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of</a>)</em></p>\n<pre><code>function* fibonacci() { // A generator function\n  let [prev, curr] = [1, 1];\n  while (true) {\n    [prev, curr] = [curr, prev + curr];\n    yield curr;\n  }\n}\n\nfor (const n of fibonacci()) {\n  console.log(n);\n  // Truncate the sequence at 1000\n  if (n &gt;= 1000) {\n    break;\n  }\n}\n</code></pre>\n<hr />\n<p><em>Compatibility table:</em>\n<a href=\"http://kangax.github.io/es5-compat-table/es6/\" rel=\"nofollow noreferrer\">http://kangax.github.io/es5-compat-table/es6/#For..of loops</a></p>\n<p><em>Specification:</em> <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:iterators\" rel=\"nofollow noreferrer\">http://wiki.ecmascript.org/doku.php?id=harmony:iterators</a></p>\n<h1>}</h1>\n"},{"score":12,"body":"<p>The optimized approach is to cache the length of array and using the single variable pattern, initializing all variables with a single <code>var</code> keyword.</p>\n<pre><code>var i, max, myStringArray = [&quot;Hello&quot;, &quot;World&quot;];\nfor (i = 0, max = myStringArray.length; i &lt; max; i++) {\n    alert(myStringArray[i]);\n\n    // Do something\n}\n</code></pre>\n<p>If the order of iteration does not matter then you should try reversed loop. It is the fastest as it reduces overhead condition testing and decrement is in one statement:</p>\n<pre><code>var i,myStringArray = [&quot;item1&quot;,&quot;item2&quot;];\nfor (i =  myStringArray.length; i--) {\n    alert(myStringArray[i]);\n}\n</code></pre>\n<p>Or better and cleaner to use a <em>while</em> loop:</p>\n<pre><code>var myStringArray = [&quot;item1&quot;,&quot;item2&quot;],i = myStringArray.length;\nwhile(i--) {\n   // Do something with fruits[i]\n}\n</code></pre>\n"},{"score":15,"body":"<h2>The most elegant and fast way</h2>\n<pre><code>var arr = [1, 2, 3, 1023, 1024];\nfor (var value; value = arr.pop();) {\n    value + 1\n}\n</code></pre>\n<p><a href=\"http://jsperf.com/native-loop-performance/8\" rel=\"noreferrer\">http://jsperf.com/native-loop-performance/8</a></p>\n<hr />\n<h2>Edited (because I was wrong)</h2>\n<hr />\n<p>Comparing methods for looping through an array of 100000 items and do a minimal operation with the new value each time.</p>\n<ul>\n<li><a href=\"http://jsben.ch/#/BQhED\" rel=\"noreferrer\">http://jsben.ch/#/BQhED</a></li>\n</ul>\n<p><strong>Preparation:</strong></p>\n<pre><code>&lt;script src=&quot;//code.jquery.com/jquery-2.1.0.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n    Benchmark.prototype.setup = function() {\n        // Fake function with minimal action on the value\n        var tmp = 0;\n        var process = function(value) {\n            tmp = value; // Hold a reference to the variable (prevent engine optimisation?)\n        };\n        \n        // Declare the test Array\n        var arr = [];\n        for (var i = 0; i &lt; 100000; i++)\n            arr[i] = i;\n    };\n&lt;/script&gt;\n</code></pre>\n<p><strong>Tests:</strong></p>\n<pre><code>&lt;a href=&quot;http://jsperf.com/native-loop-performance/16&quot; \n   title=&quot;http://jsperf.com/native-loop-performance/16&quot;\n&gt;&lt;img src=&quot;http://i.imgur.com/YTrO68E.png&quot; title=&quot;Hosted by imgur.com&quot; /&gt;&lt;/a&gt;\n</code></pre>\n"},{"score":6,"body":"<p>Well, how about this:</p>\n\n<pre><code>for (var key in myStringArray) {\n    console.log(myStringArray[key]);\n}\n</code></pre>\n"},{"score":29,"body":"<p>There are various way to loop through array in JavaScript.  </p>\n\n<p><strong>Generic loop:</strong></p>\n\n<pre><code>var i;\nfor (i = 0; i &lt; substr.length; ++i) {\n    // Do something with `substr[i]`\n}\n</code></pre>\n\n<p><strong>ES5's forEach:</strong></p>\n\n<pre><code>substr.forEach(function(item) {\n    // Do something with `item`\n});\n</code></pre>\n\n<p><strong>jQuery.each:</strong></p>\n\n<pre><code>jQuery.each(substr, function(index, item) {\n    // Do something with `item` (or `this` is also `item` if you like)\n});\n</code></pre>\n\n<p>Have a look <a href=\"https://stackoverflow.com/questions/3943494/how-to-loop-through-array-in-jquery\">this</a> for detailed information or you can also check <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\">MDN</a> for looping through an array in JavaScript &amp; using jQuery check <a href=\"http://api.jquery.com/jquery.each/\" rel=\"noreferrer\">jQuery for each</a>.</p>\n"},{"score":9,"body":"<p>For example, I used in a Firefox console:</p>\n<pre><code>[].forEach.call(document.getElementsByTagName('pre'), function(e){ \n   console.log(e);\n})\n</code></pre>\n<p>You can use querySelectorAll to get same result</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.querySelectorAll('pre').forEach( (e) =&gt; { \n   console.log(e.textContent);\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;pre&gt;text 1&lt;/pre&gt;\n&lt;pre&gt;text 2&lt;/pre&gt;\n&lt;pre&gt;text 3&lt;/pre&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":7,"body":"<p>Sure it's inefficient and many despise it, but it's one of the closest to the mentioned:</p>\n\n<pre><code>var myStringArray = [\"Hello\",\"World\"];\nmyStringArray.forEach(function(f){\n    // Do something\n})\n</code></pre>\n"},{"score":78,"body":"<h3>Introduction</h3>\n<p>Since my time in college, I've programmed in Java, JavaScript, Pascal, <a href=\"https://en.wikipedia.org/wiki/ABAP\" rel=\"nofollow noreferrer\">ABAP</a>, PHP, <a href=\"https://en.wikipedia.org/wiki/OpenEdge_Advanced_Business_Language\" rel=\"nofollow noreferrer\">Progress 4GL</a>, C/C++ and possibly a few other languages I can't think of right now.</p>\n<p>While they all have their own linguistic idiosyncrasies, each of these languages share many of the same basic concepts. Such concepts include procedures / functions, <code>IF</code>-statements, <code>FOR</code>-loops, and <code>WHILE</code>-loops.</p>\n<hr />\n<h3>A traditional <code>for</code>-loop</h3>\n<p>A traditional <code>for</code> loop has three components:</p>\n<ol>\n<li><strong>The initialization:</strong> executed before the look block is executed the first time</li>\n<li><strong>The condition:</strong> checks a condition every time before the loop block is executed, and quits the loop if false</li>\n<li><strong>The afterthought:</strong> performed every time after the loop block is executed</li>\n</ol>\n<p>These three components are separated from each other by a <code>;</code> symbol. Content for each of these three components is optional, which means that the following is the most minimal <code>for</code> loop possible:</p>\n<pre><code>for (;;) {\n    // Do stuff\n}\n</code></pre>\n<p>Of course, you will need to include an <code>if(condition === true) { break; }</code>  or an <code>if(condition === true) { return; }</code> somewhere inside that <code>for</code>-loop to get it to stop running.</p>\n<p>Usually, though, the initialization is used to declare an index, the condition is used to compare that index with a minimum or maximum value, and the afterthought is used to increment the index:</p>\n<pre><code>for (var i = 0, length = 10; i &lt; length; i++) {\n    console.log(i);\n}\n</code></pre>\n<hr />\n<h3>Using a traditional <code>for</code> loop to loop through an array</h3>\n<p>The traditional way to loop through an array, is this:</p>\n<pre><code>for (var i = 0, length = myArray.length; i &lt; length; i++) {\n    console.log(myArray[i]);\n}\n</code></pre>\n<p>Or, if you prefer to loop backwards, you do this:</p>\n<pre><code>for (var i = myArray.length - 1; i &gt; -1; i--) {\n    console.log(myArray[i]);\n}\n</code></pre>\n<p>There are, however, many variations possible, like for example this one:</p>\n<pre><code>for (var key = 0, value = myArray[key], length = myArray.length; key &lt; length; value = myArray[++key]) {\n    console.log(value);\n}\n</code></pre>\n<p>...or this one...</p>\n<pre><code>var i = 0, length = myArray.length;\nfor (; i &lt; length;) {\n    console.log(myArray[i]);\n    i++;\n}\n</code></pre>\n<p>...or this one:</p>\n<pre><code>var key = 0, value;\nfor (; value = myArray[key++];){\n    console.log(value);\n}\n</code></pre>\n<p>Whichever works best is largely a matter of both personal taste and the specific use case you're implementing.</p>\n<p>Note that each of these variations is supported by all browsers, including very very old ones!</p>\n<hr />\n<h3>A <code>while</code> loop</h3>\n<p>One alternative to a <code>for</code> loop is a <code>while</code> loop. To loop through an array, you could do this:</p>\n<pre><code>var key = 0;\nwhile(value = myArray[key++]){\n    console.log(value);\n}\n</code></pre>\n<p>Like traditional <code>for</code> loops, <code>while</code> loops are supported by even the oldest of browsers.</p>\n<p>Also, note that every while loop can be rewritten as a <code>for</code> loop. For example, the <code>while</code> loop hereabove behaves the exact same way as this <code>for</code>-loop:</p>\n<pre><code>for(var key = 0; value = myArray[key++];){\n    console.log(value);\n}\n</code></pre>\n<hr />\n<h3><code>For...in</code> and <code>for...of</code></h3>\n<p>In JavaScript, you can also do this:</p>\n<pre><code>for (i in myArray) {\n    console.log(myArray[i]);\n}\n</code></pre>\n<p>This should be used with care, however, as it doesn't behave the same as a traditional <code>for</code> loop in all cases, and there are potential side-effects that need to be considered. See <strong><a href=\"https://stackoverflow.com/questions/500504/why-is-using-for-in-with-array-iteration-such-a-bad-idea\">Why is using &quot;for...in&quot; for array iteration a bad idea?</a></strong> for more details.</p>\n<p>As an alternative to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"nofollow noreferrer\"><strong><code>for...in</code></strong></a>, there's now also for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow noreferrer\"><strong><code>for...of</code></strong></a>. The following example shows the difference between a <code>for...of</code> loop and a <code>for...in</code> loop:</p>\n<pre><code>var myArray = [3, 5, 7];\nmyArray.foo = &quot;hello&quot;;\n\nfor (var i in myArray) {\n  console.log(i); // logs 0, 1, 2, &quot;foo&quot;\n}\n\nfor (var i of myArray) {\n  console.log(i); // logs 3, 5, 7\n}\n</code></pre>\n<p>Additionally, you need to consider that no version of Internet Explorer supports <code>for...of</code> (<a href=\"https://www.microsoft.com/en-us/windows/microsoft-edge\" rel=\"nofollow noreferrer\"><strong>Edge 12+</strong></a> does) and that <code>for...in</code> requires at least Internet Explorer 10.</p>\n<hr />\n<h3><code>Array.prototype.forEach()</code></h3>\n<p>An alternative to <code>for</code>-loops is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\"><strong><code>Array.prototype.forEach()</code></strong></a>, which uses the following syntax:</p>\n<pre><code>myArray.forEach(function(value, key, myArray) {\n    console.log(value);\n});\n</code></pre>\n<p><code>Array.prototype.forEach()</code> is supported by all modern browsers, as well as Internet Explorer 9 and later.</p>\n<hr />\n<h3>Libraries</h3>\n<p>Finally, many utility libraries also have their own <code>foreach</code> variation. AFAIK, the three most popular ones are these:</p>\n<p><a href=\"http://api.jquery.com/jquery.each/\" rel=\"nofollow noreferrer\"><strong><code>jQuery.each()</code></strong></a>, in <a href=\"https://jquery.com/\" rel=\"nofollow noreferrer\"><strong>jQuery</strong></a>:</p>\n<pre><code>$.each(myArray, function(key, value) {\n    console.log(value);\n});\n</code></pre>\n<p><a href=\"http://underscorejs.org/#each\" rel=\"nofollow noreferrer\"><strong><code>_.each()</code></strong></a>, in <a href=\"http://underscorejs.org/\" rel=\"nofollow noreferrer\"><strong>Underscore.js</strong></a>:</p>\n<pre><code>_.each(myArray, function(value, key, myArray) {\n    console.log(value);\n});\n</code></pre>\n<p><a href=\"https://lodash.com/docs#forEach\" rel=\"nofollow noreferrer\"><strong><code>_.forEach()</code></strong></a>, in <a href=\"https://lodash.com/\" rel=\"nofollow noreferrer\"><strong>Lodash</strong></a>:</p>\n<pre><code>_.forEach(myArray, function(value, key) {\n    console.log(value);\n});\n</code></pre>\n"},{"score":9,"body":"<p>Short answer: yes. You can do with this:</p>\n\n<pre><code>var myArray = [\"element1\", \"element2\", \"element3\", \"element4\"];\n\nfor (i = 0; i &lt; myArray.length; i++) {\n  console.log(myArray[i]);\n}\n</code></pre>\n\n<p>In a browser console, you can see something like \"element1\", \"element2\", etc., printed.</p>\n"},{"score":12,"body":"<p>If you want to use jQuery, it has a nice example in its documentation:</p>\n\n<pre><code> $.each([ 52, 97 ], function( index, value ) {\n      alert( index + \": \" + value );\n });\n</code></pre>\n"},{"score":4,"body":"<p>It is better to use a sequential <code>for</code> loop:</p>\n\n<pre><code>for (var i = 0; i &lt; myStringArray.length; i++) {\n    // Do something\n}\n</code></pre>\n"},{"score":14,"body":"<p>There are a couple of ways to do it in JavaScript. The first two examples are JavaScript samples. The third one makes use of a JavaScript library, that is, jQuery making use of the <code>.each()</code> function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\nfor(var i in myStringArray) {\r\n  alert(myStringArray[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\nfor (var i=0; i &lt; myStringArray.length; i++) {\r\n  alert(myStringArray[i]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var myStringArray = [\"hello\", \"World\"];\r\n$.each(myStringArray, function(index, value){\r\n  alert(value);\r\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":8,"body":"<pre><code>var myStringArray = [\"hello\", \"World\"];\nmyStringArray.forEach(function(val, index){\n   console.log(val, index);\n})\n</code></pre>\n"},{"score":5,"body":"<pre><code>var obj = [\"one\",\"two\",\"three\"];\n\nfor(x in obj){\n    console.log(obj[x]);\n}\n</code></pre>\n"},{"score":28,"body":"<p>Array loop:</p>\n\n<pre><code>for(var i = 0; i &lt; things.length; i++){\n    var thing = things[i];\n    console.log(thing);\n}\n</code></pre>\n\n<p>Object loop:</p>\n\n<pre><code>for(var prop in obj){\n    var propValue = obj[prop];\n    console.log(propValue);\n}\n</code></pre>\n"},{"score":12,"body":"<p>In JavaScript, there are so many solutions to loop an array.</p>\n\n<p>The code below are popular ones</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>/** Declare inputs */\r\nconst items = ['Hello', 'World']\r\n\r\n/** Solution 1. Simple for */\r\nconsole.log('solution 1. simple for')\r\n\r\nfor (let i = 0; i &lt; items.length; i++) {\r\n  console.log(items[i])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 2. Simple while */\r\nconsole.log('solution 2. simple while')\r\n\r\nlet i = 0\r\nwhile (i &lt; items.length) {\r\n  console.log(items[i++])\r\n}\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 3. forEach*/\r\nconsole.log('solution 3. forEach')\r\n\r\nitems.forEach(item =&gt; {\r\n  console.log(item)\r\n})\r\n\r\nconsole.log()\r\nconsole.log()\r\n\r\n/** Solution 4. for-of*/\r\nconsole.log('solution 4. for-of')\r\n\r\nfor (const item of items) {\r\n  console.log(item)\r\n}\r\n\r\nconsole.log()\r\nconsole.log()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":12,"body":"<p>The best way in my opinion is to use the Array.forEach function. If you cannot use that I would suggest to get the polyfill from MDN. To make it available, it is certainly the safest way to iterate over an array in JavaScript.</p>\n\n<p><em><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\">Array.prototype.forEach()</a></em></p>\n\n<p>So as others has suggested, this is almost always what you want:</p>\n\n<pre><code>var numbers = [1,11,22,33,44,55,66,77,88,99,111];\nvar sum = 0;\nnumbers.forEach(function(n){\n  sum += n;\n});\n</code></pre>\n\n<p>This ensures that anything you need in the scope of processing the array stays within that scope, and that you are only processing the values of the array, not the object properties and other members, which is what <code>for ..</code> in does.</p>\n\n<p>Using a regular C-style <code>for</code> loop works in most cases. It is just important to remember that everything within the loop shares its scope with the rest of your program, the { } does not create a new scope.</p>\n\n<p>Hence:</p>\n\n<pre><code>var sum = 0;\nvar numbers = [1,11,22,33,44,55,66,77,88,99,111];\n\nfor(var i = 0; i&lt;numbers.length; ++i){\n  sum += numbers[i];\n}\n\nalert(i);\n</code></pre>\n\n<p>will output \"11\" - which may or may not be what you want.</p>\n\n<p>A working jsFiddle example:\n<a href=\"https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/workingClassHacker/pxpv2dh5/7/</a></p>\n"},{"score":29,"body":"<p><strong>Yes</strong>, you can do the same in JavaScript using a loop, but <strong>not limited</strong> to that. There are many ways to do a loop over arrays in JavaScript. Imagine you have this array below, and you'd like to do a loop over it:</p>\n<pre><code>var arr = [1, 2, 3, 4, 5];\n</code></pre>\n<p>These are the solutions:</p>\n<p><strong>1) For loop</strong></p>\n<p>A <code>for</code> loop is a common way looping through arrays in JavaScript, but it is no considered as the fastest solutions for large arrays:</p>\n<pre><code>for (var i=0, l=arr.length; i&lt;l; i++) {\n  console.log(arr[i]);\n}\n</code></pre>\n<p><strong>2) While loop</strong></p>\n<p>A while loop is considered as the fastest way to loop through long arrays, but it is usually less used in the JavaScript code:</p>\n<pre><code>let i=0;\n\nwhile (arr.length&gt;i) {\n    console.log(arr[i]);\n    i++;\n}\n</code></pre>\n<p><strong>3) Do while</strong><br>\nA <code>do while</code> is doing the same thing as <code>while</code> with some syntax difference as below:</p>\n<pre><code>let i=0;\ndo {\n  console.log(arr[i]);\n  i++;\n}\nwhile (arr.length&gt;i);\n</code></pre>\n<p>These are the main ways to do JavaScript loops, but there are a few more ways to do that.</p>\n<p>Also we use a <code>for in</code> loop for looping over objects in JavaScript.</p>\n<p>Also look at the <code>map()</code>, <code>filter()</code>, <code>reduce()</code>, etc. functions on an Array in JavaScript. They may do things much faster and better than using <code>while</code> and <code>for</code>.</p>\n<p>This is a good article if you like to learn more about the asynchronous functions over arrays in JavaScript.</p>\n<blockquote>\n<p>Functional programming has been making quite a splash in the\ndevelopment world these days. And for good reason: Functional\ntechniques can help you write more declarative code that is easier to\nunderstand at a glance, refactor, and test.</p>\n<p>One of the cornerstones of functional programming is its special use\nof lists and list operations. And those things are exactly what the\nsound like they are: arrays of things, and the stuff you do to them.\nBut the functional mindset treats them a bit differently than you\nmight expect.</p>\n<p>This article will take a close look at what I like to call the &quot;big\nthree&quot; list operations: map, filter, and reduce. Wrapping your head\naround these three functions is an important step towards being able\nto write clean functional code, and opens the doors to the vastly\npowerful techniques of functional and reactive programming.</p>\n<p>It also means you'll never have to write a for loop again.</p>\n</blockquote>\n<p>Read more&gt;&gt; <a href=\"https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209\" rel=\"nofollow noreferrer\">here</a>:</p>\n"},{"score":7,"body":"<p>It seems that all the variants were listed, except <code>forEach</code> by <a href=\"https://lodash.com/docs/4.17.4\" rel=\"nofollow noreferrer\">lodash</a>:</p>\n\n<pre><code>_.forEach([1, 2], (value) =&gt; {\n  console.log(value);\n});\n</code></pre>\n"},{"score":7,"body":"<p>Just a simple one-line solution:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>arr = [\"table\", \"chair\"];\r\n\r\n// Solution\r\narr.map((e) =&gt; {\r\n  console.log(e);\r\n  return e;\r\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":38,"body":"<p>Some use cases of looping through an array in <strong>the functional programming way</strong> in JavaScript:</p>\n\n<h3>1. Just loop through an array</h3>\n\n<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];\n\nmyArray.forEach((element, index, array) =&gt; {\n    console.log(element.x); // 100, 200, 300\n    console.log(index); // 0, 1, 2\n    console.log(array); // same myArray object 3 times\n});\n</code></pre>\n\n<p>Note: Array.prototype.forEach() is not a functional way strictly speaking, as the function it takes as the input parameter is not supposed to return a value, which thus cannot be regarded as a pure function.</p>\n\n<h3>2. Check if any of the elements in an array pass a test</h3>\n\n<pre><code>const people = [\n    {name: 'John', age: 23}, \n    {name: 'Andrew', age: 3}, \n    {name: 'Peter', age: 8}, \n    {name: 'Hanna', age: 14}, \n    {name: 'Adam', age: 37}];\n\nconst anyAdult = people.some(person =&gt; person.age &gt;= 18);\nconsole.log(anyAdult); // true\n</code></pre>\n\n<h3>3. Transform to a new array</h3>\n\n<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];\n\nconst newArray= myArray.map(element =&gt; element.x);\nconsole.log(newArray); // [100, 200, 300]\n</code></pre>\n\n<p>Note: The map() method creates a new array with the results of calling a provided function on every element in the calling array.</p>\n\n<h3>4. Sum up a particular property, and calculate its average</h3>\n\n<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];\n\nconst sum = myArray.map(element =&gt; element.x).reduce((a, b) =&gt; a + b, 0);\nconsole.log(sum); // 600 = 0 + 100 + 200 + 300\n\nconst average = sum / myArray.length;\nconsole.log(average); // 200\n</code></pre>\n\n<h3>5. Create a new array based on the original but without modifying it</h3>\n\n<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];\n\nconst newArray= myArray.map(element =&gt; {\n    return {\n        ...element,\n        x: element.x * 2\n    };\n});\n\nconsole.log(myArray); // [100, 200, 300]\nconsole.log(newArray); // [200, 400, 600]\n</code></pre>\n\n<h3>6. Count the number of each category</h3>\n\n<pre><code>const people = [\n    {name: 'John', group: 'A'}, \n    {name: 'Andrew', group: 'C'}, \n    {name: 'Peter', group: 'A'}, \n    {name: 'James', group: 'B'}, \n    {name: 'Hanna', group: 'A'}, \n    {name: 'Adam', group: 'B'}];\n\nconst groupInfo = people.reduce((groups, person) =&gt; {\n    const {A = 0, B = 0, C = 0} = groups;\n    if (person.group === 'A') {\n        return {...groups, A: A + 1};\n    } else if (person.group === 'B') {\n        return {...groups, B: B + 1};\n    } else {\n        return {...groups, C: C + 1};\n    }\n}, {});\n\nconsole.log(groupInfo); // {A: 3, C: 1, B: 2}\n</code></pre>\n\n<h3>7. Retrieve a subset of an array based on particular criteria</h3>\n\n<pre><code>const myArray = [{x:100}, {x:200}, {x:300}];\n\nconst newArray = myArray.filter(element =&gt; element.x &gt; 250);\nconsole.log(newArray); // [{x:300}] \n</code></pre>\n\n<p>Note: The filter() method creates a new array with all elements that pass the test implemented by the provided function.</p>\n\n<h3>8. Sort an array</h3>\n\n<pre><code>const people = [\n  { name: \"John\", age: 21 },\n  { name: \"Peter\", age: 31 },\n  { name: \"Andrew\", age: 29 },\n  { name: \"Thomas\", age: 25 }\n];\n\nlet sortByAge = people.sort(function (p1, p2) {\n  return p1.age - p2.age;\n});\n\nconsole.log(sortByAge);\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/scSsS.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/scSsS.png\" alt=\"enter image description here\"></a></p>\n\n<h3>9. Find an element in an array</h3>\n\n<pre><code>const people = [ {name: \"john\", age:23},\n                {name: \"john\", age:43},\n                {name: \"jim\", age:101},\n                {name: \"bob\", age:67} ];\n\nconst john = people.find(person =&gt; person.name === 'john');\nconsole.log(john);\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/ODT69.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ODT69.png\" alt=\"enter image description here\"></a></p>\n\n<p>The Array.prototype.find() method returns the value of the first element in the array that satisfies the provided testing function.</p>\n\n<h3>References</h3>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\" rel=\"noreferrer\">Array.prototype.some()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"noreferrer\">Array.prototype.forEach()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"noreferrer\">Array.prototype.map()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"noreferrer\">Array.prototype.filter()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\">Array.prototype.sort()</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\" rel=\"noreferrer\">Spread syntax</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\" rel=\"noreferrer\">Array.prototype.find()</a></li>\n</ul>\n"},{"score":24,"body":"<p>If anybody is interested in the performance side of the multiple mechanisms available for Array iterations, I've prepared the following JSPerf tests:</p>\n\n<p><a href=\"https://jsperf.com/fastest-array-iterator\" rel=\"nofollow noreferrer\">https://jsperf.com/fastest-array-iterator</a></p>\n\n<p><a href=\"https://i.stack.imgur.com/UOJ9F.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/UOJ9F.jpg\" alt=\"Performance results\"></a></p>\n\n<h2>Results:</h2>\n\n<p>The traditional <code>for()</code> iterator, is by far the fastest method, especially when used with the <strong>array length cached</strong>.</p>\n\n<pre><code>let arr = [1,2,3,4,5];\n\nfor(let i=0, size=arr.length; i&lt;size; i++){\n    // Do something\n}\n</code></pre>\n\n<p>The <code>Array.prototype.forEach()</code> and the <code>Array.prototype.map()</code> methods are the slowest approximations, probably as a consequence of the <strong>function call overhead</strong>.</p>\n"},{"score":3,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var array = ['hai', 'hello', 'how', 'are', 'you']\r\n$(document).ready(function () {\r\n  $('#clickButton').click(function () {\r\n    for (var i = 0; i &lt; array.length; i++) {\r\n      alert(array[i])\r\n    }\r\n  })\r\n})</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.8.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;input id=\"clickButton\" value=\"click Me\" type=\"button\"/&gt;\r\n&lt;div id=\"show\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":10,"body":"<p>The formal (and perhaps old) way is <code>Array.prototype.forEach(...)</code>:</p>\n<pre><code>var arr = [&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;mango&quot;];\narr.forEach(function(item, index, _) {\n   console.log(&quot;[&quot; + index + &quot;] = '&quot; + item + &quot;'&quot;);\n});\n</code></pre>\n"},{"score":12,"body":"<h1>Esoteric, but fast</h1>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a= [\"Hello\", \"World\"];\n\nwhile(a.length) { console.log( a.shift() ); }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Performance test</h2>\n<p>Today (2020-08-05) I perform a test on Chrome 84, Safari 13 and Firefox 78 on chosen solutions.</p>\n<h3>Conclusions</h3>\n<ul>\n<li><code>while</code> solution (A) is the fastest on all browsers for all arrays except the big one on Chrome (which is surprising).</li>\n<li>for medium arrays the <code>while</code> solution (A) is <strong>thousands</strong> of times faster than other solutions (!!!)</li>\n<li>The <code>while</code> solution (A) slows down on Chrome for arrays witch 30-40k elements</li>\n<li>The <code>for-in</code> solution (B) is slowest</li>\n</ul>\n<h3>Results</h3>\n<p><a href=\"https://i.stack.imgur.com/9w2rD.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/9w2rD.png\" alt=\"Enter image description here\" /></a></p>\n<h3>Details</h3>\n<p>I perform 3 tests:</p>\n<ul>\n<li>small - for 2 elements array (like OP) - you can run it <a href=\"https://jsbench.me/hqkd026yy8/1\" rel=\"nofollow noreferrer\">here</a></li>\n<li>medium - for 10K elements array and - you can run it <a href=\"https://jsbench.me/dpkdgzloiv/1\" rel=\"nofollow noreferrer\">here</a></li>\n<li>big - for 100K elements array - you can run it <a href=\"https://jsbench.me/nhkdh01b3y/1\" rel=\"nofollow noreferrer\">here</a></li>\n</ul>\n<p>The below snippet presents code used in the test.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(a) {\n  let r=0;\n  while(a.length) r+= a.shift().length;\n  return r;\n}\n\nfunction B(a) {\n  let r=0;\n  for(i in a) r+= a[i].length;\n  return r;\n}\n\nfunction C(a) {\n  let r=0;\n  for(x of a) r+= x.length;\n  return r;\n}\n\nfunction D(a) {\n  let r=0;\n  for (i=0; i&lt;a.length; ++i) r+= a[i].length;\n  return r;\n\n}\n\nfunction E(a) {\n  let r=0;\n  a.forEach(x=&gt; r+= x.length);\n  return r;\n}\n\nlet arr= [\"Hello\", \"World!\"];\n[A,B,C,D,E].forEach(f =&gt; console.log(`${f.name}: ${f([...arr])}`))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Here are example results for Chrome for a medium array:</p>\n<p><a href=\"https://i.stack.imgur.com/woTDb.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/woTDb.png\" alt=\"Enter image description here\" /></a></p>\n"},{"score":4,"body":"<h3>Array traversal cheatsheet in JavaScript</h3>\n<p>Given an array, you can traverse it one of the many ways as follows.</p>\n<p><strong>1. Classic <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" rel=\"nofollow noreferrer\"><code>for</code></a> loop</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\n\nfor (let i = 0; i &lt; myArray.length; i++) {\n  console.log(myArray[i]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>2. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\" rel=\"nofollow noreferrer\"><code>for...of</code></a></strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\n\nfor (const item of myArray) {\n  console.log(item);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>3. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow noreferrer\"><code>Array.prototype.forEach()</code></a></strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\n\nmyArray.forEach(item =&gt; {\n  console.log(item);\n});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>4. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\" rel=\"nofollow noreferrer\"><code>while</code></a> loop</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\nlet i = 0;\n\nwhile (i &lt; myArray.length) {\n  console.log(myArray[i]);\n  i++;\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>5. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while\" rel=\"nofollow noreferrer\"><code>do...while</code></a> loop</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\nlet i = 0;\n\ndo {\n  console.log(myArray[i]);\n  i++;\n} while (i &lt; myArray.length);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>6. Queue style</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\n\n\nwhile (myArray.length) {\n  console.log(myArray.shift());\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p><strong>7. Stack style</strong></p>\n<p><strong>Note:</strong> The list is printed reverse in this one.\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const myArray = ['Hello', 'World'];\n\nwhile (myArray.length) {\n  console.log(myArray.pop());\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<pre class=\"lang-js prettyprint-override\"><code>//Make array\nvar array = [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;,&quot;6&quot;,&quot;7&quot;,&quot;8&quot;,&quot;9&quot;,&quot;10&quot;]\n//Loop\nfor(var i = 0; i &lt; array.length; i++){\n console.log((i+1) + &quot; --&gt; &quot; + array[i])\n}\n</code></pre>\n<p>For the ACTUAL number for <code>i</code>, you need to change <code>(i+1)</code> to <code>i</code> or <code>(i)</code>, if you want. <br>\nHope this helped.</p>\n"}],"score":3311}