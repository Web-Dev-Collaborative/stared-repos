{"body":"<p>How can I get <code>windowWidth</code>, <code>windowHeight</code>, <code>pageWidth</code>, <code>pageHeight</code>, <code>screenWidth</code>, <code>screenHeight</code>, <code>pageX</code>, <code>pageY</code>, <code>screenX</code>, <code>screenY</code> which will work in all major browsers?</p>\n\n<p><img src=\"https://i.stack.imgur.com/6xPdH.png\" alt=\"screenshot describing which values are wanted\"></p>\n","title":"Get the size of the screen, current web page and browser window","answers":[{"score":1447,"body":"<p>You can get the size of the window or document with jQuery:</p>\n\n<pre><code>// Size of browser viewport.\n$(window).height();\n$(window).width();\n\n// Size of HTML document (same as pageHeight/pageWidth in screenshot).\n$(document).height();\n$(document).width();\n</code></pre>\n\n<p>For screen size you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/screen\" rel=\"noreferrer\"><code>screen</code></a> object:</p>\n\n<pre><code>window.screen.height;\nwindow.screen.width;\n</code></pre>\n"},{"score":22,"body":"<pre><code>function wndsize(){\n  var w = 0;var h = 0;\n  //IE\n  if(!window.innerWidth){\n    if(!(document.documentElement.clientWidth == 0)){\n      //strict mode\n      w = document.documentElement.clientWidth;h = document.documentElement.clientHeight;\n    } else{\n      //quirks mode\n      w = document.body.clientWidth;h = document.body.clientHeight;\n    }\n  } else {\n    //w3c\n    w = window.innerWidth;h = window.innerHeight;\n  }\n  return {width:w,height:h};\n}\nfunction wndcent(){\n  var hWnd = (arguments[0] != null) ? arguments[0] : {width:0,height:0};\n  var _x = 0;var _y = 0;var offsetX = 0;var offsetY = 0;\n  //IE\n  if(!window.pageYOffset){\n    //strict mode\n    if(!(document.documentElement.scrollTop == 0)){offsetY = document.documentElement.scrollTop;offsetX = document.documentElement.scrollLeft;}\n    //quirks mode\n    else{offsetY = document.body.scrollTop;offsetX = document.body.scrollLeft;}}\n    //w3c\n    else{offsetX = window.pageXOffset;offsetY = window.pageYOffset;}_x = ((wndsize().width-hWnd.width)/2)+offsetX;_y = ((wndsize().height-hWnd.height)/2)+offsetY;\n    return{x:_x,y:_y};\n}\nvar center = wndcent({width:350,height:350});\ndocument.write(center.x+';&lt;br&gt;');\ndocument.write(center.y+';&lt;br&gt;');\ndocument.write('&lt;DIV align=\"center\" id=\"rich_ad\" style=\"Z-INDEX: 10; left:'+center.x+'px;WIDTH: 350px; POSITION: absolute; TOP: '+center.y+'px; HEIGHT: 350px\"&gt;&lt;!--К сожалению, у Вас не установлен flash плеер.--&gt;&lt;/div&gt;');\n</code></pre>\n"},{"score":1004,"body":"<p>This has everything you need to know: <a href=\"https://andylangton.co.uk/blog/development/get-viewportwindow-size-width-and-height-javascript\" rel=\"noreferrer\">Get viewport/window size</a></p>\n\n<p>but in short:</p>\n\n<pre><code>var win = window,\n    doc = document,\n    docElem = doc.documentElement,\n    body = doc.getElementsByTagName('body')[0],\n    x = win.innerWidth || docElem.clientWidth || body.clientWidth,\n    y = win.innerHeight|| docElem.clientHeight|| body.clientHeight;\nalert(x + ' × ' + y);\n</code></pre>\n\n<p><strong><a href=\"http://fiddle.jshell.net/L6uPV/show/\" rel=\"noreferrer\">Fiddle</a></strong></p>\n\n<p>Please stop editing this answer. It's been edited 22 times now by different people to match their code format preference. It's also been pointed out that this isn't required if you only want to target modern browsers - if so you only need the following:</p>\n\n<pre><code>const width  = window.innerWidth || document.documentElement.clientWidth || \ndocument.body.clientWidth;\nconst height = window.innerHeight|| document.documentElement.clientHeight|| \ndocument.body.clientHeight;\n\nconsole.log(width, height);\n</code></pre>\n"},{"score":97,"body":"<p>A non-jQuery way to get the available screen dimension. <code>window.screen.width/height</code> has already been put up, but for responsive webdesign and completeness sake I think its worth to mention those attributes:</p>\n\n<pre><code>alert(window.screen.availWidth);\nalert(window.screen.availHeight);\n</code></pre>\n\n<p><a href=\"http://www.quirksmode.org/dom/w3c_cssom.html#t10\" rel=\"noreferrer\">http://www.quirksmode.org/dom/w3c_cssom.html#t10</a> :</p>\n\n<blockquote>\n  <p><strong>availWidth</strong> and <strong>availHeight</strong> - The available width and height on the\n  screen (excluding OS taskbars and such).</p>\n</blockquote>\n"},{"score":20,"body":"<p>You can also get the WINDOW width and height, avoiding browser toolbars and other stuff. It is the <strong>real usable area in browser's window</strong>.</p>\n\n<p>To do this, use:\n<code>window.innerWidth</code>  and  <code>window.innerHeight</code> properties (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\">see doc at w3schools</a>).</p>\n\n<p>In most cases it will be the best way, in example, to display a perfectly centred floating modal dialog. It allows you to calculate positions on window, no matter which resolution orientation or window size is using the browser.</p>\n"},{"score":497,"body":"<p>Here is a cross browser solution with pure <strong>JavaScript</strong> (<a href=\"http://www.w3schools.com/jsref/prop_win_innerheight.asp\" rel=\"noreferrer\">Source</a>): </p>\n\n<pre><code>var width = window.innerWidth\n|| document.documentElement.clientWidth\n|| document.body.clientWidth;\n\nvar height = window.innerHeight\n|| document.documentElement.clientHeight\n|| document.body.clientHeight;\n</code></pre>\n"},{"score":3,"body":"<p>Sometimes you need to see the width/height changes while resizing the window and inner content.</p>\n\n<p>For that I've written a little script that adds a log box that dynamicly monitors all the resizing and almost immediatly updates.</p>\n\n<p>It adds a valid HTML with fixed position and high z-index, but is small enough, so <strong>you can</strong>:</p>\n\n<ul>\n<li>use it on an <strong><em>actual</em> site</strong> </li>\n<li>use it for testing <strong>mobile/responsive</strong>\nviews</li>\n</ul>\n\n<p><br>Tested on: Chrome 40, IE11, but it is highly possible to work on other/older browsers too ... :)</p>\n\n<pre><code>  function gebID(id){ return document.getElementById(id); }\n  function gebTN(tagName, parentEl){ \n     if( typeof parentEl == \"undefined\" ) var parentEl = document;\n     return parentEl.getElementsByTagName(tagName);\n  }\n  function setStyleToTags(parentEl, tagName, styleString){\n    var tags = gebTN(tagName, parentEl);\n    for( var i = 0; i&lt;tags.length; i++ ) tags[i].setAttribute('style', styleString);\n  }\n  function testSizes(){\n    gebID( 'screen.Width' ).innerHTML = screen.width;\n    gebID( 'screen.Height' ).innerHTML = screen.height;\n\n    gebID( 'window.Width' ).innerHTML = window.innerWidth;\n    gebID( 'window.Height' ).innerHTML = window.innerHeight;\n\n    gebID( 'documentElement.Width' ).innerHTML = document.documentElement.clientWidth;\n    gebID( 'documentElement.Height' ).innerHTML = document.documentElement.clientHeight;\n\n    gebID( 'body.Width' ).innerHTML = gebTN(\"body\")[0].clientWidth;\n    gebID( 'body.Height' ).innerHTML = gebTN(\"body\")[0].clientHeight;  \n  }\n\n  var table = document.createElement('table');\n  table.innerHTML = \n       \"&lt;tr&gt;&lt;th&gt;SOURCE&lt;/th&gt;&lt;th&gt;WIDTH&lt;/th&gt;&lt;th&gt;x&lt;/th&gt;&lt;th&gt;HEIGHT&lt;/th&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;screen&lt;/td&gt;&lt;td id='screen.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='screen.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;window&lt;/td&gt;&lt;td id='window.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='window.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document&lt;br&gt;.documentElement&lt;/td&gt;&lt;td id='documentElement.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='documentElement.Height' /&gt;&lt;/tr&gt;\"\n      +\"&lt;tr&gt;&lt;td&gt;document.body&lt;/td&gt;&lt;td id='body.Width' /&gt;&lt;td&gt;x&lt;/td&gt;&lt;td id='body.Height' /&gt;&lt;/tr&gt;\"\n  ;\n\n  gebTN(\"body\")[0].appendChild( table );\n\n  table.setAttribute(\n     'style',\n     \"border: 2px solid black !important; position: fixed !important;\"\n     +\"left: 50% !important; top: 0px !important; padding:10px !important;\"\n     +\"width: 150px !important; font-size:18px; !important\"\n     +\"white-space: pre !important; font-family: monospace !important;\"\n     +\"z-index: 9999 !important;background: white !important;\"\n  );\n  setStyleToTags(table, \"td\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n  setStyleToTags(table, \"th\", \"color: black !important; border: none !important; padding: 5px !important; text-align:center !important;\");\n\n  table.style.setProperty( 'margin-left', '-'+( table.clientWidth / 2 )+'px' );\n\n  setInterval( testSizes, 200 );\n</code></pre>\n\n<p><strong>EDIT:</strong> Now styles are applied only to logger table element - not to all tables - also this is a <strong>jQuery-free</strong> solution :)</p>\n"},{"score":10,"body":"<p>If you need a truly bulletproof solution for the document width and height (the <code>pageWidth</code> and <code>pageHeight</code> in the picture), you might want to consider using a plugin of mine, <a href=\"https://github.com/hashchange/jquery.documentsize\" rel=\"nofollow noreferrer\">jQuery.documentSize</a>. </p>\n\n<p>It has just one purpose: to always return the correct document size, even in scenarios when jQuery and other methods <a href=\"https://github.com/hashchange/jquery.documentsize#what-does-it-do-that-jquery-doesnt\" rel=\"nofollow noreferrer\">fail</a>. Despite its name, you don't necessarily have to use jQuery – it is written in vanilla Javascript and <a href=\"https://github.com/hashchange/jquery.documentsize#dependencies-and-setup\" rel=\"nofollow noreferrer\">works without jQuery</a>, too.</p>\n\n<p>Usage:</p>\n\n<pre><code>var w = $.documentWidth(),\n    h = $.documentHeight();\n</code></pre>\n\n<p>for the global <code>document</code>. For other documents, e.g. in an embedded iframe you have access to, pass the document as a parameter:</p>\n\n<pre><code>var w = $.documentWidth( myIframe.contentDocument ),\n    h = $.documentHeight( myIframe.contentDocument );\n</code></pre>\n\n<p><strong>Update: now for window dimensions, too</strong></p>\n\n<p>Ever since version 1.1.0, jQuery.documentSize also handles window dimensions.</p>\n\n<p>That is necessary because </p>\n\n<ul>\n<li><code>$( window ).height()</code> is <a href=\"http://bugs.jquery.com/ticket/6724\" rel=\"nofollow noreferrer\" title=\"jQuery Ticket #6724: Wrong $(window).height() in mobile Safari (iPhone)\">buggy in iOS</a>, to the point of being useless</li>\n<li><code>$( window ).width()</code> and <code>$( window ).height()</code> are <a href=\"https://stackoverflow.com/questions/14388367/mobile-safari-window-height-url-bar-discrepancy/31655549#31655549\" title=\"Mobile Safari $(window).height() URL bar discrepancy – Stack Overflow\">unreliable on mobile</a> because they don't handle the effects of mobile zooming. </li>\n</ul>\n\n<p>jQuery.documentSize provides <code>$.windowWidth()</code> and <code>$.windowHeight()</code>, which solve these issues. For more, please check out <a href=\"https://github.com/hashchange/jquery.documentsize/blob/master/README.md#window-size\" rel=\"nofollow noreferrer\" title=\"Window size – jQuery.documentSize\">the documentation</a>.</p>\n"},{"score":68,"body":"<p>But when we talk about responsive screens and if we want to handle it using jQuery for some reason, </p>\n\n<pre><code>window.innerWidth, window.innerHeight\n</code></pre>\n\n<p>gives the correct measurement. Even it removes the scroll-bar's extra space and we don't need to worry about adjusting that space :) </p>\n"},{"score":5,"body":"<p>In some cases related with responsive layout <code>$(document).height()</code> can return wrong data that displays view port height only. \nFor example when some div#wrapper has height:100%, that #wrapper can be stretched by some block inside it. But it's height still will be like viewport height. In such situation you might use</p>\n\n<pre><code>$('#wrapper').get(0).scrollHeight\n</code></pre>\n\n<p>That represents actual size of wrapper.</p>\n"},{"score":2,"body":"<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen\" rel=\"nofollow\">Screen</a> object to get this.</p>\n\n<p>The following is an example of what it would return:</p>\n\n<pre><code>Screen {\n    availWidth: 1920,\n    availHeight: 1040,\n    width: 1920,\n    height: 1080,\n    colorDepth: 24,\n    pixelDepth: 24,\n    top: 414,\n    left: 1920,\n    availTop: 414,\n    availLeft: 1920\n}\n</code></pre>\n\n<p>To get your <code>screenWidth</code> variable, just use <code>screen.width</code>, same with <code>screenHeight</code>, you would just use <code>screen.height</code>.</p>\n\n<p>To get your window width and height, it would be <code>screen.availWidth</code> or <code>screen.availHeight</code> respectively.</p>\n\n<p>For the <code>pageX</code> and <code>pageY</code> variables, use <code>window.screenX or Y</code>. Note that this is from the <strong>VERY LEFT/TOP OF YOUR LEFT/TOP-est SCREEN</strong>. So if you have two screens of width <code>1920</code> then a window 500px from the left of the right screen would have an X value of <code>2420</code> (1920+500). <code>screen.width/height</code>, however, display the CURRENT screen's width or height.</p>\n\n<p>To get the width and height of your page, use jQuery's <code>$(window).height()</code> or <code>$(window).width()</code>.</p>\n\n<p>Again using jQuery, use <code>$(\"html\").offset().top</code> and <code>$(\"html\").offset().left</code> for your <code>pageX</code> and <code>pageY</code> values.</p>\n"},{"score":8,"body":"<p>I wrote a small javascript bookmarklet you can use to display the size. You can  easily add it to your browser and whenever you click it you will see the size in the right corner of your browser window.</p>\n\n<p>Here you find information how to use a bookmarklet \n<a href=\"https://en.wikipedia.org/wiki/Bookmarklet\" rel=\"noreferrer\">https://en.wikipedia.org/wiki/Bookmarklet</a> </p>\n\n<h2>Bookmarklet</h2>\n\n<pre><code>javascript:(function(){!function(){var i,n,e;return n=function(){var n,e,t;return t=\"background-color:azure; padding:1rem; position:fixed; right: 0; z-index:9999; font-size: 1.2rem;\",n=i('&lt;div style=\"'+t+'\"&gt;&lt;/div&gt;'),e=function(){return'&lt;p style=\"margin:0;\"&gt;width: '+i(window).width()+\" height: \"+i(window).height()+\"&lt;/p&gt;\"},n.html(e()),i(\"body\").prepend(n),i(window).resize(function(){n.html(e())})},(i=window.jQuery)?(i=window.jQuery,n()):(e=document.createElement(\"script\"),e.src=\"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\",e.onload=n,document.body.appendChild(e))}()}).call(this);\n</code></pre>\n\n<h2>Original Code</h2>\n\n<p>The original code is in coffee:</p>\n\n<pre><code>(-&gt;\n  addWindowSize = ()-&gt;\n    style = 'background-color:azure; padding:1rem; position:fixed; right: 0; z-index:9999; font-size: 1.2rem;'\n    $windowSize = $('&lt;div style=\"' + style + '\"&gt;&lt;/div&gt;')\n\n    getWindowSize = -&gt;\n      '&lt;p style=\"margin:0;\"&gt;width: ' + $(window).width() + ' height: ' + $(window).height() + '&lt;/p&gt;'\n\n    $windowSize.html getWindowSize()\n    $('body').prepend $windowSize\n    $(window).resize -&gt;\n      $windowSize.html getWindowSize()\n      return\n\n  if !($ = window.jQuery)\n    # typeof jQuery=='undefined' works too\n    script = document.createElement('script')\n    script.src = 'http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js'\n    script.onload = addWindowSize\n    document.body.appendChild script\n  else\n    $ = window.jQuery\n    addWindowSize()\n)()\n</code></pre>\n\n<p>Basically the code is prepending a small div which updates when you resize your window.</p>\n"},{"score":4,"body":"<p>I developed a library for knowing the real viewport size for desktops and mobiles browsers, because viewport sizes are inconsistents across devices and cannot rely on all the answers of that post (according to all the research I made about this) : <a href=\"https://github.com/pyrsmk/W\" rel=\"nofollow\">https://github.com/pyrsmk/W</a></p>\n"},{"score":21,"body":"<p>To check height and width of your current loaded page of any website using <strong>\"console\"</strong> or after clicking <strong>\"Inspect\"</strong>.</p>\n\n<p><strong>step 1</strong>:  Click the right button of mouse and click on 'Inspect' and then click 'console'</p>\n\n<p><strong>step 2</strong>: Make sure that your browser screen should be not in 'maximize' mode. If the browser screen is in 'maximize' mode, you need to first click the maximize button (present either at right or left top corner) and un-maximize it. </p>\n\n<p><strong>step 3</strong>: Now, write the following after the greater than sign ('>') i.e. </p>\n\n<pre><code>       &gt; window.innerWidth\n            output : your present window width in px (say 749)\n\n       &gt; window.innerHeight\n            output : your present window height in px (say 359)\n</code></pre>\n"},{"score":0,"body":"<h1>here is my solution!</h1>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// innerWidth\r\nconst screen_viewport_inner = () =&gt; {\r\n    let w = window,\r\n        i = `inner`;\r\n    if (!(`innerWidth` in window)) {\r\n        i = `client`;\r\n        w = document.documentElement || document.body;\r\n    }\r\n    return {\r\n        width: w[`${i}Width`],\r\n        height: w[`${i}Height`]\r\n    }\r\n};\r\n\r\n\r\n// outerWidth\r\nconst screen_viewport_outer = () =&gt; {\r\n    let w = window,\r\n        o = `outer`;\r\n    if (!(`outerWidth` in window)) {\r\n        o = `client`;\r\n        w = document.documentElement || document.body;\r\n    }\r\n    return {\r\n        width: w[`${o}Width`],\r\n        height: w[`${o}Height`]\r\n    }\r\n};\r\n\r\n// style\r\nconst console_color = `\r\n    color: rgba(0,255,0,0.7);\r\n    font-size: 1.5rem;\r\n    border: 1px solid red;\r\n`;\r\n\r\n\r\n\r\n// testing\r\nconst test = () =&gt; {\r\n    let i_obj = screen_viewport_inner();\r\n    console.log(`%c screen_viewport_inner = \\n`, console_color, JSON.stringify(i_obj, null, 4));\r\n    let o_obj = screen_viewport_outer();\r\n    console.log(`%c screen_viewport_outer = \\n`, console_color, JSON.stringify(o_obj, null, 4));\r\n};\r\n\r\n// IIFE\r\n(() =&gt; {\r\n    test();\r\n})();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>This how I managed to get the screen width in React JS Project:</p>\n\n<p>If width is equal to 1680 then return 570 else return 200</p>\n\n<pre><code>var screenWidth = window.screen.availWidth;\n\n&lt;Label style={{ width: screenWidth == \"1680\" ? 570 : 200, color: \"transparent\" }}&gt;a  &lt;/Label&gt;\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth\" rel=\"nofollow noreferrer\">Screen.availWidth</a></p>\n"},{"score":6,"body":"<p>Complete guide related to Screen sizes</p>\n\n<p><strong>JavaScript</strong></p>\n\n<p><strong><em>For height:</em></strong></p>\n\n<pre><code>document.body.clientHeight  // Inner height of the HTML document body, including padding \n                            // but not the horizontal scrollbar height, border, or margin\n\nscreen.height               // Device screen height (i.e. all physically visible stuff)\nscreen.availHeight          // Device screen height minus the operating system taskbar (if present)\nwindow.innerHeight          // The current document's viewport height, minus taskbars, etc.\nwindow.outerHeight          // Height the current window visibly takes up on screen \n                            // (including taskbars, menus, etc.)\n</code></pre>\n\n<p><em>Note: When the window is maximized this will equal screen.availHeight</em></p>\n\n<p><strong><em>For width:</em></strong> </p>\n\n<pre><code>document.body.clientWidth   // Full width of the HTML page as coded, minus the vertical scroll bar\nscreen.width                // Device screen width (i.e. all physically visible stuff)\nscreen.availWidth           // Device screen width, minus the operating system taskbar (if present)\nwindow.innerWidth           // The browser viewport width (including vertical scroll bar, includes padding but not border or margin)\nwindow.outerWidth           // The outer window width (including vertical scroll bar,\n                            // toolbars, etc., includes padding and border but not margin)\n</code></pre>\n\n<p><strong><em>Jquery</em></strong></p>\n\n<p><strong>For height:</strong></p>\n\n<pre><code>$(document).height()    // Full height of the HTML page, including content you have to \n                        // scroll to see\n\n$(window).height()      // The current document's viewport height, minus taskbars, etc.\n$(window).innerHeight() // The current document's viewport height, minus taskbars, etc.\n$(window).outerHeight() // The current document's viewport height, minus taskbars, etc.                         \n</code></pre>\n\n<p><strong>For width:</strong></p>\n\n<pre><code>$(document).width()     // The browser viewport width, minus the vertical scroll bar\n$(window).width()       // The browser viewport width (minus the vertical scroll bar)\n$(window).innerWidth()  // The browser viewport width (minus the vertical scroll bar)\n$(window).outerWidth()  // The browser viewport width (minus the vertical scroll bar)\n</code></pre>\n\n<p>Reference: <a href=\"https://help.optimizely.com/Build_Campaigns_and_Experiments/Use_screen_measurements_to_design_for_responsive_breakpoints\" rel=\"noreferrer\">https://help.optimizely.com/Build_Campaigns_and_Experiments/Use_screen_measurements_to_design_for_responsive_breakpoints</a></p>\n"},{"score":3,"body":"<p>With the introduction of <code>globalThis</code> in <a href=\"https://medium.com/javascript-in-plain-english/new-features-in-es2020-you-should-check-b4974d9d7edc\" rel=\"nofollow noreferrer\">ES2020</a> you can use properties like.</p>\n\n<p><strong>For screen size:</strong></p>\n\n<pre><code>globalThis.screen.availWidth \nglobalThis.screen.availHeight\n</code></pre>\n\n<p><strong>For Window Size</strong></p>\n\n<pre><code>globalThis.outerWidth\nglobalThis.outerHeight\n</code></pre>\n\n<p><strong>For Offset:</strong></p>\n\n<pre><code>globalThis.pageXOffset\nglobalThis.pageYOffset\n</code></pre>\n\n<p>...&amp; so on.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>alert(\"Screen Width: \"+ globalThis.screen.availWidth +\"\\nScreen Height: \"+ globalThis.screen.availHeight)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":16,"body":"<h1>Full 2020</h1>\n<p>I am surprised that question have about 10 years and it looks like so far nobody has given a full answer (with 10 values) yet. So I carefully analyse OP question (especially picture) and have some remarks</p>\n<ul>\n<li>center of coordinate system <code>(0,0)</code> is in the viewport (browser window without bars and main borders) top left corner and axes are directed to right and down (what was marked on OP picture) so the values of <code>pageX, pageY, screenX, screenY</code> must be negative (or zero if page is small or not scrolled)</li>\n<li>for <code>screenHeight/Width</code> OP wants to count screen height/width including system menu bar (eg. in MacOs) - this is why we NOT use <code>.availWidth/Height</code> (which not count it)</li>\n<li>for <code>windowWidth/Height</code> OP don't want to count size of scroll bars so we use <code>.clientWidth/Height</code></li>\n<li>the <code>screenY</code> - in below solution we add to position of top left browser corner (<code>window.screenY</code>) the height of its menu/tabls/url bar). But it is difficult to calculate that value if download-bottom bar appears in browser and/or if developer console is open on page bottom - in that case this value will be increased of size of that bar/console height in below solution. Probably it is impossible to read value of bar/console height to make correction (without some trick like asking user to close that bar/console before measurements...)</li>\n<li><code>pageWidth</code> - in case when pageWidth is smaller than windowWidth we need to manually calculate size of <code>&lt;body&gt;</code> children elements to get this value (we do example calculation in <code>contentWidth</code> in below solution - but in general this can be difficult for that case)</li>\n<li>for simplicity I assume that <code>&lt;body&gt;</code> margin=0 - if not then you should consider this values when calculate <code>pageWidth/Height</code> and <code>pageX/Y</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sizes() {\n  let contentWidth = [...document.body.children].reduce( \n    (a, el) =&gt; Math.max(a, el.getBoundingClientRect().right), 0) \n    - document.body.getBoundingClientRect().x;\n\n  return {\n    windowWidth:  document.documentElement.clientWidth,\n    windowHeight: document.documentElement.clientHeight,\n    pageWidth:    Math.min(document.body.scrollWidth, contentWidth),\n    pageHeight:   document.body.scrollHeight,\n    screenWidth:  window.screen.width,\n    screenHeight: window.screen.height,\n    pageX:        document.body.getBoundingClientRect().x,\n    pageY:        document.body.getBoundingClientRect().y,\n    screenX:     -window.screenX,\n    screenY:     -window.screenY - (window.outerHeight-window.innerHeight),\n  }\n}\n\n\n\n// TEST\n\nfunction show() {\n  console.log(sizes());\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body { margin: 0 }\n.box { width: 3000px; height: 4000px; background: red; }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"box\"&gt;\n  CAUTION: stackoverflow snippet gives wrong values for screenX-Y, \n  but if you copy its code to your page directly the values will be right&lt;br&gt;\n  &lt;button onclick=\"show()\" style=\"\"&gt;CALC&lt;/button&gt;\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>I test it on Chrome 83.0, Safari 13.1, Firefox 77.0 and Edge 83.0</p>\n"}],"score":2107}