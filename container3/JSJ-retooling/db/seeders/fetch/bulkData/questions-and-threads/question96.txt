{"body":"<p>I am trying to print an integer in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a> with commas as thousands separators. For example, I want to show the number 1234567 as \"1,234,567\". How would I go about doing this? </p>\n\n<p>Here is how I am doing it:</p>\n\n<pre><code>function numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n</code></pre>\n\n<p>Is there a simpler or more elegant way to do it? It would be nice if it works with floats also, but that is not necessary. It does not need to be locale-specific to decide between periods and commas. </p>\n","title":"How to print a number with commas as thousands separators in JavaScript","answers":[{"score":117,"body":"<p>I suggest using phpjs.org 's <a href=\"http://phpjs.org/functions/number_format:481\" rel=\"noreferrer\">number_format()</a></p>\n\n<pre><code>function number_format(number, decimals, dec_point, thousands_sep) {\n    // http://kevin.vanzonneveld.net\n    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n    // +     bugfix by: Michael White (http://getsprink.com)\n    // +     bugfix by: Benjamin Lupton\n    // +     bugfix by: Allan Jensen (http://www.winternet.no)\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n    // +     bugfix by: Howard Yeend\n    // +    revised by: Luke Smith (http://lucassmith.name)\n    // +     bugfix by: Diogo Resende\n    // +     bugfix by: Rival\n    // +      input by: Kheang Hok Chin (http://www.distantia.ca/)\n    // +   improved by: davook\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Jay Klehr\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\n    // +      input by: Amir Habibi (http://www.residence-mixte.com/)\n    // +     bugfix by: Brett Zamir (http://brett-zamir.me)\n    // +   improved by: Theriault\n    // +   improved by: Drew Noakes\n    // *     example 1: number_format(1234.56);\n    // *     returns 1: '1,235'\n    // *     example 2: number_format(1234.56, 2, ',', ' ');\n    // *     returns 2: '1 234,56'\n    // *     example 3: number_format(1234.5678, 2, '.', '');\n    // *     returns 3: '1234.57'\n    // *     example 4: number_format(67, 2, ',', '.');\n    // *     returns 4: '67,00'\n    // *     example 5: number_format(1000);\n    // *     returns 5: '1,000'\n    // *     example 6: number_format(67.311, 2);\n    // *     returns 6: '67.31'\n    // *     example 7: number_format(1000.55, 1);\n    // *     returns 7: '1,000.6'\n    // *     example 8: number_format(67000, 5, ',', '.');\n    // *     returns 8: '67.000,00000'\n    // *     example 9: number_format(0.9, 0);\n    // *     returns 9: '1'\n    // *    example 10: number_format('1.20', 2);\n    // *    returns 10: '1.20'\n    // *    example 11: number_format('1.20', 4);\n    // *    returns 11: '1.2000'\n    // *    example 12: number_format('1.2000', 3);\n    // *    returns 12: '1.200'\n    var n = !isFinite(+number) ? 0 : +number, \n        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\n        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,\n        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,\n        toFixedFix = function (n, prec) {\n            // Fix for IE parseFloat(0.55).toFixed(0) = 0;\n            var k = Math.pow(10, prec);\n            return Math.round(n * k) / k;\n        },\n        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\n    if (s[0].length &gt; 3) {\n        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\n    }\n    if ((s[1] || '').length &lt; prec) {\n        s[1] = s[1] || '';\n        s[1] += new Array(prec - s[1].length + 1).join('0');\n    }\n    return s.join(dec);\n}\n</code></pre>\n\n<hr>\n\n<p><strong>UPDATE 02/13/14</strong></p>\n\n<p>People have been reporting this doesn't work as expected, so I did a <a href=\"http://jsfiddle.net/drewnoakes/xc3qh35z/\" rel=\"noreferrer\">JS Fiddle</a> that includes automated tests.</p>\n\n<p><strong>Update 26/11/2017</strong></p>\n\n<p>Here's that fiddle as a Stack Snippet with slightly modified output:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function number_format(number, decimals, dec_point, thousands_sep) {\r\n    // http://kevin.vanzonneveld.net\r\n    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\r\n    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\r\n    // +     bugfix by: Michael White (http://getsprink.com)\r\n    // +     bugfix by: Benjamin Lupton\r\n    // +     bugfix by: Allan Jensen (http://www.winternet.no)\r\n    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\r\n    // +     bugfix by: Howard Yeend\r\n    // +    revised by: Luke Smith (http://lucassmith.name)\r\n    // +     bugfix by: Diogo Resende\r\n    // +     bugfix by: Rival\r\n    // +      input by: Kheang Hok Chin (http://www.distantia.ca/)\r\n    // +   improved by: davook\r\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\r\n    // +      input by: Jay Klehr\r\n    // +   improved by: Brett Zamir (http://brett-zamir.me)\r\n    // +      input by: Amir Habibi (http://www.residence-mixte.com/)\r\n    // +     bugfix by: Brett Zamir (http://brett-zamir.me)\r\n    // +   improved by: Theriault\r\n    // +   improved by: Drew Noakes\r\n    // *     example 1: number_format(1234.56);\r\n    // *     returns 1: '1,235'\r\n    // *     example 2: number_format(1234.56, 2, ',', ' ');\r\n    // *     returns 2: '1 234,56'\r\n    // *     example 3: number_format(1234.5678, 2, '.', '');\r\n    // *     returns 3: '1234.57'\r\n    // *     example 4: number_format(67, 2, ',', '.');\r\n    // *     returns 4: '67,00'\r\n    // *     example 5: number_format(1000);\r\n    // *     returns 5: '1,000'\r\n    // *     example 6: number_format(67.311, 2);\r\n    // *     returns 6: '67.31'\r\n    // *     example 7: number_format(1000.55, 1);\r\n    // *     returns 7: '1,000.6'\r\n    // *     example 8: number_format(67000, 5, ',', '.');\r\n    // *     returns 8: '67.000,00000'\r\n    // *     example 9: number_format(0.9, 0);\r\n    // *     returns 9: '1'\r\n    // *    example 10: number_format('1.20', 2);\r\n    // *    returns 10: '1.20'\r\n    // *    example 11: number_format('1.20', 4);\r\n    // *    returns 11: '1.2000'\r\n    // *    example 12: number_format('1.2000', 3);\r\n    // *    returns 12: '1.200'\r\n    var n = !isFinite(+number) ? 0 : +number, \r\n        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),\r\n        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,\r\n        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,\r\n        toFixedFix = function (n, prec) {\r\n            // Fix for IE parseFloat(0.55).toFixed(0) = 0;\r\n            var k = Math.pow(10, prec);\r\n            return Math.round(n * k) / k;\r\n        },\r\n        s = (prec ? toFixedFix(n, prec) : Math.round(n)).toString().split('.');\r\n    if (s[0].length &gt; 3) {\r\n        s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, sep);\r\n    }\r\n    if ((s[1] || '').length &lt; prec) {\r\n        s[1] = s[1] || '';\r\n        s[1] += new Array(prec - s[1].length + 1).join('0');\r\n    }\r\n    return s.join(dec);\r\n}\r\n\r\nvar exampleNumber = 1;\r\nfunction test(expected, number, decimals, dec_point, thousands_sep)\r\n{\r\n    var actual = number_format(number, decimals, dec_point, thousands_sep);\r\n    console.log(\r\n        'Test case ' + exampleNumber + ': ' +\r\n        '(decimals: ' + (typeof decimals === 'undefined' ? '(default)' : decimals) +\r\n        ', dec_point: \"' + (typeof dec_point === 'undefined' ? '(default)' : dec_point) + '\"' +\r\n        ', thousands_sep: \"' + (typeof thousands_sep === 'undefined' ? '(default)' : thousands_sep) + '\")'\r\n    );\r\n    console.log('  =&gt; ' + (actual === expected ? 'Passed' : 'FAILED') + ', got \"' + actual + '\", expected \"' + expected + '\".');\r\n    exampleNumber++;\r\n}\r\n\r\ntest('1,235',    1234.56);\r\ntest('1 234,56', 1234.56, 2, ',', ' ');\r\ntest('1234.57',  1234.5678, 2, '.', '');\r\ntest('67,00',    67, 2, ',', '.');\r\ntest('1,000',    1000);\r\ntest('67.31',    67.311, 2);\r\ntest('1,000.6',  1000.55, 1);\r\ntest('67.000,00000', 67000, 5, ',', '.');\r\ntest('1',        0.9, 0);\r\ntest('1.20',     '1.20', 2);\r\ntest('1.2000',   '1.20', 4);\r\ntest('1.200',    '1.2000', 3);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n  max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":3,"body":"<p>I think your solution is one of the shorter ones I've seen for this. I don't think there are any standard JavaScript functions to do this sort of thing, so you're probably on your own.</p>\n\n<p>I checked the CSS 3 specifications to see whether it's possible to do this in CSS, but unless you want every digit in its own <code>&lt;span&gt;</code>, I don't think that's possible.</p>\n\n<p>I did find one project on <a href=\"http://en.wikipedia.org/wiki/Google_Code\" rel=\"nofollow noreferrer\">Google Code</a> that looked promising: <a href=\"http://code.google.com/p/flexible-js-formatting/\" rel=\"nofollow noreferrer\">flexible-js-formatting</a>. I haven't used it, but it looks pretty flexible and has unit tests using <a href=\"https://github.com/pivotal/jsunit\" rel=\"nofollow noreferrer\">JsUnit</a>. The developer also has a lot of posts (though old) about this topic.</p>\n\n<p>Be sure to consider international users: lots of nations use a space as the separator and use the comma for separating the decimal from the integral part of the number. </p>\n"},{"score":3044,"body":"<p>I used the idea from Kerry's answer, but simplified it since I was just looking for something simple for my specific purpose. Here is what I did:</p>\n\n<pre><code>function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?&lt;!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nfunction test(x, expect) {\r\n    const result = numberWithCommas(x);\r\n    const pass = result === expect;\r\n    console.log(`${pass ? \"✓\" : \"ERROR ====&gt;\"} ${x} =&gt; ${result}`);\r\n    return pass;\r\n}\r\n\r\nlet failures = 0;\r\nfailures += !test(0,        \"0\");\r\nfailures += !test(100,      \"100\");\r\nfailures += !test(1000,     \"1,000\");\r\nfailures += !test(10000,    \"10,000\");\r\nfailures += !test(100000,   \"100,000\");\r\nfailures += !test(1000000,  \"1,000,000\");\r\nfailures += !test(10000000, \"10,000,000\");\r\nif (failures) {\r\n    console.log(`${failures} test(s) failed`);\r\n} else {\r\n    console.log(\"All tests passed\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n    max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>The regex uses 2 lookahead assertions: </p>\n\n<ul>\n<li>a positive one to look for any point in the string that has a multiple of 3 digits in a row after it, </li>\n<li>a negative assertion to make sure that point only has exactly a multiple of 3 digits. The replacement expression puts a comma there.</li>\n</ul>\n\n<p>For example, if you pass it <code>123456789.01</code>, the positive assertion will match every spot to the left of the 7 (since <code>789</code> is a multiple of 3 digits, <code>678</code> is a multiple of 3 digits, <code>567</code>, etc.). The negative assertion checks that the multiple of 3 digits does not have any digits after it. <code>789</code> has a period after it so it is exactly a multiple of 3 digits, so a comma goes there. <code>678</code> is a multiple of 3 digits but it has a <code>9</code> after it, so those 3 digits are part of a group of 4, and a comma does not go there. Similarly for <code>567</code>. <code>456789</code> is 6 digits, which is a multiple of 3, so a comma goes before that. <code>345678</code> is a multiple of 3, but it has a <code>9</code> after it, so no comma goes there. And so on. The <code>\\B</code> keeps the regex from putting a comma at the beginning of the string.</p>\n\n<p>@<a href=\"https://stackoverflow.com/users/1329075/neu-rah\">neu-rah</a> mentioned that this function adds commas in undesirable places if there are more than 3 digits after the decimal point. If this is a problem, you can use this function:</p>\n\n<pre><code>function numberWithCommas(x) {\n    var parts = x.toString().split(\".\");\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return parts.join(\".\");\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function numberWithCommas(x) {\r\n    var parts = x.toString().split(\".\");\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    return parts.join(\".\");\r\n}\r\n\r\nfunction test(x, expect) {\r\n    const result = numberWithCommas(x);\r\n    const pass = result === expect;\r\n    console.log(`${pass ? \"✓\" : \"ERROR ====&gt;\"} ${x} =&gt; ${result}`);\r\n    return pass;\r\n}\r\n\r\nlet failures = 0;\r\nfailures += !test(0              , \"0\");\r\nfailures += !test(0.123456       , \"0.123456\");\r\nfailures += !test(100            , \"100\");\r\nfailures += !test(100.123456     , \"100.123456\");\r\nfailures += !test(1000           , \"1,000\");\r\nfailures += !test(1000.123456    , \"1,000.123456\");\r\nfailures += !test(10000          , \"10,000\");\r\nfailures += !test(10000.123456   , \"10,000.123456\");\r\nfailures += !test(100000         , \"100,000\");\r\nfailures += !test(100000.123456  , \"100,000.123456\");\r\nfailures += !test(1000000        , \"1,000,000\");\r\nfailures += !test(1000000.123456 , \"1,000,000.123456\");\r\nfailures += !test(10000000       , \"10,000,000\");\r\nfailures += !test(10000000.123456, \"10,000,000.123456\");\r\nif (failures) {\r\n    console.log(`${failures} test(s) failed`);\r\n} else {\r\n    console.log(\"All tests passed\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n    max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>@<a href=\"https://stackoverflow.com/users/157247/t-j-crowder\">t.j.crowder</a> pointed out that now that JavaScript has lookbehind (<a href=\"https://caniuse.com/#feat=js-regexp-lookbehind\" rel=\"noreferrer\">support info</a>), it can be solved in the regular expression itself:</p>\n\n<pre><code>function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?&lt;!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?&lt;!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nfunction test(x, expect) {\r\n    const result = numberWithCommas(x);\r\n    const pass = result === expect;\r\n    console.log(`${pass ? \"✓\" : \"ERROR ====&gt;\"} ${x} =&gt; ${result}`);\r\n    return pass;\r\n}\r\n\r\nlet failures = 0;\r\nfailures += !test(0,               \"0\");\r\nfailures += !test(0.123456,        \"0.123456\");\r\nfailures += !test(100,             \"100\");\r\nfailures += !test(100.123456,      \"100.123456\");\r\nfailures += !test(1000,            \"1,000\");\r\nfailures += !test(1000.123456,     \"1,000.123456\");\r\nfailures += !test(10000,           \"10,000\");\r\nfailures += !test(10000.123456,    \"10,000.123456\");\r\nfailures += !test(100000,          \"100,000\");\r\nfailures += !test(100000.123456,   \"100,000.123456\");\r\nfailures += !test(1000000,         \"1,000,000\");\r\nfailures += !test(1000000.123456,  \"1,000,000.123456\");\r\nfailures += !test(10000000,        \"10,000,000\");\r\nfailures += !test(10000000.123456, \"10,000,000.123456\");\r\nif (failures) {\r\n    console.log(`${failures} test(s) failed`);\r\n} else {\r\n    console.log(\"All tests passed\");\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.as-console-wrapper {\r\n    max-height: 100% !important;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><code>(?&lt;!\\.\\d*)</code> is a negative lookbehind that says the match can't be preceded by a <code>.</code> followed by zero or more digits. The negative lookbehind is faster than the <code>split</code> and <code>join</code> solution (<a href=\"http://jsben.ch/umq99\" rel=\"noreferrer\">comparison</a>), at least in V8.</p>\n"},{"score":13,"body":"<p>Here's a simple function that inserts commas for thousand separators.  It uses array functions rather than a RegEx.</p>\n\n<pre><code>/**\n * Format a number as a string with commas separating the thousands.\n * @param num - The number to be formatted (e.g. 10000)\n * @return A string representing the formatted number (e.g. \"10,000\")\n */\nvar formatNumber = function(num) {\n    var array = num.toString().split('');\n    var index = -3;\n    while (array.length + index &gt; 0) {\n        array.splice(index, 0, ',');\n        // Decrement by 4 since we just added another unit to the array.\n        index -= 4;\n    }\n    return array.join('');\n};\n</code></pre>\n\n<p>CodeSandbox link with examples: <a href=\"https://codesandbox.io/s/p38k63w0vq\" rel=\"nofollow noreferrer\">https://codesandbox.io/s/p38k63w0vq</a></p>\n"},{"score":78,"body":"<p>This is a variation of @mikez302's answer, but modified to support numbers with decimals (per @neu-rah's feedback that numberWithCommas(12345.6789) -> \"12,345.6,789\" instead of \"12,345.6789\"</p>\n\n<pre><code>function numberWithCommas(n) {\n    var parts=n.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n}\n</code></pre>\n"},{"score":35,"body":"<p>Thanks to everyone for their replies. I have built off of some of the answers to make a more \"one-size-fits-all\" solution. </p>\n\n<p>The first snippet adds a function that mimics <a href=\"http://en.wikipedia.org/wiki/PHP\">PHP</a>'s <code>number_format()</code> to the Number prototype. If I am formatting a number, I usually want decimal places so the function takes in the number of decimal places to show. Some countries use commas as the decimal and decimals as the thousands separator so the function allows these separators to be set.</p>\n\n<pre><code>Number.prototype.numberFormat = function(decimals, dec_point, thousands_sep) {\n    dec_point = typeof dec_point !== 'undefined' ? dec_point : '.';\n    thousands_sep = typeof thousands_sep !== 'undefined' ? thousands_sep : ',';\n\n    var parts = this.toFixed(decimals).split('.');\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands_sep);\n\n    return parts.join(dec_point);\n}\n</code></pre>\n\n<p>You would use this as follows:</p>\n\n<pre><code>var foo = 5000;\nconsole.log(foo.numberFormat(2)); // us format: 5,000.00\nconsole.log(foo.numberFormat(2, ',', '.')); // european format: 5.000,00\n</code></pre>\n\n<p>I found that I often needed to get the number back for math operations, but parseFloat converts 5,000 to 5, simply taking the first sequence of integer values. So I created my own float conversion function and added it to the String prototype.</p>\n\n<pre><code>String.prototype.getFloat = function(dec_point, thousands_sep) {\n    dec_point = typeof dec_point !== 'undefined' ? dec_point : '.';\n    thousands_sep = typeof thousands_sep !== 'undefined' ? thousands_sep : ',';\n\n    var parts = this.split(dec_point);\n    var re = new RegExp(\"[\" + thousands_sep + \"]\");\n    parts[0] = parts[0].replace(re, '');\n\n    return parseFloat(parts.join(dec_point));\n}\n</code></pre>\n\n<p>Now you can use both functions as follows:</p>\n\n<pre><code>var foo = 5000;\nvar fooString = foo.numberFormat(2); // The string 5,000.00\nvar fooFloat = fooString.getFloat(); // The number 5000;\n\nconsole.log((fooString.getFloat() + 1).numberFormat(2)); // The string 5,001.00\n</code></pre>\n"},{"score":3,"body":"<p>I added tofixed to <strong>Aki143S</strong>'s solution.\nThis solution uses dots for thousands separators and comma for the precision.</p>\n\n<pre><code>function formatNumber( num, fixed ) { \n    var decimalPart;\n\n    var array = Math.floor(num).toString().split('');\n    var index = -3; \n    while ( array.length + index &gt; 0 ) { \n        array.splice( index, 0, '.' );              \n        index -= 4;\n    }\n\n    if(fixed &gt; 0){\n        decimalPart = num.toFixed(fixed).split(\".\")[1];\n        return array.join('') + \",\" + decimalPart; \n    }\n    return array.join(''); \n};\n</code></pre>\n\n<p>Examples;</p>\n\n<pre><code>formatNumber(17347, 0)  = 17.347\nformatNumber(17347, 3)  = 17.347,000\nformatNumber(1234563.4545, 3)  = 1.234.563,454\n</code></pre>\n"},{"score":4,"body":"<p>I think this function will take care of all the issues related to this problem.</p>\n\n<pre><code>function commaFormat(inputString) {\n    inputString = inputString.toString();\n    var decimalPart = \"\";\n    if (inputString.indexOf('.') != -1) {\n        //alert(\"decimal number\");\n        inputString = inputString.split(\".\");\n        decimalPart = \".\" + inputString[1];\n        inputString = inputString[0];\n        //alert(inputString);\n        //alert(decimalPart);\n\n    }\n    var outputString = \"\";\n    var count = 0;\n    for (var i = inputString.length - 1; i &gt;= 0 &amp;&amp; inputString.charAt(i) != '-'; i--) {\n        //alert(\"inside for\" + inputString.charAt(i) + \"and count=\" + count + \" and outputString=\" + outputString);\n        if (count == 3) {\n            outputString += \",\";\n            count = 0;\n        }\n        outputString += inputString.charAt(i);\n        count++;\n    }\n    if (inputString.charAt(0) == '-') {\n        outputString += \"-\";\n    }\n    //alert(outputString);\n    //alert(outputString.split(\"\").reverse().join(\"\"));\n    return outputString.split(\"\").reverse().join(\"\") + decimalPart;\n}\n</code></pre>\n"},{"score":0,"body":"<p>For Integers I used a very simple method:</p>\n\n<pre><code>var myNumber = 99999,\n    myString = myNumber + \"\";\n\nmyString.length &gt; 3 ? return myString.substring(0, myString.length - 3) + \",\" + \n    myString.substring(myString.length - 3) : return myString;\n</code></pre>\n"},{"score":2,"body":"<p>The solution from @user1437663 is great.</p>\n\n<p>Who really understands the solution is being prepared to understand complex regular expressions.</p>\n\n<p>A small improvement to make it more readable:</p>\n\n<pre><code>function numberWithCommas(x) {\n    var parts = x.toString().split(\".\");\n    return parts[0].replace(/\\B(?=(\\d{3})+(?=$))/g, \",\") + (parts[1] ? \".\" + parts[1] : \"\");\n}\n</code></pre>\n\n<p>The pattern starts with <strong>\\B</strong> to avoid use comma at the beginning of a word. Interestingly, the pattern is returned empty because <strong>\\B</strong> does not advance the \"cursor\" (the same applies to <strong>$</strong>).</p>\n\n<p>O <strong>\\B</strong> is followed by a less known resources but is a powerful feature from Perl's regular expressions.</p>\n\n<pre><code>            Pattern1 (? = (Pattern2) ).\n</code></pre>\n\n<p>The magic is that what is in parentheses (<em>Pattern2</em>) is a pattern that follows the previous pattern (<em>Pattern1</em>) but without advancing the cursor and also is not part of the pattern returned. It is a kind of future pattern. This is similar when someone looks forward but really doesn't walk! </p>\n\n<p>In this case <em>pattern2</em> is     </p>\n\n<pre><code>\\d{3})+(?=$)\n</code></pre>\n\n<p>It means 3 digits (one or more times) followed by the end of the string ($)</p>\n\n<p>Finally, <strong>Replace</strong> method changes all occurrences of the pattern found (empty string) for comma. This only happens in cases where the remaining piece is a multiple of 3 digits \n(such cases where future cursor reach the end of the origin).</p>\n"},{"score":2015,"body":"<p>I'm surprised nobody mentioned <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"noreferrer\">Number.prototype.toLocaleString</a>.\nIt's implemented in JavaScript 1.5 (which was introduced in 1999) so it's basically supported across all major browsers.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var n = 34523453.345\nn.toLocaleString()\n\"34,523,453.345\"\n</code></pre>\n\n<p>It also works in Node.js as of v0.12 via inclusion of <a href=\"https://github.com/andyearnshaw/Intl.js\" rel=\"noreferrer\">Intl</a></p>\n\n<p>Just pay attention that this function returns a string, not a number.</p>\n\n<p>If you want something different, <a href=\"http://numeraljs.com/\" rel=\"noreferrer\">Numeral.js</a> might be interesting.</p>\n"},{"score":13,"body":"<p>The following code uses char scan, so there's no regex. </p>\n\n<pre><code>function commafy( num){\n  var parts = (''+(num&lt;0?-num:num)).split(\".\"), s=parts[0], L, i=L= s.length, o='';\n  while(i--){ o = (i===0?'':((L-i)%3?'':',')) \n                  +s.charAt(i) +o }\n  return (num&lt;0?'-':'') + o + (parts[1] ? '.' + parts[1] : ''); \n}\n</code></pre>\n\n<p>It shows promising performance: <a href=\"http://jsperf.com/number-formatting-with-commas/5\" rel=\"noreferrer\">http://jsperf.com/number-formatting-with-commas/5</a></p>\n\n<p>2015.4.26: Minor fix to resolve issue when num&lt;0. See <a href=\"https://jsfiddle.net/runsun/p5tqqvs3/\" rel=\"noreferrer\">https://jsfiddle.net/runsun/p5tqqvs3/</a></p>\n"},{"score":-1,"body":"<p>Yet another..(for int's as the question asks)</p>\n\n<pre><code>function insertCommas(str)\n{\n    var a = str.split(\"\");\n    a.reverse();\n\n    var t, i = 0, arr = Array();\n\n    while (t = a.shift())\n    {\n       if (((i++ % 3) == 0) &amp;&amp; arr.length &gt; 0)\n           arr.unshift(\",\");\n       arr.unshift(t);\n    }\n\n    return arr.join(\"\");\n}\n</code></pre>\n"},{"score":3,"body":"<p>Lots of good answers already. Here's another, just for fun:</p>\n\n<pre><code>function format(num, fix) {\n    var p = num.toFixed(fix).split(\".\");\n    return p[0].split(\"\").reduceRight(function(acc, num, i, orig) {\n        if (\"-\" === num &amp;&amp; 0 === i) {\n            return num + acc;\n        }\n        var pos = orig.length - i - 1\n        return  num + (pos &amp;&amp; !(pos % 3) ? \",\" : \"\") + acc;\n    }, \"\") + (p[1] ? \".\" + p[1] : \"\");\n}\n</code></pre>\n\n<p>Some examples:</p>\n\n<pre><code>format(77.03453, 2); // \"77.03\"\nformat(78436589374); // \"78,436,589,374\"\nformat(784, 4);      // \"784.0000\"\nformat(-123456);     // \"-123,456\"\n</code></pre>\n"},{"score":14,"body":"<p>if you are dealing with currency values and formatting a lot then it might be worth to add tiny <a href=\"http://josscrowcroft.github.io/accounting.js/\">accounting.js</a> which handles lot of edge cases and localization:</p>\n\n<pre><code>// Default usage:\naccounting.formatMoney(12345678); // $12,345,678.00\n\n// European formatting (custom symbol and separators), could also use options object as second param:\naccounting.formatMoney(4999.99, \"€\", 2, \".\", \",\"); // €4.999,99\n\n// Negative values are formatted nicely, too:\naccounting.formatMoney(-500000, \"£ \", 0); // £ -500,000\n\n// Simple `format` string allows control of symbol position [%v = value, %s = symbol]:\naccounting.formatMoney(5318008, { symbol: \"GBP\",  format: \"%v %s\" }); // 5,318,008.00 GBP\n</code></pre>\n"},{"score":0,"body":"<p>Here is good solution with less coding...</p>\n\n<pre><code>var y = \"\";\nvar arr = x.toString().split(\"\");\nfor(var i=0; i&lt;arr.length; i++)\n{\n    y += arr[i];\n    if((arr.length-i-1)%3==0 &amp;&amp; i&lt;arr.length-1) y += \",\";\n}\n</code></pre>\n"},{"score":18,"body":"<p>The thousands separator can be inserted in an international-friendly manner using the browser's <code>Intl</code> object:</p>\n\n<pre><code>Intl.NumberFormat().format(1234);\n// returns \"1,234\" if the user's locale is en_US, for example\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\">MDN's article on NumberFormat</a> for more, you can specify locale behavior or default to the user's. This is a little more foolproof because it respects local differences; many countries use periods to separate digits while a comma denotes the decimals.</p>\n\n<p>Intl.NumberFormat isn't available in all browsers yet, but it works in latest Chrome, Opera, &amp; IE. Firefox's next release should support it. Webkit doesn't seem to have a timeline for implementation.</p>\n"},{"score":-7,"body":"<p>You could just use the <code>printf</code>-way, for example:</p>\n\n<pre><code>double number = 1234567;\nSystem.out.printf(\"%,.2f\" , number);\n</code></pre>\n"},{"score":0,"body":"<p>For indian numeric system</p>\n\n<pre><code>var number = \"323483.85\"\nvar decimal = number.split(\".\");\nvar res = (decimal[0].length&gt;3? numberWithCommas(decimal[0].substring(0,decimal[0].length-3))+ ',' :decimal[0]) + (decimal[0].length&gt;3?decimal[0].substring(decimal[0].length-3,decimal[0].length):'') + '.' + decimal[1];\n</code></pre>\n\n<p>Output: 3,23,483.85</p>\n"},{"score":5,"body":"<p>An alternative way, supporting decimals, different separators and negatives.</p>\n\n<pre><code>var number_format = function(number, decimal_pos, decimal_sep, thousand_sep) {\n    var ts      = ( thousand_sep == null ? ',' : thousand_sep )\n        , ds    = ( decimal_sep  == null ? '.' : decimal_sep )\n        , dp    = ( decimal_pos  == null ? 2   : decimal_pos )\n\n        , n     = Math.floor(Math.abs(number)).toString()\n\n        , i     = n.length % 3 \n        , f     = ((number &lt; 0) ? '-' : '') + n.substr(0, i)\n    ;\n\n    for(;i&lt;n.length;i+=3) {\n        if(i!=0) f+=ts;\n        f+=n.substr(i,3);\n    }\n\n    if(dp &gt; 0) \n        f += ds + parseFloat(number).toFixed(dp).split('.')[1]\n\n    return f;\n}\n</code></pre>\n\n<p>Some corrections by @Jignesh Sanghani, don't forget to upvote his comment.</p>\n"},{"score":73,"body":"<pre><code>function formatNumber (num) {\n    return num.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n}\n\nprint(formatNumber(2665));      // 2,665\nprint(formatNumber(102665));    // 102,665\nprint(formatNumber(111102665)); // 111,102,665\n</code></pre>\n"},{"score":7,"body":"<p>I Wrote this one before stumbling on this post. No regex and you can actually understand the code.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function(){\r\n  \r\n  function insertCommas(s) {\r\n\r\n    // get stuff before the dot\r\n    var d = s.indexOf('.');\r\n    var s2 = d === -1 ? s : s.slice(0, d);\r\n\r\n    // insert commas every 3 digits from the right\r\n    for (var i = s2.length - 3; i &gt; 0; i -= 3)\r\n      s2 = s2.slice(0, i) + ',' + s2.slice(i);\r\n\r\n    // append fractional part\r\n    if (d !== -1)\r\n      s2 += s.slice(d);\r\n\r\n    return s2;\r\n\r\n  }\r\n  \r\n  \r\n  $('#theDudeAbides').text( insertCommas('1234567.89012' ) );\r\n  \r\n  \r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;div id=\"theDudeAbides\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":5,"body":"<p>Let me try to improve <a href=\"https://stackoverflow.com/users/1286601/ukolka\" title=\"uKolka\">uKolka</a>'s <a href=\"https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript/17663871#17663871\" title=\"answer\">answer</a> and maybe help others save some time.</p>\n\n<p>Use <a href=\"http://numeraljs.com/\" rel=\"nofollow noreferrer\" title=\"Numeral.js\">Numeral.js</a>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.body.textContent = numeral(1234567).format('0,0');</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/numeral.js/1.4.5/numeral.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You should go with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow noreferrer\" title=\"Number.prototype.toLocaleString&#40;&#41;\">Number.prototype.toLocaleString&#40;&#41;</a> only if its <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#AutoCompatibilityTable\" rel=\"nofollow noreferrer\" title=\"browser compatibilty\">browser compatibilty</a> is not an issue.</p>\n"},{"score":23,"body":"<p>I think this is the shortest regular expression that does it:</p>\n\n<pre><code>/\\B(?=(\\d{3})+\\b)/g\n\n\"123456\".replace(/\\B(?=(\\d{3})+\\b)/g, \",\")\n</code></pre>\n\n<p>I checked it on a few numbers and it worked.</p>\n"},{"score":1,"body":"<p>I've adapted your code to work in TextBox (Input type=\"text\") so we can enter and delete digits in real time without losing cursor. It's works also if you select range when you delete. And you can use arrows and home/end buttons freely.<br/>\nThanks for saving my time!</p>\n\n<pre><code>//function controls number format as \"1,532,162.3264321\"\nfunction numberWithCommas(x) {\n    var e = e || window.event;\n    if (e.keyCode &gt;= '35' &amp;&amp; e.keyCode &lt;= '40') return; //skip arrow-keys\n    var selStart = x.selectionStart, selEnd = x.selectionEnd; //save cursor positions\n    var parts = x.value.toString().split(\".\");\n    var part0len = parts[0].length; //old length to check if new ',' would be added. Need for correcting new cursor position (+1 to right).\n\n    //if user deleted ',' - remove previous number instead (without selection)\n    if (x.selectionLength == 0 &amp;&amp; (e.keyCode == 8 || e.keyCode == 46)) {//if pressed 8-backspace or 46-delete button\n        var delPos = parts[0].search(/\\d{4}/);\n        if (delPos != -1) {//if found 4 digits in a row (',' is deleted)\n            if (e.keyCode == 8) {//if backspace flag\n                parts[0] = parts[0].slice(0, selStart - 1) + parts[0].slice(selEnd, parts[0].length);\n                selEnd--;\n                if (selStart &gt; selEnd) selStart = selEnd;\n            } else {\n                parts[0] = parts[0].slice(0, selStart) + parts[0].slice(selEnd + 1, parts[0].length);\n                selStart++;\n                if (selEnd &lt; selStart) selEnd = selStart;\n            }\n        }\n    }\n\n   var hasMinus = parts[0][0] == '-';\n   parts[0] = (hasMinus ? '-' : '') + parts[0].replace(/[^\\d]*/g, \"\"); //I'd like to clear old ',' to avoid things like 1,2,3,5,634.443216\n   parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"); //sets ',' between each 3 digits\n   if (part0len &lt; parts[0].length) { //move cursor to right if added new ','\n       selStart++;\n       selEnd++;\n   } else if (part0len &gt; parts[0].length) { //..or if removed last one ','\n       selStart--;\n       selEnd--;\n   }\n   x.value = parts.join(\".\");\n   x.setSelectionRange(selStart, selEnd); //restoring cursor position\n}\nfunction saveSelectionLength(x) {\n    x.selectionLength = x.selectionEnd - x.selectionStart;\n}\n</code></pre>\n\n<p>To use this just added two events - onKeyUp and onKeyDown</p>\n\n<pre><code>&lt;asp:TextBox runat=\"server\" ID=\"val\" Width=\"180px\" onKeyUp=\"numberWithCommas(this);\" onKeyDown=\"saveSelectionLength(this);\"/&gt;\n</code></pre>\n"},{"score":285,"body":"<p>Below are two different browser APIs that can transform <em>Numbers</em> into structured <em>Strings</em>. Keep in mind that not all users' machines have a <a href=\"https://en.wikipedia.org/wiki/Decimal_separator\" rel=\"nofollow noreferrer\"><strong>locale</strong> that uses commas in numbers</a>. To enforce commas to the output, any &quot;western&quot; <em>locale</em> may be used, such as <code>en-US</code></p>\n<pre><code>var number = 1234567890; // Example number to be converted\n</code></pre>\n<p>⚠️ Mind that javascript has a <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\" rel=\"nofollow noreferrer\">maximum integer</a> value of <code>9007199254740991</code></p>\n<hr />\n<h2><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow noreferrer\">toLocaleString</a></h2>\n<pre><code>// default behaviour on a machine with a local that uses commas for numbers\nnumber.toLocaleString(); // &quot;1,234,567,890&quot;\n\n// With custom settings, forcing a &quot;US&quot; locale to guarantee commas in output\nvar number2 = 1234.56789; // floating point example\nnumber2.toLocaleString('en-US', {maximumFractionDigits:2}) // &quot;1,234.57&quot;\n</code></pre>\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\" rel=\"nofollow noreferrer\">NumberFormat</a></h2>\n<pre><code>var nf = new Intl.NumberFormat();\nnf.format(number); // &quot;1,234,567,890&quot;\n</code></pre>\n<hr />\n<p>From what I checked (Firefox at least) they are both more or less same regarding performance.</p>\n"},{"score":0,"body":"<p>I thought I'd share a little trick which I'm using for large number formatting.\nInstead of inserting commas or spaces, I insert an empty but visible span in between the \"thousands\". This makes thousands easily visible, but it allows to copy/paste the input in the original format, without commas/spaces.</p>\n\n<pre><code>// This function accepts an integer, and produces a piece of HTML that shows it nicely with \n// some empty space at \"thousand\" markers. \n// Note, these space are not spaces, if you copy paste, they will not be visible.\nfunction valPrettyPrint(orgVal) {\n  // Save after-comma text, if present\n  var period = orgVal.indexOf(\".\");\n  var frac = period &gt;= 0 ? orgVal.substr(period) : \"\";\n  // Work on input as an integer\n  var val = \"\" + Math.trunc(orgVal);\n  var res = \"\";\n  while (val.length &gt; 0) {\n    res = val.substr(Math.max(0, val.length - 3), 3) + res;\n    val = val.substr(0, val.length - 3);\n    if (val.length &gt; 0) {\n        res = \"&lt;span class='thousandsSeparator'&gt;&lt;/span&gt;\" + res;\n    }\n  }\n  // Add the saved after-period information\n  res += frac;\n  return res;\n}\n</code></pre>\n\n<p>With this CSS:</p>\n\n<pre><code>.thousandsSeparator {\n  display : inline;\n  padding-left : 4px;\n}\n</code></pre>\n\n<p>See an example <a href=\"https://jsfiddle.net/marcinzukowski/ovfd83py/\" rel=\"nofollow\">JSFiddle.</a> </p>\n"},{"score":21,"body":"<p><code>Number.prototype.toLocaleString()</code> would have been awesome if it was provided natively by all browsers <em>(Safari)</em>. </p>\n\n<p>I checked all other answers but noone seemed to polyfill it. Here is a poc towards that, which is actually a combination of first two answers; if <code>toLocaleString</code> works it uses it, if it doesn't it uses a custom function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var putThousandsSeparators;\r\n\r\nputThousandsSeparators = function(value, sep) {\r\n  if (sep == null) {\r\n    sep = ',';\r\n  }\r\n  // check if it needs formatting\r\n  if (value.toString() === value.toLocaleString()) {\r\n    // split decimals\r\n    var parts = value.toString().split('.')\r\n    // format whole numbers\r\n    parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, sep);\r\n    // put them back together\r\n    value = parts[1] ? parts.join('.') : parts[0];\r\n  } else {\r\n    value = value.toLocaleString();\r\n  }\r\n  return value;\r\n};\r\n\r\nalert(putThousandsSeparators(1234567.890));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1,"body":"<p>If you happen to be using AngularJS, there's this currency filter that may definitely help: <a href=\"http://www.w3schools.com/angular/ng_filter_currency.asp\" rel=\"nofollow noreferrer\">http://www.w3schools.com/angular/ng_filter_currency.asp</a></p>\n"},{"score":-2,"body":"<p>This should work now ... edited to add decimal places if the number is a decimal.</p>\n\n<pre><code>&lt;script&gt;\n  function makedollars(mynumber)\n      {\n       mynumber = mynumber.toString();\n    var numberend=\"\";\n\n  if(mynumber.split('.').length&gt;1){\n       var mynumbersplit = mynumber.split('.');\n     mynumber = mynumbersplit[0];\n   numberend= mynumbersplit[1];\n\n  }\n\n      var  mn = mynumber.length;\n\n      if (mn &lt;= 3) { return mynumber + numberend; }\n      var grps = [];\n\n        while (mn &gt; 3)\n        {  \n            grps.push(mynumber.substring(mn,mn - 3));\n            mn = mn - 3;\n        }\n        grps.push(mynumber.substring(mn,mn - 3));\n      grps.reverse();\n\n        grps.join(\",\");\n        if(numberend!=\"\"){ grps =  grps +\".\"+numberend;}\n\n        return grps; \n              }\n\n\n &lt;/script&gt;\n</code></pre>\n"},{"score":7,"body":"<pre><code>var formatNumber = function (number) {\n  var splitNum;\n  number = Math.abs(number);\n  number = number.toFixed(2);\n  splitNum = number.split('.');\n  splitNum[0] = splitNum[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n  return splitNum.join(\".\");\n}\n</code></pre>\n\n<p>EDIT:\nThe function only work with positive number. for exmaple:</p>\n\n<pre><code>var number = -123123231232;\nformatNumber(number)\n</code></pre>\n\n<p>Output: \"123,123,231,232\"</p>\n\n<p>But to answer the question above <code>toLocaleString()</code> method just solves the problem.</p>\n\n<pre><code>var number = 123123231232;\n    number.toLocaleString()\n</code></pre>\n\n<p>Output: \"123,123,231,232\"</p>\n\n<p>Cheer!</p>\n"},{"score":0,"body":"<p>Here's my try:</p>\n\n<p>EDIT: Added in decimals</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function splitMille(n, separator = ',') {\r\n  // Cast to string\r\n  let num = (n + '')\r\n\r\n  // Test for and get any decimals (the later operations won't support them)\r\n  let decimals = ''\r\n  if (/\\./.test(num)) {\r\n    // This regex grabs the decimal point as well as the decimal numbers\r\n    decimals = num.replace(/^.*(\\..*)$/, '$1')\r\n  }\r\n  \r\n  // Remove decimals from the number string\r\n  num = num.replace(decimals, '')\r\n    // Reverse the number string through Array functions\r\n    .split('').reverse().join('')\r\n    // Split into groups of 1-3 characters (with optional supported character \"-\" for negative numbers)\r\n    .match(/[0-9]{1,3}-?/g)\r\n    // Add in the mille separator character and reverse back\r\n    .join(separator).split('').reverse().join('')\r\n\r\n  // Put the decimals back and output the formatted number\r\n  return `${num}${decimals}`\r\n}\r\n\r\nlet testA = splitMille(1234)\r\nlet testB = splitMille(-1234)\r\nlet testC = splitMille(123456.789)\r\nlet testD = splitMille(9007199254740991)\r\nlet testE = splitMille(1000.0001)\r\n\r\nconsole.log('Results!\\n\\tA: %s\\n\\tB: %s\\n\\tC: %s\\n\\tD: %s\\n\\tE: %s', testA, testB, testC, testD, testE)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>Here is a one line function with int &amp; decimal support. I left some code in to convert the number to a string as well.</p>\n\n<pre><code>    function numberWithCommas(x) {\n        return (x=x+'').replace(new RegExp('\\\\B(?=(\\\\d{3})+'+(~x.indexOf('.')?'\\\\.':'$')+')','g'),',');\n    }\n</code></pre>\n"},{"score":42,"body":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\" rel=\"noreferrer\">Intl.NumberFormat</a></p>\n\n<p>Native JS function. Supported by IE11, Edge, latest Safari, Chrome, Firefox, Opera, Safari on iOS and Chrome on Android.</p>\n\n<pre><code>var number = 3500;\n\nconsole.log(new Intl.NumberFormat().format(number));\n// → '3,500' if in US English locale\n</code></pre>\n"},{"score":18,"body":"<p>You can either use this procedure to format your currency needing.</p>\n\n<pre><code>var nf = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nnf.format(123456.789); // ‘$123,456.79’\n</code></pre>\n\n<p>For more info you can access this link.</p>\n\n<p><a href=\"https://www.justinmccandless.com/post/formatting-currency-in-javascript/\" rel=\"noreferrer\">https://www.justinmccandless.com/post/formatting-currency-in-javascript/</a></p>\n"},{"score":-2,"body":"<blockquote>\n  <p></p>\n</blockquote>\n\n<pre><code>function addCommas(nStr) {\n    nStr += '';\n    var x = nStr.split('.');\n    var x1 = x[0];\n    var x2 = x.length &gt; 1 ? '.' + x[1] : '';\n    var rgx = /(\\d+)(\\d{3})/;\n    while (rgx.test(x1)) {\n            x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }\n    return x1 + x2;\n}\n\naddCommas(parseFloat(\"1099920.23232\").toFixed(2)); //Output  1,099,920.23\n</code></pre>\n"},{"score":1,"body":"<p>After not finding a modern and comprehensive solution here, I have written an arrow function (without regex) to solve the formatting problem and it allows the caller to provide number of <strong>fraction digits</strong> as well as the <strong>period and thousand separator</strong> for Europe and rest of the world.</p>\n\n<blockquote>\n  <p>Examples:</p>\n\n<pre><code>numberFormatter(1234567890.123456) =&gt; 1,234,567,890\nnumberFormatter(1234567890.123456, 4) =&gt; 1,234,567,890.1235\nnumberFormatter(1234567890.123456, 4, '.', ',') =&gt; 1.234.567.890,1235 Europe\n</code></pre>\n</blockquote>\n\n<p>Here is the function written in <strong>ES6</strong> (modern syntax):</p>\n\n<pre><code>const numberFormatter = (number, fractionDigits = 0, thousandSeperator = ',', fractionSeperator = '.') =&gt; {\n    if (number!==0 &amp;&amp; !number || !Number.isFinite(number)) return number\n    const frDigits = Number.isFinite(fractionDigits)? Math.min(Math.max(fractionDigits, 0), 7) : 0\n    const num = number.toFixed(frDigits).toString()\n\n    const parts = num.split('.')\n    let digits = parts[0].split('').reverse()\n    let sign = ''\n    if (num &lt; 0) {sign = digits.pop()}\n    let final = []\n    let pos = 0\n\n    while (digits.length &gt; 1) {\n        final.push(digits.shift())\n        pos++\n        if (pos % 3 === 0) {final.push(thousandSeperator)}\n    }\n    final.push(digits.shift())\n    return `${sign}${final.reverse().join('')}${frDigits &gt; 0 ? fractionSeperator : ''}${frDigits &gt; 0 &amp;&amp; parts[1] ? parts[1] : ''}`\n}\n</code></pre>\n\n<p>It has been <strong>tested for negative, bad input and NaN cases</strong>. If the input is <strong>NaN</strong> then it simply returns it.</p>\n"},{"score":-2,"body":"<p>You can use for loops to add commas to the number</p>\n\n<pre><code>function convertNumber(){\n    var _cash = cash.toString()\n    var _formattedCash = ''\n    var count = 0\n\n    for (let i = _cash.length; i &gt;= 0; i--) {\n        _formattedCash += _cash.substring(i,i+1)\n\n        if(count == 3 &amp;&amp; i &gt; 0){\n            _formattedCash += ','\n            count = 0\n        }\n        count++\n    }\n\n    var _format = ''\n\n    for (let i = _formattedCash.length; i &gt;= 0; i--) {\n        _format += _formattedCash.substring(i, i + 1)\n    }\n\n    return 'Ksh ' + _format;\n}\n</code></pre>\n"},{"score":1,"body":"<p>I've found an approach that works in every situation. <a href=\"https://codesandbox.io/s/zmvxjpj6x\" rel=\"nofollow noreferrer\">CodeSandbox example</a></p>\n\n<pre><code>function commas(n) {\n  if (n &lt; 1000) {\n    return n + ''\n  } else {\n    // Convert to string.\n    n += ''\n\n    // Skip scientific notation.\n    if (n.indexOf('e') !== -1) {\n      return n\n    }\n\n    // Support fractions.\n    let i = n.indexOf('.')\n    let f = i == -1 ? '' : n.slice(i)\n    if (f) n = n.slice(0, i)\n\n    // Add commas.\n    i = n.length\n    n = n.split('')\n    while (i &gt; 3) n.splice((i -= 3), 0, ',')\n    return n.join('') + f\n  }\n}\n</code></pre>\n\n<p>This is like <a href=\"https://stackoverflow.com/a/10418247/2228559\">Noah Freitas' answer</a>, but with support for <strong>fractions</strong> and <strong>scientific notation</strong>.</p>\n\n<p>I think <code>toLocaleString</code> is the best choice, if performance is not a concern.</p>\n\n<p><strong>edit:</strong> Here's a CodeSandbox with some examples: <a href=\"https://codesandbox.io/s/zmvxjpj6x\" rel=\"nofollow noreferrer\">https://codesandbox.io/s/zmvxjpj6x</a></p>\n"},{"score":55,"body":"<p><strong>Using Regular expression</strong></p>\n\n<pre><code>function toCommas(value) {\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\nconsole.log(toCommas(123456789)); // 123,456,789\n\nconsole.log(toCommas(1234567890)); // 1,234,567,890\nconsole.log(toCommas(1234)); // 1,234\n</code></pre>\n\n<p><strong>Using toLocaleString()</strong></p>\n\n<pre><code>var number = 123456.789;\n\n// request a currency format\nconsole.log(number.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }));\n// → 123.456,79 €\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(number.toLocaleString('ja-JP', { style: 'currency', currency: 'JPY' }))\n// → ￥123,457\n\n// limit to three significant digits\nconsole.log(number.toLocaleString('en-IN', { maximumSignificantDigits: 3 }));\n// → 1,23,000\n</code></pre>\n\n<p>ref <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"noreferrer\">MDN:Number.prototype.toLocaleString()</a></p>\n\n<p><strong>Using Intl.NumberFormat()</strong></p>\n\n<pre><code>var number = 123456.789;\n\nconsole.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(number));\n// expected output: \"123.456,79 €\"\n\n// the Japanese yen doesn't use a minor unit\nconsole.log(new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(number));\n// expected output: \"￥123,457\"\n\n// limit to three significant digits\nconsole.log(new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(number));\n\n// expected output: \"1,23,000\"\n</code></pre>\n\n<p>ref <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\" rel=\"noreferrer\">Intl.NumberFormat</a></p>\n\n<p><strong>DEMO AT HERE</strong>\n\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script type=\"text/javascript\"&gt;\r\n  // Using Regular expression\r\n  function toCommas(value) {\r\n    return value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  function commas() {\r\n    var num1 = document.myform.number1.value;\r\n\r\n    // Using Regular expression\r\n    document.getElementById('result1').value = toCommas(parseInt(num1));\r\n    // Using toLocaleString()\r\n\r\n    document.getElementById('result2').value = parseInt(num1).toLocaleString('ja-JP', {\r\n      style: 'currency',\r\n      currency: 'JPY'\r\n    });\r\n\r\n    // Using Intl.NumberFormat()\r\n    document.getElementById('result3').value = new Intl.NumberFormat('ja-JP', {\r\n      style: 'currency',\r\n      currency: 'JPY'\r\n    }).format(num1);\r\n  }\r\n&lt;/script&gt;\r\n&lt;FORM NAME=\"myform\"&gt;\r\n  &lt;INPUT TYPE=\"text\" NAME=\"number1\" VALUE=\"123456789\"&gt;\r\n  &lt;br&gt;\r\n  &lt;INPUT TYPE=\"button\" NAME=\"button\" Value=\"=&gt;\" onClick=\"commas()\"&gt;\r\n  &lt;br&gt;Using Regular expression\r\n  &lt;br&gt;\r\n  &lt;INPUT TYPE=\"text\" ID=\"result1\" NAME=\"result1\" VALUE=\"\"&gt;\r\n  &lt;br&gt;Using toLocaleString()\r\n  &lt;br&gt;\r\n  &lt;INPUT TYPE=\"text\" ID=\"result2\" NAME=\"result2\" VALUE=\"\"&gt;\r\n  &lt;br&gt;Using Intl.NumberFormat()\r\n  &lt;br&gt;\r\n  &lt;INPUT TYPE=\"text\" ID=\"result3\" NAME=\"result3\" VALUE=\"\"&gt;\r\n\r\n&lt;/FORM&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Performance</strong> </p>\n\n<p><a href=\"https://i.stack.imgur.com/K9gnJ.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/K9gnJ.png\" alt=\"Performance\"></a>\n<a href=\"http://jsben.ch/sifRd\" rel=\"noreferrer\">http://jsben.ch/sifRd</a></p>\n"},{"score":13,"body":"<p>Use This code to handle currency format for india. Country code can be changed to handle other country currency.</p>\n\n<pre><code>let amount =350256.95\nvar formatter = new Intl.NumberFormat('en-IN', {\n  minimumFractionDigits: 2,\n});\n\n// Use it.\n\nformatter.format(amount);\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>3,50,256.95\n</code></pre>\n"},{"score":4,"body":"<p>Just for future Googlers (or not necessarily 'Googlers'):</p>\n\n<p>All of solutions mentioned above are wonderful, however, RegExp might be awfully bad thing to use in a situation like that.</p>\n\n<p>So, yes, you might use some of the options proposed or even write something primitive yet useful like:</p>\n\n<pre><code>const strToNum = str =&gt; {\n\n   //Find 1-3 digits followed by exactly 3 digits &amp; a comma or end of string\n   let regx = /(\\d{1,3})(\\d{3}(?:,|$))/;\n   let currStr;\n\n   do {\n       currStr = (currStr || str.split(`.`)[0])\n           .replace( regx, `$1,$2`)\n   } while (currStr.match(regx)) //Stop when there's no match &amp; null's returned\n\n   return ( str.split(`.`)[1] ) ?\n           currStr.concat(`.`, str.split(`.`)[1]) :\n           currStr;\n\n};\n\nstrToNum(`123`) // =&gt; 123\nstrToNum(`123456`) // =&gt; 123,456\nstrToNum(`-1234567.0987`) // =&gt; -1,234,567.0987\n</code></pre>\n\n<p>The regexp that's used here is fairly simple and the loop will go precisely the number of times it takes to get the job done.</p>\n\n<p>And you might optimize it far better, \"DRYify\" code &amp; so on.</p>\n\n<p>Yet, </p>\n\n<pre><code>(-1234567.0987).toLocaleString();\n</code></pre>\n\n<p>(in most situations) would be a far better choice.</p>\n\n<p>The point is not in the speed of execution or in cross-browser compatibility.</p>\n\n<p>In situations when you'd like to show the resulting number to user, .toLocaleString() method gives you superpower to speak the same language with the user of your website or app (whatever her/his language is).</p>\n\n<p>This method according to ECMAScript documentation was introduced in 1999, and I believe that the reason for that was the hope that the Internet at some point will connect people all around the world, so, some \"internalization\" tools were needed.</p>\n\n<p>Today the Internet does connect all of us, so, it is important to remember that the world is a way more complex that we might imagine &amp; that (/almost) <strong>all of us are here</strong>, in the Internet.</p>\n\n<p>Obviously, considering the diversity of people, it is impossible to guarantee perfect UX for everybody because we speak different languages, value different things, etc. And exactly because of this, it is even more important to try to localize things as much as it's possible.</p>\n\n<p>So, considering that there're some particular standards for representation of date, time, numbers, etc. &amp; that we have a tool to display those things in the format preferred by the final user, isn't that rare and almost irresponsible not to use that tool (especially in situations when we want to display this data to the user)?</p>\n\n<p>For me, using RegExp instead of .toLocaleString() in situation like that sounds a little bit like creating a clock app with JavaScript &amp; hard-coding it in such a way so it'll display Prague time only (which would be quite useless for people who don't live in Prague) even though the default behaviour of</p>\n\n<pre><code>new Date();\n</code></pre>\n\n<p>is to return the data according to final user's clock.</p>\n"},{"score":3,"body":"<h1>My <strong>“<em>true</em>”</strong> regular-expressions-only solution <sub>for those love one-liners</sub></h1>\n\n<p>You see those enthusiastic players above? Maybe you can golf out of it. Here’s my stroke.</p>\n\n<pre><code>n =&gt; `${n}`.replace(/(?&lt;!\\.\\d+)\\B(?=(\\d{3})+\\b)/g, \" \").replace(/(?&lt;=\\.(\\d{3})+)\\B/g, \" \")\n</code></pre>\n\n<p><sub>Uses a <code> </code><sub>THIN SPACE</sub> (U+2009) for a thousands separator, as the <em>International System of Units</em> said to do in <a href=\"https://www.bipm.org/utils/common/pdf/si_brochure_8.pdf\" rel=\"nofollow noreferrer\">the eighth edition<sub>(2006)</sub> of their publication “<em>SI Brochure: The International System of Units (SI)</em>”</a> (See §5.3.4.). <a href=\"https://www.bipm.org/utils/common/pdf/si-brochure/SI-Brochure-9.pdf\" rel=\"nofollow noreferrer\">The ninth edition<sub>(2019)</sub></a> suggests to use a <em>space</em> for it (See §5.4.4.). You can use whatever you want, including a comma.</sub></p>\n\n<hr>\n\n<h2>See.</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const integer_part_only = n =&gt; `${n}`.replace(/(?&lt;!\\.\\d+)\\B(?=(\\d{3})+\\b)/g, \" I \");\r\nconst fractional_part_only = n =&gt; `${n}`.replace(/(?&lt;=\\.(\\d{3})+)\\B/g, \" F \");\r\nconst both = n =&gt; fractional_part_only(integer_part_only(n));\r\n\r\nfunction demo(number) { // I’m using Chrome 74.\r\n\tconsole.log(`${number}\r\n\t\t→ \"${integer_part_only(number)}\" (integer part only)\r\n\t\t→ \"${fractional_part_only(number)}\" (fractional part only)\r\n\t\t→ \"${both(number)}\" (both)\r\n\t`);\r\n}\r\ndemo(Math.random() * 10e5);\r\ndemo(123456789.01234567);\r\ndemo(123456789);\r\ndemo(0.0123456789);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<h2>How does it work?</h2>\n\n<h3>For an integer part</h3>\n\n<pre><code>.replace(/(?&lt;!\\.\\d+)\\B(?=(\\d{3})+\\b)/g, \" I \")\n</code></pre>\n\n<ul>\n<li><code>.replace(……, \" I \")</code> Put “ I ”\n\n<ul>\n<li><code>/……/g</code> at each of\n\n<ul>\n<li><code>\\B</code> the in-between of two adjacent digits\n\n<ul>\n<li><code>(?=……)</code><sub>POSITIVE LOOKAHEAD</sub> whose right part is\n\n<ul>\n<li><code>(\\d{3})+</code> one or more three-digit chunks</li>\n<li><code>\\b</code> followed by a non-digit, such as, a period, the ending of the string, et cetera,</li>\n</ul></li>\n<li><code>(?&lt;!……)</code><sub>NEGATIVE LOOKBEHIND</sub> excluding ones whose left part\n\n<ul>\n<li><code>\\.\\d+</code> is a dot followed by digits (“has a decimal separator”).</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3>For a decimal part</h3>\n\n<pre><code>.replace(/(?&lt;=\\.(\\d{3})+)\\B/g, \" F \")\n</code></pre>\n\n<ul>\n<li><code>.replace(……, \" F \")</code> Put “ F ”\n\n<ul>\n<li><code>/……/g</code> at each of\n\n<ul>\n<li><code>\\B</code> the in-between of two adjacent digits\n\n<ul>\n<li><code>(?&lt;=……)</code><sub>POSITIVE LOOKBEHIND</sub> whose left part is\n\n<ul>\n<li><code>\\.</code> a decimal separator</li>\n<li><code>(\\d{3})+</code> followed by one or more three-digit chunks.</li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<hr>\n\n<h2><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes\" rel=\"nofollow noreferrer\">Character classes</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Boundaries\" rel=\"nofollow noreferrer\">boundaries</a></h2>\n\n<blockquote>\n  <h3><code>\\d</code></h3>\n  \n  <p>Matches any digit (Arabic numeral). Equivalent to <code>[0-9]</code>.</p>\n  \n  <p>For example,</p>\n  \n  <ul>\n  <li><code>/\\d/</code> or <code>/[0-9]/</code> matches <code>2</code> in <code>B2 is the suite number</code>.</li>\n  </ul>\n  \n  <h3><code>\\b</code></h3>\n  \n  <p>Matches a <strong>word boundary</strong>. This is the position where a word character is not followed or preceded by another word-character, such as between a letter and a space. Note that a matched word boundary is not included in the match. In other words, the length of a matched word boundary is zero.</p>\n  \n  <p>Examples:</p>\n  \n  <ul>\n  <li><code>/\\bm/</code> matches the <code>m</code> in <code>moon</code> ;</li>\n  <li><code>/oo\\b/</code> does not match the <code>oo</code> in <code>moon</code>, because <code>oo</code> is followed by <code>n</code> which is a word character;</li>\n  <li><code>/oon\\b/</code> matches the <code>oon</code> in <code>moon</code>, because <code>oon</code> is the end of the string, thus not followed by a word character;</li>\n  <li><code>/\\w\\b\\w/</code> will never match anything, because a word character can never be followed by both a non-word and a word character.</li>\n  </ul>\n  \n  <h3><code>\\B</code></h3>\n  \n  <p>Matches a <strong>non-word boundary</strong>. This is a position where the previous and next character are of the same type: either both must be words, or both must be non-words. Such as between two letters or between two spaces. The beginning and end of a string are considered non-words. Same as the matched word boundary, the matched non-word boundary is also not included in the match.</p>\n  \n  <p>For example,</p>\n  \n  <ul>\n  <li><code>/\\Bon/</code> matches <code>on</code> in <code>at noon</code>;</li>\n  <li><code>/ye\\B/</code> matches <code>ye</code> in <code>possibly yesterday</code>.</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<h2>Browser compatibility</h2>\n\n<ul>\n<li><a href=\"https://caniuse.com/#feat=js-regexp-lookbehind\" rel=\"nofollow noreferrer\">https://caniuse.com/#feat=js-regexp-lookbehind</a></li>\n</ul>\n"},{"score":11,"body":"<p>You can also use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\" rel=\"noreferrer\">Intl.NumberFormat</a> constructor. Here is how you can do it. </p>\n\n<pre><code> resultNumber = new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(yourNumber); \n</code></pre>\n"},{"score":8,"body":"<p>My answer is the only answer that completely replaces jQuery with a much more sensible alternative:</p>\n\n<pre><code>function $(dollarAmount)\n{\n    const locale = 'en-US';\n    const options = { style: 'currency', currency: 'USD' };\n    return Intl.NumberFormat(locale, options).format(dollarAmount);\n}\n</code></pre>\n\n<p>This solution not only adds commas, but it also rounds to the nearest penny in the event that you input an amount like <code>$(1000.9999)</code> you'll get $1,001.00. Additionally, the value you input can safely be a number or a string; it doesn't matter.</p>\n\n<p>If you're dealing with money, but don't want a leading dollar sign shown on the amount, you can also add this function, which uses the previous function but removes the <code>$</code>:</p>\n\n<pre><code>function no$(dollarAmount)\n{\n    return $(dollarAmount).replace('$','');\n}\n</code></pre>\n\n<p>If you're <strong>not</strong> dealing with money, and have varying decimal formatting requirements, here's a more versatile function:</p>\n\n<pre><code>function addCommas(number, minDecimalPlaces = 0, maxDecimalPlaces = Math.max(3,minDecimalPlaces))\n{\n    const options = {};\n    options.maximumFractionDigits = maxDecimalPlaces;\n    options.minimumFractionDigits = minDecimalPlaces;\n    return Intl.NumberFormat('en-US',options).format(number);\n}\n</code></pre>\n\n<p>Oh, and by the way, the fact that this code does not work in some old version of Internet Explorer is completely intentional. I try to break IE anytime that I can catch it not supporting modern standards.</p>\n\n<p>Please remember that excessive praise, in the comment section, is considered off-topic. Instead, just shower me with up-votes.</p>\n"},{"score":2,"body":"<p><strong>A general fast function</strong> that will react well:</p>\n\n<ul>\n<li>If the value is number or string</li>\n<li>If the the number have not english digit</li>\n<li>If the the number have decimal or not</li>\n<li>[Optional] If NOT sticked from behind but sticked from end like : 50000Kg</li>\n<li>If a few number separated in a string</li>\n</ul>\n\n<p>A minified function for fast, safe and low weight with:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sepNum(r,e){return e=e||\",\",r=String(r).replace(/[\\u0660-\\u0669\\u06f0-\\u06f9]/g,function(r){return 15&amp;r.charCodeAt(0)}).replace(/(?:[^\\.]|^)\\b(\\d+)/g,function(r){return r=r.replace(/\\B(?=(\\d{3})+\\b)/g,e)})}\r\n\r\nText='1000000 and .0002 5000.1234 with 500000Kg but not V10012.231';\r\nconsole.log(sepNum(Text));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>+\nExplain:</p>\n\n<pre><code>function thousandSeparatorAllNonDecimal (x,sep) { \n        if(!sep) sep=','; //seprator by defualt is comma but can be changed\n    x=String(x) // Making Sure the X is String, because RegEx will work just with strings\n  .replace(/[\\u0660-\\u0669\\u06f0-\\u06f9]/g, // [Optional] RegEx for Finding all non English Digit (like [\"١\", \"٢\", \"٣\", \"٤\", \"٥\", \"٦\", \"٧\", \"٨\", \"٩\", \"٠\"]\n  function (c) { return c.charCodeAt(0) &amp; 0xf; }) // return of the function of the Regex =&gt; Replacing all with the same Englsih Digit (possible some android keyboards just type non english digit)\n  .replace(/(?:[^\\.]|^)\\b(\\d+)/g, // Finding all numbers that are not started by dot by the RegEx :\n  // 0) (?:) : any that\n  // 1) [^\\.] : not same to dot\n  // 2) |^ or any thing else that\n  // 3) \\b : not sticked to any word from behind [Optional] (it can have another \\b in end to check if not sticked from front to any word too, or no any \\b too, but we want it take some numbers like 50000Kg)\n  // +5) \n  function(x){ // Process them one by one separated, by this function\n  x=x.replace(/\\B(?=(\\d{3})+\\b)/g, // Now by this RegEx replacing any 3 by 3 digit\n  sep); // now using separator in the RegEx replace\n  return x;} // now return the result to main function\n  );return x // and returning the main result out\n}\n</code></pre>\n\n<p>And the fastest regex can be JUST for both Non-decimal and decimals  :</p>\n\n<blockquote>\n  <p>/\\B(?=(\\d{3})+\\b)/g</p>\n</blockquote>\n\n<p>But i think still as @uKolka said, the right idea for a single value, with some prefixing [Optional : parseFloat] and postfixing [Optional : Replacing '.00'] is:</p>\n\n<pre><code>Num=parseFloat(Num).toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2,useGrouping:true}).replace('.00','');\n</code></pre>\n\n<p>as the full example here:\n<a href=\"https://jsfiddle.net/PAPIONbit/198xL3te/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/PAPIONbit/198xL3te/</a></p>\n"},{"score":32,"body":"<p>I am quite impressed by the number of answers this question has got. I like the answer by <em>uKolka</em>:</p>\n\n<pre><code>n.toLocaleString()\n</code></pre>\n\n<p>But unfortunately, in some locales like Spanish, it does not work (IMHO) as expected for numbers below 10,000:</p>\n\n<pre><code>Number(1000).toLocaleString('ES-es')\n</code></pre>\n\n<p>Gives <code>1000</code> and not <code>1.000</code>.</p>\n\n<p>See <a href=\"https://stackoverflow.com/questions/57628055/tolocalestring-not-working-on-numbers-less-than-10000-in-all-browsers\">toLocaleString not working on numbers less than 10000 in all browsers</a> to know why.</p>\n\n<p>So I had to use the answer by <em>Elias Zamaria</em> choosing the right thousands separator character:</p>\n\n<pre><code>n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, Number(10000).toLocaleString().substring(2, 3))\n</code></pre>\n\n<p>This one works well as a one-liner for both locales that use <code>,</code> or <code>.</code> as the thousands separator and starts working from 1,000 in all cases.</p>\n\n<pre><code>Number(1000).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, Number(10000).toLocaleString().substring(2, 3))\n</code></pre>\n\n<p>Gives <code>1.000</code> with a Spanish locale context.</p>\n\n<p>Should you want to have absolute control over the way a number is formatted, you may also try the following:</p>\n\n<pre><code>let number   = 1234.567\nlet decimals = 2\nlet decpoint = '.' // Or Number(0.1).toLocaleString().substring(1, 2)\nlet thousand = ',' // Or Number(10000).toLocaleString().substring(2, 3)\n\nlet n = Math.abs(number).toFixed(decimals).split('.')\nn[0] = n[0].split('').reverse().map((c, i, a) =&gt;\n  i &gt; 0 &amp;&amp; i &lt; a.length &amp;&amp; i % 3 == 0 ? c + thousand : c\n).reverse().join('')\nlet final = (Math.sign(number) &lt; 0 ? '-' : '') + n.join(decpoint)\n\nconsole.log(final)\n</code></pre>\n\n<p>Gives <code>1,234.57</code>.</p>\n\n<p>This one does not need a regular expression. It works by adjusting the number to the desired amount of decimals with <code>toFixed</code> first, then dividing it around the decimal point <code>.</code> if there is one. The left side is then turned into an array of digits which is reversed. Then a thousands separator is added every three digits from the start and the result reversed again. The final result is the union of the two parts. The sign of the input number is removed with <code>Math.abs</code> first and then put back if necessary.</p>\n\n<p>It is not a one-liner but not much longer and easily turned into a function. Variables have been added for clarity, but those may be substituted by their desired values if known in advance. You may use the expressions that use <code>toLocaleString</code> as a way to find out the right characters for the decimal point and the thousands separator for the current locale (bear in mind that those require a more modern Javascript.)</p>\n"},{"score":4,"body":"<p>For anyone who likes 1-liners and a single regex, but <em>doesn't</em> want to use split(), here is an enhanced version of the regex from other answers that handles (ignores) decimal places:</p>\n\n<pre><code>    var formatted = (x+'').replace(/(\\..*)$|(\\d)(?=(\\d{3})+(?!\\d))/g, (digit, fract) =&gt; fract || digit + ',');\n</code></pre>\n\n<p>The regex <em>first</em> matches a substring starting with a literal \".\" and replaces it with itself (\"fract\"), and <em>then</em> matches any digit followed by multiples of 3 digits and puts \",\" after it.</p>\n\n<p>For example, <em>x</em> = 12345678.12345678 will give <em>formatted</em> = '12,345,678.12345678'.</p>\n"},{"score":0,"body":"<p>You can create a function on the Number prototype</p>\n<pre class=\"lang-js prettyprint-override\"><code>Number.prototype.format = function (s, d) {\n  return (\n    this.toString()\n      .split(&quot;.&quot;)\n      .map((n, i) =&gt;\n        i\n          ? n\n          : n\n              .split(&quot;&quot;)\n              .map((n, i) =&gt; (i % 3 || !i ? n : s + n))\n              .join(&quot;&quot;)\n      )\n      .join(d)\n  );\n};\n\nconsole.log((8800.00).format(',', '.'))\n// 8,880.00\n\n// French notation\nconsole.log((8800.00).format(' ', ','))\n// 8 880,00\n</code></pre>\n"}],"score":1934}