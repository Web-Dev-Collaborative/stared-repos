{"body":"<p>I'm trying to open a <a href=\"https://en.wikipedia.org/wiki/URL\" rel=\"noreferrer\">URL</a> in a new tab, as opposed to a popup window.</p>\n\n<p>I've seen related questions where the responses would look something like:</p>\n\n<pre><code>window.open(url,'_blank');\nwindow.open(url);\n</code></pre>\n\n<p>But none of them worked for me, the browser still tried to open a popup window.</p>\n","title":"Open a URL in a new tab (and not a new window)","answers":[{"score":993,"body":"<p>Nothing an author can do can choose to open in a new tab instead of a new window; it is a <em>user preference</em>. (Note that the default user preference in most browsers is for new tabs, so a trivial test on a browser where that preference hasn't been changed will not demonstrate this.)</p>\n<p>CSS3 proposed <a href=\"https://www.w3.org/TR/2004/WD-css3-hyperlinks-20040224/#target-new\" rel=\"noreferrer\">target-new</a>, but <a href=\"https://www.w3.org/TR/2014/NOTE-css3-hyperlinks-20141014/\" rel=\"noreferrer\">the specification was abandoned</a>.</p>\n<p><a href=\"https://stackoverflow.com/a/64718494/19068\">The <strong>reverse</strong> is not true</a>; by specifying certain window features for the window in the third argument of <code>window.open()</code>, you can trigger a new window when the preference is for tabs.</p>\n"},{"score":20,"body":"<p>I think that you can't control this. If the user had setup their browser to open links in a new window, you can't force this to open links in a new tab.</p>\n\n<p><a href=\"https://stackoverflow.com/questions/726761/javascript-open-in-a-new-window-not-tab\">JavaScript open in a new window, not tab</a></p>\n"},{"score":70,"body":"<p>To elaborate Steven Spielberg's answer, I did this in such a case:</p>\n\n<pre><code>$('a').click(function() {\n  $(this).attr('target', '_blank');\n});\n</code></pre>\n\n<p>This way, just before the browser will follow the link I'm setting the target attribute, so it will make the link open in a new tab or window (<strong>depends on user's settings</strong>).</p>\n\n<p>One line example in jQuery:</p>\n\n<pre><code>$('a').attr('target', '_blank').get(0).click();\n// The `.get(0)` must be there to return the actual DOM element.\n// Doing `.click()` on the jQuery object for it did not work.\n</code></pre>\n\n<p>This can also be accomplished just using native browser DOM APIs as well:</p>\n\n<pre><code>document.querySelector('a').setAttribute('target', '_blank');\ndocument.querySelector('a').click();\n</code></pre>\n"},{"score":1825,"body":"<p>This is a trick,  </p>\n\n<pre><code>function openInNewTab(url) {\n  var win = window.open(url, '_blank');\n  win.focus();\n}\n</code></pre>\n\n<p>In most cases, this should happen directly in the <code>onclick</code> handler for the link to prevent pop-up blockers, and the default \"new window\" behavior. You could do it this way, or by adding an event listener to your <code>DOM</code> object.  </p>\n\n<pre><code>&lt;div onclick=\"openInNewTab('www.test.com');\"&gt;Something To Click On&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://www.tutsplanet.com/open-url-new-tab-using-javascript/\" rel=\"noreferrer\">http://www.tutsplanet.com/open-url-new-tab-using-javascript/</a></p>\n"},{"score":390,"body":"<p><code>window.open()</code> will not open in a new tab if it is not happening on the actual click event. In the example given the URL is being opened on the actual click event. <strong>This will work provided the user has appropriate settings in the browser</strong>.</p>\n\n<pre><code>&lt;a class=\"link\"&gt;Link&lt;/a&gt;\n&lt;script  type=\"text/javascript\"&gt;\n     $(\"a.link\").on(\"click\",function(){\n         window.open('www.yourdomain.com','_blank');\n     });\n&lt;/script&gt;\n</code></pre>\n\n<p>Similarly, if you are trying to do an Ajax call within the click function and want to open a window on success, ensure you are doing the Ajax call with the <code>async : false</code> option set.</p>\n"},{"score":-9,"body":"<p>The browser will always open the link in a new tab if the link is on the same domain (on the same website). If the link is on some other domain it will open it in a new tab/window, depending on browser settings.</p>\n\n<p>So, according to this, we can use:</p>\n\n<pre><code>&lt;a class=\"my-link\" href=\"http://www.mywebsite.com\" rel=\"http://www.otherwebsite.com\"&gt;new tab&lt;/a&gt;\n</code></pre>\n\n<p>And add some jQuery code:</p>\n\n<pre><code>jQuery(document).ready(function () {\n    jQuery(\".my-link\").on(\"click\",function(){\n        var w = window.open('http://www.mywebsite.com','_blank');\n        w.focus();\n        w.location.href = jQuery(this).attr('rel');\n        return false;\n    });\n});\n</code></pre>\n\n<p>So, first open new window on same website with _blank target (it will open it in new tab), and then open your desired website inside that new window.</p>\n"},{"score":-7,"body":"<p>If you only want to open the external links (links that go to other sites) then this bit of JavaScript/jQuery works well:</p>\n\n<pre><code>$(function(){\n    var hostname = window.location.hostname.replace('www.', '');\n    $('a').each(function(){\n        var link_host = $(this).attr('hostname').replace('www.', '');\n        if (link_host !== hostname) {\n            $(this).attr('target', '_blank');\n        }\n    });\n});\n</code></pre>\n"},{"score":19,"body":"<p>An interesting fact is that the new tab can not be opened if the action is not invoked by the user (clicking a button or something) or if it is asynchronous, for example, this will NOT open in new tab:</p>\n\n<pre><code>$.ajax({\n    url: \"url\",\n    type: \"POST\",\n    success: function() {\n        window.open('url', '_blank');              \n    }\n});\n</code></pre>\n\n<p>But this may open in a new tab, depending on browser settings:</p>\n\n<pre><code>$.ajax({\n    url: \"url\",\n    type: \"POST\",\n    async: false,\n    success: function() {\n        window.open('url', '_blank');              \n    }\n});\n</code></pre>\n"},{"score":12,"body":"<pre><code>(function(a){\ndocument.body.appendChild(a);\na.setAttribute('href', location.href);\na.dispatchEvent((function(e){\n    e.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, true, false, false, false, 0, null);\n    return e\n}(document.createEvent('MouseEvents'))))}(document.createElement('a')))\n</code></pre>\n"},{"score":3,"body":"<p>Or you could just create a link element and click it...</p>\n\n<pre><code>var evLink = document.createElement('a');\nevLink.href = 'http://' + strUrl;\nevLink.target = '_blank';\ndocument.body.appendChild(evLink);\nevLink.click();\n// Now delete it\nevLink.parentNode.removeChild(evLink);\n</code></pre>\n\n<p>This shouldn't be blocked by any popup blockers... Hopefully.</p>\n"},{"score":11,"body":"<p><strong>This has nothing to do with browser settings</strong> if you are trying to open a new tab from a custom function.</p>\n\n<p>In this page, open a JavaScript console and type:</p>\n\n<pre><code>document.getElementById(\"nav-questions\").setAttribute(\"target\", \"_blank\");\ndocument.getElementById(\"nav-questions\").click();\n</code></pre>\n\n<p>And it will try to open a popup regardless of your settings, because the 'click' comes from a custom action.</p>\n\n<p>In order to behave like an actual 'mouse click' on a link, you need to follow <a href=\"https://stackoverflow.com/a/19464494/676002\">@spirinvladimir's advice</a> and <em>really</em> create it:</p>\n\n<pre><code>document.getElementById(\"nav-questions\").setAttribute(\"target\", \"_blank\");\ndocument.getElementById(\"nav-questions\").dispatchEvent((function(e){\n  e.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0,\n                    false, false, false, false, 0, null);\n  return e\n}(document.createEvent('MouseEvents'))));\n</code></pre>\n\n<p>Here is a complete example (do not try it on <a href=\"http://jsfiddle.net/\" rel=\"nofollow noreferrer\">jsFiddle</a> or similar online editors, as it will not let you redirect to external pages from there):</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;style&gt;\n    #firing_div {\n      margin-top: 15px;\n      width: 250px;\n      border: 1px solid blue;\n      text-align: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;a id=\"my_link\" href=\"http://www.google.com\"&gt; Go to Google &lt;/a&gt;\n  &lt;div id=\"firing_div\"&gt; Click me to trigger custom click &lt;/div&gt;\n&lt;/body&gt;\n&lt;script&gt;\n  function fire_custom_click() {\n    alert(\"firing click!\");\n    document.getElementById(\"my_link\").dispatchEvent((function(e){\n      e.initMouseEvent(\"click\", true, true, window, /* type, canBubble, cancelable, view */\n            0, 0, 0, 0, 0,              /* detail, screenX, screenY, clientX, clientY */\n            false, false, false, false, /* ctrlKey, altKey, shiftKey, metaKey */\n            0, null);                   /* button, relatedTarget */\n      return e\n    }(document.createEvent('MouseEvents'))));\n  }\n  document.getElementById(\"firing_div\").onclick = fire_custom_click;\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":0,"body":"<p>How about creating an <code>&lt;a&gt;</code> with <code>_blank</code> as <code>target</code> attribute value and the <code>url</code> as <code>href</code>, with style display:hidden with a a children element? Then add to the DOM and then trigger the click event on a children element.</p>\n\n<h2>UPDATE</h2>\n\n<p>That doesn't work. The browser prevents the default behaviour. It could be triggered programmatically, but it doesn't follow the default behaviour.</p>\n\n<p>Check and see for yourself: <a href=\"http://jsfiddle.net/4S4ET/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/4S4ET/</a></p>\n"},{"score":254,"body":"<h1><code>window.open</code> Cannot Reliably Open Popups in a New Tab in All Browsers</h1>\n\n<p><strong>Different browsers implement the behavior of</strong> <code>window.open</code> <strong>in different ways, especially with regard to a user's browser preferences.</strong> You cannot expect the same behavior for <code>window.open</code> to be true across all of Internet Explorer, Firefox, and Chrome, because of the different ways in which they handle a user's browser preferences.</p>\n\n<p>For example, Internet&nbsp;Explorer (11) users can choose to open popups in a new window or a new tab, <strong>you cannot force Internet&nbsp;Explorer&nbsp;11 users to open popups in a certain way through</strong> <code>window.open</code>, as alluded to in <a href=\"https://stackoverflow.com/a/4907854/456814\">Quentin's answer</a>.</p>\n\n<p>As for Firefox (29) users, using <code>window.open(url, '_blank')</code> <strong>depends on their browser's tab preferences,</strong> though you can still force them to open popups in a new window by specifying a width and height (see \"What About Chrome?\" section below).</p>\n\n<h1>Demonstration</h1>\n\n<p>Go to your browser's settings and configure it to open popups in a new window.</p>\n\n<h2>Internet Explorer (11)</h2>\n\n<p><img src=\"https://i.stack.imgur.com/IYWRU.png\" alt=\"Internet&nbsp;Explorer settings dialog 1\"></p>\n\n<p><img src=\"https://i.stack.imgur.com/8j8Yu.png\" alt=\"Internet&nbsp;Explorer tab settings dialog\"></p>\n\n<h2>Test Page</h2>\n\n<p>After setting up Internet Explorer (11) to open popups in a new window as demonstrated above, use the following test page to test <code>window.open</code>:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button onclick=\"window.open('https://stackoverflow.com/q/4907843/456814');\"&gt;\n      &lt;code&gt;window.open(url)&lt;/code&gt;\n    &lt;/button&gt;\n    &lt;button onclick=\"window.open('https://stackoverflow.com/q/4907843/456814', '_blank');\"&gt;\n      &lt;code&gt;window.open(url, '_blank')&lt;/code&gt;\n    &lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Observe that the popups are opened <strong><em>in a new window, not a new tab.</em></strong></p>\n\n<p>You can also test those snippets above in Firefox (29) with its tab preference set to new windows, and see the same results.</p>\n\n<h1>What About Chrome? It Implements <code>window.open</code> Differently from Internet&nbsp;Explorer (11) and Firefox (29).</h1>\n\n<p>I'm not 100% sure, but it looks like Chrome (version <code>34.0.1847.131 m</code>) does not appear to have any settings that the user can use to choose whether or not to open popups in a new window or a new tab (like Firefox and Internet&nbsp;Explorer have). I checked <a href=\"https://support.google.com/chrome/answer/95472?hl=en\" rel=\"noreferrer\">the Chrome documentation for managing pop-ups</a>, but it didn't mention anything about that sort of thing.</p>\n\n<p>Also, <strong>once again, different browsers seem to implement the behavior of</strong> <code>window.open</code> <strong>differently.</strong> In Chrome and Firefox, <strong><em>specifying a width and height will force a popup,</em></strong> even when a user has set Firefox (29) to open new windows in a new tab (as mentioned in the answers to <a href=\"https://stackoverflow.com/q/726761/456814\">JavaScript open in a new window, not tab</a>):</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;button onclick=\"window.open('https://stackoverflow.com/q/4907843/456814', 'test', 'width=400, height=400');\"&gt;\n      &lt;code&gt;window.open(url)&lt;/code&gt;\n    &lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>However, the same code snippet above <strong>will always open a new tab in Internet&nbsp;Explorer&nbsp;11 if users set tabs as their browser preferences,</strong> not even specifying a width and height will force a new window popup for them.</p>\n\n<p>So the behavior of <code>window.open</code> in Chrome seems to be to open popups in a new tab when used in an <code>onclick</code> event, to open them in new windows when used from the browser console (<a href=\"https://stackoverflow.com/questions/4907843/open-a-url-in-a-new-tab-using-javascript#comment22514382_13158856\">as noted by other people</a>), and to open them in new windows when specified with a width and a height.</p>\n\n<h1>Summary</h1>\n\n<p><strong>Different browsers implement the behavior of</strong> <code>window.open</code> <strong>differently with regard to users' browser preferences.</strong> You cannot expect the same behavior for <code>window.open</code> to be true across all of Internet Explorer, Firefox, and Chrome, because of the different ways in which they handle a user's browser preferences.</p>\n\n<h1>Additional Reading</h1>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.open\" rel=\"noreferrer\"><code>window.open</code> documentation</a>.</li>\n</ul>\n"},{"score":-4,"body":"<p>I'm going to agree somewhat with the person who wrote (paraphrased here): \"For a link in an existing web page, the browser will always open the link in a new tab if the new page is part of the same web site as the existing web page.\"  For me, at least, this \"general rule\" works in Chrome, Firefox, Opera, IE, Safari, SeaMonkey, and Konqueror.</p>\n\n<p>Anyway, there is a less complicated way to take advantage of what the other person presented.  Assuming we are talking about your own web site (\"thissite.com\" below), where you want to control what the browser does, then, below, you want \"specialpage.htm\" to be EMPTY, no HTML at all in it (saves time sending data from the server!).</p>\n\n<pre><code> var wnd, URL;  //global variables\n\n //specifying \"_blank\" in window.open() is SUPPOSED to keep the new page from replacing the existing page\n wnd = window.open(\"http://www.thissite.com/specialpage.htm\", \"_blank\"); //get reference to just-opened page\n //if the \"general rule\" above is true, a new tab should have been opened.\n URL = \"http://www.someothersite.com/desiredpage.htm\";  //ultimate destination\n setTimeout(gotoURL(),200);  //wait 1/5 of a second; give browser time to create tab/window for empty page\n\n\n function gotoURL()\n { wnd.open(URL, \"_self\");  //replace the blank page, in the tab, with the desired page\n   wnd.focus();             //when browser not set to automatically show newly-opened page, this MAY work\n }\n</code></pre>\n"},{"score":-9,"body":"<p>Somehow a <a href=\"http://www.wareztuga.tv/\" rel=\"nofollow\">website</a> can do it. (I don't have the time to extract it from this mess, but this is the code)</p>\n\n<pre><code>if (!Array.prototype.indexOf)\n    Array.prototype.indexOf = function(searchElement, fromIndex) {\n        if (this === undefined || this === null)\n            throw new TypeError('\"this\" is null or not defined');\n        var length = this.length &gt;&gt;&gt; 0;\n        fromIndex = +fromIndex || 0;\n        if (Math.abs(fromIndex) === Infinity)\n            fromIndex = 0;\n        if (fromIndex &lt; 0) {\n            fromIndex += length;\n            if (fromIndex &lt; 0)\n                fromIndex = 0\n        }\n        for (; fromIndex &lt; length; fromIndex++)\n            if (this[fromIndex] === searchElement)\n                return fromIndex;\n        return -1\n    };\n(function Popunder(options) {\n    var _parent, popunder, posX, posY, cookieName, cookie, browser, numberOfTimes, expires = -1,\n        wrapping, url = \"\",\n        size, frequency, mobilePopupDisabled = options.mobilePopupDisabled;\n    if (this instanceof Popunder === false)\n        return new Popunder(options);\n    try {\n        _parent = top != self &amp;&amp; typeof top.document.location.toString() === \"string\" ? top : self\n    } catch (e) {\n        _parent = self\n    }\n    cookieName = \"adk2_popunder\";\n    popunder = null;\n    browser = function() {\n        var n = navigator.userAgent.toLowerCase(),\n            b = {\n                webkit: /webkit/.test(n),\n                mozilla: /mozilla/.test(n) &amp;&amp; !/(compatible|webkit)/.test(n),\n                chrome: /chrome/.test(n),\n                msie: /msie/.test(n) &amp;&amp; !/opera/.test(n),\n                firefox: /firefox/.test(n),\n                safari: /safari/.test(n) &amp;&amp; !/chrome/.test(n),\n                opera: /opera/.test(n)\n            };\n        b.version = b.safari ? (n.match(/.+(?:ri)[\\/: ]([\\d.]+)/) || [])[1] : (n.match(/.+(?:ox|me|ra|ie)[\\/:]([\\d.]+)/) || [])[1];\n        return b\n    }();\n    initOptions(options);\n\n    function initOptions(options) {\n        options = options || {};\n        if (options.wrapping)\n            wrapping = options.wrapping;\n        else {\n            options.serverdomain = options.serverdomain || \"ads.adk2.com\";\n            options.size = options.size || \"800x600\";\n            options.ci = \"3\";\n            var arr = [],\n                excluded = [\"serverdomain\", \"numOfTimes\", \"duration\", \"period\"];\n            for (var p in options)\n                options.hasOwnProperty(p) &amp;&amp; options[p].toString() &amp;&amp; excluded.indexOf(p) === -1 &amp;&amp; arr.push(p + \"=\" + encodeURIComponent(options[p]));\n            url = \"http://\" + options.serverdomain + \"/player.html?rt=popunder&amp;\" + arr.join(\"&amp;\")\n        }\n        if (options.size) {\n            size = options.size.split(\"x\");\n            options.width = size[0];\n            options.height = size[1]\n        }\n        if (options.frequency) {\n            frequency = /([0-9]+)\\/([0-9]+)(\\w)/.exec(options.frequency);\n            options.numOfTimes = +frequency[1];\n            options.duration = +frequency[2];\n            options.period = ({\n                m: \"minute\",\n                h: \"hour\",\n                d: \"day\"\n            })[frequency[3].toLowerCase()]\n        }\n        if (options.period)\n            switch (options.period.toLowerCase()) {\n                case \"minute\":\n                    expires = options.duration * 60 * 1e3;\n                    break;\n                case \"hour\":\n                    expires = options.duration * 60 * 60 * 1e3;\n                    break;\n                case \"day\":\n                    expires = options.duration * 24 * 60 * 60 * 1e3\n            }\n        posX = typeof options.left != \"undefined\" ? options.left.toString() : window.screenX;\n        posY = typeof options.top != \"undefined\" ? options.top.toString() : window.screenY;\n        numberOfTimes = options.numOfTimes\n    }\n\n    function getCookie(name) {\n        try {\n            var parts = document.cookie.split(name + \"=\");\n            if (parts.length == 2)\n                return unescape(parts.pop().split(\";\").shift()).split(\"|\")\n        } catch (err) {}\n    }\n\n    function setCookie(value, expiresDate) {\n        expiresDate = cookie[1] || expiresDate.toGMTString();\n        document.cookie = cookieName + \"=\" + escape(value + \"|\" + expiresDate) + \";expires=\" + expiresDate + \";path=/\"\n    }\n\n    function addEvent(listenerEvent) {\n        if (document.addEventListener)\n            document.addEventListener(\"click\", listenerEvent, false);\n        else\n            document.attachEvent(\"onclick\", listenerEvent)\n    }\n\n    function removeEvent(listenerEvent) {\n        if (document.removeEventListener)\n            document.removeEventListener(\"click\", listenerEvent, false);\n        else\n            document.detachEvent(\"onclick\", listenerEvent)\n    }\n\n    function isCapped() {\n        cookie = getCookie(cookieName) || [];\n        return !!numberOfTimes &amp;&amp; +numberOfTimes &lt;= +cookie[0]\n    }\n\n    function pop() {\n        var features = \"type=fullWindow, fullscreen, scrollbars=yes\",\n            listenerEvent = function() {\n                var now, next;\n                if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))\n                    if (mobilePopupDisabled)\n                        return;\n                if (isCapped())\n                    return;\n                if (browser.chrome &amp;&amp; parseInt(browser.version.split(\".\")[0], 10) &gt; 30 &amp;&amp; adParams.openNewTab) {\n                    now = new Date;\n                    next = new Date(now.setTime(now.getTime() + expires));\n                    setCookie((+cookie[0] || 0) + 1, next);\n                    removeEvent(listenerEvent);\n                    window.open(\"javascript:window.focus()\", \"_self\", \"\");\n                    simulateClick(url);\n                    popunder = null\n                } else\n                    popunder = _parent.window.open(url, Math.random().toString(36).substring(7), features);\n                if (wrapping) {\n                    popunder.document.write(\"&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\" + unescape(wrapping || \"\") + \"&lt;/body&gt;&lt;/html&gt;\");\n                    popunder.document.body.style.margin = 0\n                }\n                if (popunder) {\n                    now = new Date;\n                    next = new Date(now.setTime(now.getTime() + expires));\n                    setCookie((+cookie[0] || 0) + 1, next);\n                    moveUnder();\n                    removeEvent(listenerEvent)\n                }\n            };\n        addEvent(listenerEvent)\n    }\n    var simulateClick = function(url) {\n        var a = document.createElement(\"a\"),\n            u = !url ? \"data:text/html,&lt;script&gt;window.close();&lt;\\/script&gt;;\" : url,\n            evt = document.createEvent(\"MouseEvents\");\n        a.href = u;\n        document.body.appendChild(a);\n        evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\n        a.dispatchEvent(evt);\n        a.parentNode.removeChild(a)\n    };\n\n    function moveUnder() {\n        try {\n            popunder.blur();\n            popunder.opener.window.focus();\n            window.self.window.focus();\n            window.focus();\n            if (browser.firefox)\n                openCloseWindow();\n            else if (browser.webkit)\n                openCloseTab();\n            else\n                browser.msie &amp;&amp; setTimeout(function() {\n                    popunder.blur();\n                    popunder.opener.window.focus();\n                    window.self.window.focus();\n                    window.focus()\n                }, 1e3)\n        } catch (e) {}\n    }\n\n    function openCloseWindow() {\n        var tmp = popunder.window.open(\"about:blank\");\n        tmp.focus();\n        tmp.close();\n        setTimeout(function() {\n            try {\n                tmp = popunder.window.open(\"about:blank\");\n                tmp.focus();\n                tmp.close()\n            } catch (e) {}\n        }, 1)\n    }\n\n    function openCloseTab() {\n        var ghost = document.createElement(\"a\"),\n            clk;\n        document.getElementsByTagName(\"body\")[0].appendChild(ghost);\n        clk = document.createEvent(\"MouseEvents\");\n        clk.initMouseEvent(\"click\", false, true, window, 0, 0, 0, 0, 0, true, false, false, true, 0, null);\n        ghost.dispatchEvent(clk);\n        ghost.parentNode.removeChild(ghost);\n        window.open(\"about:blank\", \"PopHelper\").close()\n    }\n    pop()\n})(adParams)\n</code></pre>\n"},{"score":0,"body":"<p>This might be a hack, but in Firefox if you specify a third parameter, 'fullscreen=yes', it opens a fresh new window.</p>\n\n<p>For example,</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"window.open('MyPDF.pdf', '_blank', 'fullscreen=yes'); return false;\"&gt;MyPDF&lt;/a&gt;\n</code></pre>\n\n<p>It seems to actually override the browser settings.</p>\n"},{"score":-1,"body":"<p>Opening a new tab from within a Firefox (Mozilla) extension goes like this:</p>\n\n<pre><code>gBrowser.selectedTab = gBrowser.addTab(\"http://example.com\");\n</code></pre>\n"},{"score":13,"body":"<p>Just omitting [strWindowFeatures] parameters will open a new tab, UNLESS the browser setting overrides (browser setting trumps JavaScript).</p>\n\n<h3>New window</h3>\n\n<pre><code>var myWin = window.open(strUrl, strWindowName, [strWindowFeatures]);\n</code></pre>\n\n<h3>New tab</h3>\n\n<pre><code>var myWin = window.open(strUrl, strWindowName);\n</code></pre>\n\n<p>-- or --</p>\n\n<pre><code>var myWin = window.open(strUrl);\n</code></pre>\n"},{"score":254,"body":"<p>One liner:</p>\n<pre><code>Object.assign(document.createElement('a'), { target: '_blank', href: 'URL_HERE'}).click();\n</code></pre>\n<p>It creates a virtual <code>a</code> element, gives it <code>target=&quot;_blank&quot;</code> so it opens in a new tab, gives it proper <code>url</code> <code>href</code> and then clicks it.</p>\n<p>And if you want, based on that you can create some function:</p>\n<pre><code>function openInNewTab(href) {\n  Object.assign(document.createElement('a'), {\n    target: '_blank',\n    href: href,\n  }).click();\n}\n</code></pre>\n<p>and then you can use it like:</p>\n<pre><code>openInNewTab(&quot;https://google.com&quot;); \n</code></pre>\n<p>Important note:</p>\n<p><code>openInNewTab</code> (as well as any other solution on this page) must be called during user action callback - eg. inside click event (not necessary in callback function directly, but during click action).</p>\n<p>If you'll call it manually in some random moment (eg. inside an interval or after server response) - it might be blocked by the browser (which makes sense as it'd be a security risk and might lead to very poor user experience)</p>\n"},{"score":-1,"body":"<p>This way is similar to the above solution but implemented differently  </p>\n\n<p>.social_icon -> some class with CSS  </p>\n\n<pre><code> &lt;div class=\"social_icon\" id=\"SOME_ID\" data-url=\"SOME_URL\"&gt;&lt;/div&gt;\n\n\n $('.social_icon').click(function(){\n\n        var url = $(this).attr('data-url');\n        var win = window.open(url, '_blank');  ///similar to above solution\n        win.focus();\n   });\n</code></pre>\n"},{"score":93,"body":"<p>If you use <code>window.open(url, '_blank')</code>, it will be blocked (popup blocker) on Chrome.</p>\n\n<p>Try this:</p>\n\n<pre><code>//With JQuery\n\n$('#myButton').click(function () {\n    var redirectWindow = window.open('http://google.com', '_blank');\n    redirectWindow.location;\n});\n</code></pre>\n\n<p>With pure JavaScript,</p>\n\n<pre><code>document.querySelector('#myButton').onclick = function() {\n    var redirectWindow = window.open('http://google.com', '_blank');\n    redirectWindow.location;\n};\n</code></pre>\n"},{"score":12,"body":"<p>You can use a trick with <code>form</code>:</p>\n\n<pre><code>$(function () {\n    $('#btn').click(function () {\n        openNewTab(\"http://stackoverflow.com\")\n        return false;\n    });\n});\n\nfunction openNewTab(link) {\n    var frm = $('&lt;form   method=\"get\" action=\"' + link + '\" target=\"_blank\"&gt;&lt;/form&gt;')\n    $(\"body\").append(frm);\n    frm.submit().remove();\n}\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/b039wc1h/3/\" rel=\"noreferrer\">jsFiddle demo</a></p>\n"},{"score":65,"body":"<p>I use the following and it works very well!</p>\n\n<pre><code>window.open(url, '_blank').focus();\n</code></pre>\n"},{"score":-1,"body":"<p>this work for me, just prevent the event, add the url to an <code>&lt;a&gt;</code> <code>tag</code> then trigger the click event on that <code>tag</code>.</p>\n\n<pre><code>Js\n$('.myBtn').on('click', function(event) {\n        event.preventDefault();\n        $(this).attr('href',\"http://someurl.com\");\n        $(this).trigger('click');\n});\nHTML\n&lt;a href=\"#\" class=\"myBtn\" target=\"_blank\"&gt;Go&lt;/a&gt;\n</code></pre>\n"},{"score":3,"body":"<h2>There is an answer to this question and it is not no.</h2>\n\n<blockquote>\n  <p>I found an easy work around:</p>\n</blockquote>\n\n<p>Step 1: Create an invisible link:</p>\n\n<p><code>&lt;a id=\"yourId\" href=\"yourlink.html\" target=\"_blank\" style=\"display: none;\"&gt;&lt;/a&gt;</code></p>\n\n<p>Step 2: Click on that link programmatically:</p>\n\n<p><code>document.getElementById(\"yourId\").click();</code></p>\n\n<p>Here you go! Works a charm for me.</p>\n"},{"score":10,"body":"<pre><code>function openTab(url) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.target = '_blank';\n  document.body.appendChild(link);\n  link.click();\n  link.remove();\n}\n</code></pre>\n"},{"score":4,"body":"<p>JQuery</p>\n\n<pre><code>$('&lt;a /&gt;',{'href': url, 'target': '_blank'}).get(0).click();\n</code></pre>\n\n<p>JS</p>\n\n<pre><code>Object.assign(document.createElement('a'), { target: '_blank', href: 'URL_HERE'}).click();\n</code></pre>\n"},{"score":3,"body":"<p><a href=\"https://i.stack.imgur.com/RCgV9.gif\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/RCgV9.gif\" alt=\"enter image description here\"></a></p>\n\n<p>I researched a lot of information about how to open new tab and stay on the same tab. I have found one small trick to do it.\nLets assume you have url which you need to open - <strong>newUrl</strong> and old url - <strong>currentUrl</strong>, which you need to stay on after new tab opened.\nJS code will look something like next:</p>\n\n<pre><code>// init urls\nlet newUrl = 'http://example.com';\nlet currentUrl = window.location.href;\n// open window with url of current page, you will be automatically moved \n// by browser to a new opened tab. It will look like your page is reloaded\n// and you will stay on same page but with new page opened\nwindow.open(currentUrl , '_blank');\n// on your current tab will be opened new url\nlocation.href = newUrl;\n</code></pre>\n"},{"score":-1,"body":"<p>The <code>window.open(url)</code> will open url in new browser Tab. Belowe JS alternative to it</p>\n\n<pre><code>let a= document.createElement('a');\na.target= '_blank';\na.href= 'https://support.wwf.org.uk/';\na.click(); // we don't need to remove 'a' from DOM because we not add it\n</code></pre>\n\n<p>here is working <a href=\"https://jsfiddle.net/Lamik/L4wax19t/\" rel=\"nofollow noreferrer\">example</a> (stackoverflow snippets not allow to opening new tab)</p>\n"},{"score":1,"body":"<p>Whether to open the URL in a new tab or a new window, is actually controlled by the user's browser preferences. There is no way to override it in JavaScript.</p>\n<p><code>window.open()</code> behaves differently depending on how it is being used. If it is <strong>called as a direct result of a user action</strong>, let us say a button click, it should work fine and open a new tab (or window):</p>\n<pre class=\"lang-js prettyprint-override\"><code>const button = document.querySelector('#openTab');\n\n// add click event listener\nbutton.addEventListener('click', () =&gt; {\n    // open a new tab\n    const tab = window.open('https://attacomsian.com', '_blank');\n});\n</code></pre>\n<p>However, if you try to <strong>open a new tab from an AJAX request callback</strong>, the browser will block it as it was not a direct user action.</p>\n<p>To <strong>bypass the popup blocker</strong> and open a new tab from a callback, here is a <a href=\"https://attacomsian.com/blog/javascript-open-url-in-new-tab#asynchronous-http-request\" rel=\"nofollow noreferrer\">little hack</a>:</p>\n<pre class=\"lang-js prettyprint-override\"><code>const button = document.querySelector('#openTab');\n\n// add click event listener\nbutton.addEventListener('click', () =&gt; {\n\n    // open an empty window\n    const tab = window.open('about:blank');\n\n    // make an API call\n    fetch('/api/validate')\n        .then(res =&gt; res.json())\n        .then(json =&gt; {\n\n            // TODO: do something with JSON response\n\n            // update the actual URL\n            tab.location = 'https://attacomsian.com';\n            tab.focus();\n        })\n        .catch(err =&gt; {\n            // close the empty window\n            tab.close();\n        });\n});\n</code></pre>\n"},{"score":-2,"body":"<p>I tried this way and it seems to work fine</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.open('example.com', 'newWin');\n</code></pre>\n\n<p>I have found a lot of working examples here:</p>\n\n<p><a href=\"http://www.gtalbot.org/FirefoxSection/Popup/PopupAndFirefox.html#TestPopupControl\" rel=\"nofollow noreferrer\">http://www.gtalbot.org/FirefoxSection/Popup/PopupAndFirefox.html#TestPopupControl</a></p>\n"},{"score":0,"body":"<p><strong>Do not use target=&quot;_blank&quot;</strong></p>\n<p>Always use specific name for that window  in my case <code>meaningfulName</code>, in this case you save processor resource:</p>\n<pre><code>button.addEventListener('click', () =&gt; {\n    window.open('https://google.com', 'meaningfulName')\n})\n</code></pre>\n<p>On this way when you click for example 10 times on button, browser will always re-render it in one new tab, instead of opening it in 10 different tabs which will consume much more resources.</p>\n<p>You can read more about this on <code>MDN</code>.</p>\n"},{"score":-1,"body":"<p>There are lots of answer copies suggesting using &quot;_blank&quot; as the target, however I found this didn't work. As Prakash notes, it is up to the browser. However, you can make certain suggestions to the browser, such as to whether the window should have a location bar.</p>\n<p>If you suggest enough <em><strong>&quot;tab-like things&quot;</strong></em> you <em><strong>might</strong></em> get a tab, <a href=\"https://stackoverflow.com/questions/15818892/chrome-javascript-window-open-in-new-tab\">as per Nico's answer to this more specific question for chrome</a>:</p>\n<pre><code>window.open('http://www.stackoverflow.com', '_blank', 'toolbar=yes, location=yes, status=yes, menubar=yes, scrollbars=yes');\n</code></pre>\n<p>Disclaimer: This is not a panacea. It is still up to the user and browser. Now at least you've specified one more preference for what you'd like your window to look like.</p>\n"}],"score":2259}