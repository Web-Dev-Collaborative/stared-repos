{"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj = {\r\n    name: \"Simon\",\r\n    age: \"20\",\r\n    clothing: {\r\n        style: \"simple\",\r\n        hipster: false\r\n    }\r\n}\r\n\r\nfor(var propt in obj){\r\n    console.log(propt + ': ' + obj[propt]);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>How does the variable <code>propt</code> represent the properties of the object? It's not a built-in method or property. Why does it come up with every property in the object?</p>\n","title":"Iterate through object properties","answers":[{"score":222,"body":"<p>It's the <code>for...in statement</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\">MDN</a>, <a href=\"http://es5.github.io/#x12.6.4\" rel=\"noreferrer\">ECMAScript spec</a>).</p>\n\n<p>You can read it as \"<strong>FOR</strong> every property <strong>IN</strong> the <code>obj</code> object, assign each property to the <strong>PROPT</strong> variable in turn\".</p>\n"},{"score":37,"body":"<p>It's just a <code>for...in</code> loop. Check out <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in\" rel=\"noreferrer\">the documentation at Mozilla</a>.</p>\n"},{"score":9,"body":"<p>Your <code>for</code> loop is iterating over all of the properties of the object <code>obj</code>. <code>propt</code> is defined in the first line of your for loop. It is a string that is a name of a property of the <code>obj</code> object. In the first iteration of the loop, <code>propt</code> would be \"name\".</p>\n"},{"score":9,"body":"<p>Objects in JavaScript are collections of properties and can therefore be looped in a for each statement. </p>\n\n<p>You should think of <code>obj</code> as an key value collection.</p>\n"},{"score":2473,"body":"<p>Iterating over properties requires this additional <code>hasOwnProperty</code> check: </p>\n\n<pre><code>for (var prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n        // do stuff\n    }\n}\n</code></pre>\n\n<p>It's necessary because an object's prototype contains additional properties for the object which are technically part of the object. These additional properties are inherited from the base object class, but are still properties of <code>obj</code>.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\" rel=\"noreferrer\"><code>hasOwnProperty</code></a> simply checks to see if this is a property specific to this class, and not one inherited from the base class.</p>\n\n<hr>\n\n<p>It's also possible to call <code>hasOwnProperty</code> through the object itself:</p>\n\n<pre><code>if (obj.hasOwnProperty(prop)) {\n    // do stuff\n}\n</code></pre>\n\n<p>But this will fail if the object has an unrelated field with the same name:</p>\n\n<pre><code>var obj = { foo: 42, hasOwnProperty: 'lol' };\nobj.hasOwnProperty('foo');  // TypeError: hasOwnProperty is not a function\n</code></pre>\n\n<p>That's why it's safer to call it through <code>Object.prototype</code> instead:</p>\n\n<pre><code>var obj = { foo: 42, hasOwnProperty: 'lol' };\nObject.prototype.hasOwnProperty.call(obj, 'foo');  // true\n</code></pre>\n"},{"score":1187,"body":"<p>As of JavaScript 1.8.5 you can use <code>Object.keys(obj)</code> to get an Array of properties defined on the object itself (the ones that return true for <code>obj.hasOwnProperty(key)</code>).</p>\n\n<pre><code>Object.keys(obj).forEach(function(key,index) {\n    // key: the name of the object key\n    // index: the ordinal position of the key within the object \n});\n</code></pre>\n\n<p>This is better (and more readable) than using a for-in loop.</p>\n\n<p>Its supported on these browsers: </p>\n\n<ul>\n<li>Firefox (Gecko): 4 (2.0)</li>\n<li>Chrome: 5</li>\n<li>Internet Explorer: 9</li>\n</ul>\n\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"noreferrer\">the Mozilla Developer Network <strong>Object.keys()</strong>'s reference</a> for futher information.</p>\n"},{"score":3,"body":"<p>What for..in loop does is that it creates a new variable (var someVariable) and then stores each property of the given object in this new variable(someVariable) one by one. Therefore if you use block {}, you can iterate. Consider the following example. </p>\n\n<pre><code>var obj = {\n     name:'raman',\n     hobby:'coding',\n     planet:'earth'\n     };\n\nfor(var someVariable in obj) {\n  //do nothing..\n}\n\nconsole.log(someVariable); // outputs planet\n</code></pre>\n"},{"score":13,"body":"<p>The for...in loop represents each property in an object because it is just like a for loop. You defined propt in the for...in loop by doing:</p>\n\n<pre><code>    for(var propt in obj){\nalert(propt + ': ' + obj[propt]);\n}\n</code></pre>\n\n<p>A for...in loop iterates through the enumerable properties of an object. Whichever variable you define, or put in the for...in loop, changes each time it goes to the next property it iterates. The variable in the for...in loop iterates through the keys, but the value of it is the key's value. For example:</p>\n\n<pre><code>    for(var propt in obj) {\n      console.log(propt);//logs name\n      console.log(obj[propt]);//logs \"Simon\"\n    }\n</code></pre>\n\n<p>You can see how the variable differs from the variable's value. In contrast, a for...of loop does the opposite.</p>\n\n<p>I hope this helps.</p>\n"},{"score":3,"body":"<p>I want to add to the answers above, because you might have different intentions from Javascript.  A JSON object and a Javascript object are different things, and you might want to iterate through the properties of a JSON object using the solutions proposed above, and then be surprised. </p>\n\n<p>Suppose that you have a JSON object like:</p>\n\n<pre><code>var example = {\n    \"prop1\": \"value1\",\n    \"prop2\": [ \"value2_0\", value2_1\"],\n    \"prop3\": {\n         \"prop3_1\": \"value3_1\"\n    }\n}\n</code></pre>\n\n<p><strong>The wrong way to iterate through its 'properties':</strong></p>\n\n<pre><code>function recursivelyIterateProperties(jsonObject) {\n    for (var prop in Object.keys(example)) {\n        console.log(prop);\n        recursivelyIterateProperties(jsonObject[prop]);\n    }\n}\n</code></pre>\n\n<p>You might be surprised of seeing the console logging <code>0</code>, <code>1</code>, etc. when iterating through the properties of <code>prop1</code> and <code>prop2</code> and of <code>prop3_1</code>. Those objects are sequences, and the indexes of a sequence are properties of that object in Javascript.</p>\n\n<p><strong>A better way to recursively iterate through a JSON object properties</strong> would be to first check if that object is a sequence or not:</p>\n\n<pre><code>function recursivelyIterateProperties(jsonObject) {\n    for (var prop in Object.keys(example)) {\n        console.log(prop);\n        if (!(typeof(jsonObject[prop]) === 'string')\n            &amp;&amp; !(jsonObject[prop] instanceof Array)) {\n                recursivelyIterateProperties(jsonObject[prop]);\n\n            }\n\n     }\n}\n</code></pre>\n"},{"score":4,"body":"<p>Also adding the recursive way:</p>\n\n<pre><code>function iterate(obj) {\n    // watch for objects we've already iterated so we won't end in endless cycle\n    // for cases like var foo = {}; foo.bar = foo; iterate(foo);\n    var walked = [];\n    var stack = [{obj: obj, stack: ''}];\n    while(stack.length &gt; 0)\n    {\n        var item = stack.pop();\n        var obj = item.obj;\n        for (var property in obj) {\n            if (obj.hasOwnProperty(property)) {\n                if (typeof obj[property] == \"object\") {\n                  // check if we haven't iterated through the reference yet\n                  var alreadyFound = false;\n                  for(var i = 0; i &lt; walked.length; i++)\n                  {\n                    if (walked[i] === obj[property])\n                    {\n                      alreadyFound = true;\n                      break;\n                    }\n                  }\n                  // new object reference\n                  if (!alreadyFound)\n                  {\n                    walked.push(obj[property]);\n                    stack.push({obj: obj[property], stack: item.stack + '.' + property});\n                  }\n                }\n                else\n                {\n                    console.log(item.stack + '.' + property + \"=\" + obj[property]);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>iterate({ foo: \"foo\", bar: { foo: \"foo\"} }); \n</code></pre>\n"},{"score":3,"body":"<p>Here I am iterating each node and creating meaningful node names. If you notice, instanceOf Array and instanceOf Object pretty much does the same thing (in my application, i am giving different logic though)</p>\n\n<pre><code>function iterate(obj,parent_node) {\n    parent_node = parent_node || '';\n    for (var property in obj) {\n        if (obj.hasOwnProperty(property)) {\n            var node = parent_node + \"/\" + property;\n            if(obj[property] instanceof Array) {\n                //console.log('array: ' + node + \":\" + obj[property]);\n                iterate(obj[property],node)\n            } else if(obj[property] instanceof Object){\n                //console.log('Object: ' + node + \":\" + obj[property]);\n                iterate(obj[property],node)\n            }\n            else {\n                console.log(node + \":\" + obj[property]);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>note - I am inspired by Ondrej Svejdar's answer. But this solution has better performance and less ambiguous</p>\n"},{"score":21,"body":"<p>jquery allows you to do this now:</p>\n\n<pre><code>$.each( obj, function( key, value ) {\n  alert( key + \": \" + value );\n});\n</code></pre>\n"},{"score":3,"body":"<p>You basically want to loop through each property in the object.</p>\n\n<p><a href=\"https://jsfiddle.net/HovyTech/djf2q8e8/\" rel=\"nofollow\">JSFiddle</a></p>\n\n<pre><code>var Dictionary = {\n  If: {\n    you: {\n      can: '',\n      make: ''\n    },\n    sense: ''\n  },\n  of: {\n    the: {\n      sentence: {\n        it: '',\n        worked: ''\n      }\n    }\n  }\n};\n\nfunction Iterate(obj) {\n  for (prop in obj) {\n    if (obj.hasOwnProperty(prop) &amp;&amp; isNaN(prop)) {\n      console.log(prop + ': ' + obj[prop]);\n      Iterate(obj[prop]);\n    }\n  }\n}\nIterate(Dictionary);\n</code></pre>\n"},{"score":10,"body":"<p>Nowadays you can convert a standard JS object into an iterable object just by adding a Symbol.iterator method. Then you can use a <code>for of</code> loop and acceess its values directly or even can use a spread operator on the object too. Cool. Let's see how we can make it:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var o = {a:1,b:2,c:3},\r\n    a = [];\r\no[Symbol.iterator] = function*(){\r\n                       var ok = Object.keys(this);\r\n                            i = 0;\r\n                       while (i &lt; ok.length) yield this[ok[i++]];\r\n                     };\r\nfor (var value of o) console.log(value);\r\n// or you can even do like\r\na = [...o];\r\nconsole.log(a);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":184,"body":"<p>In up-to-date implementations of ES, you can use <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"noreferrer\"><code>Object.entries</code></a>:</p>\n\n<pre><code>for (const [key, value] of Object.entries(obj)) { }\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Object.entries(obj).forEach(([key, value]) =&gt; ...)\n</code></pre>\n\n<p>If you just want to iterate over the values, then use Object.values:</p>\n\n<pre><code>for (const value of Object.values(obj)) { }\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Object.values(obj).forEach(value =&gt; ...)\n</code></pre>\n"},{"score":12,"body":"<p>You can use Lodash. <a href=\"https://lodash.com/docs/4.16.6#keys\" rel=\"noreferrer\" title=\"documentation\">The documentation</a> </p>\n\n<pre><code>var obj = {a: 1, b: 2, c: 3};\n_.keys(obj).forEach(function (key) {\n    ...\n});\n</code></pre>\n"},{"score":330,"body":"<p>Girls and guys we are in 2019 and we do not have that much time for typing... So lets do this cool new fancy ECMAScript 2016:</p>\n\n<pre><code>Object.keys(obj).forEach(e =&gt; console.log(`key=${e}  value=${obj[e]}`));\n</code></pre>\n"},{"score":11,"body":"<pre><code>let obj = {\"a\": 3, \"b\": 2, \"6\": \"a\"}\n\nObject.keys(obj).map((item) =&gt; {console.log(\"item\", obj[item])})\n\n// a\n// 3\n// 2\n</code></pre>\n"},{"score":7,"body":"<p>If running <strong>Node</strong> I'd recommend:</p>\n\n<pre><code>Object.keys(obj).forEach((key, index) =&gt; {\n    console.log(key);\n});\n</code></pre>\n"},{"score":1,"body":"<p>To further refine the accepted answer it's worth noting that if you instantiate the object with a <code>var object = Object.create(null)</code> then <code>object.hasOwnProperty(property)</code> will trigger a TypeError. So to be on the safe side, you'd need to call it from the prototype like this:</p>\n\n<pre><code>for (var property in object) {\n    if (Object.prototype.hasOwnProperty.call(object, property)) {\n        // do stuff\n    }\n}\n</code></pre>\n"},{"score":28,"body":"<p>If your environment supports <strong>ES2017</strong> then I would recommend <strong>Object.entries</strong>:</p>\n\n<pre><code>Object.entries(obj).forEach(([key, value]) =&gt; {\n  console.log(`${key} ${value}`);\n});\n</code></pre>\n\n<p>As shown in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\" rel=\"noreferrer\">Mozillas Object.entries()</a> documentation:</p>\n\n<blockquote>\n  <p>The <strong>Object.entries()</strong> method returns an array of a given object's own\n  enumerable property [key, value] pairs, in the same order as that\n  provided by a for...in loop (the difference being that a for-in loop\n  enumerates properties in the prototype chain as well).</p>\n</blockquote>\n\n<p>Basically with Object.entries we can forgo the following extra step that is required with the older <strong>for...in</strong> loop:</p>\n\n<pre><code>// This step is not necessary with Object.entries\nif (object.hasOwnProperty(property)) {\n  // do stuff\n}\n</code></pre>\n"},{"score":17,"body":"<p>The above answers are a bit annoying because they don't explain what you do inside the for loop after you ensure it's an object: YOU DON'T ACCESS IT DIRECTLY! You are actually only delivered the KEY that you need to apply to the OBJ:</p>\n\n<pre><code>var obj = {\n  a: \"foo\",\n  b: \"bar\",\n  c: \"foobar\"\n};\n\n// We need to iterate the string keys (not the objects)\nfor(var someKey in obj)\n{\n  // We check if this key exists in the obj\n  if (obj.hasOwnProperty(someKey))\n  {\n    // someKey is only the KEY (string)! Use it to get the obj:\n    var myActualPropFromObj = obj[someKey]; // Since dynamic, use [] since the key isn't literally named \"someKey\"\n\n    // NOW you can treat it like an obj\n    var shouldBeBar = myActualPropFromObj.b;\n  }\n}\n</code></pre>\n\n<p>This is all ECMA5 safe. Even works in the lame JS versions like Rhino ;)</p>\n"},{"score":21,"body":"<p><a href=\"https://stackoverflow.com/a/16735184/330867\">Dominik's</a> answer is perfect, I just prefer to do it that way, as it's cleaner to read:</p>\n\n<pre><code>for (var property in object) {\n    if (!object.hasOwnProperty(property)) continue;\n\n    // Do stuff...\n}\n</code></pre>\n"},{"score":12,"body":"<pre><code>Object.keys(obj).forEach(key =&gt;\n  console.log(`key=${key} value=${obj[key]}`)\n);\n</code></pre>\n"},{"score":16,"body":"<p>To add ES2015's usage of <code>Reflect.ownKeys(obj)</code> and also iterating over the properties via an iterator.</p>\n\n<p>For example:</p>\n\n<pre><code>let obj = { a: 'Carrot', b: 'Potato', Car: { doors: 4 } };\n</code></pre>\n\n<p>can be iterated over by</p>\n\n<pre><code>// logs each key\nReflect.ownKeys(obj).forEach(key =&gt; console.log(key));\n</code></pre>\n\n<p>If you would like to iterate directly over the values of the keys of an object, you can define an <code>iterator</code>, just like JavaScipts's default iterators for strings, arrays, typed arrays, Map and Set.</p>\n\n<p>JS will attempt to iterate via the default iterator property, which must be defined as <code>Symbol.iterator</code>.</p>\n\n<p>If you want to be able to iterate over all objects you can add it as a prototype of Object:</p>\n\n<pre><code>Object.prototype[Symbol.iterator] = function*() { \n    for(p of Reflect.ownKeys(this)){ yield this[p]; }\n}\n</code></pre>\n\n<p>This would enable you to iterate over the values of an object with a for...of loop, for example:</p>\n\n<pre><code>for(val of obj) { console.log('Value is:' + val ) }\n</code></pre>\n\n<p><strong>Caution</strong>: As of writing this answer (June 2018) all other browsers, but IE, support generators and <code>for...of</code> iteration via <code>Symbol.iterator</code></p>\n"},{"score":5,"body":"<p>While the top-rated answer is correct, here is an alternate use case i.e if you are iterating over an object and want to create an array in the end. Use <code>.map</code> instead of <code>forEach</code> </p>\n\n<pre><code>const newObj = Object.keys(obj).map(el =&gt; {\n    //ell will hold keys \n   // Getting the value of the keys should be as simple as obj[el]\n})\n</code></pre>\n"},{"score":27,"body":"<pre><code>if(Object.keys(obj).length) {\n    Object.keys(obj).forEach(key =&gt; {\n        console.log(&quot;\\n&quot; + key + &quot;: &quot; + obj[key]);\n    });\n}\n\n// *** Explanation line by line ***\n\n// Explaining the bellow line\n// It checks if obj has at least one property. Here is how:\n// Object.keys(obj) will return an array with all keys in obj.\n// Keys are just the regular incremental numbers starting from 0.\n// If there is no keys in obj, it will return empty array = []\n// Then it will get its length. At this point, it checks: \n// If it has at least one element, it means it's bigger than 0 \n// which evaluates to true and the bellow code will be executed.\n// Else means it's length = 0 which evaluates to false\n// NOTE: you can use Object.hasOwnProperty() instead of Object.keys(obj).length\nif(Object.keys(obj).length) {\n\n    // Explaining the bellow line\n    // Just like in the previous line, this returns an array with\n    // all keys in obj (because if code execution got here, it means \n    // obj has keys.) \n    // Then just invoke built-in javascript forEach() to loop\n    // over each key in returned array and calls a call back function \n    // on each array element (key), using ES6 arrow function (=&gt;)\n    // Or you can just use a normal function ((key) { blah blah }).\n    Object.keys(obj).forEach(key =&gt; {\n\n        // The bellow line prints out all keys with their \n        // respective value in obj.\n        // key comes from the returned array in Object.keys(obj)\n        // obj[key] returns the value of key in obj\n        console.log(&quot;\\n&quot; + key + &quot;: &quot; + obj[key]);\n    });\n}\n</code></pre>\n"},{"score":1,"body":"<p>Check this link it will help <a href=\"https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_state_forin\" rel=\"nofollow noreferrer\">https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_state_forin</a></p>\n\n<pre><code>var person = {fname:\"John\", lname:\"Doe\", age:25}; \n\n  var text = \"\";\n  var x;\n  for (x in person) {\n    text += person[x] + \" \"; // where x will be fname,lname,age\n   }\nConsole.log(text);\n</code></pre>\n"},{"score":0,"body":"<h1>Check type</h1>\n<p>You can check how propt represent object propertis by</p>\n<pre><code>typeof propt\n</code></pre>\n<p>to discover that it's just a string (name of property). It come up with every property in the object due the way of how <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\" rel=\"nofollow noreferrer\"><code>for-in</code></a> js &quot;build-in&quot; loop works.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var obj = {\n    name: \"Simon\",\n    age: \"20\",\n    clothing: {\n        style: \"simple\",\n        hipster: false\n    }\n}\n\nfor(var propt in obj){\n    console.log(typeof propt,  propt + ': ' + obj[propt]);\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>You can access the nested properties of object using <code>for...in</code> and <code>forEach</code> loop.</p>\n<h2><code>for...in</code>:</h2>\n<pre class=\"lang-js prettyprint-override\"><code>for (const key in info) {\n    consoled.log(info[key]);\n}\n</code></pre>\n<h2><code>forEach</code>:</h2>\n<pre class=\"lang-js prettyprint-override\"><code>Object.keys(info).forEach(function(prop) {\n    console.log(info[prop]);\n    // cities: Array[3], continent: &quot;North America&quot;, images: Array[3], name: &quot;Canada&quot;\n    // &quot;prop&quot; is the property name\n    // &quot;data[prop]&quot; is the property value\n});\n</code></pre>\n"}],"score":2122}