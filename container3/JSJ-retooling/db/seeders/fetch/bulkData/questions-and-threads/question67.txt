{"body":"<p>In JavaScript, how can I format a date object to print as <code>10-Aug-2010</code>?</p>\n","title":"How to format a JavaScript date","answers":[{"score":1444,"body":"<p>For custom-delimited date formats, you have to pull out the date (or time)\ncomponents from a <a href=\"//developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\" rel=\"noreferrer\"><code>DateTimeFormat</code></a> object (which is part of the\n<a href=\"//developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noreferrer\">ECMAScript Internationalization API</a>), and then manually create a string\nwith the delimiters you want.</p>\n<p>To do this, you can use <a href=\"//developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\" rel=\"noreferrer\"><code>DateTimeFormat#formatToParts</code></a>. You could\ndestructure the array, but that is not ideal, as the array output depends on the\nlocale:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// example 1\nconst o_date_en = new Intl.DateTimeFormat('en');\nconst a_date_en = o_date_en.formatToParts();\n// example 2\nconst o_date_hi = new Intl.DateTimeFormat('hi');\nconst a_date_hi = o_date_hi.formatToParts();\n// print\nconsole.log(a_date_en, a_date_hi);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Better would be to reduce the array into an object:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const o_date = new Intl.DateTimeFormat;\nconst f_date = (m_ca, m_it) =&gt; Object({...m_ca, [m_it.type]: m_it.value});\nconst m_date = o_date.formatToParts().reduce(f_date, {});\nconsole.log(m_date.day + '-' + m_date.month + '-' + m_date.year);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>You can also pull out the parts of a <code>DateTimeFormat</code> one-by-one using\n<a href=\"//developer.mozilla.org/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/format\" rel=\"noreferrer\"><code>DateTimeFormat#format</code></a>, but note that when using this method, as of March\n2020, there is <a href=\"//stackoverflow.com/questions/60544534#60545316\">a bug</a> in the ECMAScript implementation when it comes to\nleading zeros on minutes and seconds (this bug is circumvented by the approach\nabove).</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const d = new Date(2010, 7, 5);\nconst ye = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\nconst mo = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);\nconst da = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\nconsole.log(`${da}-${mo}-${ye}`);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>When working with dates and times, it is usually worth using a library (eg.\n<a href=\"//momentjs.com\" rel=\"noreferrer\">moment.js</a>, <a href=\"//moment.github.io/luxon\" rel=\"noreferrer\">luxon</a>) because of the many hidden complexities of the\nfield.</p>\n<p>Note that the ECMAScript Internationalization API, used in the solutions above\nis not supported <a href=\"//caniuse.com#search=datetimeformat\" rel=\"noreferrer\">in IE10</a> (<a href=\"//gs.statcounter.com/browser-version-market-share\" rel=\"noreferrer\">0.03%</a> global browser market share in Feb\n2020).</p>\n"},{"score":619,"body":"<p>Use the <a href=\"http://blog.stevenlevithan.com/archives/date-time-format\" rel=\"noreferrer\">date.format library</a>:</p>\n\n<pre><code>var dateFormat = require('dateformat');\nvar now = new Date();\ndateFormat(now, \"dddd, mmmm dS, yyyy, h:MM:ss TT\");\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>Saturday, June 9th, 2007, 5:46:21 PM \n</code></pre>\n\n<p><a href=\"https://www.npmjs.com/package/dateformat\" rel=\"noreferrer\">dateformat on npm</a></p>\n\n<p><a href=\"http://jsfiddle.net/phZr7/1/\" rel=\"noreferrer\">http://jsfiddle.net/phZr7/1/</a></p>\n"},{"score":139,"body":"<p>I think you can just use the <strong>non-standard</strong> Date method <code>toLocaleFormat(formatString)</code></p>\n\n<p><strong>formatString:</strong> A format string in the same format expected by the <a href=\"http://www.cplusplus.com/reference/clibrary/ctime/strftime/\" rel=\"noreferrer\" title=\"strftime\"><code>strftime()</code></a> function in C.</p>\n\n<pre><code>var today = new Date();\ntoday.toLocaleFormat('%d-%b-%Y'); // 30-Dec-2011\n</code></pre>\n\n<p><strong>References:</strong></p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat\" rel=\"noreferrer\" title=\"toLocaleFormat\">tolocaleformat</a></li>\n<li><a href=\"http://www.cplusplus.com/reference/clibrary/ctime/strftime/\" rel=\"noreferrer\" title=\"strftime\">strftime</a></li>\n</ul>\n"},{"score":51,"body":"<p>You should have a look at <a href=\"http://www.datejs.com/\" rel=\"noreferrer\">date.js</a>. It adds many convenient helpers for working with dates, for example, in your case:</p>\n\n<pre><code>var date = Date.parse('2010-08-10');\nconsole.log(date.toString('dd-MMM-yyyy'));\n</code></pre>\n\n<p>Getting started: <a href=\"http://www.datejs.com/2007/11/27/getting-started-with-datejs/\" rel=\"noreferrer\">http://www.datejs.com/2007/11/27/getting-started-with-datejs/</a></p>\n"},{"score":-5,"body":"<p>This library can format the date object and parse the formatted string back to Date object.\nIt uses Java format (SimpleDateFormat class). The name of months and days can be localized.</p>\n\n<p><a href=\"http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip\" rel=\"nofollow\">http://www.javascriptsource.com/repository/javascripts/2009/03/880961/JS_Simple_Date_Format.zip</a></p>\n\n<p>Example:</p>\n\n<pre><code>var sdf = new JsSimpleDateFormat(\"dd-MMM-yyyy\");\nvar formattedString = sdf.format(new Date());\nvar dateObject = sdf.parse(\"10-Aug-2010\");\n</code></pre>\n"},{"score":440,"body":"<p>Well, what I wanted was to convert today's date to a <a href=\"http://en.wikipedia.org/wiki/MySQL\" rel=\"noreferrer\">MySQL</a> friendly date string like 2012-06-23, and to use that string as a parameter in one of my queries. The simple solution I've found is this:</p>\n\n<pre><code>var today = new Date().toISOString().slice(0, 10);\n</code></pre>\n\n<p>Keep in mind that the above solution does <strong>not</strong> take into account your timezone offset.</p>\n\n<p>You might consider using this function instead:</p>\n\n<pre><code>function toJSONLocal (date) {\n    var local = new Date(date);\n    local.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n    return local.toJSON().slice(0, 10);\n}\n</code></pre>\n\n<p>This will give you the correct date in case you are executing this code around the start/end of the day.</p>\n\n<ul>\n<li>Example: <a href=\"http://jsfiddle.net/simo/sapuhzmm/\" rel=\"noreferrer\">http://jsfiddle.net/simo/sapuhzmm/</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\" rel=\"noreferrer\">Date.toISOString</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON\" rel=\"noreferrer\">Date.toJSON</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"noreferrer\">String.slice</a></li>\n</ul>\n"},{"score":4,"body":"<p>Add the <a href=\"http://en.wikipedia.org/wiki/JQuery_UI\" rel=\"nofollow\">jQuery UI</a> plugin to your page:</p>\n\n<pre><code>function DateFormate(dateFormate, datetime) {\n    return $.datepicker.formatDate(dateFormate, datetime);\n};\n</code></pre>\n"},{"score":8,"body":"<p>Sugar.js has excellent extensions to the Date object, including a <a href=\"http://sugarjs.com/api/Date/format\" rel=\"nofollow noreferrer\">Date.format</a> method.</p>\n\n<p>Examples from the documentation:</p>\n\n<pre><code>Date.create().format('{Weekday} {Month} {dd}, {yyyy}');\n\nDate.create().format('{12hr}:{mm}{tt}')\n</code></pre>\n"},{"score":20,"body":"<p>Here's is some code I just wrote to handle the date formatting for a project I'm working on. It mimics the PHP date formatting functionality to suit my needs. Feel free to use it, it's just extending the already existing Date() object. This may not be the most elegant solution but it's working for my needs.</p>\n\n<pre><code>var d = new Date(); \nd_string = d.format(\"m/d/Y h:i:s\");\n\n/**************************************\n * Date class extension\n * \n */\n    // Provide month names\n    Date.prototype.getMonthName = function(){\n        var month_names = [\n                            'January',\n                            'February',\n                            'March',\n                            'April',\n                            'May',\n                            'June',\n                            'July',\n                            'August',\n                            'September',\n                            'October',\n                            'November',\n                            'December'\n                        ];\n\n        return month_names[this.getMonth()];\n    }\n\n    // Provide month abbreviation\n    Date.prototype.getMonthAbbr = function(){\n        var month_abbrs = [\n                            'Jan',\n                            'Feb',\n                            'Mar',\n                            'Apr',\n                            'May',\n                            'Jun',\n                            'Jul',\n                            'Aug',\n                            'Sep',\n                            'Oct',\n                            'Nov',\n                            'Dec'\n                        ];\n\n        return month_abbrs[this.getMonth()];\n    }\n\n    // Provide full day of week name\n    Date.prototype.getDayFull = function(){\n        var days_full = [\n                            'Sunday',\n                            'Monday',\n                            'Tuesday',\n                            'Wednesday',\n                            'Thursday',\n                            'Friday',\n                            'Saturday'\n                        ];\n        return days_full[this.getDay()];\n    };\n\n    // Provide full day of week name\n    Date.prototype.getDayAbbr = function(){\n        var days_abbr = [\n                            'Sun',\n                            'Mon',\n                            'Tue',\n                            'Wed',\n                            'Thur',\n                            'Fri',\n                            'Sat'\n                        ];\n        return days_abbr[this.getDay()];\n    };\n\n    // Provide the day of year 1-365\n    Date.prototype.getDayOfYear = function() {\n        var onejan = new Date(this.getFullYear(),0,1);\n        return Math.ceil((this - onejan) / 86400000);\n    };\n\n    // Provide the day suffix (st,nd,rd,th)\n    Date.prototype.getDaySuffix = function() {\n        var d = this.getDate();\n        var sfx = [\"th\",\"st\",\"nd\",\"rd\"];\n        var val = d%100;\n\n        return (sfx[(val-20)%10] || sfx[val] || sfx[0]);\n    };\n\n    // Provide Week of Year\n    Date.prototype.getWeekOfYear = function() {\n        var onejan = new Date(this.getFullYear(),0,1);\n        return Math.ceil((((this - onejan) / 86400000) + onejan.getDay()+1)/7);\n    } \n\n    // Provide if it is a leap year or not\n    Date.prototype.isLeapYear = function(){\n        var yr = this.getFullYear();\n\n        if ((parseInt(yr)%4) == 0){\n            if (parseInt(yr)%100 == 0){\n                if (parseInt(yr)%400 != 0){\n                    return false;\n                }\n                if (parseInt(yr)%400 == 0){\n                    return true;\n                }\n            }\n            if (parseInt(yr)%100 != 0){\n                return true;\n            }\n        }\n        if ((parseInt(yr)%4) != 0){\n            return false;\n        } \n    };\n\n    // Provide Number of Days in a given month\n    Date.prototype.getMonthDayCount = function() {\n        var month_day_counts = [\n                                    31,\n                                    this.isLeapYear() ? 29 : 28,\n                                    31,\n                                    30,\n                                    31,\n                                    30,\n                                    31,\n                                    31,\n                                    30,\n                                    31,\n                                    30,\n                                    31\n                                ];\n\n        return month_day_counts[this.getMonth()];\n    } \n\n    // format provided date into this.format format\n    Date.prototype.format = function(dateFormat){\n        // break apart format string into array of characters\n        dateFormat = dateFormat.split(\"\");\n\n        var date = this.getDate(),\n            month = this.getMonth(),\n            hours = this.getHours(),\n            minutes = this.getMinutes(),\n            seconds = this.getSeconds();\n        // get all date properties ( based on PHP date object functionality )\n        var date_props = {\n            d: date &lt; 10 ? '0'+date : date,\n            D: this.getDayAbbr(),\n            j: this.getDate(),\n            l: this.getDayFull(),\n            S: this.getDaySuffix(),\n            w: this.getDay(),\n            z: this.getDayOfYear(),\n            W: this.getWeekOfYear(),\n            F: this.getMonthName(),\n            m: month &lt; 10 ? '0'+(month+1) : month+1,\n            M: this.getMonthAbbr(),\n            n: month+1,\n            t: this.getMonthDayCount(),\n            L: this.isLeapYear() ? '1' : '0',\n            Y: this.getFullYear(),\n            y: this.getFullYear()+''.substring(2,4),\n            a: hours &gt; 12 ? 'pm' : 'am',\n            A: hours &gt; 12 ? 'PM' : 'AM',\n            g: hours % 12 &gt; 0 ? hours % 12 : 12,\n            G: hours &gt; 0 ? hours : \"12\",\n            h: hours % 12 &gt; 0 ? hours % 12 : 12,\n            H: hours,\n            i: minutes &lt; 10 ? '0' + minutes : minutes,\n            s: seconds &lt; 10 ? '0' + seconds : seconds           \n        };\n\n        // loop through format array of characters and add matching data else add the format character (:,/, etc.)\n        var date_string = \"\";\n        for(var i=0;i&lt;dateFormat.length;i++){\n            var f = dateFormat[i];\n            if(f.match(/[a-zA-Z]/g)){\n                date_string += date_props[f] ? date_props[f] : '';\n            } else {\n                date_string += f;\n            }\n        }\n\n        return date_string;\n    };\n/*\n *\n * END - Date class extension\n * \n ************************************/\n</code></pre>\n"},{"score":179,"body":"<p>If you are <strong>already using jQuery UI</strong> in your project you could do it this way: </p>\n\n<pre><code>var formatted = $.datepicker.formatDate(\"M d, yy\", new Date(\"2014-07-08T09:02:21.377\"));\n\n// formatted will be 'Jul 8, 2014'\n</code></pre>\n\n<p>Some datepicker date format options to play with are available <a href=\"https://jqueryui.com/resources/demos/datepicker/date-formats.html\" rel=\"noreferrer\">here</a>.</p>\n"},{"score":2,"body":"<p>Here is a script that does exactly what you want</p>\n\n<p><a href=\"https://github.com/UziTech/js-date-format\" rel=\"nofollow\">https://github.com/UziTech/js-date-format</a></p>\n\n<pre><code>var d = new Date(\"2010-8-10\");\ndocument.write(d.format(\"DD-MMM-YYYY\"));\n</code></pre>\n"},{"score":20,"body":"<p>A JavaScript solution without using any external libraries:</p>\n\n<pre><code>var now = new Date()\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nvar formattedDate = now.getDate() + \"-\" + months[now.getMonth()] + \"-\" + now.getFullYear()\nalert(formattedDate)\n</code></pre>\n"},{"score":39,"body":"<p>@Sébastien  -- alternative all browser support</p>\n\n<pre><code>new Date(parseInt(496407600)*1000).toLocaleDateString('de-DE', {\nyear: 'numeric',\nmonth: '2-digit',\nday: '2-digit'\n}).replace(/\\./g, '/');\n</code></pre>\n\n<p>Documentation:\n <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</a></p>\n"},{"score":15,"body":"<p>If you are using jQuery UI in your code, there is an inbuilt function called <code>formatDate()</code>. I am using it this way to format today's date:</p>\n\n<pre><code>var testdate = Date();\ntestdate = $.datepicker.formatDate( \"d-M-yy\",new Date(testdate));\nalert(testdate);\n</code></pre>\n\n<p>You can see  <a href=\"http://api.jqueryui.com/datepicker/#option-dateFormat\" rel=\"noreferrer\">many other examples of formatting date in the jQuery UI documentation</a>.</p>\n"},{"score":111,"body":"<p>Plain JavaScript is the best pick for small onetimers.</p>\n\n<p>On the other hand, if you need more date stuff, <a href=\"http://momentjs.com/\" rel=\"noreferrer\">MomentJS</a> is a great solution.</p>\n\n<p><strong>For example:</strong></p>\n\n<pre><code>moment().format('YYYY-MM-DD HH:m:s');     // now() -&gt; 2015-03-24 14:32:20\nmoment(\"20111031\", \"YYYYMMDD\").fromNow(); // 3 years ago\nmoment(\"20120620\", \"YYYYMMDD\").fromNow(); // 3 years ago\nmoment().startOf('day').fromNow();        // 11 hours ago\nmoment().endOf('day').fromNow();          // in 13 hours\n</code></pre>\n"},{"score":1,"body":"<p>Use:</p>\n\n<pre><code>thisDate = new Date(parseInt(jsonDateString.replace('/Date(', '')));\nformattedDate = (thisDate.getMonth() + 1) + \"/\" + (thisDate.getDate()+1) + \"/\" + thisDate.getFullYear();\n</code></pre>\n\n<p>This takes a <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"nofollow\">JSON</a> date, \"/Date(1429573751663)/\" and produces as the formatted string:</p>\n\n<p>\"4/21/2015\"</p>\n"},{"score":565,"body":"<p>If you need to quickly format your date using plain JavaScript, use <code>getDate</code>, <code>getMonth + 1</code>, <code>getFullYear</code>, <code>getHours</code> and <code>getMinutes</code>:</p>\n\n<pre><code>var d = new Date();\n\nvar datestring = d.getDate()  + \"-\" + (d.getMonth()+1) + \"-\" + d.getFullYear() + \" \" +\nd.getHours() + \":\" + d.getMinutes();\n\n// 16-5-2015 9:50\n</code></pre>\n\n<p>Or, if you need it to be padded with zeros:</p>\n\n<pre><code>var datestring = (\"0\" + d.getDate()).slice(-2) + \"-\" + (\"0\"+(d.getMonth()+1)).slice(-2) + \"-\" +\n    d.getFullYear() + \" \" + (\"0\" + d.getHours()).slice(-2) + \":\" + (\"0\" + d.getMinutes()).slice(-2);\n\n// 16-05-2015 09:50\n</code></pre>\n"},{"score":51,"body":"<p>Requested format in one line - no libraries and no Date methods, just regex:</p>\n<pre><code>var d = (new Date()).toString().replace(/\\S+\\s(\\S+)\\s(\\d+)\\s(\\d+)\\s.*/,'$2-$1-$3');\n// date will be formatted as &quot;14-Oct-2015&quot; (pass any date object in place of 'new Date()')\n</code></pre>\n<p>In my testing, this works reliably in the major browsers (Chrome, Safari, Firefox and IE.) As @RobG pointed out, the output of Date.prototype.toString() is implementation-dependent, so for international or non-browser implementations, just test the output to be sure it works right in your JavaScript engine. You can even add some code to test the string output and make sure it's matching what you expect before you do the regex replace.</p>\n"},{"score":2,"body":"<p>If you are <strong>already using ExtJS</strong> in your project you could use <a href=\"http://docs.sencha.com/extjs/4.0.7/#!/api/Ext.Date\" rel=\"nofollow\">Ext.Date</a>: </p>\n\n<pre><code>var date = new Date();\nExt.Date.format(date, \"d-M-Y\");\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>\"11-Nov-2015\"\n</code></pre>\n"},{"score":3,"body":"<p>I use the following. It is simple and works fine.</p>\n\n<pre><code> var dtFormat = require('dtformat');\n   var today = new Date();\n   dtFormat(today, \"dddd, mmmm dS, yyyy, h:MM:ss TT\");\n</code></pre>\n\n<p>Or this:</p>\n\n<pre><code>var now = new Date()\nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\nvar formattedDate = now.getDate()  + \"-\" + months[now.getMonth()] + \"-\" + now.getFullYear()\nalert(formattedDate)\n</code></pre>\n"},{"score":3,"body":"<p>There is a new library, <a href=\"https://github.com/onitecsoft/smarti.to.js\" rel=\"nofollow noreferrer\">smarti.to.js</a>, for localized formatting of JavaScript numbers, dates and JSON dates (Microsoft or ISO8601).</p>\n\n<p>Example:</p>\n\n<pre><code>new Date('2015-1-1').to('dd.MM.yy')         // Outputs 01.01.2015\n\"2015-01-01T10:11:12.123Z\".to('dd.MM.yy')   // Outputs 01.01.2015\n</code></pre>\n\n<p>There are also custom short patterns defined in the localization file (smarti.to.{culture}.js). Example (smarti.to.et-EE.js):</p>\n\n<pre><code>new Date('2015-1-1').to('d')                // Outputs 1.01.2015\n</code></pre>\n\n<p>And a multiformatting ability:</p>\n\n<pre><code>smarti.format('{0:n2} + {1:n2} = {2:n2}', 1, 2, 3)   // Output: 1,00 + 2,00 = 3,00\n</code></pre>\n"},{"score":2183,"body":"<p>If you need slightly less control over formatting than the currently accepted answer, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"noreferrer\"><code>Date#toLocaleDateString</code></a> can be used to create standard locale-specific renderings. The <code>locale</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used, and allow some customization of the rendering.</p>\n\n<h3>Options key examples:</h3>\n\n<ol>\n<li><strong>day:</strong> <br/>\nThe representation of the day. <br/>\nPossible values are \"numeric\", \"2-digit\".</li>\n<li><strong>weekday:</strong> <br/>\nThe representation of the weekday. <br/>\nPossible values are \"narrow\", \"short\", \"long\".</li>\n<li><strong>year:</strong> <br/>\nThe representation of the year. <br/>\nPossible values are \"numeric\", \"2-digit\".</li>\n<li><strong>month:</strong> <br/>\nThe representation of the month. <br/>\nPossible values are \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\".</li>\n<li><strong>hour:</strong> <br/>\nThe representation of the hour. <br/>\nPossible values are \"numeric\", \"2-digit\".</li>\n<li><strong>minute:</strong>\nThe representation of the minute. <br/>\n Possible values are \"numeric\", \"2-digit\".</li>\n<li><strong>second:</strong> <br/>\nThe representation of the second. <br/>\nPossible values are \"numeric\", 2-digit\".</li>\n</ol>\n\n<p>All these keys are optional.  You can change the number of options values based on your requirements, and this will also reflect the presence of each date time term.</p>\n\n<p>Note: If you would only like to configure the content options, but still use the current locale, passing <code>null</code> for the first parameter will cause an error.  Use <code>undefined</code> instead.</p>\n\n<h3>For different languages:</h3>\n\n<ol>\n<li><strong>\"en-US\":</strong> For English</li>\n<li><strong>\"hi-IN\":</strong> For Hindi</li>\n<li><strong>\"ja-JP\":</strong> For Japanese</li>\n</ol>\n\n<p>You can use more language options.</p>\n\n<h3>For example</h3>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\nvar today  = new Date();\r\n\r\nconsole.log(today.toLocaleDateString(\"en-US\")); // 9/17/2016\r\nconsole.log(today.toLocaleDateString(\"en-US\", options)); // Saturday, September 17, 2016\r\nconsole.log(today.toLocaleDateString(\"hi-IN\", options)); // शनिवार, 17 सितंबर 2016</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>You can also use the <code>toLocaleString()</code> method for the same purpose. The only difference is this function provides the time when you don't pass any options.</p>\n\n<pre><code>// Example\n9/17/2016, 1:21:34 PM\n</code></pre>\n\n<h3>References:</h3>\n\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\" rel=\"noreferrer\"><code>toLocaleString()</code></a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"noreferrer\"><code>toLocaleDateString()</code></a></p></li>\n</ul>\n"},{"score":3,"body":"<p>Short, widely compatible approach:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function formatDate(date) {\n    date.toISOString()\n    .replace(/^(\\d+)-(\\d+)-(\\d+).*$/, // Only extract Y-M-D\n        function (a,y,m,d) {\n            return [\n                d, // Day\n                ['Jan','Feb','Mar','Apr','May','Jun',  // Month Names\n                'Jul','Ago','Sep','Oct','Nov','Dec']\n                [m-1], // Month\n                y  // Year\n            ].join('-') // Stitch together\n        })\n}\n</code></pre>\n\n<p>Or, as a single line:\n</p>\n\n<pre><code>date.toISOString().replace(/^(\\d+)-(\\d+)-(\\d+)T(\\d+):(\\d+):(\\d+).(\\d+)Z$/, function (a,y,m,d) {return [d,['Jan','Feb','Mar','Apr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'][m-1],y].join('-')})\n</code></pre>\n"},{"score":5,"body":"<p>Try this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function init(){\r\n    var d = new Date();\r\n    var day = d.getDate();\r\n    var x = d.toDateString().substr(4, 3);\r\n    var year = d.getFullYear();\r\n    document.querySelector(\"#mydate\").innerHTML = day + '-' + x + '-' + year;\r\n}\r\nwindow.onload = init;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"mydate\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":100,"body":"<p>In modern browsers <strong>(*)</strong>, you can just do this:</p>\n\n<pre><code>var today = new Date().toLocaleDateString('en-GB', {\n    day : 'numeric',\n    month : 'short',\n    year : 'numeric'\n}).split(' ').join('-');\n</code></pre>\n\n<p>Output if executed today (january 24ᵗʰ, 2016):</p>\n\n<pre><code>'24-Jan-2016'\n</code></pre>\n\n<hr>\n\n<p><strong>(*)</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"noreferrer\"><strong>According to MDN</strong></a>, \"modern browsers\" means Chrome&nbsp;24+, Firefox 29+, Internet&nbsp;Explorer&nbsp;11, Edge&nbsp;12+, Opera&nbsp;15+ &amp; Safari <a href=\"https://softwareengineering.stackexchange.com/questions/56490/what-does-nightly-builds-mean\"><strong>nightly build</strong></a>.</p>\n"},{"score":10,"body":"<pre><code>var today = new Date();\nvar formattedToday = today.toLocaleDateString() + ' ' + today.toLocaleTimeString();\n</code></pre>\n"},{"score":0,"body":"<p>2.39KB minified. One file. <a href=\"https://github.com/rhroyston/clock-js\" rel=\"nofollow\">https://github.com/rhroyston/clock-js</a><br>\n<br>\n10-Aug-2010 would be:</p>\n\n<pre><code>var str = clock.month\nstr.charAt(0).toUpperCase() + str.slice(1,3); //gets you \"Aug\"\nconsole.log(clock.day + '-' + str + '-' + clock.year); //gets you 10-Aug-2010\n</code></pre>\n\n<p><br>\n<br></p>\n"},{"score":13,"body":"<p>This is how I implemented for my npm plugins</p>\n\n<pre><code>var monthNames = [\n  \"January\", \"February\", \"March\",\n  \"April\", \"May\", \"June\", \"July\",\n  \"August\", \"September\", \"October\",\n  \"November\", \"December\"\n];\n\nvar Days = [\n  \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n  \"Thursday\", \"Friday\", \"Saturday\"\n];\n\nvar formatDate = function(dt,format){\n  format = format.replace('ss', pad(dt.getSeconds(),2));\n  format = format.replace('s', dt.getSeconds());\n  format = format.replace('dd', pad(dt.getDate(),2));\n  format = format.replace('d', dt.getDate());\n  format = format.replace('mm', pad(dt.getMinutes(),2));\n  format = format.replace('m', dt.getMinutes());\n  format = format.replace('MMMM', monthNames[dt.getMonth()]);\n  format = format.replace('MMM', monthNames[dt.getMonth()].substring(0,3));\n  format = format.replace('MM', pad(dt.getMonth()+1,2));\n  format = format.replace(/M(?![ao])/, dt.getMonth()+1);\n  format = format.replace('DD', Days[dt.getDay()]);\n  format = format.replace(/D(?!e)/, Days[dt.getDay()].substring(0,3));\n  format = format.replace('yyyy', dt.getFullYear());\n  format = format.replace('YYYY', dt.getFullYear());\n  format = format.replace('yy', (dt.getFullYear()+\"\").substring(2));\n  format = format.replace('YY', (dt.getFullYear()+\"\").substring(2));\n  format = format.replace('HH', pad(dt.getHours(),2));\n  format = format.replace('H', dt.getHours());\n  return format;\n}\n\npad = function(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\n</code></pre>\n"},{"score":4,"body":"<p>If you fancy a short, human-readable, function - this is easily adjustable to suit you.</p>\n\n<p>The <strong>timeStamp</strong> parameter is milliseconds from 1970 - it is returned by <code>new Date().getTime()</code> and many other devices...</p>\n\n<p>OK, I changed my mind. I included an extra function for zero padding. Curses!</p>\n\n<pre><code> function zeroPad(aNumber) {\n     return (\"0\"+aNumber).slice(-2);\n }\n function humanTime(timeStamp) {\n    var M = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    var D = new Date(timeStamp); // 23 Aug 2016 16:45:59 &lt;-- Desired format.\n    return D.getDate() + \" \" + M[D.getMonth()] + \" \" + D.getFullYear() + \" \" + D.getHours() + \":\" + zeroPad(d.getMinutes()) + \":\" + zeroPad(D.getSeconds());\n }\n</code></pre>\n"},{"score":7,"body":"<p>Inspired by <a href=\"https://stackoverflow.com/users/530967/jd-smith\">JD Smith</a>'s marvellous regular expression solution, I suddenly had this head-splitting idea:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var D = Date().toString().split(\" \");\r\nconsole.log(D[2] + \"-\" + D[1] + \"-\" + D[3]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":16,"body":"<p>We have lots of solutions for this, but I think the best of them is Moment.js. So I personally suggest to use Moment.js for date and time operations.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(moment().format('DD-MMM-YYYY'));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"//cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":243,"body":"<h2>Custom formatting function:</h2>\n\n<p>For fixed formats, a simple function make the job. The following example generates the international format YYYY-MM-DD:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function dateToYMD(date) {\r\n    var d = date.getDate();\r\n    var m = date.getMonth() + 1; //Month from 0 to 11\r\n    var y = date.getFullYear();\r\n    return '' + y + '-' + (m&lt;=9 ? '0' + m : m) + '-' + (d &lt;= 9 ? '0' + d : d);\r\n}\r\n\r\nconsole.log(dateToYMD(new Date(2017,10,5))); // Nov 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The OP format may be generated like:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function dateToYMD(date) {\r\n    var strArray=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var d = date.getDate();\r\n    var m = strArray[date.getMonth()];\r\n    var y = date.getFullYear();\r\n    return '' + (d &lt;= 9 ? '0' + d : d) + '-' + m + '-' + y;\r\n}\r\nconsole.log(dateToYMD(new Date(2017,10,5))); // Nov 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Note: It is, however, usually not a good idea to extend the JavaScript standard libraries (e.g. by adding this function to the prototype of Date). </p>\n\n<p>A more advanced function could generate configurable output based on a format parameter.</p>\n\n<p>If to write a formatting function is too long, there are plenty of libraries around which does it. Some other answers already enumerate them. But increasing dependencies also has it counter-part.</p>\n\n<h2>Standard ECMAScript formatting functions:</h2>\n\n<p>Since more recent versions of ECMAScript, the <code>Date</code> class has some specific formatting functions:</p>\n\n<blockquote>\n  <p><strong>toDateString</strong>: Implementation dependent, show only the date.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.todatestring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.todatestring</a></p>\n\n<pre><code>new Date().toDateString(); // e.g. \"Fri Nov 11 2016\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toISOString</strong>: Show ISO 8601 date and time.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.toisostring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.toisostring</a></p>\n\n<pre><code>new Date().toISOString(); // e.g. \"2016-11-21T08:00:00.000Z\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toJSON</strong>: Stringifier for JSON. </p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tojson\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tojson</a></p>\n\n<pre><code>new Date().toJSON(); // e.g. \"2016-11-21T08:00:00.000Z\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toLocaleDateString</strong>: Implementation dependent, a date in locale format.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaledatestring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaledatestring</a></p>\n\n<pre><code>new Date().toLocaleDateString(); // e.g. \"21/11/2016\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toLocaleString</strong>: Implementation dependent, a date&amp;time in locale format.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocalestring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocalestring</a></p>\n\n<pre><code>new Date().toLocaleString(); // e.g. \"21/11/2016, 08:00:00 AM\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toLocaleTimeString</strong>: Implementation dependent, a time in locale format.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaletimestring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tolocaletimestring</a></p>\n\n<pre><code>new Date().toLocaleTimeString(); // e.g. \"08:00:00 AM\"\n</code></pre>\n</blockquote>\n\n<hr>\n\n<blockquote>\n  <p><strong>toString</strong>: Generic toString for Date.</p>\n  \n  <p><a href=\"http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tostring\" rel=\"noreferrer\">http://www.ecma-international.org/ecma-262/7.0/index.html#sec-date.prototype.tostring</a></p>\n\n<pre><code>new Date().toString(); // e.g. \"Fri Nov 21 2016 08:00:00 GMT+0100 (W. Europe Standard Time)\"\n</code></pre>\n</blockquote>\n\n<p>Note: it is possible to generate custom output out of those formatting ></p>\n\n<blockquote>\n<pre><code>new Date().toISOString().slice(0,10); //return YYYY-MM-DD\n</code></pre>\n</blockquote>\n\n<p>Examples snippets:\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\"1) \"+  new Date().toDateString());\r\nconsole.log(\"2) \"+  new Date().toISOString());\r\nconsole.log(\"3) \"+  new Date().toJSON());\r\nconsole.log(\"4) \"+  new Date().toLocaleDateString());\r\nconsole.log(\"5) \"+  new Date().toLocaleString());\r\nconsole.log(\"6) \"+  new Date().toLocaleTimeString());\r\nconsole.log(\"7) \"+  new Date().toString());\r\nconsole.log(\"8) \"+  new Date().toISOString().slice(0,10));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":38,"body":"<p><strong>OK</strong>, we have got something called <strong>Intl</strong> which is very useful for formatting a date in JavaScript these days:</p>\n\n<p>Your date as below:</p>\n\n<pre><code>var date = '10/8/2010';\n</code></pre>\n\n<p>And you change to Date by using new Date() like below:</p>\n\n<pre><code>date = new Date(date);\n</code></pre>\n\n<p>And now you can format it any way you like using a list of <strong>locales</strong> like below:</p>\n\n<pre><code>date = new Intl.DateTimeFormat('en-AU').format(date); // Australian date format: \"8/10/2010\" \n</code></pre>\n\n<p><br></p>\n\n<pre><code>date = new Intl.DateTimeFormat('en-US').format(date); // USA date format: \"10/8/2010\" \n</code></pre>\n\n<p><br></p>\n\n<pre><code>date = new Intl.DateTimeFormat('ar-EG').format(date);  // Arabic date format: \"٨‏/١٠‏/٢٠١٠\"\n</code></pre>\n\n<p>If you exactly want the format you mentioned above, you can do:</p>\n\n<pre><code>date = new Date(Date.UTC(2010, 7, 10, 0, 0, 0));\nvar options = {year: \"numeric\", month: \"short\", day: \"numeric\"};\ndate = new Intl.DateTimeFormat(\"en-AU\", options).format(date).replace(/\\s/g, '-');\n</code></pre>\n\n<p>And the result is going to be:</p>\n\n<pre><code>\"10-Aug-2010\"\n</code></pre>\n\n<p>For more see the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noreferrer\">Intl API</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\" rel=\"noreferrer\">Intl.DateTimeFormat</a> documentation.</p>\n"},{"score":32,"body":"<p>Using an ECMAScript Edition 6 (ES6/ES2015) string template:</p>\n\n<pre><code>let d = new Date();\nlet formatted = `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`;\n</code></pre>\n\n<p>If you need to change the delimiters:</p>\n\n<pre><code>const delimiter = '/';\nlet formatted = [d.getFullYear(), d.getMonth() + 1, d.getDate()].join(delimiter);\n</code></pre>\n"},{"score":16,"body":"<p>A useful and flexible way for formatting the DateTimes in JavaScript is <code>Intl.DateTimeFormat</code>:</p>\n\n<pre><code>var date = new Date();\nvar options = { year: 'numeric', month: 'short', day: '2-digit'};\nvar _resultDate = new Intl.DateTimeFormat('en-GB', options).format(date);\n// The _resultDate is: \"12 Oct 2017\"\n// Replace all spaces with - and then log it.\nconsole.log(_resultDate.replace(/ /g,'-'));\n</code></pre>\n\n<p>Result Is:  <code>\"12-Oct-2017\"</code></p>\n\n<p>The date and time formats can be customized using the options argument.</p>\n\n<p>The <code>Intl.DateTimeFormat</code> object is a constructor for objects that enable language sensitive date and time formatting.</p>\n\n<p>Syntax</p>\n\n<pre><code>new Intl.DateTimeFormat([locales[, options]])\nIntl.DateTimeFormat.call(this[, locales[, options]])\n</code></pre>\n\n<p><strong>Parameters</strong></p>\n\n<p><strong>locales</strong></p>\n\n<p>Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the Intl page. The following Unicode extension keys are allowed:</p>\n\n<pre><code>nu\nNumbering system. Possible values include: \"arab\", \"arabext\", \"bali\", \"beng\", \"deva\", \"fullwide\", \"gujr\", \"guru\", \"hanidec\", \"khmr\", \"knda\", \"laoo\", \"latn\", \"limb\", \"mlym\", \"mong\", \"mymr\", \"orya\", \"tamldec\", \"telu\", \"thai\", \"tibt\".\nca\nCalendar. Possible values include: \"buddhist\", \"chinese\", \"coptic\", \"ethioaa\", \"ethiopic\", \"gregory\", \"hebrew\", \"indian\", \"islamic\", \"islamicc\", \"iso8601\", \"japanese\", \"persian\", \"roc\".\n</code></pre>\n\n<p><strong>Options</strong></p>\n\n<p>Optional. An object with some or all of the following properties:</p>\n\n<p><strong>localeMatcher</strong></p>\n\n<p>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the Intl page.</p>\n\n<p><strong>timeZone</strong></p>\n\n<p>The time zone to use. The only value implementations must recognize is <code>\"UTC\"</code>; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the IANA time zone database, such as <code>\"Asia/Shanghai\"</code>, <code>\"Asia/Kolkata\"</code>, <code>\"America/New_York\"</code>.</p>\n\n<p><strong>hour12</strong></p>\n\n<p>Whether to use 12-hour time (as opposed to 24-hour time). Possible values are <code>true</code> and <code>false</code>; the default is locale dependent.</p>\n\n<p><strong>formatMatcher</strong></p>\n\n<p>The format matching algorithm to use. Possible values are <code>\"basic\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. See the following paragraphs for information about the use of this property.</p>\n\n<p>The following properties describe the date-time components to use in formatted output and their desired representations. Implementations are required to support at least the following subsets:</p>\n\n<pre><code>weekday, year, month, day, hour, minute, second\nweekday, year, month, day\nyear, month, day\nyear, month\nmonth, day\nhour, minute, second\nhour, minute\n</code></pre>\n\n<p>Implementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the formatMatcher property: A fully specified <code>\"basic\"</code> algorithm and an implementation dependent \"best fit\" algorithm.</p>\n\n<p><strong>weekday</strong></p>\n\n<p>The representation of the weekday. Possible values are <code>\"narrow\"</code>, <code>\"short\"</code>, <code>\"long\"</code>.</p>\n\n<p><strong>era</strong></p>\n\n<p>The representation of the era. Possible values are <code>\"narrow\"</code>, <code>\"short\"</code>, <code>\"long\"</code>.</p>\n\n<p><strong>year</strong></p>\n\n<p>The representation of the year. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>.</p>\n\n<p><strong>month</strong></p>\n\n<p>The representation of the month. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>, <code>\"narrow\"</code>, <code>\"short\"</code>, <code>\"long\"</code>.</p>\n\n<p><strong>day</strong></p>\n\n<p>The representation of the day. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>.</p>\n\n<p><strong>hour</strong></p>\n\n<p>The representation of the hour. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>.</p>\n\n<p><strong>minute</strong></p>\n\n<p>The representation of the minute. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>.</p>\n\n<p><strong>second</strong></p>\n\n<p>The representation of the second. Possible values are <code>\"numeric\"</code>, <code>\"2-digit\"</code>.</p>\n\n<p><strong>timeZoneName</strong></p>\n\n<p>The representation of the time zone name. Possible values are <code>\"short\"</code>, <code>\"long\"</code>.\nThe default value for each date-time component property is undefined, but if all component properties are undefined, then the year, month and day are assumed to be <code>\"numeric\"</code>.</p>\n\n<p><a href=\"https://jsbin.com/buvaketoho/5/edit?js,console\" rel=\"noreferrer\">Check Online</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\" rel=\"noreferrer\">More Details</a></p>\n"},{"score":1,"body":"<p>The following code will allow you to format the date to either <code>DD-MM-YYYY</code> (27-12-2017) or <code>DD MMM YYYY</code> (27 Dec 2017) :</p>\n\n<pre><code>/** Pad number to fit into nearest power of 10 */\nfunction padNumber(number, prependChar, count) {\n  var out = '' + number; var i;\n  if (number &lt; Math.pow(10, count))\n    while (out.length &lt; ('' + Math.pow(10, count)).length) out = prependChar + out;\n\n  return out;\n}\n\n/* Format the date to 'DD-MM-YYYY' or 'DD MMM YYYY' */\nfunction dateToDMY(date, useNumbersOnly) {\n  var months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', \n    'Nov', 'Dec'\n  ];\n\n  return '' + padNumber(date.getDate(), '0', 1) + \n   (useNumbersOnly? '-' + padNumber(date.getMonth() + 1, '0', 1) + '-' : ' ' + months[date.getMonth()] + ' ')\n    + date.getFullYear();\n}\n</code></pre>\n\n<p>Change the order of <code>date.getFullYear()</code> and <code>padNumber(date.getDate(), '0', 1)</code> to make a <code>dateToYMD()</code> function.</p>\n\n<p>See <a href=\"https://repl.it/NUI4/2\" rel=\"nofollow noreferrer\">repl.it example</a> for details.</p>\n"},{"score":4,"body":"<p><code>DateFormatter.formatDate(new Date(2010,7,10), 'DD-MMM-YYYY')</code></p>\n\n<p>=><code>10-Aug-2010</code></p>\n\n<p><code>DateFormatter.formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss')</code></p>\n\n<p>=><code>2017-11-22 19:52:37</code></p>\n\n<p><code>DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A')</code></p>\n\n<p>=><code>2 02 Wed Wednesday, 2 02 Feb February, 05 2005, 3 03 3 03, 4 04, 5 05, am AM</code></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var DateFormatter = {\r\n  monthNames: [\r\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\r\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\r\n  ],\r\n  dayNames: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n  formatDate: function (date, format) {\r\n    var self = this;\r\n    format = self.getProperDigits(format, /d+/gi, date.getDate());\r\n    format = self.getProperDigits(format, /M+/g, date.getMonth() + 1);\r\n    format = format.replace(/y+/gi, function (y) {\r\n      var len = y.length;\r\n      var year = date.getFullYear();\r\n      if (len == 2)\r\n        return (year + \"\").slice(-2);\r\n      else if (len == 4)\r\n        return year;\r\n      return y;\r\n    })\r\n    format = self.getProperDigits(format, /H+/g, date.getHours());\r\n    format = self.getProperDigits(format, /h+/g, self.getHours12(date.getHours()));\r\n    format = self.getProperDigits(format, /m+/g, date.getMinutes());\r\n    format = self.getProperDigits(format, /s+/gi, date.getSeconds());\r\n    format = format.replace(/a/ig, function (a) {\r\n      var amPm = self.getAmPm(date.getHours())\r\n      if (a === 'A')\r\n        return amPm.toUpperCase();\r\n      return amPm;\r\n    })\r\n    format = self.getFullOr3Letters(format, /d+/gi, self.dayNames, date.getDay())\r\n    format = self.getFullOr3Letters(format, /M+/g, self.monthNames, date.getMonth())\r\n    return format;\r\n  },\r\n  getProperDigits: function (format, regex, value) {\r\n    return format.replace(regex, function (m) {\r\n      var length = m.length;\r\n      if (length == 1)\r\n        return value;\r\n      else if (length == 2)\r\n        return ('0' + value).slice(-2);\r\n      return m;\r\n    })\r\n  },\r\n  getHours12: function (hours) {\r\n    // https://stackoverflow.com/questions/10556879/changing-the-1-24-hour-to-1-12-hour-for-the-gethours-method\r\n    return (hours + 24) % 12 || 12;\r\n  },\r\n  getAmPm: function (hours) {\r\n    // https://stackoverflow.com/questions/8888491/how-do-you-display-javascript-datetime-in-12-hour-am-pm-format\r\n    return hours &gt;= 12 ? 'pm' : 'am';\r\n  },\r\n  getFullOr3Letters: function (format, regex, nameArray, value) {\r\n    return format.replace(regex, function (s) {\r\n      var len = s.length;\r\n      if (len == 3)\r\n        return nameArray[value].substr(0, 3);\r\n      else if (len == 4)\r\n        return nameArray[value];\r\n      return s;\r\n    })\r\n  }\r\n}\r\n\r\nconsole.log(DateFormatter.formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss'));\r\nconsole.log(DateFormatter.formatDate(new Date(), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A'));\r\nconsole.log(DateFormatter.formatDate(new Date(2005, 1, 2, 3, 4, 5), 'D DD DDD DDDD, M MM MMM MMMM, YY YYYY, h hh H HH, m mm, s ss, a A'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The format description was taken from <a href=\"https://ionicframework.com/docs/api/components/datetime/DateTime/\" rel=\"nofollow noreferrer\">Ionic Framework</a> (it does not support <code>Z</code>, UTC Timezone Offset)</p>\n\n<blockquote>\n  <p>Not thoroughly tested</p>\n</blockquote>\n"},{"score":1,"body":"<p>I know someone might say that this is silly solution, but it does do the trick by removing the unnecessary information from the date string.</p>\n\n<p><code>yourDateObject</code> produces:</p>\n\n<p>Wed Dec 13 2017 20:40:40 GMT+0200 (EET)</p>\n\n<p><code>yourDateObject.toString().slice(0, 15);</code> produces:</p>\n\n<p>Wed Dec 13 2017</p>\n"},{"score":16,"body":"<p>This may help with the problem:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = new Date();\r\n\r\nvar options = {   \r\n    day: 'numeric',\r\n    month: 'long', \r\n    year: 'numeric'\r\n};\r\n\r\nconsole.log(d.toLocaleDateString('en-ZA', options));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://i.stack.imgur.com/qURDD.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/qURDD.png\" alt=\"Date to locate format\"></a></p>\n"},{"score":17,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>new Date().toLocaleDateString()\r\n\r\n// \"3/21/2018\"</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>More documentation at <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"noreferrer\">developer.mozilla.org</a></p>\n"},{"score":2,"body":"<p>This is the main answer modified to have 3-char months, and 2-digit year:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function formatDate(date) {\r\n    var monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n    var day = date.getDate(), monthIndex = date.getMonth(), year = date.getFullYear().toString().substr(-2);\r\n    return day + ' ' + monthNames[monthIndex] + ' ' + year;\r\n}\r\n\r\ndocument.write(formatDate(new Date()));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":9,"body":"<p>For any one looking for a really simple ES6 solution to copy, paste and adopt:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"true\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const dateToString = d =&gt; `${d.getFullYear()}-${('00' + (d.getMonth() + 1)).slice(-2)}-${('00' + d.getDate()).slice(-2)}` \r\n\r\n// how to use:\r\nconst myDate = new Date(Date.parse('04 Dec 1995 00:12:00 GMT'))\r\nconsole.log(dateToString(myDate)) // 1995-12-04</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>Other way that you can format the date:</p>\n\n<pre><code>function formatDate(dDate,sMode){\n    var today = dDate;\n    var dd = today.getDate();\n    var mm = today.getMonth()+1; //January is 0!\n    var yyyy = today.getFullYear();\n    if(dd&lt;10) {\n        dd = '0'+dd\n    }\n    if(mm&lt;10) {\n        mm = '0'+mm\n    }\n    if (sMode+\"\"==\"\"){\n        sMode = \"dd/mm/yyyy\";\n    }\n    if (sMode == \"yyyy-mm-dd\"){\n        return  yyyy + \"-\" + mm + \"-\" + dd + \"\";\n    }\n    if (sMode == \"dd/mm/yyyy\"){\n        return  dd + \"/\" + mm + \"/\" + yyyy;\n    }\n}\n</code></pre>\n"},{"score":2,"body":"<p><code>yy</code> = 2-digit year;\n<code>yyyy</code> = full year</p>\n\n<p><code>M</code> = digit month;\n<code>MM</code> = 2-digit month;\n<code>MMM</code> = short month name;\n<code>MMMM</code> = full month name</p>\n\n<p><code>EEEE</code> = full weekday name;\n<code>EEE</code> = short weekday name</p>\n\n<p><code>d</code> = digit day;\n<code>dd</code> = 2-digit day</p>\n\n<p><code>h</code> = hours;\n<code>hh</code> = 2-digit hours</p>\n\n<p><code>m</code> = minutes;\n<code>mm</code> = 2-digit minutes</p>\n\n<p><code>s</code> = seconds;\n<code>ss</code> = 2-digit seconds</p>\n\n<p><code>S</code> = miliseconds</p>\n\n<p>Used similar formating as <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" rel=\"nofollow noreferrer\">Class SimpleDateFormat (Java)</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var monthNames = [\r\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n  \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nvar dayOfWeekNames = [\r\n  \"Sunday\", \"Monday\", \"Tuesday\",\r\n  \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n];\r\nfunction formatDate(date, formatStr){\r\n    if (!formatStr) {\r\n      formatStr = 'dd/mm/yyyy';\r\n    }\r\n    var day = date.getDate(),\r\n        month = date.getMonth(),\r\n        year = date.getFullYear(),\r\n        hour = date.getHours(),\r\n        minute = date.getMinutes(),\r\n        second = date.getSeconds(),\r\n        miliseconds = date.getMilliseconds(),\r\n        hh = twoDigitPad(hour),\r\n        mm = twoDigitPad(minute),\r\n        ss = twoDigitPad(second),\r\n        EEEE = dayOfWeekNames[date.getDay()],\r\n        EEE = EEEE.substr(0, 3),\r\n        dd = twoDigitPad(day),\r\n        M = month + 1,\r\n        MM = twoDigitPad(M),\r\n        MMMM = monthNames[month],\r\n        MMM = MMMM.substr(0, 3),\r\n        yyyy = year + \"\",\r\n        yy = yyyy.substr(2, 2)\r\n    ;\r\n    return formatStr\r\n      .replace('hh', hh).replace('h', hour)\r\n      .replace('mm', mm).replace('m', minute)\r\n      .replace('ss', ss).replace('s', second)\r\n      .replace('S', miliseconds)\r\n      .replace('dd', dd).replace('d', day)\r\n      .replace('MMMM', MMMM).replace('MMM', MMM).replace('MM', MM).replace('M', M)\r\n      .replace('EEEE', EEEE).replace('EEE', EEE)\r\n      .replace('yyyy', yyyy)\r\n      .replace('yy', yy)\r\n    ;\r\n}\r\nfunction twoDigitPad(num) {\r\n    return num &lt; 10 ? \"0\" + num : num;\r\n}\r\nconsole.log(formatDate(new Date()));\r\nconsole.log(formatDate(new Date(), 'EEEE, MMMM d, yyyy hh:mm:ss:S'));\r\nconsole.log(formatDate(new Date(), 'EEE, MMM d, yyyy hh:mm'));\r\nconsole.log(formatDate(new Date(), 'yyyy-MM-dd hh:mm:ss:S'));\r\nconsole.log(formatDate(new Date(), 'yy-MM-dd hh:mm'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":33,"body":"<p><strong>Packaged Solution:</strong> <a href=\"https://moment.github.io/luxon/\" rel=\"noreferrer\">Luxon</a></p>\n\n<p>If you want to use a one solution to fit all, I highly recommend using Luxon (a modernized version of <a href=\"https://momentjs.com/\" rel=\"noreferrer\">Moment.js</a>) which also does formatting in many locales/languages and tons of other features.</p>\n\n<p>Luxon is hosted on the Moment.js website and developed by a Moment.js developer because Moment.js has limitations that the developer wanted to address but couldn't.</p>\n\n<p>To install:</p>\n\n<p><code>npm install luxon</code> or <code>yarn add luxon</code> (visit link for other installation methods)</p>\n\n<p>Example:</p>\n\n<p><code>luxon.DateTime.fromISO('2010-08-10').toFormat('yyyy-LLL-dd');</code></p>\n\n<p>Yields:</p>\n\n<blockquote>\n  <p>10-Aug-2010</p>\n</blockquote>\n\n<p><strong>Manual Solution</strong></p>\n\n<p>Using similar formatting as Moment.js, <a href=\"https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\" rel=\"noreferrer\">Class DateTimeFormatter (Java)</a>, and <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" rel=\"noreferrer\">Class SimpleDateFormat (Java)</a>, I implemented a comprehensive solution <code>formatDate(date, patternStr)</code> where the code is easy to read and modify. You can display date, time, AM/PM, etc. See code for more examples.</p>\n\n<p>Example:</p>\n\n<p><code>formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss:S')</code></p>\n\n<p>(<code>formatDate</code> is implemented in the code snippet below)</p>\n\n<p>Yields:</p>\n\n<blockquote>\n  <p>Friday, October 12, 2018 18:11:23:445</p>\n</blockquote>\n\n<p>Try the code out by clicking \"Run code snippet.\"</p>\n\n<p><strong>Date and Time Patterns</strong></p>\n\n<p><code>yy</code> = 2-digit year; <code>yyyy</code> = full year</p>\n\n<p><code>M</code> = digit month; <code>MM</code> = 2-digit month; <code>MMM</code> = short month name; <code>MMMM</code> = full month name</p>\n\n<p><code>EEEE</code> = full weekday name; <code>EEE</code> = short weekday name</p>\n\n<p><code>d</code> = digit day; <code>dd</code> = 2-digit day</p>\n\n<p><code>h</code> = hours am/pm; <code>hh</code> = 2-digit hours am/pm; <code>H</code> = hours; <code>HH</code> = 2-digit hours</p>\n\n<p><code>m</code> = minutes; <code>mm</code> = 2-digit minutes; <code>aaa</code> = AM/PM</p>\n\n<p><code>s</code> = seconds; <code>ss</code> = 2-digit seconds</p>\n\n<p><code>S</code> = miliseconds</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var monthNames = [\r\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n  \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nvar dayOfWeekNames = [\r\n  \"Sunday\", \"Monday\", \"Tuesday\",\r\n  \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n];\r\nfunction formatDate(date, patternStr){\r\n    if (!patternStr) {\r\n        patternStr = 'M/d/yyyy';\r\n    }\r\n    var day = date.getDate(),\r\n        month = date.getMonth(),\r\n        year = date.getFullYear(),\r\n        hour = date.getHours(),\r\n        minute = date.getMinutes(),\r\n        second = date.getSeconds(),\r\n        miliseconds = date.getMilliseconds(),\r\n        h = hour % 12,\r\n        hh = twoDigitPad(h),\r\n        HH = twoDigitPad(hour),\r\n        mm = twoDigitPad(minute),\r\n        ss = twoDigitPad(second),\r\n        aaa = hour &lt; 12 ? 'AM' : 'PM',\r\n        EEEE = dayOfWeekNames[date.getDay()],\r\n        EEE = EEEE.substr(0, 3),\r\n        dd = twoDigitPad(day),\r\n        M = month + 1,\r\n        MM = twoDigitPad(M),\r\n        MMMM = monthNames[month],\r\n        MMM = MMMM.substr(0, 3),\r\n        yyyy = year + \"\",\r\n        yy = yyyy.substr(2, 2)\r\n    ;\r\n    // checks to see if month name will be used\r\n    patternStr = patternStr\r\n      .replace('hh', hh).replace('h', h)\r\n      .replace('HH', HH).replace('H', hour)\r\n      .replace('mm', mm).replace('m', minute)\r\n      .replace('ss', ss).replace('s', second)\r\n      .replace('S', miliseconds)\r\n      .replace('dd', dd).replace('d', day)\r\n      \r\n      .replace('EEEE', EEEE).replace('EEE', EEE)\r\n      .replace('yyyy', yyyy)\r\n      .replace('yy', yy)\r\n      .replace('aaa', aaa);\r\n    if (patternStr.indexOf('MMM') &gt; -1) {\r\n        patternStr = patternStr\r\n          .replace('MMMM', MMMM)\r\n          .replace('MMM', MMM);\r\n    }\r\n    else {\r\n        patternStr = patternStr\r\n          .replace('MM', MM)\r\n          .replace('M', M);\r\n    }\r\n    return patternStr;\r\n}\r\nfunction twoDigitPad(num) {\r\n    return num &lt; 10 ? \"0\" + num : num;\r\n}\r\nconsole.log(formatDate(new Date()));\r\nconsole.log(formatDate(new Date(), 'dd-MMM-yyyy')); //OP's request\r\nconsole.log(formatDate(new Date(), 'EEEE, MMMM d, yyyy HH:mm:ss.S aaa'));\r\nconsole.log(formatDate(new Date(), 'EEE, MMM d, yyyy HH:mm'));\r\nconsole.log(formatDate(new Date(), 'yyyy-MM-dd HH:mm:ss.S'));\r\nconsole.log(formatDate(new Date(), 'M/dd/yyyy h:mmaaa'));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Thank you @Gerry for bringing up Luxon.</p>\n"},{"score":1,"body":"<p>You don't need any libraries. Just extract date components and construct the string. Here is how to get <code>YYYY-MM-DD</code> format. Also note the month index  \"January is 0, February is 1, and so on.\"</p>\n\n<pre><code>// @flow\n\ntype Components = {\n  day: number,\n  month: number,\n  year: number\n}\n\nexport default class DateFormatter {\n  // YYYY-MM-DD\n  static YYYY_MM_DD = (date: Date): string =&gt; {\n    const components = DateFormatter.format(DateFormatter.components(date))\n    return `${components.year}-${components.month}-${components.day}`\n  }\n\n  static format = (components: Components) =&gt; {\n    return {\n      day: `${components.day}`.padStart(2, '0'),\n      month: `${components.month}`.padStart(2, '0'),\n      year: components.year\n    }\n  }\n\n  static components = (date: Date) =&gt; {\n    return {\n      day: date.getDate(),\n      month: date.getMonth() + 1,\n      year: date.getFullYear()\n    }\n  }\n}\n</code></pre>\n"},{"score":1,"body":"<p>A simple function that can return the date, the date + time, or just the time:</p>\n\n<pre><code>var myDate = dateFormatter(\"2019-01-24 11:33:24\", \"date-time\");\n// &gt;&gt; RETURNS \"January 24, 2019 11:33:24\"\n\nvar myDate2 = dateFormatter(\"2019-01-24 11:33:24\", \"date\");\n// &gt;&gt; RETURNS \"January 24, 2019\"\n\nvar myDate3 = dateFormatter(\"2019-01-24 11:33:24\", \"time\");\n// &gt;&gt; RETURNS \"11:33:24\"\n\n\nfunction dateFormatter(strDate, format){\n    var theDate = new Date(strDate);\n    if (format==\"time\")\n       return getTimeFromDate(theDate);\n    else{\n       var dateOptions = {year:'numeric', month:'long', day:'numeric'};\n       var formattedDate = theDate.toLocaleDateString(\"en-US\", + dateOptions);\n       if (format==\"date\")\n           return formattedDate;\n       return formattedDate + \" \" + getTimeFromDate(theDate);\n    }\n}\n\nfunction getTimeFromDate(theDate){\n    var sec = theDate.getSeconds();\n    if (sec&lt;10)\n        sec = \"0\" + sec;\n    var min = theDate.getMinutes();\n    if (min&lt;10)\n        min = \"0\" + min;\n    return theDate.getHours() + ':'+ min + ':' + sec;\n}\n\n</code></pre>\n"},{"score":7,"body":"<p>To obtain \"10-Aug-2010\", try:</p>\n\n<pre><code>var date = new Date('2010-08-10 00:00:00');\ndate = date.toLocaleDateString(undefined, {day:'2-digit'}) + '-' + date.toLocaleDateString(undefined, {month:'short'}) + '-' + date.toLocaleDateString(undefined, {year:'numeric'})\n</code></pre>\n\n<p>For browser support, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#Browser_compatibility\" rel=\"noreferrer\">toLocaleDateString</a>.</p>\n"},{"score":1,"body":"<p>This <a href=\"http://locutus.io/php/datetime/date/\" rel=\"nofollow noreferrer\">Module</a> can easily handle mostly every case there is. \nIt is part of a bigger npm package, by Locutus, which includes a variety of functions, but can be used totally independent of the package it self, just copy paste/ adapt a little if not working with npm (change from module to just a function)</p>\n\n<p>As a second parameter it accepts a timestamp, which can come from anywhere, such as Date.getTime()</p>\n\n<p>Also, Locutus maintains a bigger datetime module, also inside the locutus package which will give a more object oriented way to use it</p>\n\n<p><a href=\"http://locutus.io/php/datetime/\" rel=\"nofollow noreferrer\">Here</a> you can see other datetime functions, as modules, that proved to be very usefull too.</p>\n\n<p>You can find documentation on parameters and format strings <a href=\"https://www.php.net/manual/en/function.date.php\" rel=\"nofollow noreferrer\">here</a> (note that the doc site is a php site, but the locutus implementation follows exactly the same specs)</p>\n\n<p>Examples of <strong>date</strong> Module</p>\n\n<pre><code>date('H:m:s \\\\m \\\\i\\\\s \\\\m\\\\o\\\\n\\\\t\\\\h', 1062402400)//'07:09:40 m is month'\n\ndate('F j, Y, g:i a', 1062462400)//'September 2, 2003, 12:26 am'\n\ndate('Y W o', 1062462400)//'2003 36 2003'\n\nvar $x = date('Y m d', (new Date()).getTime() / 1000) $x = $x + '' var $result = $x.length // 2009 01 09    10\n\ndate('W', 1104534000)   //'52'\n\ndate('B t', 1104534000) //'999 31'\n\ndate('W U', 1293750000.82); // 2010-12-31   '52 1293750000'\n\ndate('W', 1293836400); // 2011-01-01    '52'\n\ndate('W Y-m-d', 1293974054); // 2011-01-02  '52 2011-01-02'\n</code></pre>\n"},{"score":0,"body":"<p>Here is some ready-to-paste time/date formatting code that does NOT rely on any external modules/libraries or use jQuery or ES7 or anything.  Unlike the code in some other answers, this code offers this combo of features:</p>\n\n<ul>\n<li>it takes a JavaScript Date object as input</li>\n<li>it can display date as local time zone or UTC</li>\n<li>it uses a simple formatting system \"{year4} {month02} {second}\" that is easy to read and understand even after you write the code, unlike the typical \"%D %m %-\" which always forces you back to the documentation</li>\n<li>the formatting system does not have any weird self-collisions like some ad-hoc \"DD MM YYYY\" systems</li>\n<li>you can run the test right here and try it</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// format_date(date, pattern, utc)\r\n// - date \r\n//   - a JavaScript Date object\r\n//   - use \"new Date()\" for current time\r\n// - pattern\r\n//   - a string with embedded {codes} like\r\n//     \"{year4}-{month02}-{day02}: {dayname3}\"\r\n//     see format_date_funcs below for complete list\r\n//   - any other letters go through unchanged\r\n// - utc\r\n//   - if true, shows date in UTC time \"zone\"\r\n//   - if false/omitted, shows date in local time zone\r\n//\r\nvar month_names = \r\n[\r\n  \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n  \"August\", \"September\", \"October\", \"November\", \"December\"\r\n];\r\nvar day_of_week_names = \r\n[\r\n  \"Sunday\", \"Monday\", \"Tuesday\",\r\n  \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"\r\n];\r\nfunction space_pad2(num)\r\n{\r\n    return num &lt; 10 ? \" \" + num : num;\r\n}\r\nfunction zero_pad2(num)\r\n{\r\n    return num &lt; 10 ? \"0\" + num : num;\r\n}\r\nfunction space_pad3(num)\r\n{\r\n    if (num &lt; 10) \r\n        return \"  \" + num;\r\n    else if (num &lt; 100)\r\n        return \" \" + num;\r\n    else\r\n        return num;\r\n}\r\nfunction zero_pad3(num)\r\n{\r\n    if (num &lt; 10) \r\n        return \"00\" + num;\r\n    else if (num &lt; 100)\r\n        return \"0\" + num;\r\n    else\r\n        return num;\r\n}\r\nvar format_date_funcs =\r\n{\r\n    // {year4}  = '1902'\r\n    // {year02} =   '02'\r\n    // \r\n    'year4': function(date, utc)\r\n    {\r\n        var year = utc ? date.getUTCFullYear() : date.getFullYear();\r\n        return year;\r\n    },\r\n    'year02': function(date, utc)\r\n    {\r\n        var year = utc ? date.getUTCFullYear() : date.getFullYear();\r\n        return year.toString().substr(2,2);\r\n    },\r\n    // {month}   =  '1' - '12'\r\n    // {month2}  = ' 1' - '12' (space padded)\r\n    // {month02} = '01' - '12'\r\n    //\r\n    'month': function(date, utc)\r\n    {\r\n        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n        return            month + 1;\r\n    },\r\n    'month2': function(date, utc)\r\n    {\r\n        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n        return space_pad2(month + 1);\r\n    },\r\n    'month02': function(date, utc)\r\n    {\r\n        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n        return zero_pad2(month + 1);\r\n    },\r\n    // {monthname}  = 'January'\r\n    // {monthname3} = 'Jan'\r\n    // \r\n    'monthname': function(date, utc)\r\n    {\r\n        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n        return month_names[month];\r\n    },\r\n    'monthname3': function(date, utc)\r\n    {\r\n        var month = utc ? date.getUTCMonth() : date.getMonth(); // [0,11]\r\n        return month_names[month].substr(0, 3);\r\n    },\r\n    // {day}   =  '1' - '31'\r\n    // {day2}  = ' 1' - '31' (space padded)\r\n    // {day02} = '01' - '31'\r\n    // \r\n    'day': function(date, utc)\r\n    {\r\n        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n        return date;\r\n    },\r\n    'day2': function(date, utc)\r\n    {\r\n        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n        return space_pad2(date);\r\n    },\r\n    'day02': function(date, utc)\r\n    {\r\n        var date = utc ? date.getUTCDate() : date.getDate(); // [1,31]\r\n        return zero_pad2(date);\r\n    },\r\n    // {dayname}  = 'Tuesday'\r\n    // {dayname3} = 'Tue'\r\n    // \r\n    'dayname': function(date, utc)\r\n    {\r\n        var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]\r\n        return day_of_week_names[day];\r\n    },\r\n    'dayname3': function(date, utc)\r\n    {\r\n        var day = utc ? date.getUTCDay() : date.getDay(); // [0,6]\r\n        return day_of_week_names[day].substr(0,3);\r\n    },\r\n    // {24hour}   =  '0' - '23'\r\n    // {24hour2}  = ' 0' - '23' (space padded)\r\n    // {24hour02} = '00' - '23'\r\n    //\r\n    '24hour': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        return hour;\r\n    },\r\n    '24hour2': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        return space_pad2(hour);\r\n    },\r\n    '24hour02': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        return zero_pad2(hour);\r\n    },\r\n    // {12hour}   =  '1' - '12'\r\n    // {12hour2}  = ' 1' - '12' (space padded)\r\n    // {12hour02} = '01' - '12'\r\n    // {ampm}     = 'am' or 'pm'\r\n    // {AMPM}     = 'AM' or 'PM'\r\n    //\r\n    '12hour': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        hour = hour % 12; // [0,11]\r\n        if (0 === hour) hour = 12;\r\n        return hour;\r\n    },\r\n    '12hour2': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        hour = hour % 12; // [0,11]\r\n        if (0 === hour) hour = 12;\r\n        return space_pad2(hour);\r\n    },\r\n    '12hour02': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        hour = hour % 12; // [0,11]\r\n        if (0 === hour) hour = 12;\r\n        return zero_pad2(hour);\r\n    },\r\n    'ampm': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        return (hour &lt; 12 ? 'am' : 'pm');\r\n    },\r\n    'AMPM': function(date, utc)\r\n    {\r\n        var hour = utc ? date.getUTCHours() : date.getHours(); // [0,23]\r\n        return (hour &lt; 12 ? 'AM' : 'PM');\r\n    },\r\n    // {minute}   =  '0' - '59'\r\n    // {minute2}  = ' 0' - '59' (space padded)\r\n    // {minute02} = '00' - '59'\r\n    // \r\n    'minute': function(date, utc)\r\n    {\r\n        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n        return minute;\r\n    },\r\n    'minute2': function(date, utc)\r\n    {\r\n        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n        return space_pad2(minute);\r\n    },\r\n    'minute02': function(date, utc)\r\n    {\r\n        var minute = utc ? date.getUTCMinutes() : date.getMinutes(); // [0,59]\r\n        return zero_pad2(minute);\r\n    },\r\n    // {second}   =  '0' - '59'\r\n    // {second2}  = ' 0' - '59' (space padded)\r\n    // {second02} = '00' - '59'\r\n    // \r\n    'second': function(date, utc)\r\n    {\r\n        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n        return second;\r\n    },\r\n    'second2': function(date, utc)\r\n    {\r\n        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n        return space_pad2(second);\r\n    },\r\n    'second02': function(date, utc)\r\n    {\r\n        var second = utc ? date.getUTCSeconds() : date.getSeconds(); // [0,59]\r\n        return zero_pad2(second);\r\n    },\r\n    // {msec}   =   '0' - '999'\r\n    // {msec3}  = '  0' - '999' (space padded)\r\n    // {msec03} = '000' - '999'\r\n    // \r\n    'msec': function(date, utc)\r\n    {\r\n        var msec = \r\n            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n        return msec;\r\n    },\r\n    'msec3': function(date, utc)\r\n    {\r\n        var msec = \r\n            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n        return space_pad3(msec);\r\n    },\r\n    'msec03': function(date, utc)\r\n    {\r\n        var msec = \r\n            utc ? date.getUTCMilliseconds() : date.getMilliseconds(); // [0,999]\r\n        return zero_pad3(msec);\r\n    },\r\n    // {open} = '{' (in case you actually want '{' in the output)\r\n    //\r\n    'open': function(date, utc)\r\n    {\r\n        return '{';\r\n    }, \r\n    // {close} = '}' (in case you actually want '}' in the output)\r\n    //\r\n    'close': function(date, utc)\r\n    {\r\n        return '}';\r\n    }, \r\n};\r\nfunction format_date(date, pattern, utc)\r\n{\r\n    if (!pattern) \r\n    {\r\n        pattern = '{month}/{day}/{year4}';\r\n    }\r\n\r\n    var ret = '';\r\n\r\n    while (pattern.length &gt; 0)\r\n    {\r\n        var s = pattern.indexOf('{');\r\n        var e = pattern.indexOf('}');\r\n        //console.log('s ' + s + ' e ' + e);\r\n        if (-1 !== s &amp;&amp; -1 !== e &amp;&amp; s &lt; e)\r\n        {\r\n            // - there is a well-formed {foo} in range [s,e]\r\n            // - first we emit range [0,s) as literal\r\n        }\r\n        else\r\n        {\r\n            // - rest of string has no {} or has malformed }{ or { or }\r\n            // - just emit the rest of the string as literal and be done\r\n            s = pattern.length; \r\n        }\r\n        // emit range [0,s) as literal\r\n        if (s &gt; 0)\r\n        {\r\n            ret += pattern.substr(0, s);\r\n            pattern = pattern.substr(s);\r\n            e -= s;\r\n            s = 0;\r\n        }\r\n\r\n        if (0 === pattern.length) break;\r\n\r\n        // emit range [s=0,e] by evaluating code\r\n        console.assert(0 === s); // position of {\r\n        console.assert(e &gt; 0);  // position of }\r\n        console.assert('{' === pattern.substr(s, 1));\r\n        console.assert('}' === pattern.substr(e, 1));\r\n        var code = pattern.substr(1,e-1);\r\n        var func = format_date_funcs[code];\r\n        console.assert(func);\r\n        ret += func(date, utc);\r\n\r\n        pattern = pattern.substr(e+1);\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\nif (1) // test format_date\r\n{\r\n    var fmt = '[';\r\n    for (var func in format_date_funcs) \r\n    {\r\n        if (!format_date_funcs.hasOwnProperty(func)) continue;\r\n        fmt += '{' + func + '}/';\r\n    }\r\n    fmt += ']';\r\n    var now = new Date();\r\n    console.log(fmt);\r\n    console.log(format_date(now, fmt, false /*utc*/));\r\n    console.log(format_date(now, fmt, true /*utc*/));\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":11,"body":"<p>You should have a look at <a href=\"https://github.com/iamkun/dayjs\" rel=\"noreferrer\"><strong>DayJs</strong></a>  It's a remake of momentJs but modular architecture oriented so lighter. </p>\n\n<p><strong>Fast 2kB alternative to Moment.js with the same modern API</strong></p>\n\n<blockquote>\n  <p>Day.js is a minimalist JavaScript library that parses, validates, manipulates, and displays dates and times for modern browsers with a largely Moment.js-compatible API. If you use Moment.js, you already know how to use Day.js.</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var date = Date.now();\r\nconst formatedDate = dayjs(date).format(\"YYYY-MM-DD\")\r\nconsole.log(formatedDate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.8.16/dayjs.min.js\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":9,"body":"<p>As of 2019, it looks like you can get toLocaleDateString to return only certain parts and then you can join them as you wish:</p>\n\n<pre><code>var date = new Date();\n\nconsole.log(date.toLocaleDateString(\"en-US\", { day: 'numeric' }) \n            + \"-\"+ date.toLocaleDateString(\"en-US\", { month: 'short' })\n            + \"-\" + date.toLocaleDateString(\"en-US\", { year: 'numeric' }) );\n\n&gt; 16-Nov-2019\n\nconsole.log(date.toLocaleDateString(\"en-US\", { month: 'long' }) \n            + \" \" + date.toLocaleDateString(\"en-US\", { day: 'numeric' }) \n            + \", \" + date.toLocaleDateString(\"en-US\", { year: 'numeric' }) );\n\n&gt; November 16, 2019\n</code></pre>\n"},{"score":9,"body":"<p>In order to format a date as e.g. <code>10-Aug-2010</code>, you might want to use <code>.toDateString()</code> and <strong>ES6</strong> array destructuring.</p>\n\n<pre><code>const formattedDate = new Date().toDateString()\n// The above yields e.g. 'Mon Jan 06 2020'\n\nconst [, month, day, year] = formattedDate.split(' ')\n\nconst ddMmmYyyy = `${day}-${month}-${year}`\n// or\nconst ddMmmYyyy = [day, month, year].join('-')\n</code></pre>\n"},{"score":2,"body":"<p>This function I inspired by java's SimpleDateFormat provides various formats such as:</p>\n\n<pre><code>dd-MMM-yyyy → 17-Jul-2018\nyyyyMMdd'T'HHmmssXX → 20180717T120856+0900\nyyyy-MM-dd'T'HH:mm:ssXXX → 2018-07-17T12:08:56+09:00\nE, dd MMM yyyy HH:mm:ss Z → Tue, 17 Jul 2018 12:08:56 +0900\nyyyy.MM.dd 'at' hh:mm:ss Z → 2018.07.17 at 12:08:56 +0900\nEEE, MMM d, ''yy → Tue, Jul 17, '18\nh:mm a → 12:08 PM\nhh 'o''''clock' a, X → 12 o'clock PM, +09\n</code></pre>\n\n<p><strong>Code example:</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function formatWith(formatStr, date, opts) {\r\n    \r\n        if (!date) {\r\n            date = new Date();\r\n        }\r\n    \r\n        opts = opts || {};\r\n    \r\n        let _days = opts.days;\r\n    \r\n        if (!_days) {\r\n            _days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n        }\r\n    \r\n        let _months = opts.months;\r\n    \r\n        if (!_months) {\r\n            _months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n        }\r\n    \r\n        const pad = (number, strDigits, isUnpad) =&gt; {\r\n            const strNum = number.toString();\r\n            if (!isUnpad &amp;&amp; strNum.length &gt; strDigits.length) {\r\n                return strNum;\r\n            } else {\r\n                return ('0000' + strNum).slice(-strDigits.length);\r\n            }\r\n        };\r\n    \r\n        const timezone = (date, letter) =&gt; {\r\n            const chunk = [];\r\n            const offset = -date.getTimezoneOffset();\r\n            chunk.push(offset === 0 ? 'Z' : offset &gt; 0 ? '+' : '-');//add Z or +,-\r\n            if (offset === 0) return chunk;\r\n            chunk.push(pad(Math.floor(offset / 60), '00'));//hour\r\n            if (letter === 'X') return chunk.join('');\r\n            if (letter === 'XXX') chunk.push(':');\r\n            chunk.push(pad((offset % 60), '00'));//min\r\n            return chunk.join('');\r\n        };\r\n    \r\n        const ESCAPE_DELIM = '\\0';\r\n        const escapeStack = [];\r\n    \r\n        const escapedFmtStr = formatStr.replace(/'.*?'/g, m =&gt; {\r\n            escapeStack.push(m.replace(/'/g, ''));\r\n            return ESCAPE_DELIM + (escapeStack.length - 1) + ESCAPE_DELIM;\r\n        });\r\n    \r\n        const formattedStr = escapedFmtStr\r\n            .replace(/y{4}|y{2}/g, m =&gt; pad(date.getFullYear(), m, true))\r\n            .replace(/M{3}/g, m =&gt; _months[date.getMonth()])\r\n            .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))\r\n            .replace(/M{1,2}/g, m =&gt; pad(date.getMonth() + 1, m))\r\n            .replace(/d{1,2}/g, m =&gt; pad(date.getDate(), m))\r\n            .replace(/H{1,2}/g, m =&gt; pad(date.getHours(), m))\r\n            .replace(/h{1,2}/g, m =&gt; {\r\n                const hours = date.getHours();\r\n                return pad(hours === 0 ? 12 : hours &gt; 12 ? hours - 12 : hours, m);\r\n            })\r\n            .replace(/a{1,2}/g, m =&gt; date.getHours() &gt;= 12 ? 'PM' : 'AM')\r\n            .replace(/m{1,2}/g, m =&gt; pad(date.getMinutes(), m))\r\n            .replace(/s{1,2}/g, m =&gt; pad(date.getSeconds(), m))\r\n            .replace(/S{3}/g, m =&gt; pad(date.getMilliseconds(), m))\r\n            .replace(/[E]+/g, m =&gt; _days[date.getDay()])\r\n            .replace(/[Z]+/g, m =&gt; timezone(date, m))\r\n            .replace(/X{1,3}/g, m =&gt; timezone(date, m))\r\n        ;\r\n    \r\n        const unescapedStr = formattedStr.replace(/\\0\\d+\\0/g, m =&gt; {\r\n            const unescaped = escapeStack.shift();\r\n            return unescaped.length &gt; 0 ? unescaped : '\\'';\r\n        });\r\n    \r\n        return unescapedStr;\r\n    }\r\n\r\n    //Let's format with above function\r\n    const dateStr = '2018/07/17 12:08:56';\r\n    const date = new Date(dateStr);\r\n    const patterns = [\r\n        \"dd-MMM-yyyy\",\r\n        \"yyyyMMdd'T'HHmmssXX\",//ISO8601\r\n        \"yyyy-MM-dd'T'HH:mm:ssXXX\",//ISO8601EX\r\n        \"E, dd MMM yyyy HH:mm:ss Z\",//RFC1123(RFC822) like email\r\n        \"yyyy.MM.dd 'at' hh:mm:ss Z\",//hh shows 1-12\r\n        \"EEE, MMM d, ''yy\",\r\n        \"h:mm a\",\r\n        \"hh 'o''''clock' a, X\",\r\n    ];\r\n    \r\n    \r\n    for (let pattern of patterns) {\r\n        console.log(`${pattern} → ${formatWith(pattern, date)}`);\r\n    }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>And you can use this as a library</strong></p>\n\n<p>Also released as a NPM module.You can use this on node.js or use this from CDN for browser.</p>\n\n<p><strong>nodejs</strong></p>\n\n<pre><code>const {SimpleDateFormat} = require('@riversun/simple-date-format');\n</code></pre>\n\n<p><strong>on browser</strong></p>\n\n<pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/@riversun/simple-date-format@1.0.2/dist/simple-date-format.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Write code as follows.</p>\n\n<pre><code>const date = new Date('2018/07/17 12:08:56');\nconst sdf = new SimpleDateFormat();\nconsole.log(sdf.formatWith(\"yyyy-MM-dd'T'HH:mm:ssXXX\", date));//to be \"2018-07-17T12:08:56+09:00\"\n</code></pre>\n\n<p><strong>Source code here on github</strong>:</p>\n\n<p><a href=\"https://github.com/riversun/simple-date-format\" rel=\"nofollow noreferrer\">https://github.com/riversun/simple-date-format</a></p>\n"},{"score":6,"body":"<h2>Two pure JS one-liners</h2>\n\n<p>In this answer I develop <a href=\"https://stackoverflow.com/a/33131823/860099\">JD Smith idea</a>. I was able to shorten the JD Smith regexp</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let format= d=&gt; d.toString().replace(/\\w+ (\\w+) (\\d+) (\\d+).*/,'$2-$1-$3');\r\n\r\nconsole.log( format(Date()) );</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://stackoverflow.com/a/39103318/860099\">Dave</a> also base on  JD Smith idea but he avoid regexp and give very nice solution - I short a little his solution (by change split param) and opaque it in wrapper</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let format= (d,a=d.toString().split` `)=&gt; a[2]+\"-\"+a[1]+\"-\"+a[3];\r\n\r\nconsole.log( format(Date()) );</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":5,"body":"<p>Works same in IE 11, FF &amp; Chrome (Chrome 80.x shows 12 hours format when en-UK selected).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const d = new Date('2010/08/05 23:45') // 26.3.2020\r\nconst dtfUK = new Intl.DateTimeFormat('UK', { year: 'numeric', month: '2-digit', day: '2-digit',\r\n        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //\r\nconst dtfUS = new Intl.DateTimeFormat('en', { year: 'numeric', month: '2-digit', day: '2-digit',\r\n        hour: '2-digit',minute: '2-digit', second: '2-digit' }); //\r\nconsole.log(dtfUS.format(d)); // 08/05/2010 11:45:00 PM\r\nconsole.log(dtfUK.format(d)); // 05.08.2010 23:45:00\r\n/* node.js:\r\n08/05/2010, 11:45:00 PM\r\n2010-08-05 23:45:00\r\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>What about something more general ?</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = new Date('2010-08-10T10:34:56.789Z');\r\nvar str = d.toDateString() + // Tue Aug 10 2010\r\n    ' ' + d.toTimeString().split(' ')[0] + // 12:34:56, GMT+0x00 (GMT+0x:00)\r\n    ' ' + (d.getMonth() + 101) + // 108\r\n    ' ' + d.getMilliseconds(); // 789\r\nconsole.log(str); // Tue Aug 10 2010 12:34:56 108 789\r\nconsole.log(//   $1 Tue  $2 Aug  $3 11     $4 2020 $5 12   $6 34   $7 56    $8 108  $9 789\r\n    str.replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, '$3-$2-$4 $5:$6.$9 ($1)')\r\n); // 10-Aug-2010 12:34.789 (Tue)\r\n/*\r\n$1: Tue  Week Day string\r\n$2: Aug  Month short text\r\n$3: 11   Day\r\n$4: 2010 Year\r\n$5: 12   Hour\r\n$6: 34   Minute\r\n$7: 56   Seconds\r\n$8: 08   Month\r\n$9: 789  Milliseconds\r\n*/</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Or for example 1-line IIFE <em>\"library\"</em> ;-)</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(\r\n    (function (frm, d) { return [d.toDateString(), d.toTimeString().split(' ')[0], (d.getMonth() + 101), d.getMilliseconds()].join(' ').replace(/(\\S{3}) (\\S{3}) (\\d{1,2}) (\\d{4}) (\\d{2}):(\\d{2}):(\\d{2}) 1(\\d{2}) (\\d{1,3})/, frm); })\r\n    ('$4/$8/$3 $5:$6 ($1)', new Date())\r\n);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>You can remove useless parts and / or change indexes if you do not need them.</em></p>\n"},{"score":0,"body":"<p>May be this helps some one who are looking for multiple date formats one after the other by willingly or unexpectedly. Please find the code: I am using moment.js format function on a current date as (today is 29-06-2020) var startDate = moment(new Date()).format('MM/DD/YY'); Result: 06/28/20</p>\n<p>what happening is it retains only the year part :20 as &quot;06/28/20&quot;, after If I run the statement : new Date(startDate) The result is &quot;Mon Jun 28 1920 00:00:00 GMT+0530 (India Standard Time)&quot;,</p>\n<p>Then, when I use another format on &quot;06/28/20&quot;: startDate = moment(startDate ).format('MM-DD-YYYY'); Result: 06-28-1920, in google chrome and firefox browsers it gives correct date on second attempt as: 06-28-2020. But in IE it is having issues, from this I understood we can apply one dateformat on the given date, If we want second date format, it should be apply on the fresh date not on the first date format result. And also observe that for first time applying 'MM-DD-YYYY' and next 'MM-DD-YY' is working in IE. For clear understanding please find my question in the link: Date went wrong when using Momentjs date format in IE 11</p>\n"},{"score":1,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function convert_month(i = 0, option = \"num\") { // i = index\n\n  var object_months = [\n    { num: 01, short: \"Jan\", long: \"January\" },\n    { num: 02, short: \"Feb\", long: \"Februari\" }, \n    { num: 03, short: \"Mar\", long: \"March\" },          \n    { num: 04, short: \"Apr\", long: \"April\" },\n    { num: 05, short: \"May\", long: \"May\" },\n    { num: 06, short: \"Jun\", long: \"Juni\" },\n    { num: 07, short: \"Jul\", long: \"July\" },\n    { num: 08, short: \"Aug\", long: \"August\" },\n    { num: 09, short: \"Sep\", long: \"September\" },\n    { num: 10, short: \"Oct\", long: \"October\" },\n    { num: 11, short: \"Nov\", long: \"November\" },\n    { num: 12, short: \"Dec\", long: \"December\" }\n  ];\n        \n  return object_months[i][option];\n\n}\n      \nvar d = new Date();\n      \n// https://stackoverflow.com/questions/1408289/how-can-i-do-string-interpolation-in-javascript\nvar num   = `${d.getDate()}-${convert_month(d.getMonth())}-${d.getFullYear()}`;\nvar short = `${d.getDate()}-${convert_month(d.getMonth(), \"short\")}-${d.getFullYear()}`;\nvar long  = `${d.getDate()}-${convert_month(d.getMonth(), \"long\")}-${d.getFullYear()}`;\n\ndocument.querySelector(\"#num\").innerHTML = num;\ndocument.querySelector(\"#short\").innerHTML = short;\ndocument.querySelector(\"#long\").innerHTML = long;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;Numeric  : &lt;span id=\"num\"&gt;&lt;/span&gt; (default)&lt;/p&gt;\n&lt;p&gt;Short    : &lt;span id=\"short\"&gt;&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;Long     : &lt;span id=\"long\"&gt;&lt;/span&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],"score":2467}