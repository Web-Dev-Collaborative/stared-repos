{"body":"<p>I have a script that uses <code>$(document).ready</code>, but it doesn't use anything else from jQuery. I'd like to lighten it up by removing the jQuery dependency.</p>\n\n<p>How can I implement my own <code>$(document).ready</code> functionality without using jQuery? I know that  using <code>window.onload</code> will not be the same, as <code>window.onload</code> fires after all images, frames, etc. have been loaded.</p>\n","title":"$(document).ready equivalent without jQuery","answers":[{"score":1532,"body":"<p>There is a standards based replacement,<code>DOMContentLoaded</code> that is supported by over <a href=\"http://caniuse.com/#search=DOMContentLoaded\" rel=\"noreferrer\">98% of browsers</a>, though not IE8:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n  //do work\n});\n</code></pre>\n\n<p>jQuery's native function is much more complicated than just window.onload, as depicted below.  </p>\n\n<pre><code>function bindReady(){\n    if ( readyBound ) return;\n    readyBound = true;\n\n    // Mozilla, Opera and webkit nightlies currently support this event\n    if ( document.addEventListener ) {\n        // Use the handy event callback\n        document.addEventListener( \"DOMContentLoaded\", function(){\n            document.removeEventListener( \"DOMContentLoaded\", arguments.callee, false );\n            jQuery.ready();\n        }, false );\n\n    // If IE event model is used\n    } else if ( document.attachEvent ) {\n        // ensure firing before onload,\n        // maybe late but safe also for iframes\n        document.attachEvent(\"onreadystatechange\", function(){\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", arguments.callee );\n                jQuery.ready();\n            }\n        });\n\n        // If IE and not an iframe\n        // continually check to see if the document is ready\n        if ( document.documentElement.doScroll &amp;&amp; window == window.top ) (function(){\n            if ( jQuery.isReady ) return;\n\n            try {\n                // If IE is used, use the trick by Diego Perini\n                // http://javascript.nwbox.com/IEContentLoaded/\n                document.documentElement.doScroll(\"left\");\n            } catch( error ) {\n                setTimeout( arguments.callee, 0 );\n                return;\n            }\n\n            // and execute any waiting functions\n            jQuery.ready();\n        })();\n    }\n\n    // A fallback to window.onload, that will always work\n    jQuery.event.add( window, \"load\", jQuery.ready );\n}\n</code></pre>\n"},{"score":-1,"body":"<p>The ready function in <code>jQuery</code> does a number of things. Frankly, I don't see that point of replacing it unless you have amazingly small output from your website. <code>jQuery</code> is a pretty tiny library, and it handles all sorts of cross-browser things you'll need later.</p>\n\n<p>Anyway, there's little point in posting it here, just open up <code>jQuery</code> and look at the <code>bindReady</code> method.</p>\n\n<p>It starts by calling either <code>document.addEventListener(\"DOMContentLoaded\")</code> or <code>document.attachEvent('onreadystatechange')</code> depending on the event model, and goes on from there.</p>\n"},{"score":91,"body":"<p>Place your <code>&lt;script&gt;/*JavaScript code*/&lt;/script&gt;</code> right <strong>before the closing</strong> <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Admittedly, this might not suit everyone's purposes since it requires changing the HTML file rather than just doing something in the JavaScript file a la <code>document.ready</code>, but still...</p>\n"},{"score":13,"body":"<p>I was recently using this for a mobile site. This is John Resig's simplified version from \"Pro JavaScript Techniques\". It depends on addEvent.</p>\n\n<pre><code>var ready = ( function () {\n  function ready( f ) {\n    if( ready.done ) return f();\n\n    if( ready.timer ) {\n      ready.ready.push(f);\n    } else {\n      addEvent( window, \"load\", isDOMReady );\n      ready.ready = [ f ];\n      ready.timer = setInterval(isDOMReady, 13);\n    }\n  };\n\n  function isDOMReady() {\n    if( ready.done ) return false;\n\n    if( document &amp;&amp; document.getElementsByTagName &amp;&amp; document.getElementById &amp;&amp; document.body ) {\n      clearInterval( ready.timer );\n      ready.timer = null;\n      for( var i = 0; i &lt; ready.ready.length; i++ ) {\n        ready.ready[i]();\n      }\n      ready.ready = null;\n      ready.done = true;\n    }\n  }\n\n  return ready;\n})();\n</code></pre>\n"},{"score":354,"body":"<p>Edit:</p>\n\n<h2>Here is a viable replacement for jQuery ready</h2>\n\n<pre><code>function ready(callback){\n    // in case the document is already rendered\n    if (document.readyState!='loading') callback();\n    // modern browsers\n    else if (document.addEventListener) document.addEventListener('DOMContentLoaded', callback);\n    // IE &lt;= 8\n    else document.attachEvent('onreadystatechange', function(){\n        if (document.readyState=='complete') callback();\n    });\n}\n\nready(function(){\n    // do something\n});\n</code></pre>\n\n<p>Taken from\n<a href=\"https://plainjs.com/javascript/events/running-code-when-the-document-is-ready-15/\" rel=\"noreferrer\">https://plainjs.com/javascript/events/running-code-when-the-document-is-ready-15/</a></p>\n\n<p><a href=\"https://github.com/jfriend00/docReady\" rel=\"noreferrer\">Another good domReady function here</a> taken from <a href=\"https://stackoverflow.com/a/9899701/175071\">https://stackoverflow.com/a/9899701/175071</a></p>\n\n<hr>\n\n<p>As the accepted answer was very far from complete, I stitched together a \"ready\" function like <code>jQuery.ready()</code> based on jQuery 1.6.2 source:</p>\n\n<pre><code>var ready = (function(){\n\n    var readyList,\n        DOMContentLoaded,\n        class2type = {};\n        class2type[\"[object Boolean]\"] = \"boolean\";\n        class2type[\"[object Number]\"] = \"number\";\n        class2type[\"[object String]\"] = \"string\";\n        class2type[\"[object Function]\"] = \"function\";\n        class2type[\"[object Array]\"] = \"array\";\n        class2type[\"[object Date]\"] = \"date\";\n        class2type[\"[object RegExp]\"] = \"regexp\";\n        class2type[\"[object Object]\"] = \"object\";\n\n    var ReadyObj = {\n        // Is the DOM ready to be used? Set to true once it occurs.\n        isReady: false,\n        // A counter to track how many items to wait for before\n        // the ready event fires. See #6781\n        readyWait: 1,\n        // Hold (or release) the ready event\n        holdReady: function( hold ) {\n            if ( hold ) {\n                ReadyObj.readyWait++;\n            } else {\n                ReadyObj.ready( true );\n            }\n        },\n        // Handle when the DOM is ready\n        ready: function( wait ) {\n            // Either a released hold or an DOMready/load event and not yet ready\n            if ( (wait === true &amp;&amp; !--ReadyObj.readyWait) || (wait !== true &amp;&amp; !ReadyObj.isReady) ) {\n                // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                if ( !document.body ) {\n                    return setTimeout( ReadyObj.ready, 1 );\n                }\n\n                // Remember that the DOM is ready\n                ReadyObj.isReady = true;\n                // If a normal DOM Ready event fired, decrement, and wait if need be\n                if ( wait !== true &amp;&amp; --ReadyObj.readyWait &gt; 0 ) {\n                    return;\n                }\n                // If there are functions bound, to execute\n                readyList.resolveWith( document, [ ReadyObj ] );\n\n                // Trigger any bound ready events\n                //if ( ReadyObj.fn.trigger ) {\n                //    ReadyObj( document ).trigger( \"ready\" ).unbind( \"ready\" );\n                //}\n            }\n        },\n        bindReady: function() {\n            if ( readyList ) {\n                return;\n            }\n            readyList = ReadyObj._Deferred();\n\n            // Catch cases where $(document).ready() is called after the\n            // browser event has already occurred.\n            if ( document.readyState === \"complete\" ) {\n                // Handle it asynchronously to allow scripts the opportunity to delay ready\n                return setTimeout( ReadyObj.ready, 1 );\n            }\n\n            // Mozilla, Opera and webkit nightlies currently support this event\n            if ( document.addEventListener ) {\n                // Use the handy event callback\n                document.addEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n                // A fallback to window.onload, that will always work\n                window.addEventListener( \"load\", ReadyObj.ready, false );\n\n            // If IE event model is used\n            } else if ( document.attachEvent ) {\n                // ensure firing before onload,\n                // maybe late but safe also for iframes\n                document.attachEvent( \"onreadystatechange\", DOMContentLoaded );\n\n                // A fallback to window.onload, that will always work\n                window.attachEvent( \"onload\", ReadyObj.ready );\n\n                // If IE and not a frame\n                // continually check to see if the document is ready\n                var toplevel = false;\n\n                try {\n                    toplevel = window.frameElement == null;\n                } catch(e) {}\n\n                if ( document.documentElement.doScroll &amp;&amp; toplevel ) {\n                    doScrollCheck();\n                }\n            }\n        },\n        _Deferred: function() {\n            var // callbacks list\n                callbacks = [],\n                // stored [ context , args ]\n                fired,\n                // to avoid firing when already doing so\n                firing,\n                // flag to know if the deferred has been cancelled\n                cancelled,\n                // the deferred itself\n                deferred  = {\n\n                    // done( f1, f2, ...)\n                    done: function() {\n                        if ( !cancelled ) {\n                            var args = arguments,\n                                i,\n                                length,\n                                elem,\n                                type,\n                                _fired;\n                            if ( fired ) {\n                                _fired = fired;\n                                fired = 0;\n                            }\n                            for ( i = 0, length = args.length; i &lt; length; i++ ) {\n                                elem = args[ i ];\n                                type = ReadyObj.type( elem );\n                                if ( type === \"array\" ) {\n                                    deferred.done.apply( deferred, elem );\n                                } else if ( type === \"function\" ) {\n                                    callbacks.push( elem );\n                                }\n                            }\n                            if ( _fired ) {\n                                deferred.resolveWith( _fired[ 0 ], _fired[ 1 ] );\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with given context and args\n                    resolveWith: function( context, args ) {\n                        if ( !cancelled &amp;&amp; !fired &amp;&amp; !firing ) {\n                            // make sure args are available (#8421)\n                            args = args || [];\n                            firing = 1;\n                            try {\n                                while( callbacks[ 0 ] ) {\n                                    callbacks.shift().apply( context, args );//shifts a callback, and applies it to document\n                                }\n                            }\n                            finally {\n                                fired = [ context, args ];\n                                firing = 0;\n                            }\n                        }\n                        return this;\n                    },\n\n                    // resolve with this as context and given arguments\n                    resolve: function() {\n                        deferred.resolveWith( this, arguments );\n                        return this;\n                    },\n\n                    // Has this deferred been resolved?\n                    isResolved: function() {\n                        return !!( firing || fired );\n                    },\n\n                    // Cancel\n                    cancel: function() {\n                        cancelled = 1;\n                        callbacks = [];\n                        return this;\n                    }\n                };\n\n            return deferred;\n        },\n        type: function( obj ) {\n            return obj == null ?\n                String( obj ) :\n                class2type[ Object.prototype.toString.call(obj) ] || \"object\";\n        }\n    }\n    // The DOM ready check for Internet Explorer\n    function doScrollCheck() {\n        if ( ReadyObj.isReady ) {\n            return;\n        }\n\n        try {\n            // If IE is used, use the trick by Diego Perini\n            // http://javascript.nwbox.com/IEContentLoaded/\n            document.documentElement.doScroll(\"left\");\n        } catch(e) {\n            setTimeout( doScrollCheck, 1 );\n            return;\n        }\n\n        // and execute any waiting functions\n        ReadyObj.ready();\n    }\n    // Cleanup functions for the document ready method\n    if ( document.addEventListener ) {\n        DOMContentLoaded = function() {\n            document.removeEventListener( \"DOMContentLoaded\", DOMContentLoaded, false );\n            ReadyObj.ready();\n        };\n\n    } else if ( document.attachEvent ) {\n        DOMContentLoaded = function() {\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if ( document.readyState === \"complete\" ) {\n                document.detachEvent( \"onreadystatechange\", DOMContentLoaded );\n                ReadyObj.ready();\n            }\n        };\n    }\n    function ready( fn ) {\n        // Attach the listeners\n        ReadyObj.bindReady();\n\n        var type = ReadyObj.type( fn );\n\n        // Add the callback\n        readyList.done( fn );//readyList is result of _Deferred()\n    }\n    return ready;\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>&lt;script&gt;\n    ready(function(){\n        alert('It works!');\n    });\n    ready(function(){\n        alert('Also works!');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>I am not sure how functional this code is, but it worked fine with my superficial tests. This took quite a while, so I hope you and others can benefit from it.</p>\n\n<p>PS.: I suggest <a href=\"http://closure-compiler.appspot.com/home\" rel=\"noreferrer\">compiling</a> it.</p>\n\n<p>Or you can use <a href=\"http://dustindiaz.com/smallest-domready-ever\" rel=\"noreferrer\">http://dustindiaz.com/smallest-domready-ever</a>:</p>\n\n<pre><code>function r(f){/in/.test(document.readyState)?setTimeout(r,9,f):f()}\nr(function(){/*code to run*/});\n</code></pre>\n\n<p>or the native function if you only need to support the new browsers (Unlike jQuery ready, this won't run if you add this after the page has loaded)</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded',function(){/*fun code to run*/})\n</code></pre>\n"},{"score":6,"body":"<p>It is worth looking in <em><a href=\"http://www.dustindiaz.com/rock-solid-addevent/\" rel=\"nofollow\">Rock Solid addEvent()</a></em> and <a href=\"http://www.braksator.com/how-to-make-your-own-jquery\" rel=\"nofollow\">http://www.braksator.com/how-to-make-your-own-jquery</a>.</p>\n\n<p>Here is the code in case the site goes down</p>\n\n<pre><code>function addEvent(obj, type, fn) {\n    if (obj.addEventListener) {\n        obj.addEventListener(type, fn, false);\n        EventCache.add(obj, type, fn);\n    }\n    else if (obj.attachEvent) {\n        obj[\"e\"+type+fn] = fn;\n        obj[type+fn] = function() { obj[\"e\"+type+fn]( window.event ); }\n        obj.attachEvent( \"on\"+type, obj[type+fn] );\n        EventCache.add(obj, type, fn);\n    }\n    else {\n        obj[\"on\"+type] = obj[\"e\"+type+fn];\n    }\n}\n\nvar EventCache = function(){\n    var listEvents = [];\n    return {\n        listEvents : listEvents,\n        add : function(node, sEventName, fHandler){\n            listEvents.push(arguments);\n        },\n        flush : function(){\n            var i, item;\n            for(i = listEvents.length - 1; i &gt;= 0; i = i - 1){\n                item = listEvents[i];\n                if(item[0].removeEventListener){\n                    item[0].removeEventListener(item[1], item[2], item[3]);\n                };\n                if(item[1].substring(0, 2) != \"on\"){\n                    item[1] = \"on\" + item[1];\n                };\n                if(item[0].detachEvent){\n                    item[0].detachEvent(item[1], item[2]);\n                };\n                item[0][item[1]] = null;\n            };\n        }\n    };\n}();\n\n// Usage\naddEvent(window, 'unload', EventCache.flush);\naddEvent(window, 'load', function(){alert(\"I'm ready\");});\n</code></pre>\n"},{"score":67,"body":"<p>Poor man's solution:</p>\n\n<pre><code>var checkLoad = function() {   \n    document.readyState !== \"complete\" ? setTimeout(checkLoad, 11) : alert(\"loaded!\");   \n};  \n\ncheckLoad();  \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/s4EzY/\" rel=\"noreferrer\">View Fiddle</a></p>\n\n<p>Added this one, a bit better I guess, own scope, and non recursive</p>\n\n<pre><code>(function(){\n    var tId = setInterval(function() {\n        if (document.readyState == \"complete\") onComplete()\n    }, 11);\n    function onComplete(){\n        clearInterval(tId);    \n        alert(\"loaded!\");    \n    };\n})()\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/squadjot/XD7ZF/\" rel=\"noreferrer\">View Fiddle</a></p>\n"},{"score":3,"body":"<p>How about this solution?</p>\n\n<pre><code>// other onload attached earlier\nwindow.onload=function() {\n   alert('test');\n};\n\ntmpPreviousFunction=window.onload ? window.onload : null;\n\n// our onload function\nwindow.onload=function() {\n   alert('another message');\n\n   // execute previous one\n   if (tmpPreviousFunction) tmpPreviousFunction();\n};\n</code></pre>\n"},{"score":11,"body":"<p>The jQuery answer was pretty useful to me. With a little refactory it fitted my needs well.\nI hope it helps anybody else.</p>\n\n<pre><code>function onReady ( callback ){\n    var addListener = document.addEventListener || document.attachEvent,\n        removeListener =  document.removeEventListener || document.detachEvent\n        eventName = document.addEventListener ? \"DOMContentLoaded\" : \"onreadystatechange\"\n\n    addListener.call(document, eventName, function(){\n        removeListener( eventName, arguments.callee, false )\n        callback()\n    }, false )\n}\n</code></pre>\n"},{"score":7,"body":"<p>Just add this to the bottom of your HTML page...</p>\n\n<pre><code>&lt;script&gt;\n    Your_Function();\n&lt;/script&gt;\n</code></pre>\n\n<p>Because, HTML documents are parsed by top-bottom.</p>\n"},{"score":213,"body":"<p>Three options:</p>\n\n<ol>\n<li>If <code>script</code> is the last tag of the body, the DOM would be ready before script tag executes</li>\n<li>When the DOM is ready, \"readyState\" will change to \"complete\"</li>\n<li>Put everything under 'DOMContentLoaded' event listener</li>\n</ol>\n\n<p><strong><em>onreadystatechange</em></strong></p>\n\n<pre><code>  document.onreadystatechange = function () {\n     if (document.readyState == \"complete\") {\n     // document is ready. Do your stuff here\n   }\n }\n</code></pre>\n\n<p>Source: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.readyState\" rel=\"noreferrer\">MDN</a></p>\n\n<p><strong><em>DOMContentLoaded</em></strong></p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', function() {\n   console.log('document is ready. I can sleep now');\n});\n</code></pre>\n\n<p><strong><em>Concerned about stone age browsers:</em></strong>\nGo to the jQuery source code and use the <code>ready</code> function. In that case you are not parsing+executing the whole library you're are doing only a very small part of it.</p>\n"},{"score":-1,"body":"<p>This was a good <a href=\"https://stackoverflow.com/a/11810957/185565\">https://stackoverflow.com/a/11810957/185565</a> poor man's solution. One comment considered a counter to bail out in case of emergency. This is my modification.</p>\n\n<pre><code>function doTheMagic(counter) {\n  alert(\"It worked on \" + counter);\n}\n\n// wait for document ready then call handler function\nvar checkLoad = function(counter) {\n  counter++;\n  if (document.readyState != \"complete\" &amp;&amp; counter&lt;1000) {\n    var fn = function() { checkLoad(counter); };\n    setTimeout(fn,10);\n  } else doTheMagic(counter);\n};\ncheckLoad(0);\n</code></pre>\n"},{"score":-7,"body":"<p>If you want to support <strong><a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_7\" rel=\"nofollow\">Internet&nbsp;Explorer 7+</a> (no quirks, compatibility and other pain), last <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\" rel=\"nofollow\">Chrome</a>, last <a href=\"http://en.wikipedia.org/wiki/Safari_%28web_browser%29\" rel=\"nofollow\">Safari</a>, last Firefox and no iframes</strong> - this will be enough:</p>\n\n<pre><code>is_loaded = false\ncallbacks = []\n\nloaded = -&gt;\n  is_loaded = true\n  for i in [0...callbacks.length]\n    callbacks[i].call document\n  callbacks = []\n\ncontent_loaded = -&gt;\n  document.removeEventListener \"DOMContentLoaded\", content_loaded, true\n  loaded()\n\nstate_changed = -&gt;\n  if document.readyState is \"complete\"\n    document.detachEvent \"onreadystatechange\", state_changed\n    loaded()\n\nif !!document.addEventListener\n  document.addEventListener \"DOMContentLoaded\", content_loaded, true\nelse\n  document.attachEvent \"onreadystatechange\", state_changed\n\ndom_ready = (callback) -&gt;\n  if is_loaded\n    callback.call document\n  else\n    callbacks.push callback\n</code></pre>\n"},{"score":13,"body":"<p>Cross-browser (old browsers too) and a simple solution:</p>\n\n<pre><code>var docLoaded = setInterval(function () {\n    if(document.readyState !== \"complete\") return;\n    clearInterval(docLoaded);\n\n    /*\n        Your code goes here i.e. init()\n    */\n}, 30);\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/z6Lq6oxg/\" rel=\"noreferrer\">Showing alert in jsfiddle</a></p>\n"},{"score":36,"body":"<p>I use this:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function(event) { \n    //Do work\n});\n</code></pre>\n\n<p>Note: This probably only works with newer browsers, especially these: <a href=\"http://caniuse.com/#feat=domcontentloaded\">http://caniuse.com/#feat=domcontentloaded</a></p>\n"},{"score":0,"body":"<p>If you are loading jQuery near the bottom of BODY, but are having trouble with code that writes out jQuery(&lt;func>) or jQuery(document).ready(&lt;func>), check out <a href=\"https://github.com/withjam/jqshim-head\" rel=\"nofollow\">jqShim</a> on Github.</p>\n\n<p>Rather than recreate its own document ready function, it simply holds onto the functions until jQuery is available then proceeds with jQuery as expected. The point of moving jQuery to the bottom of body is to speed up page load, and you can still accomplish it by inlining the jqShim.min.js in the head of your template.</p>\n\n<p>I ended up writing this code to make moving all the scripts in <a href=\"http://en.wikipedia.org/wiki/WordPress\" rel=\"nofollow\">WordPress</a> to the footer, and just this shim code now sits directly in the header.</p>\n"},{"score":-1,"body":"<p>Edit of the edit of @duskwuff to support <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_8\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;8</a> too. The difference is a new call to the function test of the regex and the setTimeout with an anonymous function.</p>\n\n<p>Also, I set the timeout to 99.</p>\n\n<pre><code>function ready(f){/in/.test(document.readyState)?setTimeout(function(){ready(f);},99):f();}\n</code></pre>\n"},{"score":3,"body":"<p>We found a quick-and-dirty cross browser implementation of ours that may do the trick for most simple cases with a minimal implementation:</p>\n\n<pre><code>window.onReady = function onReady(fn){\n    document.body ? fn() : setTimeout(function(){ onReady(fn);},50);\n};\n</code></pre>\n"},{"score":1,"body":"<p>The setTimeout/setInterval solutions presented here will only work in specific circumstances.</p>\n\n<p>The problem shows up especially in older Internet Explorer versions up to 8.</p>\n\n<p>The variables affecting the success of these setTimeout/setInterval solutions are:</p>\n\n<pre><code>1) dynamic or static HTML\n2) cached or non cached requests\n3) size of the complete HTML document\n4) chunked or non chunked transfer encoding\n</code></pre>\n\n<p>the original (native Javascript) code solving this specific issue is here:</p>\n\n<pre><code>https://github.com/dperini/ContentLoaded\nhttp://javascript.nwbox.com/ContentLoaded (test)\n</code></pre>\n\n<p>this is the code from which the jQuery team have built their implementation.</p>\n"},{"score":22,"body":"<p>Really, if you care about <strong><a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;9+</a></strong> only, this code would be enough to replace <code>jQuery.ready</code>:</p>\n\n<pre><code>    document.addEventListener(\"DOMContentLoaded\", callback);\n</code></pre>\n\n<hr>\n\n<p>If you worry about <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_6\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;6</a> and some really strange and rare browsers, this will work:</p>\n\n<pre><code>domReady: function (callback) {\n    // Mozilla, Opera and WebKit\n    if (document.addEventListener) {\n        document.addEventListener(\"DOMContentLoaded\", callback, false);\n        // If Internet Explorer, the event model is used\n    } else if (document.attachEvent) {\n        document.attachEvent(\"onreadystatechange\", function() {\n            if (document.readyState === \"complete\" ) {\n                callback();\n            }\n        });\n        // A fallback to window.onload, that will always work\n    } else {\n        var oldOnload = window.onload;\n        window.onload = function () {\n            oldOnload &amp;&amp; oldOnload();\n            callback();\n        }\n    }\n},\n</code></pre>\n"},{"score":4,"body":"<p>This cross-browser code will call a function once the DOM is ready:</p>\n\n<pre><code>var domReady=function(func){\n    var scriptText='('+func+')();';\n    var scriptElement=document.createElement('script');\n    scriptElement.innerText=scriptText;\n    document.body.appendChild(scriptElement);\n};\n</code></pre>\n\n<p>Here's how it works:</p>\n\n<ol>\n<li>The first line of <code>domReady</code> calls the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString\" rel=\"nofollow\"><code>toString</code></a> method of the function to get a string representation of the function you pass in and wraps it in an expression that immediately calls the function.</li>\n<li>The rest of <code>domReady</code> creates a script element with the expression and appends it to the <code>body</code> of the document.</li>\n<li>The browser runs script tags appended to <code>body</code> after the DOM is ready.</li>\n</ol>\n\n<p>For example, if you do this: <code>domReady(function(){alert();});</code>, the following will appended to the <code>body</code> element:</p>\n\n<pre><code> &lt;script&gt;(function (){alert();})();&lt;/script&gt;\n</code></pre>\n\n<p>Note that this works only for user-defined functions. The following won't work: <code>domReady(alert);</code></p>\n"},{"score":18,"body":"<p>This question was asked quite a long time ago.  For anyone just seeing this question, there is now a site called <a href=\"http://youmightnotneedjquery.com/\" rel=\"noreferrer\">\"you might not need jquery\"</a>  which breaks down - by level of IE support required - all the functionality of jquery and provides some alternative, smaller libraries.</p>\n\n<p>IE8 document ready script according to <a href=\"http://youmightnotneedjquery.com/\" rel=\"noreferrer\">you might not need jquery</a></p>\n\n<pre><code>function ready(fn) {\n    if (document.readyState != 'loading')\n        fn();\n    else if (document.addEventListener)\n        document.addEventListener('DOMContentLoaded', fn);\n    else\n        document.attachEvent('onreadystatechange', function() {\n            if (document.readyState != 'loading')\n                fn();\n        });\n}\n</code></pre>\n"},{"score":9,"body":"<p>Here is the <strong>smallest code snippet to test DOM ready</strong> which works across all browsers (even IE 8):</p>\n\n<pre><code>r(function(){\n    alert('DOM Ready!');\n});\nfunction r(f){/in/.test(document.readyState)?setTimeout('r('+f+')',9):f()}\n</code></pre>\n\n<p>See this <a href=\"https://stackoverflow.com/questions/9899372/pure-javascript-equivalent-to-jquerys-ready-how-to-call-a-function-when-the/30319853#30319853\">answer</a>.</p>\n"},{"score":-4,"body":"<p>In short, instead of the $(document).ready() used in jQuery, we can use a JavaScript method:</p>\n\n<pre><code>&lt;script&gt;\n    document.addEventListener(\"DOMContentLoaded\", function_name, false);\n    function function_name(){\n        statements;\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>Thus, when the page is ready i.e. DOMContentLoaded only then the function function_name() will be invoked.</p>\n"},{"score":0,"body":"<p>For IE9+:</p>\n\n<pre><code>function ready(fn) {\n  if (document.readyState != 'loading'){\n    fn();\n  } else {\n    document.addEventListener('DOMContentLoaded', fn);\n  }\n}\n</code></pre>\n"},{"score":4,"body":"<p>It's always good to use JavaScript equivalents as compared to jQuery. One reason is one fewer library to depend on and they are much faster than the jQuery equivalents.</p>\n\n<p>One fantastic reference for jQuery equivalents is <a href=\"http://youmightnotneedjquery.com/\" rel=\"nofollow\">http://youmightnotneedjquery.com/</a>.</p>\n\n<p>As far as your question is concerned, I took the below code from the above link :)\nOnly caveat is it only works with <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"nofollow\">Internet&nbsp;Explorer&nbsp;9</a> and later.</p>\n\n<pre><code>function ready(fn) {\n    if (document.readyState != 'loading') {\n        fn();\n    }\n    else {\n        document.addEventListener('DOMContentLoaded', fn);\n    }\n}\n</code></pre>\n"},{"score":1,"body":"<p>Here's what I use, it's fast and covers all bases I think; works for everything except IE&lt;9.</p>\n\n<pre><code>(() =&gt; { function fn() {\n    // \"On document ready\" commands:\n    console.log(document.readyState);\n};  \n  if (document.readyState != 'loading') {fn()}\n  else {document.addEventListener('DOMContentLoaded', fn)}\n})();\n</code></pre>\n\n<p>This seems to catch all cases:</p>\n\n<ul>\n<li>fires immediately if the DOM is already ready (if the DOM is not \"loading\",    but either \"interactive\" or \"complete\")</li>\n<li>if  the DOM is still loading, it sets up an event listener for when the DOM\nis available (interactive).</li>\n</ul>\n\n<p>The DOMContentLoaded event is available in IE9 and everything else, so I personally think it's OK to use this. Rewrite the arrow function declaration to a regular anonymous function if you're not transpiling your code from ES2015  to ES5.</p>\n\n<p>If you want to wait until all assets are loaded, all images displayed etc then use window.onload instead.</p>\n"},{"score":-3,"body":"<p>The following approach ensures a script functionality only runs when the document is ready, even if the script is loaded asynchronously.</p>\n<p>Unlike JQuery's <code>$(document).ready</code>, <code>DOMContentLoaded</code> will not fire if the script is loaded dynamically afterwards.</p>\n<pre><code>(function ready() {\n    if (!document.body) {return setTimeout(ready, 50);}\n    // Document is ready here\n})();\n</code></pre>\n<p>The same solution applies to any condition we want a script to be executed after. Say we are asynchronously loading JQuery and another custom script that requires JQuery. We don't know in advance which of the two will load first, but we can ensure that our custom script waits for JQuery to be present:</p>\n<pre><code>(function ready() {\n    if (!window.$) {return setTimeout(ready, 50);}\n    // JQuery is ready here\n})();\n</code></pre>\n"},{"score":0,"body":"<pre><code>function onDocReady(fn){ \n    $d.readyState!==\"loading\" ? fn():document.addEventListener('DOMContentLoaded',fn);\n}\n\nfunction onWinLoad(fn){\n    $d.readyState===\"complete\") ? fn(): window.addEventListener('load',fn);\n} \n</code></pre>\n\n<p><strong>onDocReady</strong> provides a callback when the HTML dom is ready to fully  access/parse/manipulate.</p>\n\n<p><strong>onWinLoad</strong> provides a callback when everything has loaded (images etc)</p>\n\n<ul>\n<li>These functions can be called whenever you want.</li>\n<li>Supports multiple \"listeners\". </li>\n<li>Will work in any browser.</li>\n</ul>\n"},{"score":2,"body":"<p>If you don't have to support very old browsers, here is a way to do it even when your external script is loaded with <em>async</em> attribute:</p>\n\n<pre><code>HTMLDocument.prototype.ready = new Promise(function(resolve) {\n   if(document.readyState != \"loading\")\n      resolve();\n   else\n      document.addEventListener(\"DOMContentLoaded\", function() {\n         resolve();\n      });\n});\n\ndocument.ready.then(function() {\n   console.log(\"document.ready\");\n});\n</code></pre>\n"},{"score":3,"body":"<p>I simply use:</p>\n\n<pre><code>setTimeout(function(){\n    //reference/manipulate DOM here\n});\n</code></pre>\n\n<p>And unlike <code>document.addEventListener(\"DOMContentLoaded\" //etc</code> as in the very top answer, it works as far back as IE9 -- <a href=\"http://caniuse.com/#search=DOMContentLoaded\" rel=\"nofollow noreferrer\">http://caniuse.com/#search=DOMContentLoaded</a> only indicates as recently as IE11. </p>\n\n<p>Interestingly I stumbled upon this <code>setTimeout</code> solution in 2009: <a href=\"https://stackoverflow.com/questions/1381481/is-checking-for-the-readiness-of-the-dom-overkill\">Is checking for the readiness of the DOM overkill?</a>, which probably could have been worded slightly better, as I meant \"is it overkill to use various frameworks' more complicated approaches to check for the readiness of the DOM\".</p>\n\n<p>My best explanation for why this technique works is that, when the script with such a setTimeout has been reached, the DOM is in the middle of being parsed, so execution of the code within the setTimeout gets deferred until that operation is finished.</p>\n"},{"score":-1,"body":"<p>Try this:</p>\n\n<pre><code>function ready(callback){\n    if(typeof callback === \"function\"){\n        document.addEventListener(\"DOMContentLoaded\", callback);\n        window.addEventListener(\"load\", callback);\n    }else{\n        throw new Error(\"Sorry, I can not run this!\");\n    }\n}\nready(function(){\n    console.log(\"It worked!\");\n});\n</code></pre>\n"},{"score":0,"body":"<pre><code>(function(f){\n  if(document.readyState != \"loading\") f();\n  else document.addEventListener(\"DOMContentLoaded\", f);\n})(function(){\n  console.log(\"The Document is ready\");\n});\n</code></pre>\n"},{"score":0,"body":"<p>Most vanilla JS Ready functions do NOT consider the scenario where the <code>DOMContentLoaded</code> handler is set <em>after</em>  the document is already loaded - Which means the function will <em>never run</em>. This can happen if you look for <code>DOMContentLoaded</code> within an <code>async</code> external script (<code>&lt;script async src=\"file.js\"&gt;&lt;/script&gt;</code>).</p>\n\n<p>The code below checks for <code>DOMContentLoaded</code> only if the document's <code>readyState</code> isn't already <code>interactive</code> or <code>complete</code>.</p>\n\n<pre><code>var DOMReady = function(callback) {\n  document.readyState === \"interactive\" || document.readyState === \"complete\" ? callback() : document.addEventListener(\"DOMContentLoaded\", callback());\n};\nDOMReady(function() {\n  //DOM ready!\n});\n</code></pre>\n\n<p>If you want to support IE aswell:</p>\n\n<pre><code>var DOMReady = function(callback) {\n    if (document.readyState === \"interactive\" || document.readyState === \"complete\") {\n        callback();\n    } else if (document.addEventListener) {\n        document.addEventListener('DOMContentLoaded', callback());\n    } else if (document.attachEvent) {\n        document.attachEvent('onreadystatechange', function() {\n            if (document.readyState != 'loading') {\n                callback();\n            }\n        });\n    }\n};\n\nDOMReady(function() {\n  // DOM ready!\n});\n</code></pre>\n"},{"score":5,"body":"<h1>Most minimal and 100% working</h1>\n\n<p>I have picked the answer from <a href=\"https://plainjs.com/javascript/events/running-code-when-the-document-is-ready-15/\" rel=\"noreferrer\">PlainJS</a> and it's working fine for me. It extends <code>DOMContentLoaded</code> so that it can be accepted at all the browsers.</p>\n\n<hr>\n\n<p>This function is the equivalent of jQuery's <code>$(document).ready()</code> method:</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', function(){\n    // do something\n});\n</code></pre>\n\n<p>However, in contrast to jQuery, this code will only run properly in modern browsers (IE > 8) and it won't in case the document is already rendered at the time this script gets inserted (e.g. via Ajax). Therefore, we need to extend this a little bit:</p>\n\n<pre><code>function run() {\n    // do something\n}\n\n// in case the document is already rendered\nif (document.readyState!='loading') run();\n// modern browsers\nelse if (document.addEventListener) \ndocument.addEventListener('DOMContentLoaded', run);\n// IE &lt;= 8\nelse document.attachEvent('onreadystatechange', function(){\n    if (document.readyState=='complete') run();\n});\n</code></pre>\n\n<p>This covers basically all possibilities and is a viable replacement for the jQuery helper.</p>\n"},{"score":11,"body":"<p>It is year 2020 and <code>&lt;script&gt;</code> tag has <code>defer</code> attribute.</p>\n\n<p>for example:</p>\n\n<pre><code>&lt;script src=\"demo_defer.js\" defer&gt;&lt;/script&gt;\n</code></pre>\n\n<p>it specifies that the script is executed when the page has finished parsing.</p>\n\n<p><a href=\"https://www.w3schools.com/tags/att_script_defer.asp\" rel=\"noreferrer\">https://www.w3schools.com/tags/att_script_defer.asp</a></p>\n"},{"score":1,"body":"<h1>Comparison</h1>\n<p>Here (in below snippet) is comparison of chosen available browser &quot;built-in&quot; methods and their execution sequence. Remarks</p>\n<ul>\n<li>the <code>document.onload</code> (X) is not supported by any modern browser (event is never <a href=\"https://stackoverflow.com/q/5135638/860099\">fired</a>)</li>\n<li>if you use <code>&lt;body onload=&quot;bodyOnLoad()&quot;&gt;</code> (F) and at the same time <code>window.onload</code> (E) then only first one will be executed (because it override second one)</li>\n<li>event handler given in <code>&lt;body onload=&quot;...&quot;&gt;</code> (F)  is wrapped by additional <code>onload</code> function</li>\n<li><code>document.onreadystatechange</code> (D) not override <code>document .addEventListener('readystatechange'...)</code> (C) probably cecasue <code>onXYZevent-like</code> methods are independent than <code>addEventListener</code> queues (which allows add multiple listeners). Probably nothing happens between execution this two handlers.</li>\n<li>all scripts write their timestamp in console - but scripts which also have access to <code>div</code> write their timestamps also in body (click &quot;Full Page&quot; link after script execution to see it).</li>\n<li>solutions <code>readystatechange</code> (C,D) are executed multiple times by browser but for different document states:</li>\n<li><em>loading</em> - the document is loading (no fired in snippet)</li>\n<li><em>interactive</em> - the document is parsed, fired before <code>DOMContentLoaded</code></li>\n<li><em>complete</em> - the document and resources are loaded, fired before <code>body/window onload</code></li>\n</ul>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;html&gt;\n\n&lt;head&gt;\n  &lt;script&gt;\n    // solution A\n    console.log(`[timestamp: ${Date.now()}] A: Head script`) ;\n    \n    // solution B\n    document.addEventListener(\"DOMContentLoaded\", () =&gt; {\n      print(`[timestamp: ${Date.now()}] B: DOMContentLoaded`);\n    });\n\n    // solution C\n    document.addEventListener('readystatechange', () =&gt; {\n      print(`[timestamp: ${Date.now()}] C: ReadyState: ${document.readyState}`);\n    });\n   \n    // solution D\n    document.onreadystatechange = s=&gt; {print(`[timestamp: ${Date.now()}] D: document.onreadystatechange ReadyState: ${document.readyState}`)};\n    \n    // solution E (never executed)\n    window.onload = () =&gt; {\n      print(`E: &lt;body onload=\"...\"&gt; override this handler`);\n    };\n\n    // solution F\n    function bodyOnLoad() {\n      print(`[timestamp: ${Date.now()}] F: &lt;body onload='...'&gt;`);      \n      infoAboutOnLoad(); // additional info\n    }\n    \n    // solution X\n    document.onload = () =&gt; {print(`document.onload is never fired`)};\n\n\n\n    // HELPERS\n\n    function print(txt) { \n      console.log(txt);\n      if(mydiv) mydiv.innerHTML += txt.replace('&lt;','&amp;lt;').replace('&gt;','&amp;gt;') + '&lt;br&gt;';\n    }\n    \n    function infoAboutOnLoad() {\n      console.log(\"window.onload (after  override):\", (''+document.body.onload).replace(/\\s+/g,' '));\n      console.log(`body.onload==window.onload --&gt; ${document.body.onload==window.onload}`);\n    }\n            \n    console.log(\"window.onload (before override):\", (''+document.body.onload).replace(/\\s+/g,' '));\n\n  &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body onload=\"bodyOnLoad()\"&gt;\n  &lt;div id=\"mydiv\"&gt;&lt;/div&gt;\n\n  &lt;!-- this script must te at the bottom of &lt;body&gt; --&gt;\n  &lt;script&gt;\n    // solution G\n    print(`[timestamp: ${Date.now()}] G: &lt;body&gt; bottom script`);\n  &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>Works in all known browsers (tested via BrowserStack). IE6+, Safari 1+, Chrome 1+, Opera, etc. Uses <code>DOMContentLoaded</code>, with fallbacks to <code>document.documentElement.doScroll()</code> and <code>window.onload</code>.</p>\n<pre><code>/*! https://github.com/Kithraya/DOMContentLoaded v1.2.6 | MIT License */\n\nDOMContentLoaded.version = &quot;1.2.6&quot;;\n\nfunction DOMContentLoaded() { &quot;use strict&quot;;\n    \n    var ael = 'addEventListener', rel = 'removeEventListener', aev = 'attachEvent', dev = 'detachEvent';\n    var alreadyRun = false, // for use in the idempotent function ready()\n        funcs = arguments;\n    \n    // old versions of JS return '[object Object]' for null.\n    function type(obj) { return (obj === null) ? 'null' : Object.prototype.toString.call(obj).slice(8,-1).toLowerCase() }\n    function microtime() { return + new Date() } \n    \n     /* document.readyState === 'complete' reports correctly in every browser I have tested, including IE.\n        But IE6 to 10 don't return the correct readyState values as per the spec:\n        readyState is sometimes 'interactive', even when the DOM isn't accessible in IE6/7 so checking for the onreadystatechange event like jQuery does is not optimal\n        readyState is complete at basically the same time as 'window.onload' (they're functionally equivalent, within a few tenths of a second)\n        Accessing undefined properties of a defined object (document) will not throw an error (in case readyState is undefined).\n     */\n    \n    // Check for IE &lt; 11 via conditional compilation\n    /// values: 5?: IE5, 5.5?: IE5.5, 5.6/5.7: IE6/7, 5.8: IE8, 9: IE9, 10: IE10, 11*: (IE11 older doc mode), undefined: IE11 / NOT IE\n    var jscript_version = Number( new Function(&quot;/*@cc_on return @_jscript_version; @*\\/&quot;)() ) || NaN;\n    \n    // check if the DOM has already loaded\n    if (document.readyState === 'complete') { ready(null); return; }  // here we send null as the readyTime, since we don't know when the DOM became ready.\n    \n    if (jscript_version &lt; 9) { doIEScrollCheck(); return; } // For IE&lt;9 poll document.documentElement.doScroll(), no further actions are needed.\n    \n     /* \n        Chrome, Edge, Firefox, IE9+, Opera 9+, Safari 3.1+, Android Webview, Chrome for Android, Edge Mobile, \n        Firefox for Android 4+, Opera for Android, iOS Safari, Samsung Internet, etc, support addEventListener\n        And IE9+ supports 'DOMContentLoaded' \n     */\n        \n    if (document[ael]) {\n        document[ael](&quot;DOMContentLoaded&quot;, ready, false); \n        window[ael](&quot;load&quot;, ready, false); // fallback to the load event in case addEventListener is supported, but not DOMContentLoaded\n    } else \n    if (aev in window) { window[aev]('onload', ready);\n        /* Old Opera has a default of window.attachEvent being falsy, so we use the in operator instead\n           https://dev.opera.com/blog/window-event-attachevent-detachevent-script-onreadystatechange/\n\n           Honestly if somebody is using a browser so outdated AND obscure (like Opera 7 where neither addEventListener \n           nor &quot;DOMContLoaded&quot; is supported, they deserve to wait for the full page).\n           I CBA testing whether readyState === 'interactive' is truly interactive in browsers designed in 2003. I just assume it isn't (like in IE6-8). \n        */\n    } else { // fallback to queue window.onload that will always work\n       addOnload(ready);\n    }\n    \n    \n    // This function allows us to preserve any original window.onload handlers (in super old browsers where this is even necessary), \n    // while keeping the option to chain onloads, and dequeue them.\n    \n    function addOnload(fn) { var prev = window.onload; // old window.onload, which could be set by this function, or elsewhere\n        \n        // we add a function queue list to allow for dequeueing \n        // addOnload.queue is the queue of functions that we will run when when the DOM is ready\n        if ( type( addOnload.queue ) !== 'array') { addOnload.queue = [];\n            if ( type(prev) === 'function') { addOnload.queue.push( prev ); } // add the previously defined event handler\n        }\n        \n        if (typeof fn === 'function') { addOnload.queue.push(fn) }\n\n        window.onload = function() { // iterate through the queued functions\n            for (var i = 0; i &lt; addOnload.queue.length; i++) { addOnload.queue[i]() } \n        };\n    }   \n\n    // remove a queued window.onload function from the chain (simplified); \n    \n    function dequeueOnload(fn) { var q = addOnload.queue, i = 0;\n    \n        // sort through the queued functions in addOnload.queue until we find `fn`\n        if (type( q ) === 'array') {        // if found, remove from the queue\n            for (; i &lt; q.length; i++) { ;;(fn === q[i]) ? q.splice(i, 1) : 0; } // void( (fn === q[i]) ? q.splice(i, 1) : 0 ) \n        }\n    }\n    \n    function ready(ev) { // idempotent event handler function\n        if (alreadyRun) {return} alreadyRun = true; \n        \n        // this time is when the DOM has loaded (or if all else fails, when it was actually possible to inference the DOM has loaded via a 'load' event)\n        // perhaps this should be `null` if we have to inference readyTime via a 'load' event, but this functionality is better.\n        var readyTime = microtime(); \n        \n        detach(); // detach any event handlers\n                        \n        // run the functions\n        for (var i=0; i &lt; funcs.length; i++) {  var func = funcs[i];\n            \n            if (type(func) === 'function') {\n                func.call(document, { 'readyTime': (ev === null ? null : readyTime), 'funcExecuteTime': microtime() }, func); \n                // jquery calls 'ready' with `this` being set to document, so we'll do the same. \n            }       \n        }\n    }\n\n    function detach() {\n        if (document[rel]) { \n            document[rel](&quot;DOMContentLoaded&quot;, ready); window[rel](&quot;load&quot;, ready);\n        } else\n        if (dev in window) { window[dev](&quot;onload&quot;, ready); } \n        else {\n            dequeueOnload(ready);\n        }                                                               \n    }\n    \n    function doIEScrollCheck() { // for use in IE &lt; 9 only.\n        if ( window.frameElement ) { \n            // we're in an &lt;iframe&gt; or similar\n            // the document.documentElemeent.doScroll technique does not work if we're not at the top-level (parent document)\n\n            try { window.attachEvent(&quot;onload&quot;, ready); } catch (e) { } // attach to onload if were in an &lt;iframe&gt; in IE as there's no way to tell otherwise\n            \n            return;\n        } \n        try {\n            document.documentElement.doScroll('left');  // when this statement no longer throws, the DOM is accessible in old IE\n        } catch(error) {\n            setTimeout(function() {\n                (document.readyState === 'complete') ? ready() : doIEScrollCheck();\n            }, 50);\n            return;\n        }\n        ready();\n    }\n}\n</code></pre>\n<p>Usage:</p>\n<pre><code>&lt;script&gt;\nDOMContentLoaded(function(e) { console.log(e) });\n&lt;/script&gt;\n</code></pre>\n"},{"score":0,"body":"<p>Nowadays you should use modules. Put your code into the default function of a module and import the function into a script element.</p>\n<p><code>client.js</code>:</p>\n<pre class=\"lang-js prettyprint-override\"><code>export default function ()\n{\n  alert (&quot;test&quot;);\n}\n</code></pre>\n<p><code>index.html</code>:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;title&gt;test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;script type=&quot;module&quot;&gt;\n      import main from './client.js';\n      main ();\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"}],"score":2116}