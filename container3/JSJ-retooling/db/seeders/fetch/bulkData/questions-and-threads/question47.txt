{"body":"<p>How can I change the class of an HTML element in response to an <code>onclick</code> or any other events using JavaScript?</p>\n","title":"How can I change an element&#39;s class with JavaScript?","answers":[{"score":-24,"body":"<p>This is easiest with a library like jQuery:</p>\n\n<pre><code>&lt;input type=\"button\" onClick=\"javascript:test_byid();\" value=\"id='second'\" /&gt;\n\n&lt;script&gt;\nfunction test_byid()\n{\n    $(\"#second\").toggleClass(\"highlight\");\n}\n&lt;/script&gt;\n</code></pre>\n"},{"score":-61,"body":"<p>No offense, but it's unclever to change class on-the-fly as it forces the CSS interpreter to recalculate the visual presentation of the entire web page.</p>\n\n<p>The reason is that it is nearly impossible for the CSS interpreter to know if any inheritance or cascading could be changed, so the short answer is:</p>\n\n<p>Never ever change className on-the-fly !-)</p>\n\n<p>But usually you'll only need to change a property or two, and that is easily implemented:</p>\n\n<pre><code>function highlight(elm){\n    elm.style.backgroundColor =\"#345\";\n    elm.style.color = \"#fff\";\n}\n</code></pre>\n"},{"score":80,"body":"<p>You can use <code>node.className</code> like so:</p>\n\n<pre><code>document.getElementById('foo').className = 'bar';\n</code></pre>\n\n<p>This should work in IE5.5 and up according to <a href=\"http://quirksmode.org/dom/w3c_html.html\" rel=\"noreferrer\">PPK</a>.</p>\n"},{"score":4015,"body":"<h2>Modern HTML5 Techniques for changing classes</h2>\n\n<p>Modern browsers have added <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\" rel=\"noreferrer\"><strong>classList</strong></a> which provides methods to make it easier to manipulate classes without needing a library:</p>\n\n<pre><code>document.getElementById(\"MyElement\").classList.add('MyClass');\n\ndocument.getElementById(\"MyElement\").classList.remove('MyClass');\n\nif ( document.getElementById(\"MyElement\").classList.contains('MyClass') )\n\ndocument.getElementById(\"MyElement\").classList.toggle('MyClass');\n</code></pre>\n\n<p>Unfortunately, these do not work in Internet Explorer prior to v10, though there is a <a href=\"http://en.wikipedia.org/wiki/Shim_(computing)\" rel=\"noreferrer\">shim</a> to add support for it to IE8 and IE9, available from <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.classList\" rel=\"noreferrer\">this page</a>. It is, though, getting more and more <a href=\"http://caniuse.com/#feat=classlist\" rel=\"noreferrer\">supported</a>.</p>\n\n<h2>Simple cross-browser solution</h2>\n\n<p>The standard JavaScript way to select an element is using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/document.getElementById\" rel=\"noreferrer\"><code>document.getElementById(\"Id\")</code></a>, which is what the following examples use - you can of course obtain elements in other ways, and in the right situation may simply use <code>this</code> instead - however, going into detail on this is beyond the scope of the answer.</p>\n\n<h3>To change all classes for an element:</h3>\n\n<p>To replace all existing classes with one or more new classes, set the className attribute:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = \"MyClass\";\n</code></pre>\n\n<p>(You can use a space-delimited list to apply multiple classes.)</p>\n\n<h3>To add an additional class to an element:</h3>\n\n<p>To add a class to an element, without removing/affecting existing values, append a space and the new classname, like so:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className += \" MyClass\";\n</code></pre>\n\n<h3>To remove a class from an element:</h3>\n\n<p>To remove a single class to an element, without affecting other potential classes, a simple regex replace is required:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className =\n   document.getElementById(\"MyElement\").className.replace\n      ( /(?:^|\\s)MyClass(?!\\S)/g , '' )\n/* Code wrapped for readability - above is all one statement */\n</code></pre>\n\n<p>An explanation of this regex is as follows:</p>\n\n<pre><code>(?:^|\\s) # Match the start of the string, or any single whitespace character\n\nMyClass  # The literal text for the classname to remove\n\n(?!\\S)   # Negative lookahead to verify the above is the whole classname\n         # Ensures there is no non-space character following\n         # (i.e. must be end of string or a space)\n</code></pre>\n\n<p>The <code>g</code> flag tells the replace to repeat as required, in case the class name has been added multiple times.</p>\n\n<h3>To check if a class is already applied to an element:</h3>\n\n<p>The same regex used above for removing a class can also be used as a check as to whether a particular class exists:</p>\n\n<pre><code>if ( document.getElementById(\"MyElement\").className.match(/(?:^|\\s)MyClass(?!\\S)/) )\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning these actions to onclick events:</h3>\n\n<p>Whilst it is possible to write JavaScript directly inside the HTML event attributes (such as <code>onclick=\"this.className+=' MyClass'\"</code>) this is not recommended behaviour. Especially on larger applications, more maintainable code is achieved by separating HTML markup from JavaScript interaction logic.</p>\n\n<p>The first step to achieving this is by creating a function, and calling the function in the onclick attribute, for example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass(){\n        // Code examples from above\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass()\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p><sub><em>(It is not required to have this code in script tags, this is simply for brevity of example, and including the JavaScript in a distinct file may be more appropriate.)</em></sub></p>\n\n<p>The second step is to move the onclick event out of the HTML and into JavaScript, for example using <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.addEventListener\" rel=\"noreferrer\">addEventListener</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass(){\n        // Code examples from above\n    }\n\n    window.onload = function(){\n        document.getElementById(\"MyElement\").addEventListener( 'click', changeClass);\n    }\n&lt;/script&gt;\n...\n&lt;button id=\"MyElement\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>(Note that the window.onload part is required so that the contents of that function are executed <em>after</em> the HTML has finished loading - without this, the MyElement might not exist when the JavaScript code is called, so that line would fail.)</p>\n\n<p><br/></p>\n\n<h2>JavaScript Frameworks and Libraries</h2>\n\n<p>The above code is all in standard JavaScript, however it is common practise to use either a framework or a library to simplify common tasks, as well as benefit from fixed bugs and edge cases that you might not think of when writing your code.</p>\n\n<p>Whilst some people consider it overkill to add a ~50&nbsp;KB framework for simply changing a class, if you are doing any substantial amount of JavaScript work, or anything that might have unusual cross-browser behaviour, it is well worth considering.</p>\n\n<p><em>(Very roughly, a library is a set of tools designed for a specific task, whilst a framework generally contains multiple libraries and performs a complete set of duties.)</em></p>\n\n<p>The examples above have been reproduced below using <a href=\"http://jquery.com\" rel=\"noreferrer\">jQuery</a>, probably the most commonly used JavaScript library (though there are others worth investigating too).</p>\n\n<p>(Note that <code>$</code> here is the jQuery object.)</p>\n\n<h3>Changing Classes with jQuery:</h3>\n\n<pre><code>$('#MyElement').addClass('MyClass');\n\n$('#MyElement').removeClass('MyClass');\n\nif ( $('#MyElement').hasClass('MyClass') )\n</code></pre>\n\n<p>In addition, jQuery provides a shortcut for adding a class if it doesn't apply, or removing a class that does:</p>\n\n<pre><code>$('#MyElement').toggleClass('MyClass');\n</code></pre>\n\n<p><br/></p>\n\n<h3>Assigning a function to a click event with jQuery:</h3>\n\n<pre><code>$('#MyElement').click(changeClass);\n</code></pre>\n\n<p>or, without needing an id:</p>\n\n<pre><code>$(':button:contains(My Button)').click(changeClass);\n</code></pre>\n\n<p><br/></p>\n"},{"score":12,"body":"<p>The line</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace(/\\bMyClass\\b/','')\n</code></pre>\n\n<p>should be:</p>\n\n<pre><code>document.getElementById(\"MyElement\").className = document.getElementById(\"MyElement\").className.replace('/\\bMyClass\\b/','');\n</code></pre>\n"},{"score":15,"body":"<p>Change an element's CSS class with JavaScript in <a href=\"http://en.wikipedia.org/wiki/ASP.NET\" rel=\"noreferrer\">ASP.NET</a>:</p>\n\n<pre><code>Protected Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load\n    If Not Page.IsPostBack Then\n        lbSave.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbSave.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n        lbCancel.Attributes.Add(\"onmouseover\", \"this.className = 'LinkButtonStyle1'\")\n        lbCancel.Attributes.Add(\"onmouseout\", \"this.className = 'LinkButtonStyle'\")\n    End If\nEnd Sub\n</code></pre>\n"},{"score":123,"body":"<p>In one of my old projects that did not use jQuery, I built the following functions for adding, removing and checking if element has class:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\nfunction addClass(ele, cls) {\n    if (!hasClass(ele, cls)) ele.className += \" \" + cls;\n}\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n</code></pre>\n\n<p>So, for example, if I want <code>onclick</code> to add some class to the button I can use this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function changeClass(btn, cls) {\n        if(!hasClass(btn, cls)) {\n            addClass(btn, cls);\n        }\n    }\n&lt;/script&gt;\n...\n&lt;button onclick=\"changeClass(this, \"someClass\")\"&gt;My Button&lt;/button&gt;\n</code></pre>\n\n<p>By now for sure it would just be better to use jQuery.</p>\n"},{"score":432,"body":"<p>You could also just do:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>document.getElementById('id').classList.add('class');\ndocument.getElementById('id').classList.remove('class');\n</code></pre>\n\n<p>And to toggle a class (remove if exists else add it):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>document.getElementById('id').classList.toggle('class');\n</code></pre>\n"},{"score":49,"body":"<p>Using pure JavaScript code:</p>\n\n<pre><code>function hasClass(ele, cls) {\n    return ele.className.match(new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)'));\n}\n\nfunction addClass(ele, cls) {\n    if (!this.hasClass(ele, cls)) ele.className += \" \" + cls;\n}\n\nfunction removeClass(ele, cls) {\n    if (hasClass(ele, cls)) {\n        var reg = new RegExp('(\\\\s|^)' + cls + '(\\\\s|$)');\n        ele.className = ele.className.replace(reg, ' ');\n    }\n}\n\nfunction replaceClass(ele, oldClass, newClass){\n    if(hasClass(ele, oldClass)){\n        removeClass(ele, oldClass);\n        addClass(ele, newClass);\n    }\n    return;\n}\n\nfunction toggleClass(ele, cls1, cls2){\n    if(hasClass(ele, cls1)){\n        replaceClass(ele, cls1, cls2);\n    }else if(hasClass(ele, cls2)){\n        replaceClass(ele, cls2, cls1);\n    }else{\n        addClass(ele, cls1);\n    }\n}\n</code></pre>\n"},{"score":19,"body":"<p>Just to add on information from another popular framework, Google Closures, see their <a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_dom_classes.js.html\">dom/classes</a> class:</p>\n\n<pre><code>goog.dom.classes.add(element, var_args)\n\ngoog.dom.classes.addRemove(element, classesToRemove, classesToAdd)\n\ngoog.dom.classes.remove(element, var_args)\n</code></pre>\n\n<p>One option for selecting the element is using <a href=\"http://closure-library.googlecode.com/svn/docs/closure_third_party_closure_goog_dojo_dom_query.js.html\">goog.dom.query</a> with a CSS3 selector:</p>\n\n<pre><code>var myElement = goog.dom.query(\"#MyElement\")[0];\n</code></pre>\n"},{"score":35,"body":"<p>This is working for me:</p>\n\n<pre><code>function setCSS(eleID) {\n    var currTabElem = document.getElementById(eleID);\n\n    currTabElem.setAttribute(\"class\", \"some_class_name\");\n    currTabElem.setAttribute(\"className\", \"some_class_name\");\n}\n</code></pre>\n"},{"score":53,"body":"<p>Wow, surprised there are so many overkill answers here...</p>\n\n<pre><code>&lt;div class=\"firstClass\" onclick=\"this.className='secondClass'\"&gt;\n</code></pre>\n"},{"score":16,"body":"<p>A couple of minor notes and tweaks on the previous regexes:</p>\n\n<p>You'll want to do it globally in case the class list has the class name more than once. And, you'll probably want to strip spaces from the ends of the class list and convert multiple spaces to one space to keep from getting runs of spaces. None of these things should be a problem if the only code dinking with the class names uses the regex below and removes a name before adding it. But. Well, who knows who might be dinking with the class name list.</p>\n\n<p>This regex is case insensitive so that bugs in class names may show up before the code is used on a browser that doesn't care about case in class names.</p>\n\n<pre><code>var s = \"testing   one   four  one  two\";\nvar cls = \"one\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"test\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"testing\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\nvar cls = \"tWo\";\nvar rg          = new RegExp(\"(^|\\\\s+)\" + cls + \"(\\\\s+|$)\", 'ig');\nalert(\"[\" + s.replace(rg, ' ') + \"]\");\n</code></pre>\n"},{"score":14,"body":"<p>I would use jQuery and write something like this:</p>\n\n<pre><code>jQuery(function($) {\n    $(\"#some-element\").click(function() {\n        $(this).toggleClass(\"clicked\");\n    });\n});\n</code></pre>\n\n<p>This code adds a function to be called when an element of the id <strong>some-element</strong> is clicked. The function appends <strong>clicked</strong> to the element's class attribute if it's not already part of it, and removes it if it's there.</p>\n\n<p>Yes you do need to add a reference to the jQuery library in your page to use this code, but at least you can feel confident the most functions in the library would work on pretty much all the modern browsers, and it will save you time implementing your own code to do the same.</p>\n\n<p>Thanks</p>\n"},{"score":9,"body":"<p>Here's my version, fully working:</p>\n\n<pre><code>function addHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    obj.className += \" \" + classname\n}\n\nfunction removeHTMLClass(item, classname) {\n    var obj = item\n    if (typeof item==\"string\") {\n        obj = document.getElementById(item)\n    }\n    var classes = \"\"+obj.className\n    while (classes.indexOf(classname)&gt;-1) {\n        classes = classes.replace (classname, \"\")\n    }\n    obj.className = classes\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;tr onmouseover='addHTMLClass(this,\"clsSelected\")'\nonmouseout='removeHTMLClass(this,\"clsSelected\")' &gt;\n</code></pre>\n"},{"score":23,"body":"<p>As well you could extend HTMLElement object, in order to add methods to add, remove, toggle and check classes (<a href=\"https://gist.github.com/Maksims/5356227\" rel=\"noreferrer\">gist</a>):</p>\n\n<pre><code>HTMLElement = typeof(HTMLElement) != 'undefiend' ? HTMLElement : Element;\n\nHTMLElement.prototype.addClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    if (string[i] &amp;&amp; !new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.trim() + ' ' + string[i];\n    }\n  }\n}\n\nHTMLElement.prototype.removeClass = function(string) {\n  if (!(string instanceof Array)) {\n    string = string.split(' ');\n  }\n  for(var i = 0, len = string.length; i &lt; len; ++i) {\n    this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string[i] + '(\\\\s+|$)'), ' ').trim();\n  }\n}\n\nHTMLElement.prototype.toggleClass = function(string) {\n  if (string) {\n    if (new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className)) {\n      this.className = this.className.replace(new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)'), ' ').trim();\n    } else {\n      this.className = this.className.trim() + ' ' + string;\n    }\n  }\n}\n\nHTMLElement.prototype.hasClass = function(string) {\n  return string &amp;&amp; new RegExp('(\\\\s+|^)' + string + '(\\\\s+|$)').test(this.className);\n}\n</code></pre>\n\n<p>And then just use like this (on click will add or remove class):</p>\n\n<pre><code>document.getElementById('yourElementId').onclick = function() {\n  this.toggleClass('active');\n}\n</code></pre>\n\n<p>Here is <a href=\"http://jsfiddle.net/5QMgR/\" rel=\"noreferrer\">demo</a>.</p>\n"},{"score":7,"body":"<p>I use the following vanilla JavaScript functions in my code. They use regular expressions and <code>indexOf</code> but do not require quoting special characters in regular expressions.</p>\n\n<pre><code>function addClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &lt; 0) {\n        el.className = (c0 + c1).replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n\nfunction delClass(el, cn) {\n    var c0 = (\" \" + el.className + \" \").replace(/\\s+/g, \" \"),\n        c1 = (\" \" + cn + \" \").replace(/\\s+/g, \" \");\n    if (c0.indexOf(c1) &gt;= 0) {\n        el.className = c0.replace(c1, \" \").replace(/\\s+/g, \" \").replace(/^ | $/g, \"\");\n    }\n}\n</code></pre>\n\n<p>You can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.classList\" rel=\"noreferrer\">element.classList</a> in modern browsers.</p>\n"},{"score":-3,"body":"<p>Here is simple jQuery code to do that.</p>\n\n<pre><code>$(\".class1\").click(function(argument) {\n    $(\".parentclass\").removeClass(\"classtoremove\");\n    setTimeout(function (argument) {\n        $(\".parentclass\").addClass(\"classtoadd\");\n    }, 100);\n});\n</code></pre>\n\n<p>Here,</p>\n\n<ul>\n<li>Class1 is a listener for an event.</li>\n<li>The parent class is the class which hosts the class you want to change</li>\n<li>Classtoremove is the old class you have.</li>\n<li>Class to add is the new class that you want to add.</li>\n<li>100 is the timeout delay during which the class is changed.</li>\n</ul>\n\n<p>Good Luck.</p>\n"},{"score":2,"body":"<p>Just thought I'd throw this in:</p>\n\n<pre><code>function inArray(val, ary){\n  for(var i=0,l=ary.length; i&lt;l; i++){\n    if(ary[i] === val){\n      return true;\n    }\n  }\n  return false;\n}\nfunction removeClassName(classNameS, fromElement){\n  var x = classNameS.split(/\\s/), s = fromElement.className.split(/\\s/), r = [];\n  for(var i=0,l=s.length; i&lt;l; i++){\n    if(!iA(s[i], x))r.push(s[i]);\n  }\n  fromElement.className = r.join(' ');\n}\nfunction addClassName(classNameS, toElement){\n  var s = toElement.className.split(/\\s/);\n  s.push(c); toElement.className = s.join(' ');\n}\n</code></pre>\n"},{"score":9,"body":"<p>Here's a toggleClass to toggle/add/remove a class on an element:</p>\n\n<pre><code>// If newState is provided add/remove theClass accordingly, otherwise toggle theClass\nfunction toggleClass(elem, theClass, newState) {\n    var matchRegExp = new RegExp('(?:^|\\\\s)' + theClass + '(?!\\\\S)', 'g');\n    var add=(arguments.length&gt;2 ? newState : (elem.className.match(matchRegExp) == null));\n\n    elem.className=elem.className.replace(matchRegExp, ''); // clear all\n    if (add) elem.className += ' ' + theClass;\n}\n</code></pre>\n\n<p>see <a href=\"https://jsfiddle.net/dLuhp9se/\" rel=\"nofollow noreferrer\">jsfiddle</a></p>\n\n<p>also see my answer <a href=\"https://stackoverflow.com/a/42941303/460084\">here</a> for creating a new class dynamically</p>\n"},{"score":11,"body":"<h1>Change an element's class in vanilla JavaScript with IE6 support</h1>\n\n<p>You may try to use node <code>attributes</code> property to keep compatibility with old browsers even IE6:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function getClassNode(element) {\r\n  for (var i = element.attributes.length; i--;)\r\n    if (element.attributes[i].nodeName === 'class')\r\n      return element.attributes[i];\r\n}\r\n\r\nfunction removeClass(classNode, className) {\r\n  var index, classList = classNode.value.split(' ');\r\n  if ((index = classList.indexOf(className)) &gt; -1) {\r\n    classList.splice(index, 1);\r\n    classNode.value = classList.join(' ');\r\n  }\r\n}\r\n\r\nfunction hasClass(classNode, className) {\r\n  return classNode.value.indexOf(className) &gt; -1;\r\n}\r\n\r\nfunction addClass(classNode, className) {\r\n  if (!hasClass(classNode, className))\r\n    classNode.value += ' ' + className;\r\n}\r\n\r\ndocument.getElementById('message').addEventListener('click', function() {\r\n  var classNode = getClassNode(this);\r\n  var className = hasClass(classNode, 'red') &amp;&amp; 'blue' || 'red';\r\n\r\n  removeClass(classNode, 'red');\r\n  removeClass(classNode, 'blue');\r\n\r\n  addClass(classNode, className);\r\n})</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.red {\r\n  color: red;\r\n}\r\n.red:before {\r\n  content: 'I am red! ';\r\n}\r\n.red:after {\r\n  content: ' again';\r\n}\r\n.blue {\r\n  color: blue;\r\n}\r\n.blue:before {\r\n  content: 'I am blue! '\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;span id=\"message\" class=\"\"&gt;Click me&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":-1,"body":"<p>Working JavaScript code:</p>\n\n<pre><code>&lt;div id=\"div_add\" class=\"div_add\"&gt;Add class from Javascript&lt;/div&gt;\n&lt;div id=\"div_replace\" class=\"div_replace\"&gt;Replace class from Javascript&lt;/div&gt;\n&lt;div id=\"div_remove\" class=\"div_remove\"&gt;Remove class from Javascript&lt;/div&gt;\n&lt;button onClick=\"div_add_class();\"&gt;Add class from Javascript&lt;/button&gt;\n&lt;button onClick=\"div_replace_class();\"&gt;Replace class from Javascript&lt;/button&gt;\n&lt;button onClick=\"div_remove_class();\"&gt;Remove class from Javascript&lt;/button&gt;\n&lt;script type=\"text/javascript\"&gt;\n    function div_add_class()\n    {\n        document.getElementById(\"div_add\").className += \" div_added\";\n    }\n    function div_replace_class()\n    {\n        document.getElementById(\"div_replace\").className = \"div_replaced\";\n    }\n    function div_remove_class()\n    {\n        document.getElementById(\"div_remove\").className = \"\";\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>You can download a working code from <a href=\"http://ownanswers.com/question/add-remove-and-replace-class-in-javascript/\" rel=\"nofollow noreferrer\">this link</a>.</p>\n"},{"score":2,"body":"<p>just say <code>myElement.classList=\"new-class\"</code> unless you need to maintain other existing classes in which case you can use the <code>classList.add, .remove</code> methods.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var doc = document;\r\nvar divOne = doc.getElementById(\"one\");\r\nvar goButton = doc.getElementById(\"go\");\r\n\r\ngoButton.addEventListener(\"click\", function() {\r\n  divOne.classList=\"blue\";\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div{\r\n  min-height:48px;\r\n  min-width:48px;\r\n}\r\n.bordered{\r\n  border: 1px solid black;\r\n}\r\n.green{\r\n  background:green;\r\n}\r\n.blue{\r\n  background: blue;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"go\"&gt;Change Class&lt;/button&gt;\r\n\r\n&lt;div id=\"one\" class=\"bordered green\"&gt;\r\n\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>OK, I think in this case you should use jQuery or write your own Methods in pure javascript, my preference is adding my own methods rather than injecting all jQuery to my application if I don't need that for other reasons.</p>\n\n<p>I'd like to do something like below as methods to my javascript framework to add few functionalities which handle adding classes, deleting classes, etc similar to jQuery, this is fully supported in IE9+, also my code is written in ES6, so you need to make sure your browser support it or you using something like babel, otherwise need to use ES5 syntax in your code, also in this way, we finding element via ID, which means the element needs to have an ID to be selected:</p>\n\n<pre><code>//simple javascript utils for class management in ES6\nvar classUtil = {\n\n  addClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.add(cl);\n  },\n\n  removeClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.remove(cl);\n  },\n\n  hasClass: (id, cl) =&gt; {\n    return document.getElementById(id).classList.contains(cl);\n  },\n\n  toggleClass: (id, cl) =&gt; {\n    document.getElementById(id).classList.toggle(cl);\n  }\n\n}\n</code></pre>\n\n<p>and you can simply call use them as below, imagine your element has id of 'id' and class of 'class', make sure you pass them as a string, you can use the util as below:</p>\n\n<pre><code>classUtil.addClass('myId', 'myClass');\nclassUtil.removeClass('myId', 'myClass');\nclassUtil.hasClass('myId', 'myClass');\nclassUtil.toggleClass('myId', 'myClass');\n</code></pre>\n"},{"score":2,"body":"<h2><code>classList</code> DOM API:</h2>\n\n<p>A very convenient manner of adding and removing classes is the <code>classList</code> DOM API. This API allows us to select all classes of a specific DOM element in order to modify the list using javascript. For example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const el = document.getElementById(\"main\");\r\nconsole.log(el.classList);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"content wrapper animated\" id=\"main\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>We can observe in the log that we are getting back an object with not only the classes of the element, but also many auxiliary methods and properties. This object inherits from the interface <strong>DOMTokenList</strong>, an interface which is used in the DOM to represent a set of space separated tokens (like classes).</p>\n\n<h2>Example:</h2>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const el = document.getElementById('container');\r\n\r\n\r\nfunction addClass () {\r\n   el.classList.add('newclass');\r\n}\r\n\r\n\r\nfunction replaceClass () {\r\n     el.classList.replace('foo', 'newFoo');\r\n}\r\n\r\n\r\nfunction removeClass () {\r\n       el.classList.remove('bar');\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>button{\r\n  margin: 20px;\r\n}\r\n\r\n.foo{\r\n  color: red;\r\n}\r\n\r\n.newFoo {\r\n  color: blue;\r\n}\r\n\r\n.bar{\r\n  background-color:powderblue;\r\n}\r\n\r\n.newclass{\r\n  border: 2px solid green;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"foo bar\" id=\"container\"&gt;\r\n  \"Sed ut perspiciatis unde omnis \r\n  iste natus error sit voluptatem accusantium doloremque laudantium, \r\n  totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et \r\n  quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam \r\n  voluptatem quia voluptas \r\n &lt;/div&gt;\r\n  \r\n&lt;button onclick=\"addClass()\"&gt;AddClass&lt;/button&gt;\r\n  \r\n&lt;button onclick=\"replaceClass()\"&gt;ReplaceClass&lt;/button&gt;\r\n  \r\n&lt;button onclick=\"removeClass()\"&gt;removeClass&lt;/button&gt;\r\n  </code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>Yes there is many ways to do this. In ES6 syntax we can achieve easily. \nUse this code toggle add and remove class.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const tabs=document.querySelectorAll('.menu li');\r\n\r\nfor(let tab of tabs){\r\n  \r\n  tab.onclick=function(){\r\n    \r\n  let activetab=document.querySelectorAll('li.active');\r\n    \r\n  activetab[0].classList.remove('active')\r\n  \r\n    tab.classList.add('active'); \r\n  }\r\n  \r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n    padding:20px;\r\n    font-family:sans-serif;    \r\n}\r\n\r\nul {\r\n    margin:20px 0;\r\n    list-style:none;\r\n}\r\n\r\nli {\r\n    background:#dfdfdf;\r\n    padding:10px;\r\n    margin:6px 0;\r\n    cursor:pointer;\r\n}\r\n\r\nli.active {\r\n    background:#2794c7;\r\n    font-weight:bold;\r\n    color:#ffffff;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;i&gt;Please click an item:&lt;/i&gt;\r\n\r\n&lt;ul class=\"menu\"&gt;\r\n  &lt;li class=\"active\"&gt;&lt;span&gt;Three&lt;/span&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;span&gt;Two&lt;/span&gt;&lt;/li&gt;\r\n  &lt;li&gt;&lt;span&gt;One&lt;/span&gt;&lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>Lots of answers, lots of good answers.</p>\n\n<blockquote>\n  <p><strong>TL;DR :</strong></p>\n</blockquote>\n\n<pre><code>document.getElementById('id').className = 'class'\n</code></pre>\n\n<p><em>OR</em></p>\n\n<pre><code>document.getElementById('id').classList.add('class');\ndocument.getElementById('id').classList.remove('class');\n</code></pre>\n\n<p><strong><em>That's it.</em></strong></p>\n\n<p>And, if you really want to know the why and educate yourself then I suggest reading <a href=\"https://stackoverflow.com/a/196038/1804013\">Peter Boughton's answer</a>, it's perfect.</p>\n\n<p><strong>Note:</strong><br/>\nThis is possible with (<em><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document\" rel=\"nofollow noreferrer\">document</a></em> or <em><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event/target\" rel=\"nofollow noreferrer\">event</a></em>):</p>\n\n<ul>\n<li><code>getElementById()</code></li>\n<li><code>getElementsByClassName()</code></li>\n<li><code>querySelector()</code></li>\n<li><code>querySelectorAll()</code></li>\n</ul>\n"},{"score":2,"body":"<p>try</p>\n\n<pre><code>element.className='second'\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function change(box) { box.className='second' }</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.first  { width:  70px; height:  70px; background: #ff0                 }\r\n.second { width: 150px; height: 150px; background: #f00; transition: 1s }</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div onclick=\"change(this)\" class=\"first\"&gt;Click me&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":4,"body":"<hr />\n<h1>THE OPTIONS.</h1>\n<p>Here is a little style vs. classList examples to get you to see what are the options you have available and how to use <code>classList</code> to do what you want.</p>\n<h1><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style\" rel=\"nofollow noreferrer\"><code>style</code></a> vs. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/classList\" rel=\"nofollow noreferrer\"><code>classList</code></a></h1>\n<p>The difference between <code>style</code> and <code>classList</code> is that with <code>style</code> you're adding to the style properties of the element, but <code>classList</code> is kinda controlling the class(es) of the element (<code>add</code>, <code>remove</code>, <code>toggle</code>, <code>contain</code>), I will show you how to use the <code>add</code> and <code>remove</code> method since those are the popular ones.</p>\n<hr />\n<h2>Style Example</h2>\n<p>If you want to add <code>margin-top </code> property into an element, you would do in such:</p>\n<pre><code>// Get the Element\nconst el = document.querySelector('#element');\n\n// Add CSS property \nel.style.margintop = &quot;0px&quot;\nel.style.margintop = &quot;25px&quot; // This would add a 25px to the top of the element.\n</code></pre>\n<hr />\n<h2>classList Example</h2>\n<p>Let say we have a <code>&lt;div class=&quot;class-a class-b&quot;&gt;</code>, in this case, we have 2 classes added to our div element already, <code>class-a</code> and <code>class-b</code>, and we want to control what classes <strong><code>remove</code></strong> and what class to <strong><code>add</code></strong>. This is where <code>classList</code> becomes handy.</p>\n<h3>Remove <code>class-b</code></h3>\n<pre><code>// Get the Element\nconst el = document.querySelector('#element');\n\n// Remove class-b style from the element\nel.classList.remove(&quot;class-b&quot;)\n\n</code></pre>\n<h3>Add <code>class-c</code></h3>\n<pre><code>// Get the Element\nconst el = document.querySelector('#element');\n\n// Add class-b style from the element\nel.classList.add(&quot;class-c&quot;)\n\n</code></pre>\n<hr />\n"},{"score":2,"body":"<pre><code>function classed(el, class_name, add_class) {\n  const re = new RegExp(\"(?:^|\\\\s)\" + class_name + \"(?!\\\\S)\", \"g\");\n  if (add_class &amp;&amp; !el.className.match(re)) el.className += \" \" + class_name\n  else if (!add_class) el.className = el.className.replace(re, '');\n}\n</code></pre>\n\n<p>using the accepted answer above here is a simple cross-browser function to add and remove class</p>\n\n<p>add class:</p>\n\n<pre><code>classed(document.getElementById(\"denis\"), \"active\", true)\n</code></pre>\n\n<p>remove class:</p>\n\n<pre><code>classed(document.getElementById(\"denis\"), \"active\", false)\n</code></pre>\n"},{"score":2,"body":"<p>There is a property <strong>className</strong> in javascript to change the name of the class of an HTML element. The existing class value will be replaced with the new one, that you have assigned in className.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;How to change class of an HTML element in Javascript?&lt;/title&gt;\n&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1 align=\"center\"&gt;&lt;i class=\"fa fa-home\" id=\"icon\"&gt;&lt;/i&gt;&lt;/h1&gt;&lt;br /&gt;\n\n&lt;center&gt;&lt;button id=\"change-class\"&gt;Change Class&lt;/button&gt;&lt;/center&gt;\n\n&lt;script&gt;\nvar change_class=document.getElementById(\"change-class\");\nchange_class.onclick=function()\n{\n    var icon=document.getElementById(\"icon\");\n    icon.className=\"fa fa-gear\";\n}\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Credit - <a href=\"https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html\" rel=\"nofollow noreferrer\">https://jaischool.com/javascript-lang/how-to-change-class-name-of-an-html-element-in-javascript.html</a></p>\n"},{"score":2,"body":"<p>The OP question was <em>How can I change an element's class with JavaScript?</em></p>\n\n<p>Modern browsers allow you to do this <strong>with one line of javascript</strong>:</p>\n\n<p><code>document.getElementById('id').classList.replace('span1','span2')</code></p>\n\n<p>The <code>classList</code> attribute provides a DOMTokenList which has a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList\" rel=\"nofollow noreferrer\">variety of methods</a>. You can operate on an element's classList using simple manipulations like <em>add()</em>, <em>remove()</em> or <em>replace()</em>. Or get very sophisticated and manipulate classes like you would an object or Map with <em>keys()</em>, <em>values()</em>, <em>entries()</em></p>\n\n<p><a href=\"https://stackoverflow.com/questions/195951/how-can-i-change-an-elements-class-with-javascript/196038#196038\">Peter Boughton's answer</a> is a great one but it's now over a decade old. All modern browsers now support DOMTokenList - see <a href=\"https://caniuse.com/#search=classList\" rel=\"nofollow noreferrer\">https://caniuse.com/#search=classList</a> and even IE11 supports some DOMTokenList methods</p>\n"}],"score":2875}