{"body":"<p>How do I get current date in JavaScript?</p>\n","title":"How do I get the current date in JavaScript?","answers":[{"score":2901,"body":"<p>Use <code>new Date()</code> to generate a new <code>Date</code> object containing the current date and time.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var today = new Date();\r\nvar dd = String(today.getDate()).padStart(2, '0');\r\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\nvar yyyy = today.getFullYear();\r\n\r\ntoday = mm + '/' + dd + '/' + yyyy;\r\ndocument.write(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This will give you today's date in the format of mm/dd/yyyy.</p>\n\n<p>Simply change <code>today = mm +'/'+ dd +'/'+ yyyy;</code> to whatever format you wish.</p>\n"},{"score":241,"body":"<blockquote>\n  <p><strong><em>UPDATED!</em></strong>, Scroll Down</p>\n</blockquote>\n\n<p>If you want something simple pretty to the end-user ... <em><code>Also, fixed a small suffix issue in the first version below. Now properly returns suffix.</code></em></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var objToday = new Date(),\r\n\tweekday = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'),\r\n\tdayOfWeek = weekday[objToday.getDay()],\r\n\tdomEnder = function() { var a = objToday; if (/1/.test(parseInt((a + \"\").charAt(0)))) return \"th\"; a = parseInt((a + \"\").charAt(1)); return 1 == a ? \"st\" : 2 == a ? \"nd\" : 3 == a ? \"rd\" : \"th\" }(),\r\n\tdayOfMonth = today + ( objToday.getDate() &lt; 10) ? '0' + objToday.getDate() + domEnder : objToday.getDate() + domEnder,\r\n\tmonths = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'),\r\n\tcurMonth = months[objToday.getMonth()],\r\n\tcurYear = objToday.getFullYear(),\r\n\tcurHour = objToday.getHours() &gt; 12 ? objToday.getHours() - 12 : (objToday.getHours() &lt; 10 ? \"0\" + objToday.getHours() : objToday.getHours()),\r\n\tcurMinute = objToday.getMinutes() &lt; 10 ? \"0\" + objToday.getMinutes() : objToday.getMinutes(),\r\n\tcurSeconds = objToday.getSeconds() &lt; 10 ? \"0\" + objToday.getSeconds() : objToday.getSeconds(),\r\n\tcurMeridiem = objToday.getHours() &gt; 12 ? \"PM\" : \"AM\";\r\nvar today = curHour + \":\" + curMinute + \".\" + curSeconds + curMeridiem + \" \" + dayOfWeek + \" \" + dayOfMonth + \" of \" + curMonth + \", \" + curYear;\r\n\r\ndocument.getElementsByTagName('h1')[0].textContent = today;</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;h1&gt;&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<blockquote>\n  <p><strong>UBBER UPDATE</strong> After much procrastination, I've finally <a href=\"https://github.com/JDMcKinstry/JavaScriptDateFormat\" rel=\"noreferrer\"><strong>GitHubbed</strong></a> and updated this with the final solution I've been using for myself. It's even had some last-minute edits to make it sweeter! If you're looking for the old <a href=\"http://jsfiddle.net/SpYk3/rYzAY/\" rel=\"noreferrer\">jsFiddle, please see this</a>.</p>\n</blockquote>\n\n<p>This update comes in <s>2</s> flavors, still relatively small, though not as small as my above, original answer. If you want extremely small, go with that. <br /> Also Note: This is still less bloated than moment.js. While moment.js is nice, imo, it has too many secular methods, which require learning moment as if it were a language. Mine here uses the same common format as <a href=\"http://php.net/manual/en/function.date.php\" rel=\"noreferrer\">PHP: date</a>.</p>\n\n<h3>Quick Links</h3>\n\n<ul>\n<li><a href=\"https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/Date.format.min.js\" rel=\"noreferrer\">Date.format.min.js</a> 5.08 KB</li>\n<li><a href=\"https://cdn.rawgit.com/JDMcKinstry/JavaScriptDateFormat/master/dateFormat.min.js\" rel=\"noreferrer\">dateFormat.min.js</a> 4.16 KB</li>\n</ul>\n\n<blockquote>\n  <p><strong>Flavor 1 <a href=\"http://jsfiddle.net/SpYk3/smdz6d43/\" rel=\"noreferrer\"><code>new Date().format(String)</code></a></strong>\n  My Personal Fav. I know the taboo but works great on the Date Object. Just be aware of any other mods you may have to the Date Object.</p>\n</blockquote>\n\n<pre><code>//  use as simple as\nnew Date().format('m-d-Y h:i:s');   //  07-06-2016 06:38:34\n</code></pre>\n\n<blockquote>\n  <p><strong>Flavor 2 <a href=\"http://jsfiddle.net/SpYk3/tcqpw5d7/\" rel=\"noreferrer\"><code>dateFormat(Date, String)</code></a></strong>\n  More traditional all-in-one method. Has all the ability of the previous, but is called via the method with Date param.</p>\n</blockquote>\n\n<pre><code>//  use as simple as\ndateFormat(new Date(), 'm-d-Y h:i:s');  //  07-06-2016 06:38:34\n</code></pre>\n\n<blockquote>\n  <p><strong>BONUS Flavor (requires jQuery) <a href=\"https://github.com/JDMcKinstry/jQuery-Date\" rel=\"noreferrer\"><code>$.date(Date, String)</code></a></strong>\n  This contains much more than just a simple <code>format</code> option. It extends the base Date object and includes methods such as <code>addDays</code>. For more information, please see the <a href=\"https://github.com/JDMcKinstry/jQuery-Date\" rel=\"noreferrer\"><em>Git</em></a>.</p>\n</blockquote>\n\n<p>In this mod, the format characters are inspired by <a href=\"http://php.net/manual/en/function.date.php\" rel=\"noreferrer\">PHP: date</a>. For a complete list, please see my <a href=\"https://github.com/JDMcKinstry/JavaScriptDateFormat/blob/master/README.md\" rel=\"noreferrer\">README</a></p>\n\n<p>This mod also has a much longer list of pre-made formats. To use a premade format, simply enter its key name. <code>dateFormat(new Date(), 'pretty-a');</code></p>\n\n<ul>\n<li>'compound'\n\n<ul>\n<li>'commonLogFormat' == 'd/M/Y:G:i:s'</li>\n<li>'exif' == 'Y:m:d G:i:s'</li>\n<li>'isoYearWeek' == 'Y\\\\WW'</li>\n<li>'isoYearWeek2' == 'Y-\\\\WW'</li>\n<li>'isoYearWeekDay' == 'Y\\\\WWj'</li>\n<li>'isoYearWeekDay2' == 'Y-\\\\WW-j'</li>\n<li>'mySQL' == 'Y-m-d h:i:s'</li>\n<li>'postgreSQL' == 'Y.z'</li>\n<li>'postgreSQL2' == 'Yz'</li>\n<li>'soap' == 'Y-m-d\\\\TH:i:s.u'</li>\n<li>'soap2' == 'Y-m-d\\\\TH:i:s.uP'</li>\n<li>'unixTimestamp' == '@U'</li>\n<li>'xmlrpc' == 'Ymd\\\\TG:i:s'</li>\n<li>'xmlrpcCompact' == 'Ymd\\\\tGis'</li>\n<li>'wddx' == 'Y-n-j\\\\TG:i:s'</li>\n</ul></li>\n<li>'constants'\n\n<ul>\n<li>'AMERICAN' == 'F j Y'</li>\n<li>'AMERICANSHORT' == 'm/d/Y'</li>\n<li>'AMERICANSHORTWTIME' == 'm/d/Y h:i:sA'</li>\n<li>'ATOM' == 'Y-m-d\\\\TH:i:sP'</li>\n<li>'COOKIE' == 'l d-M-Y H:i:s T'</li>\n<li>'EUROPEAN' == 'j F Y'</li>\n<li>'EUROPEANSHORT' == 'd.m.Y'</li>\n<li>'EUROPEANSHORTWTIME' == 'd.m.Y H:i:s'</li>\n<li>'ISO8601' == 'Y-m-d\\\\TH:i:sO'</li>\n<li>'LEGAL' == 'j F Y'</li>\n<li>'RFC822' == 'D d M y H:i:s O'</li>\n<li>'RFC850' == 'l d-M-y H:i:s T'</li>\n<li>'RFC1036' == 'D d M y H:i:s O'</li>\n<li>'RFC1123' == 'D d M Y H:i:s O'</li>\n<li>'RFC2822' == 'D d M Y H:i:s O'</li>\n<li>'RFC3339' == 'Y-m-d\\\\TH:i:sP'</li>\n<li>'RSS' == 'D d M Y H:i:s O'</li>\n<li>'W3C' == 'Y-m-d\\\\TH:i:sP'</li>\n</ul></li>\n<li>'pretty'\n\n<ul>\n<li>'pretty-a' == 'g:i.sA l jS \\\\o\\\\f F Y'</li>\n<li>'pretty-b' == 'g:iA l jS \\\\o\\\\f F Y'</li>\n<li>'pretty-c' == 'n/d/Y g:iA'</li>\n<li>'pretty-d' == 'n/d/Y'</li>\n<li>'pretty-e' == 'F jS - g:ia'</li>\n<li>'pretty-f' == 'g:iA'</li>\n</ul></li>\n</ul>\n\n<p><em>As you may notice, you can use double <code>\\</code> to escape a character.</em></p>\n\n<hr>\n"},{"score":105,"body":"<p>Try this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var currentDate = new Date()\r\nvar day = currentDate.getDate()\r\nvar month = currentDate.getMonth() + 1\r\nvar year = currentDate.getFullYear()\r\ndocument.write(\"&lt;b&gt;\" + day + \"/\" + month + \"/\" + year + \"&lt;/b&gt;\")</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The result will be like</p>\n\n<pre><code>15/2/2012\n</code></pre>\n"},{"score":23,"body":"<p>You can use <a href=\"http://www.datejs.com/\" rel=\"noreferrer\">Date.js</a> library which extens Date object, thus you can have .today() method.</p>\n"},{"score":66,"body":"<p>If you're looking for a lot more granular control over the date formats, I thoroughly recommend  checking out momentjs. Terrific library - and only 5KB.\n<a href=\"http://momentjs.com/\">http://momentjs.com/</a></p>\n"},{"score":7,"body":"<p>You can use this</p>\n\n<pre><code>&lt;script&gt;\nfunction my_curr_date() {      \n    var currentDate = new Date()\n    var day = currentDate.getDate();\n    var month = currentDate.getMonth() + 1;\n    var year = currentDate.getFullYear();\n    var my_date = month+\"-\"+day+\"-\"+year;\n    document.getElementById(\"dateField\").value=my_date;    \n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The HTML is</p>\n\n<pre><code>&lt;body onload='return my_curr_date();'&gt;\n    &lt;input type='text' name='dateField' id='dateField' value='' /&gt;\n&lt;/body&gt;\n</code></pre>\n"},{"score":53,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = (new Date()).toString().split(' ').splice(1,3).join(' ');\r\n\r\ndocument.write(d)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>To break it down into steps:</p>\n\n<ol>\n<li><p><code>(new Date()).toString()</code> gives \"Fri Jun 28 2013 15:30:18 GMT-0700 (PDT)\"</p></li>\n<li><p><code>(new Date()).toString().split(' ')</code> divides the above string on each space and returns an array as follows: [\"Fri\", \"Jun\", \"28\", \"2013\", \"15:31:14\", \"GMT-0700\", \"(PDT)\"]</p></li>\n<li><p><code>(new Date()).toString().split(' ').splice(1,3).join(' ')</code> takes the second, third and fourth values from the above array, joins them with spaces, and returns a string \"Jun 28 2013\"</p></li>\n</ol>\n"},{"score":457,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var utc = new Date().toJSON().slice(0,10).replace(/-/g,'/');\r\ndocument.write(utc);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Use the <code>replace</code> option if you're going to reuse the <code>utc</code> variable, such as <code>new Date(utc)</code>, as Firefox and Safari don't recognize a date with dashes.</p>\n"},{"score":48,"body":"<p>This works every time:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var now = new Date();\r\n    var day = (\"0\" + now.getDate()).slice(-2);\r\n    var month = (\"0\" + (now.getMonth() + 1)).slice(-2);\r\n    var today = now.getFullYear() + \"-\" + (month) + \"-\" + (day);\r\n    \r\n    console.log(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1,"body":"<pre><code>(function() { var d = new Date(); return new Date(d - d % 86400000); })()\n</code></pre>\n"},{"score":46,"body":"<pre><code>var date = new Date().toLocaleDateString(\"en-US\");\n</code></pre>\n\n<p>Also, you can call method <code>toLocaleDateString</code> with two parameters:</p>\n\n<pre><code>var date = new Date().toLocaleDateString(\"en-US\", {\n    \"year\": \"numeric\",\n    \"month\": \"numeric\"\n});\n</code></pre>\n\n<p>Article on <a href=\"http://msdn.microsoft.com/en-US/library/kecw102f\">MSDN</a>. More about this method on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\">MDN</a>.</p>\n"},{"score":55,"body":"<p>You can use moment.js: <a href=\"http://momentjs.com/\" rel=\"noreferrer\">http://momentjs.com/</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var m = moment().format(\"DD/MM/YYYY\");\r\n\r\ndocument.write(m);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.14.1/moment.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":179,"body":"<p>If you just want a date without time info, use:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n\r\ndocument.write(today);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":3,"body":"<p>I think this is an old question but the easiest way would be the following:</p>\n\n<pre><code>var date = new Date();\nvar TimeStamp = date.toLocaleString();\n\nfunction CurrentTime(){\n  alert(TimeStamp);\n}\n</code></pre>\n\n<p>This will grab the current time, pass it to a string based on location and then you can call the function CurrentTime to display the time.  This would be, to me, the most effective way to get a time stamp for something.</p>\n"},{"score":2,"body":"<p>This is my current favorite, because it's both flexible and modular. It's a collection of (at least) three simple functions:</p>\n\n<pre><code>/**\n * Returns an array with date / time information\n * Starts with year at index 0 up to index 6 for milliseconds\n * \n * @param {Date} date   date object. If falsy, will take current time.\n * @returns {[]}\n */\ngetDateArray = function(date) {\n    date = date || new Date();\n    return [\n        date.getFullYear(),\n        exports.pad(date.getMonth()+1, 2),\n        exports.pad(date.getDate(), 2),\n        exports.pad(date.getHours(), 2),\n        exports.pad(date.getMinutes(), 2),\n        exports.pad(date.getSeconds(), 2),\n        exports.pad(date.getMilliseconds(), 2)\n    ];\n};\n</code></pre>\n\n<p>Here's the pad function:</p>\n\n<pre><code> /**\n * Pad a number with n digits\n *\n * @param {number} number   number to pad\n * @param {number} digits   number of total digits\n * @returns {string}\n */\nexports.pad = function pad(number, digits) {\n    return new Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;\n};\n</code></pre>\n\n<p>Finally I can either build my date string by hand, or use a simple functions to do it for me:</p>\n\n<pre><code>/**\n * Returns nicely formatted date-time\n * @example 2015-02-10 16:01:12\n *\n * @param {object} date\n * @returns {string}\n */\nexports.niceDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + ' ' + d[3] + ':' + d[4] + ':' + d[5];\n};\n\n/**\n * Returns a formatted date-time, optimized for machines\n * @example 2015-02-10_16-00-08\n *\n * @param {object} date\n * @returns {string}\n */\nexports.roboDate = function(date) {\n    var d = exports.getDateArray(date);\n    return d[0] + '-' + d[1] + '-' + d[2] + '_' + d[3] + '-' + d[4] + '-' + d[5];\n};\n</code></pre>\n"},{"score":4,"body":"<pre><code>var dateTimeToday = new Date();\nvar dateToday = new Date(\n    dateTimeToday.getFullYear(), \n    (dateTimeToday.getMonth() + 1) /*Jan = 0! */, \n    dateTimeToday.getDate(), \n    0, \n    0, \n    0, \n    0);\n</code></pre>\n"},{"score":18,"body":"<p>You can get the current date call the static method now like this:</p>\n\n<pre><code>var now = Date.now()\n</code></pre>\n\n<p>reference:</p>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/now</a></p>\n"},{"score":3,"body":"<p>Pretty Print The Date Like This.</p>\n\n<blockquote>\n  <p>June 1st, 2015 11:36:48 AM</p>\n</blockquote>\n\n<p><a href=\"https://gist.github.com/Gerst20051/7d72693f722bbb0f6b58\" rel=\"nofollow\">https://gist.github.com/Gerst20051/7d72693f722bbb0f6b58</a></p>\n"},{"score":10,"body":"<p>If you want a simple <code>DD/MM/YYYY</code> format, I've just come up with this simple solution, although it doesn't prefix missing zeros.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var d = new Date();\r\ndocument.write( [d.getDate(), d.getMonth()+1, d.getFullYear()].join('/') );</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":16,"body":"<p><a href=\"https://stackoverflow.com/a/19079030/1338062\">Varun's answer</a> does not account for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset\" rel=\"noreferrer\">TimezoneOffset</a>. Here is a version that does:</p>\n\n<pre><code>var d = new Date()\nnew Date(d.getTime() - d.getTimezoneOffset() * 60000).toJSON().slice(0, 10) // 2015-08-11\n</code></pre>\n\n<p>The <code>TimezoneOffset</code> is minutes, while the Date constructor takes milliseconds, thus the multiplication by <code>60000</code>.</p>\n"},{"score":4,"body":"<p>You can checkout this</p>\n\n<pre><code>var today = new Date();\ntoday = parseInt(today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear()+\"\\nTime : \"+today.getHours()+\":\"+today.getMinutes()+\":\"+today.getSeconds();\ndocument.write(today);\n</code></pre>\n\n<p>And see the documentation for Date() constructor.\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow\">link</a></p>\n"},{"score":5,"body":"<p>If by \"current date\" you are thinking about \"today\", then this trick may work for you:</p>\n\n<pre><code>&gt; new Date(3600000*Math.floor(Date.now()/3600000))\n2020-05-07T07:00:00.000Z\n</code></pre>\n\n<p>This way you are getting today <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow noreferrer\">Date</a> instance with time 0:00:00.</p>\n\n<p>The principle of operation is very simple: we take the current timestamp and divide it for 1 day expressed in milliseconds. We will get a fraction. By using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor\" rel=\"nofollow noreferrer\">Math.floor</a>, we get rid of the fraction, so we get an integer. Now if we multiply it back by one day (again - in milliseconds), we get a date timestamp with the time exactly at the beginning of the day.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>&gt; now = Date.now()\n1588837459929\n&gt; daysInMs = now/3600000\n441343.73886916664\n&gt; justDays = Math.floor(daysInMs)\n441343\n&gt; today = justDays*3600000\n1588834800000\n&gt; new Date(today)\n2020-05-07T07:00:00.000Z\n</code></pre>\n\n<p>Clean and simple.</p>\n"},{"score":9,"body":"<pre><code>new Date().toISOString().slice(0,10); \n</code></pre>\n\n<p>would work too</p>\n"},{"score":4,"body":"<p>What's the big deal with this..   The cleanest way to do this is </p>\n\n<p><code>var currentDate=new Date().toLocaleString().slice(0,10);</code></p>\n"},{"score":1,"body":"<h2>The basics</h2>\n\n<p>If you're happy with the format <code>Sun Jan 24 2016 21:23:07 GMT+0100 (CET)</code>, you could just use this code :</p>\n\n<pre><code>var today = new Date();\n</code></pre>\n\n<h2>Date.prototype.toLocaleDateString()</h2>\n\n<p>If you want to format your output, consider using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow\"><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> :</p>\n\n<pre><code>var today = new Date().toLocaleDateString('de-DE', {     \n    weekday: 'long', \n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n});\n</code></pre>\n\n<p>If you executed that code today (january 24ᵗʰ, 2016) on a modern browser, it would produce the string <code>Sonntag, 24. Januar 2016</code>. Older browsers may generate a different result, though, as eg. IE&lt;11 doesn't support locales or options arguments.</p>\n\n<h2>Going custom</h2>\n\n<p>If <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow\"><strong><code>Date.prototype.toLocaleDateString()</code></strong></a> isn't flexible enough to fulfill whatever need you may have, you might want to consider creating a custom Date object that looks like this :</p>\n\n<pre><code>var DateObject = (function() {\n    var monthNames = [\n      \"January\", \"February\", \"March\",\n      \"April\", \"May\", \"June\", \"July\",\n      \"August\", \"September\", \"October\",\n      \"November\", \"December\"\n    ];\n    var date = function(str) {\n        this.set(str);\n    };\n    date.prototype = {\n        set : function(str) {\n            var dateDef = str ? new Date(str) : new Date();\n            this.day = dateDef.getDate();\n            this.dayPadded = (this.day &lt; 10) ? (\"0\" + this.day) : \"\" + this.day;\n            this.month = dateDef.getMonth() + 1;\n            this.monthPadded = (this.month &lt; 10) ? (\"0\" + this.month) : \"\" + this.month;\n            this.monthName = monthNames[this.month - 1];\n            this.year = dateDef.getFullYear();\n        }\n    };\n    return date;\n})();\n</code></pre>\n\n<p>If you included that code and executed <code>new DateObject()</code> today (january 24ᵗʰ, 2016), it would produce an object with the following properties :</p>\n\n<pre><code>day: 24\ndayPadded: \"24\"\nmonth: 1\nmonthPadded: \"01\"\nmonthName: \"January\"\nyear: 2016\n</code></pre>\n"},{"score":11,"body":"<pre><code>new Date().toDateString();\n</code></pre>\n\n<p>Result:</p>\n\n<blockquote>\n  <p>\"Wed Feb 03 2016\"</p>\n</blockquote>\n"},{"score":254,"body":"<p><strong>The shortest possible.</strong> </p>\n\n<p>To get format like \"2018-08-03\":</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let today = new Date().toISOString().slice(0, 10)\r\n\r\nconsole.log(today)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>To get format like \"8/3/2018\":</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let today = new Date().toLocaleDateString()\r\n\r\nconsole.log(today)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Also, you can pass <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString#Using_locales\" rel=\"noreferrer\">locale</a> as argument, for example <code>toLocaleDateString(\"sr\")</code>, etc.</p>\n"},{"score":2,"body":"<p>2.39KB minified. One file. <a href=\"https://github.com/rhroyston/clock-js\" rel=\"nofollow noreferrer\">https://github.com/rhroyston/clock-js</a><br>\n<br>\nJust trying to help...\n<br>\n<br></p>\n\n<p><a href=\"https://i.stack.imgur.com/64dzS.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/64dzS.jpg\" alt=\"enter image description here\"></a></p>\n"},{"score":30,"body":"<p>Cleaner, simpler version:</p>\n\n<pre><code>new Date().toLocaleString();\n</code></pre>\n\n<p>Result <strong>varies</strong> according to the user's <strong>locale</strong>:</p>\n\n<blockquote>\n  <p>2/27/2017, 9:15:41 AM</p>\n</blockquote>\n"},{"score":4,"body":"<p>This may help you</p>\n\n<pre><code>var date = new Date();\nconsole.log(date.getDate()+'/'+(date.getMonth()+1)+'/'+date.getFullYear());\n</code></pre>\n\n<p>This will print current date in dd/MM/yyyy format</p>\n"},{"score":8,"body":"<p><strong>LATEST EDIT: 8/23/19</strong>\nThe <a href=\"https://www.npmjs.com/package/date-fns\" rel=\"nofollow noreferrer\">date-fns</a> library works much like <a href=\"https://www.npmjs.com/package/moment\" rel=\"nofollow noreferrer\">moment.js</a> but has a WAY smaller footprint. It lets you cherry pick which functions you want to include in your project so you don't have to compile the whole library to format today's date. If a minimal 3rd party lib isn't an option for your project, I endorse the accepted solution by Samuel Meddows up top.</p>\n\n<p><strong>Preserving history below because it helped a few people. But for the record it's pretty hacky and liable to break without warning, as are most of the solutions on this post</strong></p>\n\n<p><strong>EDIT 2/7/2017</strong>\n<strong>A one-line JS solution:</strong> </p>\n\n<blockquote>\n  <p>tl;dr<br><br>\n  <code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[2] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[3];</code>\n  <br><br>edge, ff latest, &amp; chrome return <code>todaysDate = \"2/7/2017\"</code> <br>\"works\"* in IE10+</p>\n</blockquote>\n\n<p><strong>Explanation</strong></p>\n\n<p>I found out that IE10 and IE Edge do things a bit differently.. go figure.\nwith <code>new Date(Date.now()).toLocaleString()</code> as input,</p>\n\n<p>IE10 returns: </p>\n\n<pre><code>\"Tuesday, February 07, 2017 2:58:25 PM\"\n</code></pre>\n\n<p>I could write a big long function and FTFY. But <strong>you really ought to use <a href=\"https://momentjs.com/\" rel=\"nofollow noreferrer\">moment.js</a> for this stuff.</strong> My script merely cleans this up and gives you the <em>expanded</em> traditional US notation: <code>&gt; todaysDate = \"March 06, 2017\"</code></p>\n\n<p>IE EDGE returns:</p>\n\n<pre><code>\"‎2‎/‎7‎/‎2017‎ ‎2‎:‎59‎:‎27‎ ‎PM\"\n</code></pre>\n\n<p>Of course it couldn't be that easy. <strong>Edge's date string has invisible \"•\" characters between each visible one.</strong> So not only will we now be checking if the first character is a number, but the first 3 characters, since it turns out that any single character in the whole date range will eventually be a dot or a slash at some point. So to keep things simple, just <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"nofollow noreferrer\">.slice()</a> the first three chars (tiny buffer against future shenanigans) and then check for numbers. It should probably be noted that these invisible dots could potentially persist in your code. I'd maybe dig into that if you've got bigger plans than just printing this string to your view.</p>\n\n<p><strong>∴ updated one-liner:</strong></p>\n\n<pre><code>var todaysDate = new Date(Date.now()).toLocaleString().slice(0,3).match(/[0-9]/i) ? new Date(Date.now()).toLocaleString().split(' ')[0].split(',')[0] : new Date(Date.now()).toLocaleString().split(' ')[1] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[2] + \" \" + new Date(Date.now()).toLocaleString().split(' ')[3];\n</code></pre>\n\n<p>That sucks to read. How about:</p>\n\n<pre><code>var dateString = new Date(Date.now()).toLocaleString();\nvar todaysDate = dateString.slice(0,3).match(/[0-9]/i) ? dateString.split(' ')[0].split(',')[0] : dateString.split(' ')[1] + \" \" + dateString.split(' ')[2] + \" \" + dateString.split(' ')[3];\n</code></pre>\n\n<p><strong>ORIGINAL ANSWER</strong></p>\n\n<p>I've got a one-liner for you:</p>\n\n<pre><code>new Date(Date.now()).toLocaleString().split(', ')[0];\n</code></pre>\n\n<p>and <code>[1]</code> will give you the time of day.</p>\n"},{"score":6,"body":"<p>If you are using jQuery. Try this one liner :</p>\n\n<pre><code>$.datepicker.formatDate('dd/mm/yy', new Date());\n</code></pre>\n\n<p>Here is the convention for formatting the date </p>\n\n<ul>\n<li>d - day of month (no leading zero)</li>\n<li>dd - day of month (two digit)</li>\n<li>o - day of the year (no leading zeros)</li>\n<li>oo - day of the year (three digit)</li>\n<li>D - day name short</li>\n<li>DD - day name long</li>\n<li>m - month of year (no leading zero)</li>\n<li>mm - month of year (two digit)</li>\n<li>M - month name short</li>\n<li>MM - month name long</li>\n<li>y - year (two digit)</li>\n<li>yy - year (four digit)</li>\n</ul>\n\n<p>Here is the reference for jQuery <a href=\"http://api.jqueryui.com/datepicker/\" rel=\"noreferrer\">datepicker</a></p>\n"},{"score":1,"body":"<p>You can use my DATE API given below for everyday use of date formatting along with getting current date, yesterday etc. \nHow to use \n  e.g. </p>\n\n<pre><code> var dt = new Date();  \n       /// ANY DATE YOU WANT --  dt = new Date(\"\"July 21, 1983 01:15:00\"\")\n\n       dateObj = dt.getFormattedDate();\n\n       alert( dateObj.isToday() );\n       alert( dateObj.todayDay() );\n       alert( dateObj.monthNameDayYear() );\n</code></pre>\n\n<hr>\n\n<pre><code>(function () {\n\n    fnDateProcessor = function () {\n        var that = this;\n\n        return {\n\n            yyyymmdd: function (separator) {\n                var fdate = this.formatDate(true, true) ,\n                    separator = separator ? separator : \"-\";\n                return fdate.year + separator + fdate.month + separator + fdate.day;\n            },\n\n            monthNameDayYear: function () {\n                var fdate = this.formatDate(true, true);\n                return fdate.monthName + \" \" + fdate.day + \", \" + fdate.year;\n            },\n\n            ddmmyyyy: function (separator) {\n                var fdate = this.formatDate(true, true) ,\n                    separator = separator ? separator : \"/\";\n                return fdate.day + separator + fdate.month + separator + fdate.year;\n            },\n\n            meridianTime: function () {\n                var fdate = this.formatDate();\n                return fdate.hour + \":\" + fdate.minute + \" \" + fdate.meridian;\n            },\n\n            monthDay: function (separator) {\n\n                var fdate = this.formatDate();\n                separator = checkSeparator(separator);\n                return fdate.monthName.substring(0, 3) + separator + fdate.day;\n\n            },\n\n            weekMonthDayYear: function () {\n                var fdate = this.formatDate();\n                //separator = checkSeparator(separator);\n\n                return fdate.weekDay + \" \" + fdate.monthName.substring(0, 3) +\n                    fdate.day + \" ,\" + fdate.year;\n            },\n\n            timeZoneInclusive: function () {\n\n                return new Date(that);\n            },\n\n            todayDay: function () { return new Date().getDate(); },\n            todayMonth: function () { return new Date().getMonth() + 1; },\n            dateDay: function () { return this.formatDate().day; },\n            dateMonth: function () { return this.formatDate().month; },\n            isToday: function () { return this.sameDate(new Date()); },\n            isYesterday: function () {\n                d = new Date(); d.setDate(d.getDate() - 1);\n                return this.sameDate(d);\n            },\n\n            formatDate: function () {\n                var zeroPaddedMnth = true, zeroPaddedDay = false,\n                    zeroPaddedHr = false, zeroPaddedMin = true;\n                // Possible to take Options arg that overide / merge to defaults\n\n                var monthNames = [\n                    \"January\", \"February\", \"March\",\n                    \"April\", \"May\", \"June\", \"July\",\n                    \"August\", \"September\", \"October\",\n                    \"November\", \"December\"\n                ];\n                var weekDays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n                var day = getFormattedDay(that.getDate(), zeroPaddedDay);\n                var monthIndex = that.getMonth();\n                var month = getFormattedMonth(monthIndex + 1, zeroPaddedMnth);\n                var year = that.getFullYear();\n                var wkDay = that.getDay();\n                var hour = getFormattedHour(that.getHours(), zeroPaddedHr);\n                var minute = getFormattedMinute(that.getMinutes(), zeroPaddedMin);\n                var meridian = getMeridian(that.getHours());\n\n                return {\n                    \"day\": day, \"monthName\": monthNames[monthIndex], \"month\": month,\n                    \"weekDay\": weekDays[wkDay], \"year\": year, \"hour\": hour, \"minute\": minute,\n                    \"meridian\": meridian\n                };\n            },\n\n            compareDate: function (d2) {     /// validates if caller is less than argument                            \n                d2 = _isString(d2) ? new Date(d2) : d2;\n\n                return !this.sameDate(d2)\n                    &amp;&amp; typeof d2 != \"number\"\n                    ? that &lt; d2 : false;\n            },\n\n            sameDate: function (d) {\n                return that.getFullYear() === d.getFullYear()\n                    &amp;&amp; that.getDate() === d.getDate()\n                    &amp;&amp; that.getMonth() === d.getMonth();\n            },\n\n            dateAfter: function (separator) {\n                var fdate = this.formatDate();\n                var separator = separator ? separator : \"-\";\n                return fdate.year + separator + fdate.month + separator + (fdate.day + 1);\n            }\n\n        };\n\n    };\n\n\n    function _isString(obj) {\n        var toString = Object.prototype.toString;\n        return toString.call(obj) == '[object String]';\n    }\n\n    function checkSeparator(separator) {\n        // NOT GENERIC ... NEEDS REVISION\n        switch (separator) {\n            case \" \": sep = separator; break;\n            case \",\": sep = \" ,\"; break;\n            default:\n                sep = \" \"; break;\n        }\n\n        return sep;\n    }\n\n    function getFormattedHour(h, zeroPadded) {\n        h = h % 12;\n        h = h ? h : 12;    //  12 instead of 00\n        return zeroPadded ? addZero(h) : h;\n    }\n\n    function getFormattedMinute(m, zeroPadded) {\n\n        return zeroPadded ? addZero(m) : m;\n    }\n\n    function getFormattedDay(dd, zeroPadded) {\n\n        return zeroPadded ? addZero(dd) : dd;\n    }\n    function getFormattedMonth(mm, zeroPadded) {\n\n        return zeroPadded ? addZero(mm) : mm;\n    }\n\n    function getMeridian(hr) {\n\n        return hr &gt;= 12 ? 'PM' : 'AM';\n    }\n\n    function addZero(i) {\n        if (i &lt; 10) {\n            i = \"0\" + i;\n        }\n        return i;\n    }\n\n\n    Date.prototype.getFormattedDate = fnDateProcessor;\n\n} ());\n</code></pre>\n"},{"score":15,"body":"<p>The Shortest Answer is: <code>new Date().toJSON().slice(0,10)</code></p>\n"},{"score":-1,"body":"<p>You can get by using <code>new Date()</code> to the current browser date in JavaScript. </p>\n\n<p>But currently we have a good plugin for <strong><em>Parse, validate, manipulate, and display dates and times in JavaScript</em></strong> by using <a href=\"https://momentjs.com/\" rel=\"nofollow noreferrer\">moment.js</a> </p>\n"},{"score":28,"body":"<p>If you are happy with YYYY-MM-DD format, this will do the job as well.</p>\n\n<p><code>new Date().toISOString().split('T')[0]</code></p>\n\n<p><code>2018-03-10</code></p>\n"},{"score":12,"body":"<p>As <code>toISOString()</code> will only return current UTC time , not local time. We have to make a date by using '.toString()' function to get date in <code>yyyy-MM-dd</code> format like</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('T')[0]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>To get date and time into in <code>yyyy-MM-ddTHH:mm:ss</code> format</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('.')[0]);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>To get date and time into in <code>yyyy-MM-dd HH:mm:ss</code> format</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.write(new Date(new Date().toString().split('GMT')[0]+' UTC').toISOString().split('.')[0].replace('T',' '));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>If you're looking for a lot more granular control over the date formats, I thoroughly recommend checking out date-FNS. Terrific library - much smaller than moment.js and it's function based approach make it much faster then other class based libraries. Provide large number of operations needed over dates. </p>\n\n<p><a href=\"https://date-fns.org/docs/Getting-Started\" rel=\"nofollow noreferrer\">https://date-fns.org/docs/Getting-Started</a></p>\n"},{"score":2,"body":"<p>If your looking to format into a string.</p>\n\n<pre><code>statusUpdate = \"time \" + new Date(Date.now()).toLocaleTimeString();\n</code></pre>\n\n<p>output \"time 11:30:53 AM\"</p>\n"},{"score":0,"body":"<p>This answer is for people looking for a date with ISO-8601 like format and with the timezone.\nIt's pure JS for those who don't want to include any date library.</p>\n\n<pre><code>      var date = new Date();\n      var timeZone = date.toString();\n      //Get timezone ( 'GMT+0200' )\n      var timeZoneIndex = timeZone.indexOf('GMT');\n      //Cut optional string after timezone ( '(heure de Paris)' )\n      var optionalTimeZoneIndex = timeZone.indexOf('(');\n      if(optionalTimeZoneIndex != -1){\n          timeZone = timeZone.substring(timeZoneIndex, optionalTimeZoneIndex);\n      }\n      else{\n          timeZone = timeZone.substring(timeZoneIndex);\n      }\n      //Get date with JSON format ( '2019-01-23T16:28:27.000Z' )\n      var formattedDate = new Date(date.getTime() - (date.getTimezoneOffset() * 60000)).toJSON();\n      //Cut ms\n      formattedDate = formattedDate.substring(0,formattedDate.indexOf('.'));\n      //Add timezone\n      formattedDate = formattedDate + ' ' + timeZone;\n      console.log(formattedDate);\n</code></pre>\n\n<p>Print something like this in the console :</p>\n\n<blockquote>\n  <p>2019-01-23T17:12:52 GMT+0100 </p>\n</blockquote>\n\n<p>JSFiddle : <a href=\"https://jsfiddle.net/n9mszhjc/4/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/n9mszhjc/4/</a></p>\n"},{"score":-1,"body":"<p>With ability to render in custom format and using month name in different locales:</p>\n\n<pre><code>const locale = 'en-us';\nconst d = new Date(date);\n\nconst day = d.getDate();\nconst month = d.toLocaleString(locale, { month: 'long' });\nconst year = d.getFullYear();\n\nconst time = d.toLocaleString(locale, { hour12: false, hour: 'numeric', minute: 'numeric'});\n\nreturn `${month} ${day}, ${year} @ ${time}`; // May 5, 2019 @ 23:41\n</code></pre>\n"},{"score":5,"body":"<p>This is good to get formatted date </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let date = new Date().toLocaleDateString(\"en\", {year:\"numeric\", day:\"2-digit\", month:\"2-digit\"});\r\nconsole.log(date);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":4,"body":"<p><strong>This does a lot;</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>    var today = new Date();\r\n    var date = today.getFullYear()+'/'+(today.getMonth()+1)+'/'+today.getDate();\r\n    document.write(date);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Where <strong>today.getFullYear()</strong>- gets current year, <strong>today.getMonth()+1</strong> - gets current month and <strong>today.getDate()</strong> gets today's date.\nAll of this is concatinated with '/'.</p>\n"},{"score":-1,"body":"<p>My solution uses string literal <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"nofollow noreferrer\">Find out more...</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Declare Date as d\r\nvar d = new Date()\r\n\r\n// Inline formatting of Date\r\nconst exampleOne = `${d.getDay()}-${d.getMonth() + 1}-${d.getFullYear()}`\r\n// January is 0 so +1 is required\r\n\r\n// With Breaklines and Operators\r\nconst exampleTwo = `+++++++++++\r\nWith Break Lines and Arithmetic Operators Example\r\nYear on newline: ${d.getFullYear()}\r\nYear minus(-) 30 years: ${d.getFullYear() - 30}\r\nYou get the idea...\r\n+++++++++++`\r\n\r\nconsole.log('=============')\r\nconsole.log(exampleOne)\r\nconsole.log('=============')\r\n\r\nconsole.log(exampleTwo)</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>To get just the date then it is built in to javascript:</p>\n\n<pre><code>new Date();\n</code></pre>\n\n<p>If you are looking for date formatting and you are anyways using the <a href=\"https://www.telerik.com/kendo-jquery-ui\" rel=\"nofollow noreferrer\">Kendo JQuery UI</a> library for your site then I suggest using the built in kendo function:</p>\n\n<pre><code>kendo.toString(new Date(), \"yyMMdd\"); //or any other typical date format\n</code></pre>\n\n<p>For a full list of supported formats <a href=\"https://docs.telerik.com/kendo-ui/globalization/intl/dateformatting\" rel=\"nofollow noreferrer\">see here</a></p>\n"},{"score":-1,"body":"<p>If you only require the string representation, then simply use:</p>\n\n<pre><code>Date();\n</code></pre>\n"},{"score":-1,"body":"<p>Try This and you can adjust date formate accordingly:       </p>\n\n<pre><code>var today = new Date();\n    var dd = today.getDate();\n    var mm = today.getMonth() + 1;\n    var yyyy = today.getFullYear();\n    if (dd &lt; 10) {\n        dd = '0' + dd;\n    }\n    if (mm &lt; 10) {\n        mm = '0' + mm;\n    }\n var myDate= dd + '-' + mm + '-' + yyyy;\n</code></pre>\n"},{"score":2,"body":"<h1>TL;DR</h1>\n<p>Most of the answers found here are correct <strong>only</strong> if you need the current time that's on your local machine (client) which is a source that often cannot be considered reliable (it will probably differ from another system).</p>\n<p>Reliable sources are:</p>\n<ul>\n<li>Web server's clock (but make sure that it's updated)</li>\n<li>Time APIs &amp; CDNs</li>\n</ul>\n<h1>Details</h1>\n<p>A method called on the <code>Date</code> instance will return a value based on the local time of your machine.</p>\n<p>Further details can be found in &quot;MDN web docs&quot;: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"nofollow noreferrer\">JavaScript Date object</a>.</p>\n<p>For your convenience, I've added a relevant note from their docs:</p>\n<blockquote>\n<p>(...) the basic methods to fetch the date and time or its components all work in the local (i.e. host system) time zone and offset.</p>\n</blockquote>\n<p>Another source mentioning this is: <a href=\"http://www.tizag.com/javascriptT/javascriptdate.php\" rel=\"nofollow noreferrer\">JavaScript date and time object</a></p>\n<blockquote>\n<p>it is important to note that if someone's clock is off by a few hours or they are in a different time zone, then the Date object will create a different times from the one created on your own computer.</p>\n</blockquote>\n<p>Some reliable sources that you can use are:</p>\n<ul>\n<li>Your web server's clock (first check if it's properly set)</li>\n<li>Time APIs &amp; CDNs:\n<ul>\n<li><a href=\"https://timezonedb.com/api\" rel=\"nofollow noreferrer\">https://timezonedb.com/api</a></li>\n<li><a href=\"http://worldtimeapi.org\" rel=\"nofollow noreferrer\">http://worldtimeapi.org</a></li>\n<li><a href=\"http://worldclockapi.com\" rel=\"nofollow noreferrer\">http://worldclockapi.com</a></li>\n<li><a href=\"http://www.geonames.org/export/ws-overview.html\" rel=\"nofollow noreferrer\">http://www.geonames.org/export/ws-overview.html</a></li>\n<li>Other related APIs: <a href=\"https://www.programmableweb.com/category/time/api\" rel=\"nofollow noreferrer\">https://www.programmableweb.com/category/time/api</a></li>\n</ul>\n</li>\n</ul>\n<p>But if accuracy is not important for your use case or if you simply need the date to be relative to local machine's time then you can safely use Javascript's <code>Date</code> basic methods like <code>Date.now()</code>.</p>\n"},{"score":5,"body":"<p>A straighforward way to pull that off (whilst considering your current time zone it taking advantage of the ISO yyyy-mm-dd format) is:</p>\n\n<pre><code>let d = new Date().toISOString().substring(0,19).replace(\"T\",\" \") // \"2020-02-18 16:41:58\"\n</code></pre>\n\n<p>Usually, this is a pretty all-purpose compatible date format and you can convert it to pure date value if needed:</p>\n\n<pre><code>Date.parse(d); // 1582044297000\n</code></pre>\n"},{"score":5,"body":"<p>Try</p>\n\n<pre><code>`${Date()}`.slice(4,15)\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log( `${Date()}`.slice(4,15) )</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>We use here standard JS functionalities: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" rel=\"noreferrer\">template literals</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"noreferrer\">Date object</a> which is cast to string, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\" rel=\"noreferrer\">slice</a>. This is probably shortest solution which meet OP requirements (no time, only date)</p>\n"},{"score":0,"body":"<p>For anyone looking for a date format like this <strong>09-Apr-2020</strong></p>\n\n<pre><code>function getDate(){\n  var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n\n  var today = new Date();\n  var dd    = String(today.getDate()).padStart(2, '0');\n  var mm    = months[today.getMonth()];\n  var yyyy  = today.getFullYear();\n\n  today = dd + \"-\" + mm + \"-\" + yyyy;\n  return today;\n}\n\ngetDate();\n</code></pre>\n"},{"score":-1,"body":"<pre><code>Date.prototype.toLocalFullDateStringYYYYMMDDHHMMSS = function () {\nif (this != null &amp;&amp; this != undefined) {\n    let str = this.getFullYear();\n    str += &quot;-&quot; + round(this.getMonth() + 1);\n    str += &quot;-&quot; + round(this.getDate());\n    str += &quot;T&quot;;\n    str += round(this.getHours());\n    str += &quot;:&quot; + round(this.getMinutes());\n    str += &quot;:&quot; + round(this.getSeconds());\n    return str;\n} else {\n    return this;\n}\n\nfunction round(n){\n    if(n &lt; 10){\n        return &quot;0&quot; + n;\n    }\n    else return n;\n}};\n</code></pre>\n"},{"score":3,"body":"<p>Using JS built in <code>Date.prototype.toLocaleDateString()</code>\nFrom MDN docs: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString</a></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const options = { \n  month: '2-digit', \n  day: '2-digit',\n  year: 'numeric', \n};\n\nconsole.log(new Date().toLocaleDateString('en-US', options)); // mm/dd/yyyy</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],"score":2453}