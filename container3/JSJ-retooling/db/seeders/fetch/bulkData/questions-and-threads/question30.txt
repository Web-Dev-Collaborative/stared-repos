{"body":"<p>I saw some code that seems to use an operator I don't recognize, in the form of two exclamation points, like so: <code>!!</code>. Can someone please tell me what this operator does?</p>\n\n<p>The context in which I saw this was,</p>\n\n<pre><code>this.vertical = vertical !== undefined ? !!vertical : this.vertical;\n</code></pre>\n","title":"What is the !! (not not) operator in JavaScript?","answers":[{"score":2901,"body":"<p>Converts <code>Object</code> to <code>boolean</code>. If it was falsey (e.g. <code>0</code>, <code>null</code>, <code>undefined</code>, etc.), it will be <code>false</code>, otherwise, <code>true</code>.</p>\n\n<pre><code>!oObject  // inverted boolean\n!!oObject // non inverted boolean so true boolean representation\n</code></pre>\n\n<p>So <code>!!</code> is not an operator, it's just the <code>!</code> operator twice.</p>\n\n<p>Real World Example \"Test IE version\":  </p>\n\n<pre><code>const isIE8 = !! navigator.userAgent.match(/MSIE 8.0/);  \nconsole.log(isIE8); // returns true or false \n</code></pre>\n\n<p>If you ⇒</p>\n\n<pre><code>console.log(navigator.userAgent.match(/MSIE 8.0/));  \n// returns either an Array or null  \n</code></pre>\n\n<p>But if you ⇒</p>\n\n<pre><code>console.log(!!navigator.userAgent.match(/MSIE 8.0/));  \n// returns either true or false\n</code></pre>\n"},{"score":55,"body":"<p>It's just the logical NOT operator, twice - it's used to convert something to boolean, e.g.:</p>\n\n<pre><code>true === !!10\n\nfalse === !!0\n</code></pre>\n"},{"score":27,"body":"<p>It seems that the <code>!!</code> operator results in a double negation.</p>\n\n<pre><code>var foo = \"Hello World!\";\n\n!foo // Result: false\n!!foo // Result: true\n</code></pre>\n"},{"score":11,"body":"<p>I suspect this is a leftover from C++ where people override the ! operator but not the bool operator.</p>\n\n<p>So to get a negative(or positive) answer in that case you would first need to use the ! operator to get a boolean, but if you wanted to check the positive case would use !!.</p>\n"},{"score":104,"body":"<p><code>!!</code> converts the value to the right of it to its equivalent boolean value. (Think poor man's way of \"type-casting\"). Its <em>intent</em> is usually to convey to the reader that the code does not care <em>what</em> value is in the variable, but what it's <a href=\"http://11heavens.com/falsy-and-truthy-in-javascript\" rel=\"noreferrer\">\"truth\" value</a> is.</p>\n"},{"score":32,"body":"<p>It converts the suffix to a Boolean value. </p>\n"},{"score":876,"body":"<p>It's a horribly obscure way to do a type conversion.</p>\n\n<p><code>!</code> is <em>NOT</em>.  So <code>!true</code> is <code>false</code>, and <code>!false</code> is <code>true</code>. <code>!0</code> is <code>true</code>, and <code>!1</code> is <code>false</code>.</p>\n\n<p>So you're converting a value to a boolean, then inverting it, then inverting it again.</p>\n\n<pre><code>// Maximum Obscurity:\nval.enabled = !!userId;\n\n// Partial Obscurity:\nval.enabled = (userId != 0) ? true : false;\n\n// And finally, much easier to understand:\nval.enabled = (userId != 0);\n</code></pre>\n"},{"score":27,"body":"<p>It's a double <code>not</code> operation.  The first <code>!</code> converts the value to boolean and inverts its logical value.  The second <code>!</code> inverts the logical value back.</p>\n"},{"score":21,"body":"<p>! is \"boolean not\", which essentially typecasts the value of \"enable\" to its boolean opposite. The second ! flips this value. So, <code>!!enable</code> means \"not not enable,\" giving you the value of <code>enable</code> as a boolean.</p>\n"},{"score":75,"body":"<p><code>!!foo</code> applies the unary not operator twice and is used to cast to boolean type similar to the use of unary plus <code>+foo</code> to cast to number and concatenating an empty string <code>''+foo</code> to cast to string.</p>\n\n<p>Instead of these hacks, you can also use the constructor functions corresponding to the primitive types (<em>without</em> using <code>new</code>) to explicitly cast values, ie</p>\n\n<pre><code>Boolean(foo) === !!foo\nNumber(foo)  === +foo\nString(foo)  === ''+foo\n</code></pre>\n"},{"score":16,"body":"<p>It's not a single operator, it's two.  It's equivalent to the following and is a quick way to cast a value to boolean. </p>\n\n<pre><code>val.enabled = !(!enable);\n</code></pre>\n"},{"score":9,"body":"<p>Double boolean negation. Often used to check if value is not undefined.</p>\n"},{"score":25,"body":"<p>It simulates the behavior of the <code>Boolean()</code> casting function.\nThe first <code>NOT</code> returns a Boolean value no matter what operand it is given. The second <code>NOT</code> negates that <code>Boolean</code> value and so gives the <code>true</code> Boolean value of a variable. The end result is the same as using the <code>Boolean()</code> function on a value.</p>\n"},{"score":-4,"body":"<p>This is a really handy way to check for undefined, \"undefined\", null, \"null\", \"\"</p>\n\n<pre><code>if (!!var1 &amp;&amp; !!var2 &amp;&amp; !!var3 &amp;&amp; !!var4 ){\n   //... some code here\n}\n</code></pre>\n"},{"score":482,"body":"<p><code>!!expr</code> returns a Boolean value (<code>true</code> or <code>false</code>) depending on the <em>truthiness</em> of the expression. It makes more sense when used on non-boolean types. Consider these examples, especially the 3rd example and onward:</p>\n<pre><code>          !!false === false\n           !!true === true\n\n              !!0 === false\n!!parseInt(&quot;foo&quot;) === false // NaN is falsy\n              !!1 === true\n             !!-1 === true  // -1 is truthy\n          !!(1/0) === true  // Infinity is truthy\n\n             !!&quot;&quot; === false // empty string is falsy\n          !!&quot;foo&quot; === true  // non-empty string is truthy\n        !!&quot;false&quot; === true  // ...even if it contains a falsy value\n\n     !!window.foo === false // undefined is falsy\n           !!null === false // null is falsy\n\n             !!{} === true  // an (empty) object is truthy\n             !![] === true  // an (empty) array is truthy; PHP programmers beware!\n</code></pre>\n"},{"score":164,"body":"<p><strong>Brew some tea:</strong></p>\n\n<p><code>!!</code> is not an operator. It is the double-use of <code>!</code> -- which is the logical \"not\" operator. </p>\n\n<hr>\n\n<p><strong>In theory:</strong></p>\n\n<p><strong><code>!</code></strong> determines the \"truth\" of what a value is not:</p>\n\n<ul>\n<li><p>The truth is that <code>false</code> is not <code>true</code> (that's why <code>!false</code> results\nin <strong><code>true</code></strong>)</p></li>\n<li><p>The truth is that <code>true</code> is not <code>false</code> (that's why <code>!true</code> results\nin <strong><code>false</code></strong>)</p></li>\n</ul>\n\n<hr>\n\n<p><strong><code>!!</code></strong> determines the \"truth\" of what a value is <em>not</em> not:</p>\n\n<ul>\n<li><p>The truth is that <code>true</code> is not <em>not</em> <code>true</code> (that's why <code>!!true</code> results in <strong><code>true</code></strong>)</p></li>\n<li><p>The truth is that <code>false</code> is not <em>not</em> <code>false</code> (that's why <code>!!false</code> results in <strong><code>false</code></strong>)</p></li>\n</ul>\n\n<hr>\n\n<p>What we wish to determine in the comparison is the \"truth\" <em>about</em> the value of a reference, not the <em>value of</em> the reference itself. There is a use-case where we might want to know the truth about a value, even if we expect the value to be <em><code>false</code></em> (or falsey), or if we expect the value not to be typeof <code>boolean</code>. </p>\n\n<hr>\n\n<p><strong>In practice:</strong></p>\n\n<p>Consider a concise function which detects feature functionality (and in this case, platform compatibility) by way of <strong><a href=\"http://en.wikipedia.org/wiki/Type_system#Dynamic_typing\" rel=\"noreferrer\">dynamic typing</a></strong> (aka \"duck typing\"). We want to write a function that returns <code>true</code> if a user's browser supports the HTML5 <code>&lt;audio&gt;</code> element, but we don't want the function to throw an error if <code>&lt;audio&gt;</code> is undefined; and we don't want to use <code>try ... catch</code> to handle any possible errors (because they're gross); <em>and also</em> we don't want to use a check inside the function that won't consistently reveal the truth about the feature (for example, <code>document.createElement('audio')</code> will still create an element called <code>&lt;audio&gt;</code> even if HTML5 <code>&lt;audio&gt;</code> is not supported). </p>\n\n<hr>\n\n<p>Here are the three approaches:</p>\n\n<pre><code>// this won't tell us anything about HTML5 `&lt;audio&gt;` as a feature\nvar foo = function(tag, atr) { return document.createElement(tag)[atr]; }\n\n// this won't return true if the feature is detected (although it works just fine)\nvar bar = function(tag, atr) { return !document.createElement(tag)[atr]; }\n\n// this is the concise, feature-detecting solution we want\nvar baz = function(tag, atr) { return !!document.createElement(tag)[atr]; }\n\nfoo('audio', 'preload'); // returns \"auto\"\nbar('audio', 'preload'); // returns false\nbaz('audio', 'preload'); // returns true\n</code></pre>\n\n<p>Each function accepts an argument for a <code>&lt;tag&gt;</code> and an <code>attribute</code> to look for, but they each return different values based on what the comparisons determine. </p>\n\n<p><strong>But wait, there's more!</strong></p>\n\n<p>Some of you probably noticed that in this specific example, one could simply check for a property using the slightly <strong><a href=\"http://jsperf.com/hasownproperty-vs-comparison\" rel=\"noreferrer\">more performant</a></strong> means of checking if the object in question <em>has</em> a property. There are two ways to do this:</p>\n\n<pre><code>// the native `hasOwnProperty` method\nvar qux = function(tag, atr) { return document.createElement(tag).hasOwnProperty(atr); }\n\n// the `in` operator\nvar quux = function(tag, atr) { return atr in document.createElement(tag); }\n\nqux('audio', 'preload');  // returns true\nquux('audio', 'preload'); // returns true\n</code></pre>\n\n<p><strong>We digress...</strong></p>\n\n<p>However rare these situations may be, there may exist a few scenarios where the most concise, most performant, and thus most preferred means of getting <code>true</code> from a non-boolean, possibly undefined value is indeed by using <code>!!</code>. Hopefully this ridiculously clears it up.</p>\n"},{"score":16,"body":"<p>The <code>!!</code> construct is a simple way of turning any JavaScript expression into\nits Boolean equivalent. </p>\n\n<p>For example: <code>!!\"he shot me down\" === true</code> and <code>!!0 === false</code>.</p>\n"},{"score":8,"body":"<p>Tons of great answers here, but if you've read down this far, this helped me to 'get it'. Open the console on Chrome (etc), and start typing:</p>\n\n<pre><code>!(!(1))\n!(!(0))\n!(!('truthy')) \n!(!(null))\n!(!(''))\n!(!(undefined))\n!(!(new Object())\n!(!({}))\nwoo = 'hoo'\n!(!(woo))\n...etc, etc, until the light goes on ;)\n</code></pre>\n\n<p>Naturally, these are all the same as merely typing !!someThing, but the added parentheses might help make it more understandable.</p>\n"},{"score":2,"body":"<pre><code>a = 1;\nalert(!a) // -&gt; false : a is not not defined\nalert(!!a) // -&gt; true : a is not not defined\n</code></pre>\n\n<p>For <code>!a</code>, it checks whether <code>a</code> is <strong>NOT</strong> defined, while <code>!!a</code> checks if the variable is defined.</p>\n\n<p><code>!!a</code> is the same as <code>!(!a)</code>. If <code>a</code> is defined, <code>a</code> is <code>true</code>, <code>!a</code> is <code>false</code>, and <code>!!a</code> is <code>true</code>.</p>\n"},{"score":4,"body":"<p>here is a piece of code from angular js </p>\n\n<pre><code>var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n var rafSupported = !!requestAnimationFrame;\n</code></pre>\n\n<p>their intention is to set rafSupported to true or false based on the availability of function in requestAnimationFrame </p>\n\n<p>it can be achieved by checking in following way in general:</p>\n\n<pre><code>if(typeof  requestAnimationFrame === 'function')\nrafSupported =true;\nelse\nrafSupported =false;\n</code></pre>\n\n<p>the short way could be using !!</p>\n\n<pre><code>rafSupported = !!requestAnimationFrame ;\n</code></pre>\n\n<p>so if requestAnimationFrame was assigned a function\n then\n!requestAnimationFrame would be false and one more ! of it would be true</p>\n\n<p>if requestAnimationFrame was assinged undefined then\n!requestAnimationFrame would be true and one more ! of it would be false</p>\n"},{"score":70,"body":"<p>So many answers doing half the work. Yes, <code>!!X</code> could be read as &quot;the truthiness of X [represented as a boolean]&quot;. But <code>!!</code> isn't, practically speaking, so important for figuring out whether a single variable is (or even if many variables are) truthy or falsy. <code>!!myVar === true</code> is the same as just <code>myVar</code>. Comparing <code>!!X</code> to a &quot;real&quot; boolean isn't really useful.</p>\n<p>What you gain with <code>!!</code> is the ability to check the truthiness of multiple variables <em>against each other</em> in a repeatable, standardized (and JSLint friendly) fashion.</p>\n<h3>Simply casting :(</h3>\n<p>That is...</p>\n<ul>\n<li><code>0 === false</code> is <code>false</code>.</li>\n<li><code>!!0 === false</code> is <code>true</code>.</li>\n</ul>\n<p>The above's not so useful. <code>if (!0)</code> gives you the same results as <code>if (!!0 === false)</code>. I can't think of a good case for casting a variable to boolean and then comparing to a &quot;true&quot; boolean.</p>\n<p>See &quot;== and !=&quot; from <a href=\"http://old.jslint.com/lint.html\" rel=\"noreferrer\">JSLint's directions</a> (note: Crockford is moving his site around a bit; that link is liable to die at some point) for a little on why:</p>\n<blockquote>\n<p>The == and != operators do type coercion before comparing. This is bad because it causes ' \\t\\r\\n' == 0 to be true. This can mask type errors. JSLint cannot reliably determine if == is being used correctly, so it is best to not use == and != at all and to always use the more reliable === and !== operators instead.</p>\n<p>If you only care that a value is truthy or falsy, then use the short form. Instead of<br />\n<code>    (foo != 0)</code></p>\n<p>just say<br />\n<code>    (foo)</code></p>\n<p>and instead of<br />\n<code>    (foo == 0)</code></p>\n<p>say<br />\n<code>     (!foo)</code></p>\n</blockquote>\n<p>Note that there are some <a href=\"https://stackoverflow.com/a/3619813/1028230\">unintuitive cases</a> where a boolean will be cast to a number (<code>true</code> is cast to <code>1</code> and <code>false</code> to <code>0</code>) when comparing a boolean to a number. In this case, <code>!!</code> might be mentally useful. Though, again, <strong>these are cases where you're comparing a non-boolean to a hard-typed boolean, which is, imo, a serious mistake.</strong> <code>if (-1)</code> is still the way to go here.</p>\n<pre><code>╔═══════════════════════════════════════╦═══════════════════╦═══════════╗\n║               Original                ║    Equivalent     ║  Result   ║\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (-1 == true) console.log(&quot;spam&quot;)   ║ if (-1 == 1)      ║ undefined ║\n║ if (-1 == false) console.log(&quot;spam&quot;)  ║ if (-1 == 0)      ║ undefined ║\n║   Order doesn't matter...             ║                   ║           ║\n║ if (true == -1) console.log(&quot;spam&quot;)   ║ if (1 == -1)      ║ undefined ║\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (!!-1 == true) console.log(&quot;spam&quot;) ║ if (true == true) ║ spam      ║ better\n╠═══════════════════════════════════════╬═══════════════════╬═══════════╣\n║ if (-1) console.log(&quot;spam&quot;)           ║ if (truthy)       ║ spam      ║ still best\n╚═══════════════════════════════════════╩═══════════════════╩═══════════╝\n</code></pre>\n<p>And things get even crazier depending on your engine. WScript, for instance, wins the prize.</p>\n<pre><code>function test()\n{\n    return (1 === 1);\n}\nWScript.echo(test());\n</code></pre>\n<p>Because of <a href=\"https://stackoverflow.com/a/14462348/1028230\">some historical Windows jive</a>, that'll output -1 in a message box! Try it in a cmd.exe prompt and see! But <code>WScript.echo(-1 == test())</code> still gives you 0, or WScript's <code>false</code>. <a href=\"https://www.google.com/search?q=look+away+I%27m+hideous\" rel=\"noreferrer\">Look away. It's hideous.</a></p>\n<h3>Comparing truthiness :)</h3>\n<p>But what if I have two values I need to check for equal truthi/falsi-ness?</p>\n<p>Pretend we have <code>myVar1 = 0;</code> and <code>myVar2 = undefined;</code>.</p>\n<ul>\n<li><code>myVar1 === myVar2</code> is <code>0 === undefined</code> and is obviously false.</li>\n<li><code>!!myVar1 === !!myVar2</code> is <code>!!0 === !!undefined</code> and is true! Same truthiness! (In this case, both &quot;have a truthiness of falsy&quot;.)</li>\n</ul>\n<p>So the only place you'd really need to use &quot;boolean-cast variables&quot; would be if you had a situation where you're checking if both variables have the <em>same</em> truthiness, right? That is, <b>use <code>!!</code> if you need to see if two vars are <em>both truthy or both falsy</em> (or not), that is, <em>of equal</em> (or not) <em>truthiness</em>.</b></p>\n<p>I can't think of a great, non-contrived use case for that offhand. Maybe you have &quot;linked&quot; fields in a form?</p>\n<pre><code>if (!!customerInput.spouseName !== !!customerInput.spouseAge ) {\n    errorObjects.spouse = &quot;Please either enter a valid name AND age &quot; \n        + &quot;for your spouse or leave all spouse fields blank.&quot;;\n}\n</code></pre>\n<p>So now if you have a truthy for both <em>or</em> a falsy for both spouse name and age, you can continue. Otherwise you've only got one field with a value (or a very early arranged marriage) and need to create an extra error on your <code>errorObjects</code> collection.</p>\n<hr />\n<p><strong>EDIT 24 Oct 2017, 6 Feb 19:</strong></p>\n<h3>3rd party libraries that expect explicit Boolean values</h3>\n<p>Here's an interesting case... <code>!!</code> might be useful when 3rd party libs expect explicit Boolean values.</p>\n<p>For instance, <a href=\"https://react-cn.github.io/react/tips/false-in-jsx.html\" rel=\"noreferrer\">False in JSX (React) has a special meaning</a> that's not triggered on simple falsiness. If you tried returning something like the following in your JSX, expecting an int in <code>messageCount</code>...</p>\n<p><code>{messageCount &amp;&amp; &lt;div&gt;You have messages!&lt;/div&gt;}</code></p>\n<p>... you might be surprised to see React render a <code>0</code> when you have zero messages. You have to explicitly return false for JSX not to render. The above statement returns <code>0</code>, which JSX happily renders, as it should. It can't tell you didn't have <code>Count: {messageCount &amp;&amp; &lt;div&gt;Get your count to zero!&lt;/div&gt;}</code> (or something less contrived).</p>\n<ul>\n<li><p>One fix involves the bangbang, which coerces <code>0</code> into <code>!!0</code>, which is <code>false</code>:<br />\n<code>{!!messageCount &amp;&amp; &lt;div&gt;You have messages!&lt;/div&gt;}</code></p>\n</li>\n<li><p>JSX' docs suggest you be more explicit, write self-commenting code, and use a comparison to force to a Boolean.<br />\n<code>{messageCount &gt; 0 &amp;&amp; &lt;div&gt;You have messages!&lt;/div&gt;}</code></p>\n</li>\n<li><p>I'm more comfortable handling falsiness myself with a ternary --<br />\n<code>{messageCount ? &lt;div&gt;You have messages!&lt;/div&gt; : false}</code></p>\n</li>\n</ul>\n<p>Same deal in Typescript: If you have a function that returns a boolean (or you're assigning a value to a boolean variable), you [usually] can't return/assign a boolean-y value; it has to be a strongly typed boolean. This means, <strong>iff <code>myObject</code> is strongly typed</strong>, <code>return !myObject;</code> works for a function returning a boolean, but <code>return myObject;</code> doesn't. You have to <code>return !!myObject</code> to match Typescript's expectations.</p>\n<blockquote>\n<p>The exception for Typescript? If <code>myObject</code> was an <code>any</code>, you're back in JavaScript's Wild West and can return it without <code>!!</code>, even if your return type is a boolean.</p>\n</blockquote>\n<p>Keep in mind that <strong>these <em>are JSX &amp; Typescript conventions</em>, not ones inherent to JavaScript</strong>.</p>\n<p>But if you see strange <code>0</code>s in your rendered JSX, think loose falsy management.</p>\n"},{"score":3,"body":"<p>Some operators in JavaScript perform implicit type conversions, and are sometimes\nused for type conversion.</p>\n\n<p>The unary <code>!</code> operator converts its operand to a boolean and negates it.</p>\n\n<p>This fact lead to the following idiom that you can see in your source code:</p>\n\n<pre><code>!!x // Same as Boolean(x). Note double exclamation mark\n</code></pre>\n"},{"score":9,"body":"<p><code>!!x</code> is shorthand for <code>Boolean(x)</code></p>\n\n<p>The first bang forces the js engine to run <code>Boolean(x)</code> but also has the side effect of inverting the value.  So the second bang undoes the side effect.</p>\n"},{"score":10,"body":"<p>The <code>if</code> and <code>while</code> statements and the <code>?</code> operator use truth values to determine which branch of code to run. For example, zero and NaN numbers and the empty string are false, but other numbers and strings are true. Objects are true, but the undefined value and <code>null</code> are both false.</p>\n\n<p>The double negation operator <code>!!</code> calculates the truth value of a value. It's actually two operators, where <code>!!x</code> means <code>!(!x)</code>, and behaves as follows:</p>\n\n<ul>\n<li>If <code>x</code> is a false value, <code>!x</code> is <code>true</code>, and <code>!!x</code> is <code>false</code>.</li>\n<li>If <code>x</code> is a true value, <code>!x</code> is <code>false</code>, and <code>!!x</code> is <code>true</code>.</li>\n</ul>\n\n<p>When used at the top level of a Boolean context (<code>if</code>, <code>while</code>, or <code>?</code>), the <code>!!</code> operator is behaviorally a no-op. For example, <code>if (x)</code> and <code>if (!!x)</code> mean the same thing.</p>\n\n<h2>Practical uses</h2>\n\n<p>However it has several practical uses.</p>\n\n<p>One use is to lossily compress an object to its truth value, so that your code isn't holding a reference to a big object and keeping it alive. Assigning <code>!!some_big_object</code> to a variable instead of <code>some_big_object</code> lets go of it for the garbage collector. This is useful for cases that produce either an object or a false value such as <code>null</code> or the undefined value, such as browser feature detection.</p>\n\n<p>Another use, which I mentioned in an <a href=\"https://stackoverflow.com/a/35525827/2738262\">answer about C's corresponding <code>!!</code> operator</a>, is with \"lint\" tools that look for common typos and print diagnostics. For example, in both C and JavaScript, a few common typos for Boolean operations produce other behaviors whose output isn't quite as Boolean:</p>\n\n<ul>\n<li><code>if (a = b)</code> is assignment followed by use of the truth value of <code>b</code>; <code>if (a == b)</code> is an equality comparison.</li>\n<li><code>if (a &amp; b)</code> is a bitwise AND; <code>if (a &amp;&amp; b)</code> is a logical AND. <code>2 &amp; 5</code> is <code>0</code> (a false value); <code>2 &amp;&amp; 5</code> is true.</li>\n</ul>\n\n<p>The <code>!!</code> operator reassures the lint tool that what you wrote is what you meant: do this operation, then take the truth value of the result.</p>\n\n<p>A third use is to produce logical XOR and logical XNOR. In both C and JavaScript, <code>a &amp;&amp; b</code> performs a logical AND (true if both sides are true), and <code>a &amp; b</code> performs a bitwise AND. <code>a || b</code> performs a logical OR (true if at least one are true), and <code>a | b</code> performs a bitwise OR. There's a bitwise XOR (exclusive OR) as <code>a ^ b</code>, but there's no built-in operator for logical XOR (true if exactly one side is true). You might, for example, want to allow the user to enter text in exactly one of two fields. What you can do is convert each to a truth value and compare them: <code>!!x !== !!y</code>.</p>\n"},{"score":19,"body":"<p>I think worth mentioning is, that a condition combined with logical AND/OR will not return a boolean value but last success or first fail in case of &amp;&amp; and \nfirst success or last fail in case of || of condition chain.</p>\n\n<pre><code>res = (1 &amp;&amp; 2); // res is 2\nres = (true &amp;&amp; alert) // res is function alert()\nres = ('foo' || alert) // res is 'foo'\n</code></pre>\n\n<p>In order to cast the condition to a true boolean literal we can use the double negation:</p>\n\n<pre><code>res = !!(1 &amp;&amp; 2); // res is true\nres = !!(true &amp;&amp; alert) // res is true\nres = !!('foo' || alert) // res is true\n</code></pre>\n"},{"score":3,"body":"<p>Use logical not operator two times<br>\n<strong>it means !true= false<br>\n and  !!true = true</strong></p>\n"},{"score":8,"body":"<p>I just wanted to add that</p>\n\n<pre><code>if(variableThing){\n  // do something\n}\n</code></pre>\n\n<p>is the same as</p>\n\n<pre><code>if(!!variableThing){\n  // do something\n}\n</code></pre>\n\n<p>But this can be an issue when something is undefined.</p>\n\n<pre><code>// a === undefined, b is an empty object (eg. b.asdf === undefined)\nvar a, b = {};\n\n// Both of these give error a.foo is not defined etc.\n// you'd see the same behavior for !!a.foo and !!b.foo.bar\n\na.foo \nb.foo.bar\n\n// This works -- these return undefined\n\na &amp;&amp; a.foo\nb.foo &amp;&amp; b.foo.bar\nb &amp;&amp; b.foo &amp;&amp; b.foo.bar\n</code></pre>\n\n<p>The trick here is the chain of <code>&amp;&amp;</code>s will return <strong>the first falsey value</strong> it finds -- and this can be fed to an if statement etc.  So if b.foo is undefined, it will return undefined and skip the <code>b.foo.bar</code> statement, and we get no error.</p>\n\n<p>The above return undefined but if you have an empty string, false, null, 0, undefined those values will return and soon as we encounter them in the chain -- <code>[]</code> and <code>{}</code> are both \"truthy\" and we will continue down the so-called \"&amp;&amp; chain\" to the next value to the right.</p>\n\n<p><strong>P.S.</strong> Another way of doing the same thing is <code>(b || {}).foo</code>, because if b is undefined then <code>b || {}</code> will be <code>{}</code>, and you'll be accessing a value in an empty object (no error) instead of trying to access a value within \"undefined\" (causes an error).  So, <code>(b || {}).foo</code> is the same as <code>b &amp;&amp; b.foo</code> and <code>((b || {}).foo || {}).bar</code> is the same as <code>b &amp;&amp; b.foo &amp;&amp; b.foo.bar</code>.</p>\n"},{"score":5,"body":"<p>After seeing all these great answers, I would like to add another reason for using  <code>!!</code>. Currenty I'm working in Angular 2-4 (TypeScript) and I want to return a boolean as <code>false</code> when my user is not authenticated. If he isn't authenticated, the token-string would be <code>null</code> or <code>\"\"</code>. I can do this by using the next block of code:</p>\n\n<pre><code>public isAuthenticated(): boolean {\n   return !!this.getToken();\n}\n</code></pre>\n"},{"score":2,"body":"<p><code>!!</code> is similar to using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean\" rel=\"nofollow noreferrer\"><em>Boolean constructor</em></a>, or arguably more like the <a href=\"https://www.w3schools.com/js/js_booleans.asp\" rel=\"nofollow noreferrer\"><em>Boolean function.</em></a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log(Boolean(null)); // Preffered over the Boolean object\r\n\r\nconsole.log(new Boolean(null).valueOf()); // Not recommended for coverting non-boolean values\r\n\r\nconsole.log(!!null); // A hacky way to omit calling the Boolean function, but essentially does the same thing. \r\n\r\n\r\n// The context you saw earlier (your example)\r\nvar vertical;\r\n\r\nfunction Example(vertical)\r\n{\r\n        this.vertical = vertical !== undefined ? !!vertical : \r\n        this.vertical; \r\n        // Let's break it down: If vertical is strictly not undefined, return the boolean value of vertical and set it to this.vertical. If not, don't set a value for this.vertical (just ignore it and set it back to what it was before; in this case, nothing).   \r\n\r\n        return this.vertical;\r\n}\r\n\r\nconsole.log( \"\\n---------------------\" )\r\n\r\n// vertical is currently undefined\r\n\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical\r\n\r\nvertical = 12.5; // set vertical to 12.5, a truthy value.\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical which happens to be true anyway\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical\r\n\r\nvertical = -0; // set vertical to -0, a falsey value.\r\nconsole.log(new Example(vertical).vertical); // The falsey or truthy value of this.vertical which happens to be false either way\r\nconsole.log(!!new Example(vertical).vertical); // Coerced value of this.vertical</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>Falsey values</em> in javascript <strong>coerce</strong> to <em>false</em>, and <em>truthy values</em> <strong>coerce</strong> to <em>true.</em> Falsey and truthy values can also be used in <code>if</code> statements and will essentially \"map\" to their corresponding boolean value. However, you will probably not find yourself having to use proper boolean values often, as they mostly differ in output (return values). </p>\n\n<blockquote>\n  <p>Although this may seem similar to casting, realistically this is likely a <em>mere</em> coincidence and is not 'built' or purposely made for and like a boolean cast. So let's not call it that.</p>\n</blockquote>\n\n<hr />\n\n<h3>Why and how it works</h3>\n\n<p>To be concise, it looks something like this: <code>! ( !null )</code>. Whereas, <code>null</code> is <strong>falsey</strong>, so <code>!null</code> would be <strong>true</strong>. Then <code>!true</code> would be <strong>false</strong> and it would essentially <em>invert back</em> to what it was before, \nexcept this time as a <em>proper boolean value</em> (or even <em>vice versa</em> with <em>truthy values</em>  like <code>{}</code> or <code>1</code>).   </p>\n\n<p><br /></p>\n\n<h3>Going back to your example</h3>\n\n<p>Overall, the context that you saw simply adjusts <code>this.vertical</code> depending on whether or not <code>vertical</code> is defined, and if so; it will be set to the resulting boolean value of vertical, otherwise it will not change. In other words, if <code>vertical</code> is defined; <code>this.vertical</code> will be set to the boolean value of it, otherwise, it will stay the same. I guess that in itself is an example of how you would use <code>!!</code>, and what it does.</p>\n\n<p><br /></p>\n\n<h3>Vertical I/O Example</h3>\n\n<p>Run this example and fiddle around with the vertical value in the input. See what the result coerces to so that you can fully understand your context's code. In the input, enter any valid javascript value.\n<strong>Remember to include the quotations if you are testing out a string.</strong> Don't mind the CSS and HTML code too much, simply run this snippet and play around with it. However, you might want to take a look at the non-DOM-related javascript code though (the use of the Example constructor and the vertical variable).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var vertical = document.getElementById(\"vertical\");\r\nvar p = document.getElementById(\"result\");\r\n\r\nfunction Example(vertical)\r\n{\r\n        this.vertical = vertical !== undefined ? !!vertical : \r\n        this.vertical;   \r\n\r\n        return this.vertical;\r\n}\r\n\r\ndocument.getElementById(\"run\").onclick = function()\r\n{\r\n\r\n  p.innerHTML = !!( new Example(eval(vertical.value)).vertical );\r\n  \r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input\r\n{\r\n  text-align: center;\r\n  width: 5em;\r\n} \r\n\r\nbutton \r\n{\r\n  margin: 15.5px;\r\n  width: 14em;\r\n  height: 3.4em;\r\n  color: blue;\r\n}\r\n\r\nvar \r\n{\r\n  color: purple;\r\n}\r\n\r\np {\r\n  margin: 15px;\r\n}\r\n\r\nspan.comment {\r\n  color: brown;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--Vertical I/O Example--&gt;\r\n&lt;h4&gt;Vertical Example&lt;/h4&gt;\r\n&lt;code id=\"code\"&gt;&lt;var class=\"var\"&gt;var&lt;/var&gt; vertical = &lt;input type=\"text\" id=\"vertical\" maxlength=\"9\" /&gt;; &lt;span class=\"comment\"&gt;// enter any valid javascript value&lt;/span&gt;&lt;/code&gt;\r\n&lt;br /&gt;\r\n&lt;button id=\"run\"&gt;Run&lt;/button&gt;\r\n&lt;p id=\"result\"&gt;...&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":19,"body":"<p><code>!!</code> it's using <code>NOT</code> operation twice together, <code>!</code> convert the value to a <code>boolean</code> and reverse it, here is a simple example to see how <code>!!</code> works:</p>\n\n<p>At first, the place you have:</p>\n\n<pre><code>var zero = 0;\n</code></pre>\n\n<p>Then you do <code>!0</code>, it will be converted to boolean and be evaluated to <code>true</code>, because 0 is <code>falsy</code>, so you get the reversed value and converted to boolean, so it gets evaluated to <code>true</code>.</p>\n\n<pre><code>!zero; //true\n</code></pre>\n\n<p>but we don't want the reversed <strong>boolean version</strong> of the value, so we can reverse it again to get our result! That's why we use another <code>!</code>.</p>\n\n<p>Basically, <code>!!</code> make us sure, the value we get is boolean, not falsy, truthy or string etc...</p>\n\n<p>So  it's like using <code>Boolean</code> function in javascript, but easy and shorter way to convert a value to boolean:</p>\n\n<pre><code>var zero = 0;\n!!zero; //false\n</code></pre>\n"},{"score":3,"body":"<p>Returns boolean value of a variable.</p>\n\n<p>Instead, <code>Boolean</code> class can be used.</p>\n\n<p>(please read code descriptions)</p>\n\n<pre><code>var X = \"test\"; // X value is \"test\" as a String value\nvar booleanX = !!X // booleanX is `true` as a Boolean value beacuse non-empty strings evaluates as `true` in boolean\nvar whatIsXValueInBoolean = Boolean(X) // whatIsXValueInBoolean is `true` again\nconsole.log(Boolean(X) === !!X) // writes `true`\n</code></pre>\n\n<p>Namely, <code>Boolean(X) = !!X</code> in use.</p>\n\n<p>Please check code snippet out below <strong>↓</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let a = 0\r\nconsole.log(\"a: \", a) // writes a value in its kind\r\nconsole.log(\"!a: \", !a) // writes '0 is NOT true in boolean' value as boolean - So that's true.In boolean 0 means false and 1 means true.\r\nconsole.log(\"!!a: \", !!a) // writes 0 value in boolean. 0 means false.\r\nconsole.log(\"Boolean(a): \", Boolean(a)) // equals to `!!a`\r\nconsole.log(\"\\n\") // newline\r\n\r\na = 1\r\nconsole.log(\"a: \", a)\r\nconsole.log(\"!a: \", !a)\r\nconsole.log(\"!!a: \", !!a) // writes 1 value in boolean\r\nconsole.log(\"\\n\") // newline\r\n\r\na = \"\"\r\nconsole.log(\"a: \", a)\r\nconsole.log(\"!a: \", !a) // writes '\"\" is NOT true in boolean' value as boolean - So that's true.In boolean empty strings, null and undefined values mean false and if there is a string it means true.\r\nconsole.log(\"!!a: \", !!a) // writes \"\" value in boolean\r\nconsole.log(\"\\n\") // newline\r\n\r\na = \"test\"\r\nconsole.log(\"a: \", a) // writes a value in its kind\r\nconsole.log(\"!a: \", !a)\r\nconsole.log(\"!!a: \", !!a) // writes \"test\" value in boolean\r\n\r\nconsole.log(\"Boolean(a) === !!a: \", Boolean(a) === !!a) // writes true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":9,"body":"<p>It forces all things to boolean. </p>\n\n<p>For example:</p>\n\n<pre><code>console.log(undefined); // -&gt; undefined\nconsole.log(!undefined); // -&gt; true\nconsole.log(!!undefined); // -&gt; false\n\nconsole.log('abc'); // -&gt; abc\nconsole.log(!'abc'); // -&gt; false\nconsole.log(!!'abc'); // -&gt; true\n\nconsole.log(0 === false); // -&gt; undefined\nconsole.log(!0 === false); // -&gt; false\nconsole.log(!!0 === false); // -&gt; true\n</code></pre>\n"},{"score":0,"body":"<p>Sometimes it is necessary to check whether we have a value in the function or not, and the amount itself is not important to us, but whether or not it matters.\nfor example we want to check ,if user has major or not and we have a function just like:</p>\n\n<pre><code>hasMajor(){return this.major}//it return \"(users major is)Science\" \n</code></pre>\n\n<p>but the answer is not important to us we just want to check it has a major or not and we need a boolean value(true or false) how we get it:</p>\n\n<p>just like this:</p>\n\n<pre><code>hasMajor(){ return !(!this.major)}\n</code></pre>\n\n<p>or as the same </p>\n\n<pre><code>hasMajor(){return !!this.major)}\n</code></pre>\n\n<p>if this.major has a value then <code>!this.major</code> return false but because the value has exits and we need to return true we use ! twice to return the correct answer <code>!(!this.major)</code></p>\n"},{"score":9,"body":"<p>This question has been answered quite thoroughly, but I'd like to add an answer that I hope is as simplified as possible, making the meaning of !! as simple to grasp as can be.</p>\n\n<p>Because javascript has what are called \"truthy\" and \"falsey\" values, there are expressions that when evaluated in other expressions will result in a true or false condition, even though the value or expression being examined is not actually <code>true</code> or <code>false</code>.</p>\n\n<p>For instance: </p>\n\n<pre><code>if (document.getElementById('myElement')) {\n    // code block\n}\n</code></pre>\n\n<p>If that element does in fact exist, the expression will evaluate as true, and the code block will be executed.</p>\n\n<p>However:</p>\n\n<pre><code>if (document.getElementById('myElement') == true) {\n    // code block\n}\n</code></pre>\n\n<p>...will NOT result in a true condition, and the code block will not be executed, even if the element does exist.  </p>\n\n<p>Why?  Because <code>document.getElementById()</code> is a \"truthy\" expression that will evaluate as true in this <code>if()</code> statement, but it is not an actual boolean value of <code>true</code>.</p>\n\n<p>The double \"not\" in this case is quite simple.  It is simply two <code>not</code>s back to back. </p>\n\n<p>The first one simply \"inverts\" the truthy or falsey value, resulting in an actual boolean type, and then the second one \"inverts\" it back again to it's original state, but now in an actual boolean value.  That way you have consistency:</p>\n\n<pre><code>if (!!document.getElementById('myElement')) {}\n</code></pre>\n\n<p>and </p>\n\n<pre><code>if (!!document.getElementById('myElement') == true) {}\n</code></pre>\n\n<p>will BOTH return true, as expected.</p>\n"},{"score":2,"body":"<p>To cast your JavaScript variables to boolean,</p>\n\n<pre><code>var firstname = \"test\";\n//type of firstname is string\nvar firstNameNotEmpty = !!firstname;\n//type of firstNameNotEmpty is boolean\n</code></pre>\n\n<p>javascript <strong>false</strong> for \"\",0,undefined and null</p>\n\n<p>javascript is <strong>true</strong> for number other then zero,not empty strings,{},[] and new Date()\nso,</p>\n\n<pre><code>!!(\"test\") /*is true*/\n!!(\"\") /*is false*/\n</code></pre>\n"},{"score":0,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const foo = 'bar';\nconsole.log(!!foo); // Boolean: true</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>! negates (inverts) a value AND always returns/ produces a boolean. So !'bar' would yield false (because 'bar' is truthy =&gt; negated + boolean = false). With the additional ! operator, the value is negated again, so false becomes true.</p>\n"}],"score":3290}