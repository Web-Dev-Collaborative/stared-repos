{"body":"<p>Is there a better way to engineer a <code>sleep</code> in JavaScript than the following <code>pausecomp</code> function (<a href=\"http://www.sean.co.uk/a/webdesign/javascriptdelay.shtm\" rel=\"noreferrer\">taken from here</a>)?</p>\n\n<pre><code>function pausecomp(millis)\n{\n    var date = new Date();\n    var curDate = null;\n    do { curDate = new Date(); }\n    while(curDate-date &lt; millis);\n}\n</code></pre>\n\n<p>This is not a duplicate of <a href=\"https://stackoverflow.com/questions/758688/sleep-in-javascript-delay-between-actions\">Sleep in JavaScript - delay between actions</a>; I want a <em>real sleep</em> in the middle of a function, and not a delay before a piece of code executes.</p>\n","title":"What is the JavaScript version of sleep()?","answers":[{"score":136,"body":"<p>For the love of $DEITY please do not make a busy-wait sleep function.  <code>setTimeout</code> and <code>setInterval</code> do everything you need.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var showHide = document.getElementById('showHide');\r\nsetInterval(() =&gt; {\r\n    showHide.style.visibility = \"initial\";\r\n    setTimeout(() =&gt; {\r\n        showHide.style.visibility = \"hidden\"\r\n    }, 1000);\r\n    ;\r\n}, 2000);   </code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"showHide\"&gt;Hello! Goodbye!&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Every two second interval hide text for one second. This shows how to use setInterval and setTimeout to show and hide text each second. </p>\n"},{"score":6,"body":"<p>You can't do a sleep like that in JavaScript, or, rather, you shouldn't. Running a sleep or a while loop will cause the user's browser to hang until the loop is done.</p>\n\n<p>Use a timer, as specified in the link you referenced. </p>\n"},{"score":684,"body":"<p>In JavaScript, I rewrite every function so that it can end as soon as possible. You want the browser back in control so it can make your DOM changes.</p>\n\n<p>Every time I've wanted a sleep in the middle of my function, I refactored to use a <code>setTimeout()</code>.</p>\n\n<h2>Edit</h2>\n\n<p>The infamous sleep, or delay, function within any language is much debated.  Some will say that there should always be a signal or callback to fire a given functionality, others will argue that sometimes an arbitrary moment of delay is useful.  I say that to each their own and one rule can never dictate anything in this industry.</p>\n\n<p>Writing a sleep function is simple and made even more usable with JavaScript Promises:</p>\n\n<pre><code>// sleep time expects milliseconds\nfunction sleep (time) {\n  return new Promise((resolve) =&gt; setTimeout(resolve, time));\n}\n\n// Usage!\nsleep(500).then(() =&gt; {\n    // Do something after the sleep!\n});\n</code></pre>\n"},{"score":21,"body":"<p>First:</p>\n\n<p>Define a function you want to execute like this:</p>\n\n<pre><code>function alertWorld(){\n  alert(\"Hello World\");\n}\n</code></pre>\n\n<p>Then schedule its execution with the setTimeout method:</p>\n\n<pre><code>setTimeout(alertWorld,1000)\n</code></pre>\n\n<p>Note two things</p>\n\n<ul>\n<li>the second argument is time in miliseconds</li>\n<li>as a first argument you have to pass just the name (reference) of the function, without the parenthesis</li>\n</ul>\n"},{"score":3,"body":"<p>This is really not a good idea, doing something like this would cause the entire page to freeze up while the system waited for your function to return.</p>\n"},{"score":180,"body":"<p>I agree with the other posters, a busy sleep is just a bad idea.</p>\n\n<p>However, setTimeout does not hold up execution, it executes the next line of the function immediately after the timeout is SET, not after the timeout expires, so that does not accomplish the same task that a sleep would accomplish.</p>\n\n<p>The way to do it is to breakdown your function in to before and after parts. </p>\n\n<pre><code>function doStuff()\n{\n  //do some things\n  setTimeout(continueExecution, 10000) //wait ten seconds before continuing\n}\n\nfunction continueExecution()\n{\n   //finish doing things after the pause\n}\n</code></pre>\n\n<p>Make sure your function names still accurately describe what each piece is doing (I.E. GatherInputThenWait and CheckInput, rather than funcPart1 and funcPart2)</p>\n\n<p><strong>Edit</strong> </p>\n\n<p>This method achieves the purpose of not executing the lines of code you decide until AFTER your timeout, while still returning control back to the client PC to execute whatever else it has queued up.</p>\n\n<p><strong>Further Edit</strong></p>\n\n<p>As pointed out in the comments this will absolutely NOT WORK in a loop. You could do some fancy (ugly) hacking to make it work in a loop, but in general that will just make for disastrous spaghetti code.</p>\n"},{"score":71,"body":"<p>If you're using jQuery, someone actually created a \"delay\" plugin that's nothing more than a wrapper for setTimeout:</p>\n\n<pre><code>// Delay Plugin for jQuery\n// - http://www.evanbot.com\n// - Â© 2008 Evan Byrne\n\njQuery.fn.delay = function(time,func){\n    this.each(function(){\n        setTimeout(func,time);\n    });\n\n    return this;\n};\n</code></pre>\n\n<p>You can then just use it in a row of function calls as expected:</p>\n\n<pre><code>$('#warning')\n.addClass('highlight')\n.delay(1000)\n.removeClass('highlight');\n</code></pre>\n"},{"score":8,"body":"<p>I have searched/googled quite a few webpages on javascript sleep/wait... and there is NO answer if you want javascript to \"RUN, DELAY, RUN\"... what most people got was either, \"RUN, RUN(useless stuff), RUN\" or \"RUN, RUN + delayed RUN\"....</p>\n\n<p>So I ate some burgers and got thinking:::\nhere is a solution that works... but you have to chop up your running codes...:::\nyes, I know, this is just an easier to read refactoring... still...</p>\n\n<p>//.........................................\n//example1:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setInterval\nvar i = 0;\n\nfunction run() {\n    //pieces of codes to run\n    if (i==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" is ran&lt;/p&gt;\"; }\n    if (i==5){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;all code segment finished running&lt;/p&gt;\"; clearInterval(t); } //end interval, stops run\n    i++; //segment of code finished running, next...\n}\n\nrun();\nt=setInterval(\"run()\",1000);\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//....................................\n//example2:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout\nvar i = 0;\n\nfunction run() {\n    //pieces of codes to run, can use switch statement\n    if (i==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(1000);}\n    if (i==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(2000);}\n    if (i==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\"; sleep(3000);}\n    if (i==3){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ i +\" ran&lt;/p&gt;\";} //stops automatically\n    i++;\n}\n\nfunction sleep(dur) {t=setTimeout(\"run()\",dur);} //starts flow control again after dur\n\nrun(); //starts\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//.................\nexample3:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout\nvar i = 0;\n\nfunction flow() {\n    run(i);\n    i++; //code segment finished running, increment i; can put elsewhere\n    sleep(1000);\n    if (i==5) {clearTimeout(t);} //stops flow, must be after sleep()\n}\n\nfunction run(segment) {\n    //pieces of codes to run, can use switch statement\n    if (segment==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n}\n\nfunction sleep(dur) {t=setTimeout(\"flow()\",dur);} //starts flow control again after dur\n\nflow(); //starts flow\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>//..............\nexample4:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"id1\"&gt;DISPLAY&lt;/div&gt;\n\n&lt;script&gt;\n//javascript sleep by \"therealdealsince1982\"; copyrighted 2009\n//setTimeout, switch\nvar i = 0;\n\nfunction flow() {\n    switch(i)\n    {\n        case 0:\n            run(i);\n            sleep(1000);\n            break;\n        case 1:\n            run(i);\n            sleep(2000);\n            break;\n        case 5:\n            run(i);\n            clearTimeout(t); //stops flow\n            break;\n        default:\n            run(i);\n            sleep(3000);\n            break;\n    }\n}\n\nfunction run(segment) {\n    //pieces of codes to run, can use switch statement\n    if (segment==0){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==1){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment==2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    if (segment &gt;2){document.getElementById(\"id1\").innerHTML= \"&lt;p&gt;code segment \"+ segment +\" is ran&lt;/p&gt;\"; }\n    i++; //current segment of code finished running, next...\n}\n\nfunction sleep(dur) {t=setTimeout(\"flow()\",dur);} //starts flow control again after dur\n\nflow(); //starts flow control for first time...\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":5,"body":"<p>For the specific case of wanting to space out a set of calls being executed by a loop, you can use something like the code below with prototype. Without prototype, you can substitute the delay function with setTimeout.</p>\n\n<pre><code>function itemHandler(item)\n{\n    alert(item);\n}\n\nvar itemSet = ['a','b','c'];\n\n// Each call to itemHandler will execute\n// 1 second apart\nfor(var i=0; i&lt;itemSet.length; i++)\n{\n    var secondsUntilExecution = i;\n    itemHandler.delay(secondsUntilExecution, item)\n}\n</code></pre>\n"},{"score":6,"body":"<p>One scenario where you might want a sleep() function rather than using setTimeout() is if you have a function responding to a user click that will ultimately end up opening a new i.e. popup window and you have initiated some processing that requires a short period to complete before the popup is displayed. Moving the open window into a closure means that it typically gets blocked by the browser.</p>\n"},{"score":852,"body":"<p>(See the <a href=\"https://stackoverflow.com/a/39914235/11236\">updated answer for 2016</a>)</p>\n\n<p>I think it's perfectly reasonable to want to perform an action, wait, then perform another action. If you are used to writing in multi-threaded languages, you probably have the idea of yielding execution for a set amount of time until your thread wakes up.</p>\n\n<p>The issue here is that JavaScript is a single-thread event-based model. While in a specific case, it might be nice to have the whole engine wait for a few seconds, in general it is bad practice. Suppose I wanted to make use of your functions while writing my own? When I called your method, my methods would all freeze up. If JavaScript could somehow preserve your function's execution context, store it somewhere, then bring it back and continue later, then sleep could happen, but that would basically be threading.</p>\n\n<p>So you are pretty much stuck with what others have suggested -- you'll need to break your code up into multiple functions.</p>\n\n<p>Your question is a bit of a false choice, then. There is no way to sleep in the way you want, nor should you pursue the solution you suggest.</p>\n"},{"score":48,"body":"<p>I've searched for sleep solution too (not for production code, only for dev/tests) and found this article:</p>\n\n<p><a href=\"http://narayanraman.blogspot.com/2005/12/javascript-sleep-or-wait.html\" rel=\"noreferrer\">http://narayanraman.blogspot.com/2005/12/javascript-sleep-or-wait.html</a></p>\n\n<p>...and here's another link with client-side solutions: <a href=\"http://www.devcheater.com/\" rel=\"noreferrer\">http://www.devcheater.com/</a></p>\n\n<p>Also, when you are calling <code>alert()</code>, your code will be paused too, while alert is shown -- need to find a way to not display alert but get the same effect. :)</p>\n"},{"score":6,"body":"<p>I can understand the purpose of a sleep function if you have to deal with synchronous execution. The setInterval and setTimeout functions create a parallel execution thread which returns the execution sequence back to the main program, which is ineffective if you have to wait for a given result. Of course one may use events and handlers, but in some cases is not what is intended.</p>\n"},{"score":18,"body":"<p>Better solution to make things look like what most people want is to use an anonymous function:</p>\n\n<pre><code>alert('start');\nvar a = 'foo';\n//lots of code\nsetTimeout(function(){  //Beginning of code that should run AFTER the timeout\n    alert(a);\n    //lots more code\n},5000);  // put the timeout here\n</code></pre>\n\n<p>This is probably the closest you'll get to something that simply does what you want.</p>\n\n<p>Note, if you need multiple sleeps this can get ugly in a hurry and you might actually need to rethink your design.</p>\n"},{"score":4,"body":"<p>First of all - setTimeout and setInterval is what <strong>should</strong> be used, because of javascript's callback-ish nature. If you want to use <code>sleep()</code> it's the control flow or the architecture of your code that is incorrect.</p>\n\n<p>Having said that I suppose I still can help with two implementation of a sleep.</p>\n\n<ol>\n<li><p>faking synchronous run off the top of my head:</p>\n\n<pre><code>//a module to do taht //dual-license: MIT or WTF [you can use it anyhow and leave my nickname in a comment if you want to]\nvar _=(function(){\n var queue=[];\n var play=function(){\n   var go=queue.shift();\n     if(go){if(go.a){go.f();play();}else{setTimeout(play,go.t);}}\n   }\n return {\n   go:function(f){\n    queue.push({a:1,f:f});\n    },\n   sleep:function(t){\n    queue.push({a:0,t:t});\n    },\n   playback:play \n }\n})();\n</code></pre>\n\n<p>[making playback automatic should also be possible]</p>\n\n<pre><code>//usage\n\n_.go(function(){\n\n//your code\nconsole.log('first');\n\n});\n\n\n_.sleep(5000);\n\n_.go(function(){\n\n//your code\nconsole.log('next');\n\n});\n\n//this triggers the simulation\n_.playback();\n</code></pre></li>\n<li><p>real synchronous run</p></li>\n</ol>\n\n<p>I gave it a lot of thought one day and the only idea I had for a true sleep in javascript is technical.</p>\n\n<p>a sleep function would have to be a <strong>synchronous</strong> AJAX call with a timeout set to the sleep value. That's all and an only way to have a real <code>sleep()</code></p>\n"},{"score":1,"body":"<p>If you want to sleep an anonymous function like one you've created as a handler, I recommend the following:</p>\n\n<pre><code>function()\n{\nif (!wait_condition)\n    {\n    setTimeout(arguments.callee, 100, /*comma-separated arguments here*/);\n    }\n//rest of function\n}\n</code></pre>\n\n<p>This code says \"If the wait condition has not yet been satisfied, call this function again with these arguments.\" I've used this method to pass in the same arguments to my handlers, effectively making this code a non-polling sleep() (which only works at the start of your function).</p>\n"},{"score":111,"body":"<p>I know this is a bit of an old question, but if (like me) you're using Javascript with Rhino, you can use...</p>\n\n<pre><code>try\n{\n  java.lang.Thread.sleep(timeInMilliseconds);\n}\ncatch (e)\n{\n  /*\n   * This will happen if the sleep is woken up - you might want to check\n   * if enough time has passed and sleep again if not - depending on how\n   * important the sleep time is to you.\n   */\n}\n</code></pre>\n"},{"score":4,"body":"<p>Code taken from this <a href=\"http://www.daniweb.com/web-development/javascript-dhtml-ajax/threads/47199\" rel=\"nofollow noreferrer\">link</a> will not freeze comp. But it works only on ff.</p>\n\n<pre><code>/**\n * Netscape compatible WaitForDelay function.\n * You can use it as an alternative to Thread.Sleep() in any major programming language\n * that support it while JavaScript it self doesn't have any built-in function to do such a thing.\n * parameters:\n * (Number) delay in millisecond\n */\nfunction nsWaitForDelay(delay) {\n    /**\n     * Just uncomment this code if you're building an extention for Firefox.\n     * Since FF3, we'll have to ask for user permission to execute XPCOM objects.\n     */\n    netscape.security.PrivilegeManager.enablePrivilege(\"UniversalXPConnect\");\n\n    // Get the current thread.\n    var thread = Components.classes[\"@mozilla.org/thread-manager;1\"].getService(Components.interfaces.nsIThreadManager).currentThread;\n\n    // Create an inner property to be used later as a notifier.\n    this.delayed = true;\n\n    /* Call JavaScript setTimeout function\n      * to execute this.delayed = false\n      * after it finish.\n      */\n    setTimeout(\"this.delayed = false;\", delay);\n\n    /**\n     * Keep looping until this.delayed = false\n     */\n    while (this.delayed) {\n        /**\n         * This code will not freeze your browser as it's documented in here:\n         * https://developer.mozilla.org/en/Code_snippets/Threads#Waiting_for_a_background_task_to_complete\n         */\n        thread.processNextEvent(true);\n    }\n}\n</code></pre>\n"},{"score":1,"body":"<p>A method of an object that needs to use a \"sleep\" method such as the following:</p>\n\n<pre><code>function SomeObject() {\n    this.SomeProperty = \"xxx\";\n    return this;\n}\nSomeObject.prototype.SomeMethod = function () {\n    this.DoSomething1(arg1);\n    sleep(500);\n    this.DoSomething2(arg1);\n}\n</code></pre>\n\n<p>Can almost be translated to:</p>\n\n<pre><code>function SomeObject() {\n    this.SomeProperty = \"xxx\";\n    return this;\n}\nSomeObject.prototype.SomeMethod = function (arg1) {\n    var self = this;\n    self.DoSomething1(arg1);\n    setTimeout(function () {\n        self.DoSomething2(arg1);\n    }, 500);\n}\n</code></pre>\n\n<p>The difference is that the operation of \"SomeMethod\" returns before the operation \"DoSomething2\" is executed. The caller of \"SomeMethod\" cannot depend on this. Since the \"Sleep\" method does not exists, I use the later method and design my code accordingly.</p>\n\n<p>I hope this helps.</p>\n"},{"score":0,"body":"<p>A good alternative in some situations is to display a top-level message panel to stop user interaction, and then hide it again when you get the result you're waiting for (asynchronously). That allows the browser to get on with background tasks, but pauses the workflow until you've got your result back.</p>\n"},{"score":30,"body":"<p>Here you go.  As the code says, don't be a bad dev and use this on websites.  It's a development utility function.</p>\n\n<pre><code>// Basic sleep function based on ms.\n// DO NOT USE ON PUBLIC FACING WEBSITES.\nfunction sleep(ms) {\n    var unixtime_ms = new Date().getTime();\n    while(new Date().getTime() &lt; unixtime_ms + ms) {}\n}\n</code></pre>\n"},{"score":4,"body":"<p>Adding my two bits. I needed a busy-wait for testing purposes. I didn't want to split the code as that would be a lot of work, so a simple for did it for me. </p>\n\n<pre><code>for (var i=0;i&lt;1000000;i++){                    \n     //waiting\n  }\n</code></pre>\n\n<p>I don't see any downside in doing this and it did the trick for me.</p>\n"},{"score":6,"body":"<p>It can be done using Java's sleep method. I've tested it in FF and IE and it doesn't lock the computer, chew up resources, or cause endless server hits. Seems like a clean solution to me.</p>\n\n<p>First you have to get Java loaded up on the page and make its methods available. To do that, I did this:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\n  function load() {\n    var appletRef = document.getElementById(\"app\");\n    window.java = appletRef.Packages.java;\n  } // endfunction\n\n&lt;/script&gt;\n\n&lt;body onLoad=\"load()\"&gt;\n\n&lt;embed id=\"app\" code=\"java.applet.Applet\" type=\"application/x-java-applet\" MAYSCRIPT=\"true\" width=\"0\" height=\"0\" /&gt;\n</code></pre>\n\n<p>Then, all you have to do when you want a painless pause in your JS is:</p>\n\n<pre><code>java.lang.Thread.sleep(xxx)\n</code></pre>\n\n<p>Where xxx is time in milliseconds. In my case (by way of justification), this was part of back-end order fulfillment at a very small company and I needed to print an invoice that had to be loaded from the server. I did it by loading the invoice (as a webpage) into an iFrame and then printing the iFrame. Of course, I had to wait until the page was fully loaded before I could print, so the JS had to pause. I accomplished this by having the invoice page (in the iFrame) change a hidden form field on the parent page with the onLoad event.  And the code on the parent page to print the invoice looked like this (irrelevant parts cut for clarity):</p>\n\n<pre><code>var isReady = eval('document.batchForm.ready');\nisReady.value=0;\n\nframes['rpc_frame'].location.href=url;\n\nwhile (isReady.value==0) {\n  java.lang.Thread.sleep(250);\n} // endwhile\n\nwindow.frames['rpc_frame'].focus();\nwindow.frames['rpc_frame'].print();\n</code></pre>\n\n<p>So the user pushes the button, the script loads the invoice page, then waits, checking every quarter second to see if the invoice page is finished loading, then pops up the print dialog for the user to send it to the printer.  QED.</p>\n"},{"score":-7,"body":"<p>Or just create this:</p>\n\n<pre><code>function yourFunction(){\n\n   //do something\n   setInterval(myFunc(),1000);\n   //do something else\n\n}\n\nfunction myFunc(){\n   return;\n}\n</code></pre>\n\n<p>this will just wait the interval specified and call the function which will just do nothing.</p>\n"},{"score":11,"body":"<p>For browsers, I agree that setTimeout and setInterval are the way to go.</p>\n\n<p>But for server-side code, it may require a blocking function (for example, so you can effectively have thread synchronization).</p>\n\n<p>If you're using node.js and meteor, you may have run into the limitations of using setTimeout in a fiber. Here is the code for server-side sleep.</p>\n\n<pre><code>var Fiber = require('fibers');\n\nfunction sleep(ms) {\n    var fiber = Fiber.current;\n    setTimeout(function() {\n        fiber.run();\n    }, ms);\n    Fiber.yield();\n}\n\nFiber(function() {\n    console.log('wait... ' + new Date);\n    sleep(1000);\n    console.log('ok... ' + new Date);\n}).run();\nconsole.log('back in main');\n</code></pre>\n\n<p>See: <a href=\"https://github.com/laverdet/node-fibers#sleep\" rel=\"noreferrer\">https://github.com/laverdet/node-fibers#sleep</a></p>\n"},{"score":4,"body":"<p>If you right a sleep function like this</p>\n\n<pre><code>var sleep = function(period, decision, callback){\n    var interval = setInterval(function(){\n        if (decision()) {\n            interval = clearInterval(interval);\n            callback();\n        }\n    }, period);\n}\n</code></pre>\n\n<p>and you have a asynchronous function to call multiple times</p>\n\n<pre><code>var xhr = function(url, callback){\n    // make ajax request\n    // call callback when request fulfills\n}\n</code></pre>\n\n<p>And you setup your project like this:</p>\n\n<pre><code>var ready = false;\n\nfunction xhr1(){\n    xhr(url1, function(){ ready = true;});  \n}\nfunction xhr2(){\n    xhr(url2, function(){ ready = true; }); \n}\nfunction xhr3(){\n    xhr(url3, function(){ ready = true; }); \n}\n</code></pre>\n\n<p>Then you can do this:</p>\n\n<pre><code>xhr1();\nsleep(100, function(){ return done; }, xhr2);\nsleep(100, function(){ return done; }, xhr3);\nsleep(100, function(){ return done; }, function(){\n    // do more\n});\n</code></pre>\n\n<p>Instead of endless callback indentation like this:</p>\n\n<pre><code>xhr(url1, function(){\n    xhr2(url2, function(){\n        xhr3(url3, function(){\n            // do more\n        });\n    });\n});\n</code></pre>\n"},{"score":315,"body":"<p><strong>Only for debug/dev</strong> , I post this if it's useful to someone</p>\n\n<p>Interesting stuff, in Firebug ( &amp; probably other js consoles ), nothing happen after hitting enter, only after the sleep duration specified (...)</p>\n\n<pre><code>function sleepFor( sleepDuration ){\n    var now = new Date().getTime();\n    while(new Date().getTime() &lt; now + sleepDuration){ /* do nothing */ } \n}\n</code></pre>\n\n<p>Example of use:</p>\n\n<pre><code>function sleepThenAct(){ sleepFor(2000); console.log(\"hello js sleep !\"); }\n</code></pre>\n"},{"score":-5,"body":"<pre><code>var waitTillSomethingHappens = function(){  \n    if(somethingHappened == 1)  \n    {  \n        alert('Something Happened get out of sleep');  \n    }\n    else\n    {  \n    setTimeout(waitTillSomethingHappens,1000);  \n    }  \n};\n</code></pre>\n"},{"score":0,"body":"<p>I use the multithread HTML5 Worker which will be able to abort an synchronous XMLHttpRequest pointing to an unresponsive URL. This does not block the browser.</p>\n\n<p><a href=\"https://gist.github.com/el-gringo/6990785\" rel=\"nofollow\">https://gist.github.com/el-gringo/6990785</a></p>\n"},{"score":0,"body":"<p>The short answer is <em>NO</em>, not in javascript by itself.  You solution seems to be the only way to not return control back to the environment.</p>\n\n<p>This is necessary if the environment does not support events.  They probably wouldn't support the settimeout either.</p>\n\n<p>settimeout is definitely the best way if you are in an event driven environment suchas a browser or node.js.</p>\n"},{"score":7,"body":"<pre><code>function sleep(milliseconds) {\n  var start = new Date().getTime();\n  for (var i = 0; i &lt; 1e7; i++) {\n    if ((new Date().getTime() - start) &gt; milliseconds){\n      break;\n    }\n  }\n}\n</code></pre>\n"},{"score":-2,"body":"<p>I'm sure there is a million ways to do this one better, but I thought I would give it a try by creating an object:</p>\n\n<pre><code>// execute code consecutively with delays (blocking/non-blocking internally)\nfunction timed_functions() \n{\nthis.myfuncs = [];\nthis.myfuncs_delays = []; // mirrors keys of myfuncs -- values stored are custom delays, or -1 for use default\nthis.myfuncs_count = 0; // increment by 1 whenever we add a function\nthis.myfuncs_prev   = -1; // previous index in array\nthis.myfuncs_cur    = 0; // current index in array\nthis.myfuncs_next  = 0; // next index in array\nthis.delay_cur     = 0; // current delay in ms\nthis.delay_default = 0; // default delay in ms\nthis.loop = false;      // will this object continue to execute when at end of myfuncs array?\nthis.finished = false;  // are we there yet?\nthis.blocking = true;   // wait till code completes before firing timer?\nthis.destroy = false;   // &lt;advanced&gt; destroy self when finished\n\n\nthis.next_cycle = function() {\nvar that  = this;\nvar mytimer = this.delay_default;\n\nif(this.myfuncs_cur &gt; -1)\nif(this.myfuncs_delays[this.myfuncs_cur] &gt; -1)\nmytimer = this.myfuncs_delays[this.myfuncs_cur];\n\nconsole.log(\"fnc:\" + this.myfuncs_cur);\nconsole.log(\"timer:\" + mytimer);\nconsole.log(\"custom delay:\" + this.myfuncs_delays[this.myfuncs_cur]);\nsetTimeout(function() {\n// times up! next cycle...\nthat.cycle(); \n\n}, mytimer);\n}\n\nthis.cycle = function() {\n\n// now check how far we are along our queue.. is this the last function?\nif(this.myfuncs_next + 1 &gt; this.myfuncs_count)\n{\nif(this.loop)\n{\nconsole.log('looping..');\nthis.myfuncs_next = 0;\n}\nelse\nthis.finished = true;\n}\n\n\n// first check if object isn't finished\nif(this.finished)\nreturn false;\n\n// HANDLE NON BLOCKING //\nif(this.blocking != true) // blocking disabled\n{\nconsole.log(\"NOT BLOCKING\");\nthis.next_cycle();\n}\n\n\n// set prev = current, and current to next, and next to new next\nthis.myfuncs_prev = this.myfuncs_cur;\nthis.myfuncs_cur  = this.myfuncs_next;\nthis.myfuncs_next++; \n\n// execute current slot\nthis.myfuncs[this.myfuncs_cur]();\n\n\n\n\n// HANDLE BLOCKING\nif(this.blocking == true)  // blocking enabled\n{\nconsole.log(\"BLOCKING\");\nthis.next_cycle();\n}\n\n\n\n\nreturn true;\n};\n\n// adders \nthis.add = {\nthat:this,\n\nfnc: function(aFunction) { \n// add to the function array\nvar cur_key = this.that.myfuncs_count++;\nthis.that.myfuncs[cur_key] = aFunction;\n// add to the delay reference array\nthis.that.myfuncs_delays[cur_key] = -1;\n}\n}; // end::this.add\n\n// setters\nthis.set = {\nthat:this, \n\ndelay:          function(ms)    {  \nvar cur_key = this.that.myfuncs_count - 1;\n// this will handle the custom delay array this.that.myfunc_delays\n// add a custom delay to your function container\n\nconsole.log(\"setting custom delay. key: \"+ cur_key + \" msecs: \" + ms);\nif(cur_key &gt; -1)\n{ \nthis.that.myfuncs_delays[cur_key] = ms; \n}\n\n// so now we create an entry on the delay variable\n},  \n\ndelay_cur:      function(ms)    { this.that.delay_cur = ms;         },\ndelay_default:  function(ms)    { this.that.delay_default = ms;         },\nloop_on:          function()        { this.that.loop = true; }, \nloop_off:         function()        { this.that.loop = false; },\nblocking_on:      function()        { this.that.blocking = true; }, \nblocking_off:     function()        { this.that.blocking = false; },\n\nfinished:           function(aBool) { this.that.finished = true; }\n}; // end::this.set    \n\n\n// setters\nthis.get = {\nthat:this, \n\ndelay_default: function() { return this.that.delay_default; },\ndelay_cur:     function() { return this.that.delay_cur; }\n}; // end::this.get     \n\n} // end:::function timed_functions()\n</code></pre>\n\n<p>and use like:\n    // // // BEGIN :: TEST // // //</p>\n\n<pre><code>// initialize\nvar fncTimer = new timed_functions;\n\n// set some defaults\nfncTimer.set.delay_default(1000);\nfncTimer.set.blocking_on();\n// fncTimer.set.loop_on();\n// fncTimer.set.loop_off();\n\n\n// BEGIN :: ADD FUNCTIONS (they will fire off in order)\nfncTimer.add.fnc(function() {\n    console.log('plan a (2 secs)');\n});\nfncTimer.set.delay(2000); // set custom delay for previously added function\n\nfncTimer.add.fnc(function() {\n    console.log('hello world (delay 3 seconds)');\n});\nfncTimer.set.delay(3000);\n\nfncTimer.add.fnc(function() {\n    console.log('wait 4 seconds...');\n});\nfncTimer.set.delay(4000);\n\nfncTimer.add.fnc(function() {\n    console.log('wait 2 seconds');\n});\nfncTimer.set.delay(2000);\n\nfncTimer.add.fnc(function() {\n    console.log('finished.');\n});\n// END :: ADD FUNCTIONS\n\n\n// NOW RUN\nfncTimer.cycle(); // begin execution \n\n\n// // // END :: TEST // // //\n</code></pre>\n"},{"score":1,"body":"<p>You can use a closure call setTimeout() with incrementally larger values.</p>\n\n<pre><code>var items = ['item1', 'item2', 'item3'];\n\nfunction functionToExecute(item) {\n  console.log('function executed for item: ' + item);\n}\n\n$.each(items, function (index, item) {\n  var timeoutValue = index * 2000;\n  setTimeout(function() {\n    console.log('waited ' + timeoutValue + ' milliseconds');\n    functionToExecute(item);\n  }, timeoutValue);\n});\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>waited 0 milliseconds\nfunction executed for item: item1\nwaited 2000 milliseconds\nfunction executed for item: item2\nwaited 4000 milliseconds\nfunction executed for item: item3 \n</code></pre>\n"},{"score":2,"body":"<p>If you like an advise to not loss performance . <code>setTimeout</code> is your expected <code>sleep</code> . \nHowever , if you wanna a syntax where code  is \"divided in middle\" by <code>sleep</code>, we can do :  </p>\n\n<pre><code>sleep=function(tm,fn){\n   window.setTimeout(fn,tm);\n}\n</code></pre>\n\n<p>then , perpare functions as following : </p>\n\n<pre><code>var fnBeforeSleep=function(){\n\n //All codes before sleep\n\n}  \n\nvar fnAfterSleep=function(){\n\n //All codes after sleep\n\n}  \n</code></pre>\n\n<p>Then :</p>\n\n<pre><code>fnBeforeSleep();\nsleep(2000,\nfnAfterSleep);\n</code></pre>\n\n<h1>YEP! Ùsyntactically,It is very close to :</h1>\n\n<pre><code>fnBeforeSleep();\nsleep(2000); \nfnAfterSleep();\n</code></pre>\n"},{"score":11,"body":"<p>Most of the answers here are misguided or at the very least outdated. There is no reason javascript has to be single threaded, and indeed it isnt't. Today all the mainstream browsers support workers, before this was the case other javascript runtimes like Rhino and Node.js supported multithreading.</p>\n\n<p>'Javascript is single threaded' is not a valid answer. For example running a sleep function within a worker would not block any of the code running in the ui thread.</p>\n\n<p>In newer runtimes supporting generators and yield, one could bring similar functionality to the sleep function in a single threaded environment:</p>\n\n<pre><code>// This is based on the latest ES6 drafts.\n// js 1.7+ (SpiderMonkey/Firefox 2+) syntax is slightly different\n\n// run code you want to sleep here (ommit star if using js 1.7)\nfunction* main(){\n    for (var i = 0; i &lt; 10; i++) {\n        // to sleep for 10 milliseconds 10 times in a row\n        yield 10;\n    }\n\n    yield 5;\n    console.log('I just slept 5 milliseconds!');\n}\n\n// resume the given generator after ms milliseconds\nfunction resume(ms, generator){\n    setTimeout(function(){\n        // ommit .value if using js 1.7\n        var nextSleep = generator.next().value;\n        resume(nextSleep, generator);\n    }, ms);\n}\n\n// initialize generator and get first sleep for recursive function\nvar\n    generator = main(),\n    firstSleep = generator.next().value;\n\n// initialize recursive resume function\nresume(firstSleep, generator);\n</code></pre>\n\n<p>This imitation of sleep is different from a true sleep function as it does not block the thread. It is simply sugar on top of javascript's current setTimeout function. This functionality type has been implemented in <a href=\"http://taskjs.org/\" rel=\"noreferrer\">Task.js</a> and should work today in Firefox.</p>\n"},{"score":2,"body":"<p>Embrace the asyncronous nature of javascript!</p>\n\n<p>All of the following will return immediately but have a single place for putting code you want to run after something has happened.  </p>\n\n<p>The methods I've outlined here are all for different use cases and are roughly ordered in terms of their complexity.</p>\n\n<p>The different things are as follows:</p>\n\n<ul>\n<li>Waiting for some condition to become true</li>\n<li>Waiting for a set of methods to finish (in any order) before calling a single callback</li>\n<li>Running a series of asyncronous methods with shared state in a particular order before calling a callback</li>\n</ul>\n\n<p><strong>Wait</strong></p>\n\n<p>Waiting to see if some condition is true is usedful where there is no accessible callback to tell you when something has finished executing.</p>\n\n<p>This is a pretty basic implementation that assumes that the condition will become true at some point.  With a few tweaks it could be expanded to be even more useful (eg by setting a call limit).  (I only wrote this one yesterday!)</p>\n\n<pre><code>function waitFor(predicate, successCallback) {\n    setTimeout(function () {\n        var result = predicate();\n        if (result !== undefined)\n            successCallback(result);\n        else\n            waitFor(predicate, successCallback);\n    }, 100);\n}\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>    beforeEach(function (done) {\n        selectListField('A field');\n\n        waitFor(function () {\n            var availableOptions = stores.scrapeStore(optionStore);\n            if (availableOptions.length !== 0)\n                return availableOptions;\n        }, done);\n    });\n</code></pre>\n\n<p>Here I'm calling something which loads an extjs 'store' and waiting til the store contains something before continuing (the beforeEach is a jasmine test framework thing).</p>\n\n<p><strong>Wait for several things to complete</strong></p>\n\n<p>Another thing I needed to do was run a single callback after a load of different methods finished.  You can do that like this:</p>\n\n<pre><code>createWaitRunner = function (completionCallback) {\n    var callback = completionCallback;\n    var completionRecord = [];\n    var elements = 0;\n\n    function maybeFinish() {\n        var done = completionRecord.every(function (element) {\n            return element === true\n        });\n\n        if (done)\n            callback();\n    }\n\n    return {\n        getNotifier: function (func) {\n            func = func || function (){};\n\n            var index = elements++;\n            completionRecord[index] = false;\n\n            return function () {\n                func.applyTo(arguments);\n                completionRecord[index] = true;\n                maybeFinish();\n            }\n        }\n    }\n};\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>    var waiter = createWaitRunner(done);\n\n    filterList.bindStore = waiter.getNotifier();\n    includeGrid.reconfigure = waiter.getNotifier(function (store) {\n        includeStore = store;\n    });\n    excludeGrid.reconfigure = waiter.getNotifier(function (store) {\n        excludeStore = store;\n    });\n</code></pre>\n\n<p>You either just wait for the notifications or can also wrap other functions which use the values passed to the function.  When all the methods are called then <code>done</code> will be run.</p>\n\n<p><strong>Running asynchronous methods in order</strong></p>\n\n<p>I've used a different approach when I had a series of asynchronous methods to call in a row (again in tests).  This is somewhat similar to something you can get in <a href=\"https://github.com/caolan/async\" rel=\"nofollow\">the Async library</a> - series does about the same thing and I had a little read of that library first to see if it did what I wanted.  I think mine has a nicer api for working with tests though (+ it was fun to implement!).</p>\n\n<pre><code>//provides a context for running asyncronous methods syncronously\n//the context just provides a way of sharing bits of state\n//use run to execute the methods.  These should be methods that take a callback and optionally the context as arguments\n//note the callback is provided first so you have the option of just partially applying your function to the arguments you want\n//instead of having to wrap even simple functions in another function\n\n//when adding steps you can supply either just a function or a variable name and a function\n//if you supply a variable name then the output of the function (which should be passed into the callback) will be written to the context\ncreateSynchronisedRunner = function (doneFunction) {\n    var context = {};\n\n    var currentPosition = 0;\n    var steps = [];\n\n    //this is the loop. it is triggered again when each method finishes\n    var runNext = function () {\n        var step = steps[currentPosition];\n        step.func.call(null,\n                       function (output) {\n                           step.outputHandler(output);\n                           currentPosition++;\n\n                           if (currentPosition === steps.length)\n                               return;\n\n                           runNext();\n                       }, context);\n    };\n\n    var api = {};\n\n    api.addStep = function (firstArg, secondArg) {\n        var assignOutput;\n        var func;\n\n        //overloads\n        if (secondArg === undefined) {\n            assignOutput = function () {\n            };\n            func = firstArg;\n        }\n        else {\n            var propertyName = firstArg;\n            assignOutput = function (output) {\n                context[propertyName] = output;\n            };\n            func = secondArg;\n        }\n\n        steps.push({\n                       func: func,\n                       outputHandler: assignOutput\n                   });\n    };\n\n    api.run = function (completedAllCallback) {\n        completedAllCallback = completedAllCallback || function(){};\n\n        var lastStep = steps[steps.length - 1];\n        var currentHandler = lastStep.outputHandler;\n        lastStep.outputHandler = function (output) {\n            currentHandler(output);\n            completedAllCallback(context);\n            doneFunction();\n        };\n\n        runNext();\n    };\n\n    //this is to support more flexible use where you use a done function in a different scope to initialisation\n    //eg the done of a test but create in a beforeEach\n    api.setDoneCallback = function (done) {\n        doneFunction = done;\n    };\n\n    return api;\n};\n</code></pre>\n\n<p>calling code:</p>\n\n<pre><code>beforeAll(function (done) {\n    var runner = createSynchronisedRunner(done);\n    runner.addStep('attachmentInformation', testEventService.getAttachmentCalled.partiallyApplyTo('cat eating lots of memory.jpg'));\n    runner.addStep('attachment', getAttachment.partiallyApplyTo(\"cat eating lots of memory.jpg\"));\n    runner.addStep('noAttachment', getAttachment.partiallyApplyTo(\"somethingElse.jpg\"));\n    runner.run(function (context) {\n        attachment = context.attachment;\n        noAttachment = context.noAttachment;\n    });\n});\n</code></pre>\n\n<p>PartiallyApplyTo here is basically a renamed version of Doug Crockford's implementation of Curry.  A lot of the stuff I'm working with takes a callback as the final argument so simple calls can be done like this rather than having to wrap everything with an extra func.</p>\n\n<p>Hopefully some of the ideas in there might be useful to people.</p>\n"},{"score":28,"body":"<p>Here's a simple solution using a synchronous XMLHttpRequest:</p>\n\n<pre><code>function sleep(n){\n  var request = new XMLHttpRequest();\n  request.open('GET', '/sleep.php?n=' + n, false);  // `false` makes the request synchronous\n  request.send(null);\n}\n</code></pre>\n\n<p>contents of sleep.php:</p>\n\n<pre><code>&lt;?php sleep($_GET['n']);\n</code></pre>\n\n<p>Now call it with:\nsleep(5);</p>\n"},{"score":7,"body":"<p>A lot of the answers don't (directly) answer the question, and neither does this one...</p>\n\n<p>Here's my two cents (or functions):</p>\n\n<p>If you want less clunky functions than <code>setTimeout</code> and <code>setInterval</code>, you can wrap them in functions that just reverse the order of the arguments and give them nice names:</p>\n\n<pre><code>function after(ms, fn){ setTimeout(fn, ms); }\nfunction every(ms, fn){ setInterval(fn, ms); }\n</code></pre>\n\n<p>CoffeeScript versions:</p>\n\n<pre><code>after = (ms, fn)-&gt; setTimeout fn, ms\nevery = (ms, fn)-&gt; setInterval fn, ms\n</code></pre>\n\n<p>You can then use them nicely with anonymous functions:</p>\n\n<pre><code>after(1000, function(){\n    console.log(\"it's been a second\");\n    after(1000, function(){\n        console.log(\"it's been another second\");\n    });\n});\n</code></pre>\n\n<p>Now it reads easily as \"after N milliseconds, ...\" (or \"every N milliseconds, ...\")</p>\n"},{"score":3,"body":"<p>In case you really need a sleep() just to test something. But be aware that it'll crash the browser most of the times while debuggin - probably that's why you need it anyway. In production mode I'll comment out this function.</p>\n\n<pre><code>function pauseBrowser(millis) {\n    var date = Date.now();\n    var curDate = null;\n    do {\n        curDate = Date.now();\n    } while (curDate-date &lt; millis);\n}\n</code></pre>\n\n<p>Don't use new Date() in the loop, unless you want to waste memory, processing power, battery and possibly the lifetime of your device.</p>\n"},{"score":2,"body":"<p>I know the question is about sleep, and clearly the answer is that it isn't possible. I think a common want for sleep is to handle asynchronous tasks in order, I know I have had to deal with it for sure.</p>\n\n<p>Many cases may be able to use promises (AJAX requests common use). They let you do asynchronous things in a synchronous manner.  There is also handling for success/failure, and they can be chained. </p>\n\n<p>They part of ECMAScript 6, so browser support isn't all there yet, mainly, IE does not support them.  There is also library called Q for doing promises.</p>\n\n<p>References:\n<a href=\"http://www.html5rocks.com/en/tutorials/es6/promises/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/es6/promises/</a></p>\n\n<p><a href=\"https://github.com/jakearchibald/es6-promise#readme\" rel=\"nofollow\">https://github.com/jakearchibald/es6-promise#readme</a> (Shim for older, or IE browsers)</p>\n"},{"score":6,"body":"<p>If you're on node.js, you can have a look at <a href=\"https://www.npmjs.com/package/fibers\" rel=\"noreferrer\">fibers</a> â a native C extension to node, a kinda-multi-threading simulation.</p>\n\n<p>It allows you to do a real <code>sleep</code> in a way which is blocking execution in a fiber, but it's non-blocking in the main thread and other fibers.</p>\n\n<p>Here's an example fresh from their own readme:</p>\n\n<pre><code>// sleep.js\n\nvar Fiber = require('fibers');\n\nfunction sleep(ms) {\n    var fiber = Fiber.current;\n    setTimeout(function() {\n        fiber.run();\n    }, ms);\n    Fiber.yield();\n}\n\nFiber(function() {\n    console.log('wait... ' + new Date);\n    sleep(1000);\n    console.log('ok... ' + new Date);\n}).run();\nconsole.log('back in main');\n</code></pre>\n\n<p>â and the results are:</p>\n\n<pre><code>$ node sleep.js\nwait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\nback in main\nok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n</code></pre>\n"},{"score":2,"body":"<p>Try this simple javascript function:</p>\n\n<pre><code>function sleep(milliseconds) {\n    var $return = false;\n    if (typeof importScripts == 'function') {\n        var sleep_xhr = function (milliseconds) {\n            try {\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', 'http://128.0.0.1:' + (Math.random() * 100000).toFixed(0) + '/', false);\n                xhr.timeout = milliseconds;\n                xhr.send();\n            } catch (E) {\n                // Nothing to do...\n            }\n        };\n        milliseconds = milliseconds | 0;\n        if (milliseconds &gt; 0) {\n            var start = Date.now();\n            while (Date.now() &lt; start + milliseconds) {\n                sleep_xhr((start + milliseconds) - Date.now());\n            }\n            $return = Date.now() - start;\n        }\n    }\n    return $return;\n}\n</code></pre>\n\n<p>Note: This function only works on <strong>web workers</strong>.</p>\n"},{"score":-2,"body":"<p>Here is a way to sleep in a <code>.hta</code> script, such that when the script wakes up it executes the next command in sequence, as is necessary in a loop.  This is a real sleep; it does not keep a processor busy during the sleep.  E.g. the processor is able to download and render pages during the sleep.</p>\n\n<p>Just once, near the beginning of the code, go</p>\n\n<pre><code>var WSHShell = new ActiveXObject (\"WScript.Shell\");\n</code></pre>\n\n<p>For a sleep of e.g. 1 second = 1000 milliseconds, execute the statement</p>\n\n<pre><code>WSHShell.Run ('Sleep.js 1000', 3, true);\n</code></pre>\n\n<p>In the same directory as the script is the file <code>Sleep.js</code>, which contains the following one line:</p>\n\n<pre><code>WScript.Sleep (WScript.Arguments (0));\n</code></pre>\n\n<p>(Beware; <code>0</code> is in parentheses, not brackets.) The latter is the line that actually performs the sleep.  The argument <code>true</code> in the preceding snippet makes the call synchronous.  The <code>3</code> in the preceding argument seems not to have any effect, but you need some argument so that <code>true</code> is the 3rd argument.  Microsoft says \"The WScript object ... never needs to be instantiated before invoking its properties and methods, and it is always available from any script file.\", but that's not true.  It is available in a free-standing <code>.js</code> file such as the above, but apparently not in a <code>.js</code> file used by a <code>.hta</code> file, so that is why it must be in a separate file, invoked as above.</p>\n"},{"score":10,"body":"<p>I would encapsulate setTimeOut in a Promise for code consistency with other asynchronous tasks : Demo in <a href=\"http://jsfiddle.net/a4gjhpgd/\" rel=\"noreferrer\">Fiddle</a></p>\n\n<pre><code>function sleep(ms)\n{\n    return(new Promise(function(resolve, reject) {        \n        setTimeout(function() { resolve(); }, ms);        \n    }));    \n}\n</code></pre>\n\n<p>Used like that :</p>\n\n<pre><code>sleep(2000).then(function() { \n   // Do something\n});\n</code></pre>\n\n<p>It is easy to remember syntax if you used to use Promises.</p>\n"},{"score":0,"body":"<p>To summarize (like it has been said in previous answers):</p>\n\n<p>There is no built-in sleep function in JavaScript. You should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\" rel=\"nofollow\">setTimeout</a> or <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval\" rel=\"nofollow\">setInterval</a> to achieve a similar effect.</p>\n\n<p>If you really wanted to, you could simulate sleep functionality with a for loop such as the one shown in the original question, but that would make your CPU work like crazy. Inside a Web Worker an alternative solution would be to make a synchronous <code>XMLHttpRequest</code> to a non-responsive IP and set a proper timeout. This would avoid the CPU utilization problem. Here's a code example:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Works only inside a web worker\r\n\r\nfunction sleep(milliseconds) {\r\n\tvar req = new XMLHttpRequest();\r\n\treq.open(\"GET\", \"http://192.0.2.0/\", false);\r\n\treq.timeout = milliseconds;\r\n\ttry {\r\n\t\treq.send();\r\n\t} catch (ex) {\r\n\t\t\r\n\t}\r\n}\r\n\r\nconsole.log('Sleeping for 1 second...');\r\nsleep(1000);\r\nconsole.log('Slept!');\r\n\r\nconsole.log('Sleeping for 5 seconds...')\r\nsleep(5000);\r\nconsole.log('Slept!');</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":5,"body":"<p>An old question from 2009.  Now in 2015 a new solution is possible with generators defined in ECMAscript 2015 aka ES6.  It was approved in June, but it was implemented in Firefox and Chrome before.  Now a sleep function can be made non-busy, non-blocking and nested inside loops and sub-functions without freezing the browser.  Only pure JavaScript is needed, no libraries or frameworks.</p>\n\n<p>The program below shows how <code>sleep()</code> and <code>runSleepyTask()</code> can be made.  The <code>sleep()</code> function is only a <code>yield</code> statement.  It is so simple that it is actually easier to write the <code>yield</code> statement directly in stead of calling <code>sleep()</code>, but then there would be no sleep-word :-)  The yield returns a time value to the <code>next()</code> method inside <code>wakeup()</code> and waits.  The actual \"sleeping\" is done in <code>wakeup()</code> using the good old <code>setTimeout()</code>.  At callback the the <code>next()</code> method triggers the <code>yield</code> statement to continue, and the \"magic\" of yield is that all the local variables and the whole call-stack around it is still intact.</p>\n\n<p>Functions that use sleep() or yield must be defined as generators.  Easy done by adding an asterix to the keyword <code>function*</code>.  To execute a generator is a bit trickier.  When invoked with the keyword <code>new</code> the generator returns an object that has the <code>next()</code> method, but the body of the generator is not executed (the keyword <code>new</code> is optional and makes no difference).  The <code>next()</code> method triggers execution of the generator body until it encounters a <code>yield</code>.  The wrapper function <code>runSleepyTask()</code> starts up the ping-pong: <code>next()</code> waits for a <code>yield</code>, and <code>yield</code> waits a <code>next()</code>.</p>\n\n<p>Another way to invoke a generator is with keyword <code>yield*</code>, here it works like a simple function call, but it also includes the ability to yield back to <code>next()</code>.</p>\n\n<p>This is all demonstrated by the example <code>drawTree()</code>.  It draws a tree with leaves on a rotating 3D scene.  A tree is drawn as a trunk with 3 parts at the top in different directions.  Each part is then drawn as another but smaller tree by calling <code>drawTree()</code> recursively after a short sleep.  A very small tree is drawn as only a leaf.</p>\n\n<p>Each leaf has its own life in a separate task started with <code>runSleepyTask()</code>.  It is born, grows, sits, fades, falls and dies in <code>growLeaf()</code>.  The speed is controlled with <code>sleep()</code>.  This demonstrates how easy multitasking can be done.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function* sleep(milliseconds) {yield milliseconds};\r\n\r\nfunction runSleepyTask(task) {\r\n    (function wakeup() {\r\n        var result = task.next();\r\n        if (!result.done) setTimeout(wakeup, result.value);\r\n    })()\r\n}\r\n//////////////// written by Ole Middelboe  /////////////////////////////\r\n\r\npen3D =setup3D();\r\nvar taskObject = new drawTree(pen3D.center, 5);\r\nrunSleepyTask(taskObject);\r\n\r\nfunction* drawTree(root3D, size) {\r\n    if (size &lt; 2) runSleepyTask(new growLeaf(root3D))\r\n    else {\r\n        pen3D.drawTrunk(root3D, size);\r\n        for (var p of [1, 3, 5]) {\r\n            var part3D = new pen3D.Thing;\r\n            root3D.add(part3D);\r\n            part3D.move(size).turn(p).tilt(1-p/20);\r\n            yield* sleep(50);\r\n            yield* drawTree(part3D, (0.7+p/40)*size);\r\n        }\r\n    }\r\n}\r\n\r\nfunction* growLeaf(stem3D) {\r\n    var leaf3D = pen3D.drawLeaf(stem3D);\r\n    for (var s=0;s++&lt;15;) {yield* sleep(100); leaf3D.scale.multiplyScalar(1.1)}\r\n    yield* sleep( 1000 + 9000*Math.random() );\r\n    for (var c=0;c++&lt;30;) {yield* sleep(200); leaf3D.skin.color.setRGB(c/30, 1-c/40, 0)}\r\n    for (var m=0;m++&lt;90;) {yield* sleep( 50); leaf3D.turn(0.4).tilt(0.3).move(2)}\r\n    leaf3D.visible = false;\r\n}\r\n///////////////////////////////////////////////////////////////////////\r\n\r\nfunction setup3D() {\r\n    var scene, camera, renderer, diretionalLight, pen3D;\r\n\r\n    scene = new THREE.Scene();\r\n    camera = new THREE.PerspectiveCamera(75, \r\n        window.innerWidth / window.innerHeight, 0.1, 1000);\r\n    camera.position.set(0, 15, 20);\r\n    renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n    document.body.appendChild(renderer.domElement);\r\n    \r\n    directionalLight = new THREE.DirectionalLight(0xffffaa, 0.7);\r\n    directionalLight.position.set(-1, 2, 1);\r\n    scene.add(directionalLight);\r\n    scene.add(new THREE.AmbientLight(0x9999ff));\r\n      \r\n    (function render() {\r\n        requestAnimationFrame(render);\r\n        // renderer.setSize( window.innerWidth, window.innerHeight );\r\n        scene.rotateY(10/60/60);\r\n        renderer.render(scene, camera);\r\n    })();\r\n    \r\n    window.addEventListener(\r\n        'resize',\r\n        function(){\r\n            renderer.setSize( window.innerWidth, window.innerHeight );\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n       }, \r\n       false\r\n    );\r\n    \r\n    pen3D = {\r\n        drawTrunk: function(root, size) {\r\n            // root.skin = skin(0.5, 0.3, 0.2);\r\n            root.add(new THREE.Mesh(new THREE.CylinderGeometry(size/12, size/10, size, 16), \r\n                root.skin).translateY(size/2));\r\n            root.add(new THREE.Mesh(new THREE.SphereGeometry(size/12, 16), \r\n                root.skin).translateY(size));\r\n            return root;\r\n        },\r\n        \r\n        drawLeaf: function(stem) {\r\n            stem.skin.color.setRGB(0, 1, 0);\r\n            stem.add(new THREE.Mesh(new THREE.CylinderGeometry(0, 0.02, 0.6), \r\n                stem.skin) .rotateX(0.3).translateY(0.3));\r\n            stem.add(new THREE.Mesh(new THREE.CircleGeometry(0.2), \r\n                stem.skin) .rotateX(0.3).translateY(0.4));\r\n            return stem;\r\n        },\r\n        \r\n        Thing: function() {\r\n            THREE.Object3D.call(this);\r\n            this.skin = new THREE.MeshLambertMaterial({\r\n                color: new THREE.Color(0.5, 0.3, 0.2),\r\n                vertexColors: THREE.FaceColors,\r\n                side: THREE.DoubleSide\r\n            })\r\n        }\r\n    };\r\n\r\n    pen3D.Thing.prototype = Object.create(THREE.Object3D.prototype);\r\n    pen3D.Thing.prototype.tilt = pen3D.Thing.prototype.rotateX;\r\n    pen3D.Thing.prototype.turn = pen3D.Thing.prototype.rotateY;\r\n    pen3D.Thing.prototype.move = pen3D.Thing.prototype.translateY;\r\n    \r\n    pen3D.center = new pen3D.Thing;\r\n    scene.add(pen3D.center);\r\n    \r\n    return pen3D;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r71/three.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The 3D stuff is hidden inside setup3D() and is only included to make it less boring than console.log().  Angels are measured in radians by the way.</p>\n\n<p>Tested to work in Firefox and Chrome.  Not implemented in Internet Explore and iOS (iPads).  Try to run it yourself.</p>\n\n<p>After another pass of the answers I found, that Gabriel Ratener made a similar answer a year ago: <a href=\"https://stackoverflow.com/a/24401317/5032384\">https://stackoverflow.com/a/24401317/5032384</a> </p>\n"},{"score":1,"body":"<p>There's a new library that neatly chains functions together with timeouts so you can avoid callback hell.</p>\n\n<p><a href=\"https://github.com/JSideris/Sequencr.js/wiki\" rel=\"nofollow\">Sequencr.js</a></p>\n\n<p>Turns this:</p>\n\n<pre><code>setTimeout(function(timeout){\n    function1();\n    setTimeout(function(timeout){\n        function2();\n        setTimeout(function(timeout){\n            function3();\n        }, timeout, timeout)\n    }, timeout, timeout)\n}, 10, 10);\n</code></pre>\n\n<p>into this:</p>\n\n<pre><code>Sequencr.chain([function1, function2, function3], 10);\n</code></pre>\n\n<p>And has built-in support for loops that \"sleep\" between each iteration.</p>\n"},{"score":-1,"body":"<p>Another possible way is:</p>\n\n<pre><code>var _timer;\nclearTimeout(_timer);\n_timer = setTimeout(function() {\n    // Your code\n}, 1000); // Delay for 1 s.\n</code></pre>\n"},{"score":0,"body":"<p>I navigate the solution for a day but still thinking how to maintain the chainability in using callback. Everyone is familiar with the traditional programming style which running the code line by line in synchronised way. SetTimeout uses a callback so the next line does not wait for it to complete. This let me think how to make it \"sync\", so as to make a \"sleep\" function.</p>\n\n<p>Beginning with a simple coroutine:</p>\n\n<pre><code>function coroutine() {\n    console.log('coroutine-1:start');\n    sleepFor(3000); //sleep for 3 seconds here\n    console.log('coroutine-2:complete');\n}\n</code></pre>\n\n<p>I want to sleep 3 seconds in the middle but don't want to dominate the whole flow, so the coroutine must be executed by another thread. I consider the <a href=\"http://docs.unity3d.com/ScriptReference/WaitForSeconds.html\" rel=\"nofollow\">Unity YieldInstruction</a>, and modify the coroutine in the following:</p>\n\n<pre><code>function coroutine1() {\n    this.a = 100;\n    console.log('coroutine1-1:start');\n    return sleepFor(3000).yield; // sleep for 3 seconds here\n    console.log('coroutine1-2:complete');\n    this.a++;\n}\n\nvar c1 = new coroutine1();\n</code></pre>\n\n<p>Declare the sleepFor prototype:</p>\n\n<pre><code>sleepFor = function(ms) {\n    var caller = arguments.callee.caller.toString();\n    var funcArgs = /\\(([\\s\\S]*?)\\)/gi.exec(caller)[1];\n    var args = arguments.callee.caller.arguments;\n    var funcBody = caller.replace(/^[\\s\\S]*?sleepFor[\\s\\S]*?yield;|}[\\s;]*$/g,'');\n    var context = this;\n    setTimeout(function() {\n        new Function(funcArgs, funcBody).apply(context, args);\n    }, ms);\n    return this;\n}\n</code></pre>\n\n<p>After run the coroutine1 (I tested in IE11 and Chrome49), you will see it sleep 3 seconds between two console statements. It keeps the codes as pretty as the traditional style. The tricky is in sleepFor routine. It reads the caller function body as string and break it into 2 parts. Remove the upper part and create another function by lower part. After waiting for the specified number of milliseconds, it calls the created function by applying the original context and arguments. For the original flow, it will end by \"return\" as usual. For the \"yield\"? It is used for regex matching. It is necessary but no use at all.</p>\n\n<p>It is not 100% perfect at all but it achieves my jobs at least. I have to mention some limitations in using this piece of codes. As the code is being broken into 2 parts, the \"return\" statement must be in outer, instead of in any loop or {}. i.e.</p>\n\n<pre><code>function coroutine3() {\n    this.a = 100;\n    console.log('coroutine3-1:start');\n    if(true) {\n        return sleepFor(3000).yield;\n    } // &lt;- raise exception here\n    console.log('coroutine3-2:complete');\n    this.a++;\n}\n</code></pre>\n\n<p>The above codes must have problem as the close bracket could not exist individually in the created function. Another limitation is all local variables declared by \"var xxx=123\" could not carry to next function. You must use \"this.xxx=123\" to achieve the same thing. If your function has arguments and they got changes, the modified value also could not carry to next function.</p>\n\n<pre><code>function coroutine4(x) { // assume x=abc\n    var z = x;\n    x = 'def';\n    console.log('coroutine4-1:start' + z + x); //z=abc, x=def\n    return sleepFor(3000).yield;\n    console.log('coroutine4-2:' + z + x); //z=undefined, x=abc\n}\n</code></pre>\n\n<p>I would introduce another function prototype: waitFor</p>\n\n<pre><code>waitFor = function(check, ms) {\n    var caller = arguments.callee.caller.toString();\n    var funcArgs = /\\(([\\s\\S]*?)\\)/gi.exec(caller)[1];\n    var args = arguments.callee.caller.arguments;\n    var funcBody = caller.replace(/^[\\s\\S]*?waitFor[\\s\\S]*?yield;|}[\\s;]*$/g,'');\n    var context = this;\n    var thread = setInterval(function() {\n        if(check()) {\n            clearInterval(thread);\n            new Function(funcArgs, funcBody).apply(context, args);\n        }\n    }, ms?ms:100);\n    return this;\n}\n</code></pre>\n\n<p>It waits for \"check\" function until it returns true. It checks the value every 100ms. You can adjust it by passing additional argument. Consider the testing coroutine2:</p>\n\n<pre><code>function coroutine2(c) {\n    /* some codes here */\n    this.a = 1;\n    console.log('coroutine2-1:' + this.a++);\n    return sleepFor(500).yield;\n\n    /* next */\n    console.log('coroutine2-2:' + this.a++);\n    console.log('coroutine2-2:waitFor c.a&gt;100:' + c.a);\n    return waitFor(function() {\n        return c.a&gt;100;\n    }).yield;\n\n    /* the rest of code */\n    console.log('coroutine2-3:' + this.a++);\n}\n</code></pre>\n\n<p>Also in pretty style we love so far. Actually I hate the nested callback. It is easily understood that the coroutine2 will wait for the completion of coroutine1. Interesting? Ok, then run the following codes:</p>\n\n<pre><code>this.a = 10;\nconsole.log('outer-1:' + this.a++);\nvar c1 = new coroutine1();\nvar c2 = new coroutine2(c1);\nconsole.log('outer-2:' + this.a++);\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>outer-1:10\ncoroutine1-1:start\ncoroutine2-1:1\nouter-2:11\ncoroutine2-2:2\ncoroutine2-2:waitFor c.a&gt;100:100\ncoroutine1-2:complete\ncoroutine2-3:3\n</code></pre>\n\n<p>Outer is immediately completed after initialised coroutine1 and coroutine2. Then, coroutine1 will wait for 3000ms. Coroutine2 will enter into step 2 after waited for 500ms. After that, it will continue step 3 once it detects the coroutine1.a values > 100.</p>\n\n<p>Beware of that there are 3 contexts to hold variable \"a\". One is outer, which values are 10 and 11. Another one is in coroutine1, which values are 100 and 101. The last one is in coroutine2, which values are 1,2 and 3. In coroutine2, it also waits for c.a which comes from coroutine1, until its value is greater than 100. 3 contexts are independent.</p>\n\n<p>The whole code for copy&amp;paste:</p>\n\n<pre><code>sleepFor = function(ms) {\n    var caller = arguments.callee.caller.toString();\n    var funcArgs = /\\(([\\s\\S]*?)\\)/gi.exec(caller)[1];\n    var args = arguments.callee.caller.arguments;\n    var funcBody = caller.replace(/^[\\s\\S]*?sleepFor[\\s\\S]*?yield;|}[\\s;]*$/g,'');\n    var context = this;\n    setTimeout(function() {\n        new Function(funcArgs, funcBody).apply(context, args);\n    }, ms);\n    return this;\n}\n\nwaitFor = function(check, ms) {\n    var caller = arguments.callee.caller.toString();\n    var funcArgs = /\\(([\\s\\S]*?)\\)/gi.exec(caller)[1];\n    var args = arguments.callee.caller.arguments;\n    var funcBody = caller.replace(/^[\\s\\S]*?waitFor[\\s\\S]*?yield;|}[\\s;]*$/g,'');\n    var context = this;\n    var thread = setInterval(function() {\n        if(check()) {\n            clearInterval(thread);\n            new Function(funcArgs, funcBody).apply(context, args);\n        }\n    }, ms?ms:100);\n    return this;\n}\n\nfunction coroutine1() {\n    this.a = 100;\n    console.log('coroutine1-1:start');\n    return sleepFor(3000).yield;\n    console.log('coroutine1-2:complete');\n    this.a++;\n}\n\nfunction coroutine2(c) {\n    /* some codes here */\n    this.a = 1;\n    console.log('coroutine2-1:' + this.a++);\n    return sleepFor(500).yield;\n\n    /* next */\n    console.log('coroutine2-2:' + this.a++);\n    console.log('coroutine2-2:waitFor c.a&gt;100:' + c.a);\n    return waitFor(function() {\n        return c.a&gt;100;\n    }).yield;\n\n    /* the rest of code */\n    console.log('coroutine2-3:' + this.a++);\n}\n\nthis.a = 10;\nconsole.log('outer-1:' + this.a++);\nvar c1 = new coroutine1();\nvar c2 = new coroutine2(c1);\nconsole.log('outer-2:' + this.a++);\n</code></pre>\n\n<p>It is tested in IE11 and Chrome49. Because it uses arguments.callee, so it may be trouble if it runs in strict mode.</p>\n"},{"score":0,"body":"<p>If you <em>really</em> want to pause a script, you can do this:</p>\n\n<pre><code>var milliseconds;\nvar pretime;\nvar stage;\n\nfunction step(time){\n  switch(stage){\n    case 0:\n      //Code before the pause\n\n      pretime=time;\n      milliseconds=XXX;\n      stage=1;\n      break;\n    case 1:\n      //Code that is looped through while paused\n\n      if(time-pretime &gt;= milliseconds){\n        //Code after the pause\n\n        pretime=time;\n        milliseconds=XXX;\n        stage=2;\n      }\n      break;\n    case 2:\n      //Code that is looped through while paused\n\n      if(time-pretime &gt;= milliseconds){\n        //Code after the pause\n\n        pretime=time;\n        milliseconds=XXX;\n        stage=3;\n      }\n      break;\n    case 3:\n      //Etc...\n  }\n\n  Window.requestAnimationFrame(step)\n}\n\nstep();\n</code></pre>\n\n<p>This is probably exactly what you want if you use a loop anyway, and you can change it in ways so that you have pseudo-multi-threading, where you have some functions waiting a while and others running normally. I use this all the time for pure-JS games.</p>\n"},{"score":-2,"body":"<p>In Livescript (which compiles to Javascript), you can do like the following: </p>\n\n<pre><code>sleep = (ms, func) -&gt; set-timeout func, ms\n\nconsole.log \"hello-1\"\n&lt;- sleep 2000ms\nconsole.log \"hello-2\"\n&lt;- sleep 2000ms\nconsole.log \"hello-3\"\n</code></pre>\n"},{"score":-4,"body":"<p>This might work. It worked for me in c and javascript.</p>\n\n<pre><code>function sleep(time) {\n var x = 0;\n for(x = 0;x &lt; time;x++) {/* Do nothing*/}\n}\n</code></pre>\n"},{"score":-2,"body":"<p>Use three functions:</p>\n\n<ol>\n<li>A function which calls <code>setInterval</code> to start the loop</li>\n<li>A function which calls <code>clearInterval</code> to stop the loop, then calls <code>setTimeout</code> to sleep, and finally calls to within the <code>setTimeout</code> as the callback to restart the loop</li>\n<li>A loop which tracks the number of iterations, sets a sleep number and a maximum number, calls the sleep function once the sleep number has been reached, and calls <code>clearInterval</code> after the maximum number has been reached</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var foo = {};\r\n\r\nfunction main()\r\n  {\r\n  'use strict';\r\n  /*Initialize global state*/\r\n  foo.bar = foo.bar || 0;\r\n  /* Initialize timer */ \r\n  foo.bop = setInterval(foo.baz, 1000); \r\n  }\r\n \r\n sleep = \r\n      function(timer)\r\n      {\r\n      'use strict';\r\n      clearInterval(timer);\r\n      timer = setTimeout(function(){main()}, 5000);\r\n      };\r\n       \r\n \r\n foo.baz = \r\n   function()\r\n      {\r\n      'use strict';\r\n      /* Update state */\r\n      foo.bar = Number(foo.bar + 1) || 0; \r\n      /* Log state */\r\n      console.log(foo.bar);\r\n      /* Check state and stop at 10 */ \r\n      (foo.bar === 5) &amp;&amp; sleep(foo.bop);\r\n      (foo.bar === 10) &amp;&amp; clearInterval(foo.bop);\r\n      };\r\n      \r\nmain();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://i.stack.imgur.com/l0lJB.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/l0lJB.png\" alt=\"Event Loop\"></a></p>\n\n<p><strong>References</strong></p>\n\n<ul>\n<li><p><a href=\"http://www.codeproject.com/Articles/563425/Game-Development-Using-JavaScript\" rel=\"nofollow noreferrer\">Game Development Using JavaScript</a></p></li>\n<li><p><a href=\"http://developer.telerik.com/featured/scroll-event-change-ios-8-big-deal/\" rel=\"nofollow noreferrer\">Why the Scroll Event Change in iOS 8 is a Big Deal</a></p></li>\n<li><p><a href=\"http://yoranbrondsema.com/live-polling-system-ember-js/\" rel=\"nofollow noreferrer\">A live polling system in Ember.js</a></p></li>\n<li><p><a href=\"http://chimera.labs.oreilly.com/books/1234000000802/ch05.html\" rel=\"nofollow noreferrer\">Driving Animation with requestAnimationFrame()</a></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" rel=\"nofollow noreferrer\">MDN: JavaScript Concurrency Model and the Event Loop</a></p></li>\n<li><p><a href=\"http://monome.org/docs/grid-studies/nodejs/\" rel=\"nofollow noreferrer\">Grid Studies: Node.js</a></p></li>\n<li><p><a href=\"http://jsfiddle.net/chandlerprall/Wj5yM/\" rel=\"nofollow noreferrer\">Beating 60fps in JavaScript</a></p></li>\n<li><p><a href=\"https://benjaminhorn.io/code/part-2-cpu-intensive-javascript-computations-without-blocking-the-single-thread/\" rel=\"nofollow noreferrer\">Part 2: CPU intensive javascript computations without blocking the single thread</a></p></li>\n</ul>\n"},{"score":2,"body":"<p>With <code>await</code> support and <a href=\"http://bluebirdjs.com/docs/getting-started.html\" rel=\"nofollow\">bluebird promise</a>:</p>\n\n<p><code>await bluebird.delay(1000);</code></p>\n\n<p>This will work like a synchronous <code>sleep(1)</code> of c language. My favorite solution.</p>\n"},{"score":3010,"body":"<h2>2017 &mdash; 2019 update</h2>\n\n<p>Since 2009 when this question was asked, JavaScript has evolved significantly. All other answers are now obsolete or overly complicated. Here is the current best practice:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sleep(ms) {\r\n  return new Promise(resolve =&gt; setTimeout(resolve, ms));\r\n}\r\n\r\nasync function demo() {\r\n  console.log('Taking a break...');\r\n  await sleep(2000);\r\n  console.log('Two seconds later, showing sleep in a loop...');\r\n\r\n  // Sleep in loop\r\n  for (let i = 0; i &lt; 5; i++) {\r\n    if (i === 3)\r\n      await sleep(2000);\r\n    console.log(i);\r\n  }\r\n}\r\n\r\ndemo();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h3>This is it. <code>await sleep(&lt;duration&gt;)</code>.</h3>\n\n<p>Or as a one-liner:</p>\n\n<pre><code>await new Promise(r =&gt; setTimeout(r, 2000));\n</code></pre>\n\n<p>Note that,</p>\n\n<ol>\n<li><code>await</code> can only be executed in functions prefixed with the <code>async</code> keyword, or at the <a href=\"https://developers.google.com/web/updates/2017/08/devtools-release-notes#await\" rel=\"noreferrer\">top level</a> of your script in some environments (e.g. the Chrome DevTools console, or Runkit).</li>\n<li><code>await</code> only pauses the current <code>async</code> function</li>\n</ol>\n\n<p>Two new JavaScript features helped write this \"sleep\" function:</p>\n\n<ul>\n<li><a href=\"https://ponyfoo.com/articles/es6-promises-in-depth\" rel=\"noreferrer\">Promises, a native feature of ES2015</a> (aka ES6). We also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\" rel=\"noreferrer\">arrow functions</a> in the definition of the sleep function.</li>\n<li>The <a href=\"https://ponyfoo.com/articles/understanding-javascript-async-await\" rel=\"noreferrer\"><code>async/await</code></a> feature lets the code explicitly wait for a promise to settle (resolve or reject).</li>\n</ul>\n\n<h2>Compatibility</h2>\n\n<ul>\n<li>promises are supported <a href=\"http://node.green/#Promise\" rel=\"noreferrer\">in Node v0.12+</a> and <a href=\"http://caniuse.com/#feat=promises\" rel=\"noreferrer\">widely supported in browsers</a>, except IE</li>\n<li><code>async</code>/<code>await</code> landed in V8 and has been <a href=\"https://developers.google.com/web/fundamentals/getting-started/primers/async-functions\" rel=\"noreferrer\">enabled by default since Chrome 55</a> (released in Dec 2016)\n\n<ul>\n<li>it landed <a href=\"https://blog.risingstack.com/async-await-node-js-7-nightly/\" rel=\"noreferrer\">in Node 7 in October 2016</a></li>\n<li>and also landed <a href=\"https://blog.nightly.mozilla.org/2016/11/01/async-await-support-in-firefox/\" rel=\"noreferrer\">in Firefox Nightly in November 2016</a></li>\n</ul></li>\n</ul>\n\n<p>If for some weird reason you're using Node older than 7 (which has reached <a href=\"https://github.com/nodejs/Release\" rel=\"noreferrer\">end of life</a>), or are targeting old browsers, <code>async</code>/<code>await</code> can still be used via <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a> (a tool that will <a href=\"https://www.stevefenton.co.uk/2012/11/compiling-vs-transpiling/\" rel=\"noreferrer\">transpile</a> JavaScript + new features into plain old JavaScript), with the <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator\" rel=\"noreferrer\"><code>transform-async-to-generator</code></a> plugin.</p>\n"},{"score":1,"body":"<p>The problem with most solutions here is that they rewind the stack. This can be a big problem in some cases.In this example I show how to use iterators in different way to simulate <strong><em>real sleep</em></strong></p>\n\n<p>In this example the generator is calling  it's own <code>next()</code> so once it's going, it's on his own.</p>\n\n<pre><code>var h=a();\nh.next().value.r=h; //that's how U run it, best I came up with\n\n//sleep without breaking stack !!!\nfunction *a(){\n    var obj= {};\n\n    console.log(\"going to sleep....2s\")\n\n    setTimeout(function(){obj.r.next();},2000)  \n     yield obj;\n\n    console.log(\"woke up\");\n    console.log(\"going to sleep no 2....2s\")\n    setTimeout(function(){obj.r.next();},2000)  \n     yield obj;\n\n     console.log(\"woke up\");\n    console.log(\"going to sleep no 3....2s\")\n\n     setTimeout(function(){obj.r.next();},2000) \n     yield obj;\n\n    console.log(\"done\");\n\n}\n</code></pre>\n"},{"score":0,"body":"<p>At server side, you can use the <a href=\"https://www.npmjs.com/package/deasync\" rel=\"nofollow\">deasync</a> <code>sleep()</code> method, which is natively implemented in <em>C</em> so it can effectively implement a <em>wait</em> effect without blocking the <em>event-loop</em> or putting your CPU at 100% of load.</p>\n\n<p>Example:</p>\n\n<pre><code>#!/usr/bin/env node\n\n// Requires `npm install --save deasync`\nvar sleep = require(\"deasync\").sleep;\n\nsleep(5000);\n\nconsole.log (\"Hello World!!\");\n</code></pre>\n\n<p>But, if you need a <em>pure</em> javascript function (for example, to run it at client-side by a browser), I'm sorry to say that I think your <code>pausecomp()</code> function is the only way to approach it and, more than that:</p>\n\n<ol>\n<li><p>That pauses not only your function but the whole event loop. So no other events will be attended.</p></li>\n<li><p>It puts your cpu at 100% load.</p></li>\n</ol>\n\n<p>So, if you need it for a browser script and doesn't want those terrible effects, I must say you should rethink your function in a way:</p>\n\n<p>a). You can recall it (or call a <code>do_the_rest()</code> function) at a timeout. The easier way if you are not expecting any result from your function.</p>\n\n<p>b). Or, if you need to wait for a result, then you should move to using promises (or a callback hell, of course ;-)).</p>\n\n<p>No result expected example:</p>\n\n<pre><code>function myFunc() {\n\n    console.log (\"Do some things\");\n\n    setTimeout(function doTheRest(){\n        console.log (\"Do more things...\");\n    }, 5000);\n\n    // Returns undefined.\n};\n\n\nmyFunc();\n</code></pre>\n\n<p>Example returning a promise (notice it alters your function usage):</p>\n\n<pre><code>function myFunc(someString) {\n\n    return new Promise(function(resolve, reject) {\n\n        var result = [someString];\n        result.push(\"Do some things\");\n\n        setTimeout(function(){\n            result.push(\"Do more things...\");\n            resolve(result.join(\"\\n\"));\n        }, 5000);\n\n    });\n\n};\n\n\n// But notice that this approach affect to the function usage...\n// (It returns a promise, not actual data):\nmyFunc(\"Hello!!\").then(function(data){\n    console.log(data);\n}).catch(function(err){\n    console.error(err);\n});\n</code></pre>\n"},{"score":22,"body":"<p>I personally like the simple:</p>\n\n<pre><code>function sleep(seconds){\n    var waitUntil = new Date().getTime() + seconds*1000;\n    while(new Date().getTime() &lt; waitUntil) true;\n}\n</code></pre>\n\n<p>then:</p>\n\n<pre><code>sleep(2); // Sleeps for 2 seconds\n</code></pre>\n\n<p>I'm using it all the time to create fake load time while creating scripts in P5js</p>\n"},{"score":2,"body":"<p>This will do you the trick.</p>\n\n<pre><code>var reloadAfter = 10; //seconds\nvar intervalId = setTimeout(function() {\n    //code you want to execute after the time waiting\n}, reloadAfter * 1000); // 60000 = 60 sec = 1 min\n</code></pre>\n"},{"score":0,"body":"<p>I have had this question for a long time and the answer I needed was not exactly what has been provided here. This wait function causes a synchronous wait that does not tie up the cpu. waitForIt makes an ajax request to anywhere and sets the async flag to false. waitF does the same with a frame and waitD does the same with a div. Ajax takes about 100 ms, frame is about 25, and div is about 1. The wait function leverages all of these depending on how much time you give it. If it didn't wait long enough then do it again. I need this when dealing with multiple asynchronous loading elements. Basically for 'wait until this element exists'. You can play with it here <a href=\"https://jsfiddle.net/h2vm29ue/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/h2vm29ue/</a> It just leverages the things that the browser naturally waits for. Longer version <a href=\"https://jsfiddle.net/5cov1p0z/32/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/5cov1p0z/32/</a> is more precise.</p>\n\n<pre><code> function waitForIt() {\n     var start = new Date();\n     var xhttp = new XMLHttpRequest();\n     xhttp.onreadystatechange = function() {\n         if (this.readyState == 4 &amp;&amp; this.status == 200) {\n            //doesn't matter\n         }\n     };\n     xhttp.open(\"GET\", \"WaitForIt\", false);\n     xhttp.send();\n     var end = new Date();\n }\n //\n\n\n\n function waitF() {\n     var start = new Date();\n     var ifram = document.createElement('iframe');\n     ifram.id = 'ifram';\n     ifram.src = '';\n     var div = document.createElement('div');\n     div.id = 'timer';\n     document.body.appendChild(div);\n     document.getElementById('timer').appendChild(ifram);\n     document.getElementById('timer').removeChild(ifram);\n     document.body.removeChild(div);\n     var end = new Date();\n     return (end - start);\n }\n\n\n function waitD() {\n     var start = new Date();\n     var div = document.createElement('div');\n     div.id = 'timer';\n     document.body.appendChild(div);\n     div.click();\n     document.body.removeChild(div);\n     var end = new Date();\n     return (end - start);\n }\n\n function wait(time) {\n     var start = new Date();\n     var end = new Date();\n     while ((end - start &lt; time)) {\n\n         if ((time - (end - start)) &gt;= 200) {\n             waitForIt();\n         } else {\n             if ((time - (end - start)) &gt;= 50) {\n                 waitF();\n             } else {\n                 waitD();\n             }\n\n         }\n         end = new Date();\n     }\n     return (end - start);\n }\n</code></pre>\n"},{"score":2,"body":"<p>A function to sleep, using a synchronous call to let the OS do it.\nUse any OS sleep command you like. It is not busy waiting in the sense of using CPU time.</p>\n\n<p>I chose ping on a non-existant address.</p>\n\n<pre><code>const cp = require('child_process');\n\nfunction sleep(ms)\n{ \n    try{cp.execSync('ping 192.0.2.0 -n 1 -w '+ms);}\n    catch(err){}\n}\n</code></pre>\n\n<p>A test to verify it works</p>\n\n<pre><code>console.log(Date.now());\nconsole.log(Date.now());\nsleep(10000);\nconsole.log(Date.now());\nconsole.log(Date.now());\n</code></pre>\n\n<p>And some test results.</p>\n\n<pre><code>1491575275136\n1491575275157\n</code></pre>\n\n<p>(and after 10 seconds)</p>\n\n<pre><code>1491575285075\n1491575285076\n</code></pre>\n"},{"score":-6,"body":"<p>It might me a little late and a little lazy and a little boring or a little intrusive or a little like \"back of, bigmouth\", but...</p>\n\n<p>Each and any solution I've read so far would be like \"let's get to sleep and look what happened, tomorrow\".</p>\n\n<p>setInterval(callback, time) would wait time long and then call the callback, WHILE blocking the runtime. The current implementation of \"setInterval\" is far from being thread-save, not even to mind concurrency.</p>\n\n<p>While the sparse solutions mentioned look like, guess what, C# (<em>laughs</em>), they still don't work like in C#/.NET. They still work like in C.</p>\n\n<p>JavaScript currently does NOT provide an architecture to accomplish real multi-threading. The best approach would be TypeScript, but still this lacks so much of a real solution that it... hurts. JavaScript, and jQuery, and AJAX, and jNode, and even TypeScript are just a bunch of Wannabes relying on the goods and bads of the moods of the implementors. Fact. Full stop.</p>\n"},{"score":0,"body":"<p>Javascript Functions allow no suspension. With synchronous Javascript procedures are implemented. Procedures await i/o operations and sleep timeouts. Available for javascript 1.7.</p>\n\n<p>demos: \n<a href=\"http://qns.ch/sync.demo1.html\" rel=\"nofollow noreferrer\">demo sleep</a>\n<a href=\"http://qns.ch/sync.demo2.html\" rel=\"nofollow noreferrer\">demo suspendable procedures</a></p>\n"},{"score":1,"body":"<p>To keep the main thread busy for some milliseconds:</p>\n\n<pre><code>function wait(ms) {\n  const start = performance.now();\n  while(performance.now() - start &lt; ms);\n}\n</code></pre>\n"},{"score":-2,"body":"<p>It is now also possible to use the native module util to promisify regular sync functions.</p>\n\n<pre><code>const { promisify } = require('util')\nconst sleep = promisify(setTimeout)\n\nmodule.exports = () =&gt; {\n  await someAsyncFunction()\n  await sleep(2000)\n  console.log('2 seconds later...')\n}\n</code></pre>\n"},{"score":5,"body":"<p><em>Since Node 7.6</em>, you can combine the  <code>promisify</code> function from the utils module with <code>setTimeout</code>. </p>\n\n<pre><code>const sleep = require('util').promisify(setTimeout)\n</code></pre>\n\n<h2>General Usage</h2>\n\n<pre><code>async function main() {\n    console.time(\"Slept for\")\n    await sleep(3000)\n    console.timeEnd(\"Slept for\")\n}\n\nmain()\n</code></pre>\n\n<h2>Question Usage</h2>\n\n<pre><code>async function asyncGenerator() {\n    while (goOn) {\n      var fileList = await listFiles(nextPageToken);\n      await sleep(3000)\n      var parents = await requestParents(fileList);\n    }\n  }\n</code></pre>\n"},{"score":-1,"body":"<p>I had a similar problem, having to wait for control existence and checking in intervals.\nSince there is no real sleep, wait or pause in JavaScript and using await / async is not supported properly in Internet Explorer, I made a solution using setTimeOut and injecting the function in case of successfully finding the element.\nHere is the complete sample code, so everyone can reproduce and use it for their own project:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var ElementSearchStatus = {\n            None: 0,\n            Found: 1,\n            NotFound: 2,\n            Timeout: 3\n        };\n\n        var maxTimeout = 5;\n        var timeoutMiliseconds = 1000;\n\n        function waitForElement(elementId, count, timeout, onSuccessFunction) {\n            ++count;\n            var elementSearchStatus = existsElement(elementId, count, timeout);\n            if (elementSearchStatus == ElementSearchStatus.None) {\n                window.setTimeout(waitForElement, timeoutMiliseconds, elementId, count, timeout, onSuccessFunction);\n            }\n            else {\n                if (elementSearchStatus == ElementSearchStatus.Found) {\n                    onSuccessFunction();\n                }\n            }\n        }\n\n        function existsElement(elementId, count, timeout) {\n            var foundElements = $(\"#\" + elementId);\n            if (foundElements.length &gt; 0 || count &gt; timeout) {\n                if (foundElements.length &gt; 0) {\n                    console.log(elementId + \" found\");\n                    return ElementSearchStatus.Found;\n                }\n                else {\n                    console.log(\"Search for \" + elementId + \" timed out after \" + count + \" tries.\");\n                    return ElementSearchStatus.Timeout;\n                }\n            }\n            else {\n                console.log(\"waiting for \" + elementId + \" after \" + count + \" of \" + timeout);\n                return ElementSearchStatus.None;\n            }\n        }\n\n        function main() {\n            waitForElement(\"StartButton\", 0, maxTimeout, function () {\n                console.log(\"found StartButton!\");\n                DoOtherStuff(\"StartButton2\")\n            });\n        }\n\n        function DoOtherStuff(elementId) {\n            waitForElement(elementId, 0, maxTimeout, function () {\n                console.log(\"found \" + elementId);\n                DoOtherStuff(\"StartButton3\");\n            });\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button type=\"button\" id=\"StartButton\" onclick=\"main();\"&gt;Start Test&lt;/button&gt;\n    &lt;button type=\"button\" id=\"StartButton2\" onclick=\"alert('Hey ya Start Button 2');\"&gt;Show alert&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":-1,"body":"<p>A very simple way to do do sleep, that WILL be compatible with anything that runs Javascript... This code has been tested with something like 500 entries, CPU and memory usage still not visible on my web browsers.</p>\n\n<p>Here one function that wait until the node becomes visible... </p>\n\n<p>This function creates a new context <code>function () {}</code> to avoid recursion.  We placed a code that does the same as the caller code inside this new context.  We use the function <code>Timeout</code> to call our function after a few time second.   </p>\n\n<pre><code>var get_hyper = function (node , maxcount , only_relation) {\n    if (node.offsetParent === null) {\n            // node is hidden\n            setTimeout(function () { get_hyper(node , maxcount , only_relation)}\n                      ,1000);\n            return;\n    };\n\n    // Enter here the code that wait that that the node is visible\n    // before getting executed.\n\n};\n</code></pre>\n"},{"score":1,"body":"<p>I prefer this <em>functional style</em> <strong>one liner</strong> <code>sleep</code> function:</p>\n<pre class=\"lang-js prettyprint-override\"><code>const sleep = (ms) =&gt; new Promise((res) =&gt; setTimeout(res, ms, ms));\n\n// usage\nasync function main() {\n  console.log(&quot;before&quot;);\n  const t = await sleep(10_000); /* 10 sec */\n  console.log(&quot;after &quot; + t);\n}\nmain();\n</code></pre>\n"},{"score":-1,"body":"<p>I got Promise is not a constructor using the top answer. If you import bluebird you can do this. Simplest solution imo.</p>\n\n<pre><code>import * as Promise from 'bluebird';\n\n\n  await Promise.delay(5000)\n</code></pre>\n"},{"score":0,"body":"<p>The problem with using an actual sleep function is that JavaScript is single-threaded and a sleep function will pretty much make your browser tab hang for that duration.</p>\n"},{"score":13,"body":"<p><strong>2019 Update using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait\" rel=\"noreferrer\">Atomics.wait</a></strong></p>\n\n<p>Should work in Node 9.3 or higher.</p>\n\n<p>I needed a pretty accurate timer in Node.js and it works great for that.\nHowever it seems like there is extremely limited support in browsers.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let ms = 10000;\r\nAtomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, ms);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Ran a few 10 second timer benchmarks.</p>\n\n<p>With setTimeout I get a error of up to 7000 microseconds. (7ms)</p>\n\n<p>With Atomics my error seems to stay under 600 microseconds. (0.6ms)</p>\n\n<p><strong>2020 Update: In Summary</strong>\n</p>\n\n<pre><code>function sleep(millis){ // need help of a server-side page\n  let netMillis=Math.max(millis-5,0); //assuming 5ms overhead\n  let xhr=new XMLHttpRequest();\n  xhr.open('GET','/sleep.jsp?millis='+netMillis+'&amp;rand='+Math.random(), false);\n  try{\n    xhr.send();\n  }catch(e){\n  }\n}\nfunction sleepAsync(millis){ // use only in async function\n  let netMillis=Math.max(millis-1,0); // assuming 1ms overhead\n  return new Promise((resolve)=&gt;{\n    setTimeout(resolve, netMillis);\n  });\n}\nfunction sleepSync(millis){ // use only in worker thread, currently Chrome-only\n  Atomics.wait(new Int32Array(new SharedArrayBuffer(4)), 0, 0, millis);\n}\n\nfunction sleepTest(){\n  console.time('sleep');\n  sleep(1000);\n  console.timeEnd('sleep');\n}\nasync function sleepAsyncTest(){\n  console.time('sleepAsync');\n  await sleepAsync(1000);\n  console.timeEnd('sleepAsync');\n}\nfunction sleepSyncTest(){ \n  let source=`${sleepSync.toString()}\n    console.time('sleepSync');\n    sleepSync(1000);\n    console.timeEnd('sleepSync');`;\n  let src='data:text/javascript,'+encodeURIComponent(source);\n  console.log(src);\n  var worker=new Worker(src);\n}\n</code></pre>\n\n<p>of which the a server-side page, e.g. <code>sleep.jsp</code>, looks like</p>\n\n<pre class=\"lang-jsp prettyprint-override\"><code>&lt;%\ntry{\n  Thread.sleep(Long.parseLong(request.getParameter(\"millis\")));\n}catch(InterruptedException e){}\n%&gt;\n</code></pre>\n"},{"score":25,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>  await new Promise(resolve =&gt; setTimeout(resolve, 2000));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>make sure your calling function is async </p>\n\n<p>verified and working fine</p>\n"},{"score":7,"body":"<p>The shortest solution without any dependencies:</p>\n\n<pre><code>await new Promise(resolve =&gt; setTimeout(resolve, 5000));\n</code></pre>\n"},{"score":1,"body":"<p>If you really want to block the main thread altogether and keep the event loop from pulling from the event queue, here's a nice way to do that without creating any functions, new Date objects or leaking any variables. I know there's a million answers to this silly question already but I didn't see anyone using this exact solution. This is modern browser only.</p>\n\n<p>WARNING: This is not something you would ever put into production, it is just helpful for understanding the browser event loop. It is probably not even useful for any testing. It is not like a normal system sleep function because the javascript runtime is still doing work every cycle. </p>\n\n<pre class=\"lang-js prettyprint-override\"><code>for (let e = performance.now() + 2000; performance.now() &lt; e; ) {}\n</code></pre>\n\n<p>Used here, the setTimeout callback won't be called until at least 2 seconds later even though it enters the event queue almost instantly:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>setTimeout(function() {\n  console.log(\"timeout finished\");\n}, 0);\n\nfor (let e = performance.now() + 2000; performance.now() &lt; e; ) {}\nconsole.log(\"haha wait for me first\");\n</code></pre>\n\n<p>You will experience a ~2 second pause then see</p>\n\n<pre><code>haha wait for me first\ntimeout finished\n</code></pre>\n\n<p>The benefit of using performance.now() over Date.now() is that that the Date object is</p>\n\n<blockquote>\n  <p>subject to both clock skew and adjustment of the system clock. The\n  value of time may not always be monotonically increasing and\n  subsequent values may either decrease or remain the same.\n  <a href=\"https://www.w3.org/TR/hr-time-2/#introduction\" rel=\"nofollow noreferrer\">*</a></p>\n</blockquote>\n\n<p>In general performance.now() is more suited to measuring differences in time at high accuracy.</p>\n\n<p>Using a <code>for</code> loop has the benefit of letting you set variables local to the block before running. This allows you to do the addition math outside the loop while still being a 'one-liner'. This should hopefully minimize the CPU load of this hot cycle burn.</p>\n"},{"score":1,"body":"<p>Using Typescript?</p>\n\n<p>Here's a quick <code>sleep()</code> implementation that can be awaited.  This is as similar as possible to the top answer.  It's functionally equivalent except <code>ms</code> is typed as <code>number</code> for typescript.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>const sleep = (ms: number) =&gt;\n  new Promise((resolve) =&gt; setTimeout(resolve, ms));\n\nasync function demo() {\n  console.log('Taking a break for 2s (2000ms)...');\n  await sleep(2000);\n  console.log('Two seconds later');\n}\n\ndemo();\n</code></pre>\n\n<h3>This is it. <code>await sleep(&lt;duration&gt;)</code>.</h3>\n\n<p>Note that,</p>\n\n<ol>\n<li><code>await</code> can only be executed in functions prefixed with the <code>async</code> keyword, or at the <a href=\"https://developers.google.com/web/updates/2017/08/devtools-release-notes#await\" rel=\"nofollow noreferrer\">top level</a> of your script in some environments (e.g. the Chrome DevTools console, or Runkit).</li>\n<li><code>await</code> only pauses the current <code>async</code> function</li>\n</ol>\n"},{"score":4,"body":"<p>Could do something like this. A sleep method that all functions can inherit:\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Function.prototype.sleep = function(delay, ...args) {\r\n    setTimeout(() =&gt; this(...args), delay)\r\n}\r\n\r\nconsole.log.sleep(2000, 'Hello world!')</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>In sleep method you can return any then-able object. and not necessarily a new promise.</p>\n<p>example :\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const sleep = (t) =&gt;  ({ then: (r) =&gt; setTimeout(r, t) })\n\nconst someMethod = async () =&gt; {\n\n    console.log(\"hi\");\n    await sleep(5000)\n    console.log(\"bye\");\n}\n\nsomeMethod()</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>I think the question is great and points out important perspectives and considerations.</p>\n<p>With that said, I think the core of the question is in the intention and understanding what developer (you) wants to have controlled.</p>\n<p>First, the name <code>sleep</code> is an overloaded naming choice. I.e., &quot;what&quot; is going to be &quot;slept&quot;; and &quot;what&quot; as a developer am I in control of?</p>\n<blockquote>\n<p>In any language-engine, running on any OS process, on any bare-metal-or-hosted system the &quot;developer&quot; is NOT in control <em>(owner)</em> of the OS-shared-resource CPU core(s) [and/or threads] unless they are the writing the OS/Process system itself. <em>CPUs are a time-shared resource, and the currency of work-execution progress are the &quot;cycles&quot; allocated amongst all work to be performed on the system.</em></p>\n</blockquote>\n<p>As an app/service developer, it is best to consider that I am in control of a workflow-activity-stream managed by a os-process/language-engine. On some systems that means I control a native-os-thread <em>(which likely shares CPU cores)</em>, on others it means I control an <strong>async-continuation-workflow chain/tree</strong>.</p>\n<p><strong>In the case of JavaScript, it is the &quot;latter&quot;.</strong></p>\n<p>So when &quot;sleep&quot; is desired, I am intending to cause my workflow to be &quot;delayed&quot; from execution for some period of time, before it proceeds to execute the next &quot;step&quot; (phase/activity/task) in its workflow.</p>\n<p>This is &quot;appropriately&quot; saying that as a developer it is easiest to <em>(think in terms of)</em> model work as a linear-code flow; resorting to compositions of workflows to scale as needed.</p>\n<blockquote>\n<p>Today, in JavaScript, we have the option to design such linear work flows using efficient multi-tasking 1980s actor based continuation architectures <em><strong>(relabeled as modern Futures/Promises/then/await etc)</strong></em>.</p>\n</blockquote>\n<p>With that in mind, my answer is <strong>not</strong> contributing a <strong>new</strong> technical solution, but rather focusing on the <strong>intent</strong> and the <strong>design</strong> <em>perspective</em> within the question itself.</p>\n<p>I suggest that any answer begins with thinking about the above concepts and then choosing a NAME (other than <code>sleep</code>) that reminds and suggests what the intention is.</p>\n<blockquote>\n<p>Workflow</p>\n<ul>\n<li>Choice 1: <code>delayWorkForMs(nMsToDelay)</code></li>\n<li>Choice 2: <code>delayAsyncSequenceForMs(msPeriod)</code></li>\n</ul>\n</blockquote>\n<pre><code>async delayAsyncSequenceForMs(msPeriod) {\n  await new Promise(resolve =&gt; setTimeout(resolve, msPeriod));\n}\n</code></pre>\n<blockquote>\n<p>Keep in mind that any <code>async</code> <em>function</em> <em>always</em> returns a <code>Promise</code>, and <code>await</code> may only be used within an <code>async</code> <em>function</em>.<br>\n<em>(lol, you might ask yourself why...)</em>.<br></p>\n<ul>\n<li>Consideration 1: <strong>do-not</strong> use &quot;loops&quot; to BURN UP cpu-cycles.<br></li>\n<li>Consideration 2: In the JavaScript model, when inside a non-async function you cannot &quot;delay&quot; (wait for) an &quot;async&quot; workflow's execution <em>(unless you are doing bad things needlessly burning cpu cycles)</em>. You can only &quot;delay&quot; code-steps within an &quot;async&quot; function.<br>\nInternally, an &quot;async&quot; function is modelled as a collection of entry-point/continuations at each <code>await</code> <em>keyword</em>. If you are familiar with the backtick interpolation model, you can &quot;think of await&quot; as being conceptually modelled similarly to writing a backquote string like:</li>\n</ul>\n</blockquote>\n<pre><code>  // Conceptualizing, using an interpolation example to illustrate\n  // how to think about &quot;await&quot; and &quot;async&quot; functions\n  `code${await then-restart-point}more-code${await then-restart-point}`\n</code></pre>\n"},{"score":0,"body":"<h3>ONE-LINER using <strong>Promises</strong></h3>\n<pre class=\"lang-js prettyprint-override\"><code>const sleep = t =&gt; new Promise(s =&gt; setTimeout(s, t));\n</code></pre>\n<p><strong>DEMO</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const sleep = t =&gt; new Promise(s =&gt; setTimeout(s, t));\n// usage\nasync function demo() {\n    // count down\n    let i = 6;\n    while (i--) {\n        await sleep(1000);\n        console.log(i);\n    }\n    // sum of numbers 0 to 5 using by delay of 1 second\n    const sum = await [...Array(6).keys()].reduce(async (a, b) =&gt; {\n        a = await a;\n        await sleep(1000);\n        const result = a + b;\n        console.log(`${a} + ${b} = ${result}`);\n        return result;\n    }, Promise.resolve(0));\n    console.log(\"sum\", sum);\n}\ndemo();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"}],"score":2551}