{"body":"<p>I understand JSON, but not JSONP. <a href=\"http://en.wikipedia.org/wiki/JSON\" rel=\"noreferrer\">Wikipedia's document on JSON</a> is (was) the top search result for JSONP. It says this:</p>\n\n<blockquote>\n  <p>JSONP or \"JSON with padding\" is a JSON extension wherein a prefix is specified as an input argument of the call itself.</p>\n</blockquote>\n\n<p>Huh? What call? That doesn't make any sense to me. JSON is a data format. There's no call.</p>\n\n<p>The <a href=\"http://remysharp.com/2007/10/08/what-is-jsonp/\" rel=\"noreferrer\">2nd search result</a> is from some guy named <a href=\"https://stackoverflow.com/users/22617/remy-sharp\">Remy</a>, who writes this about JSONP:</p>\n\n<blockquote>\n  <p>JSONP is script tag injection, passing the response from the server in to a user specified function.</p>\n</blockquote>\n\n<p>I can sort of understand that, but it's still not making any sense.</p>\n\n<hr>\n\n<p>So what is JSONP? Why was it created (what problem does it solve)? And why would I use it? </p>\n\n<hr>\n\n<p><strong>Addendum</strong>: I've just created <a href=\"http://en.wikipedia.org/wiki/JSONP\" rel=\"noreferrer\">a new page for JSONP</a> on Wikipedia; it now has a clear and thorough description of JSONP, based on <a href=\"https://stackoverflow.com/users/25330/jvenema\">jvenema</a>'s answer.</p>\n","title":"What is JSONP, and why was it created?","answers":[{"score":42,"body":"<p>Because you can ask the server to prepend a prefix to the returned JSON object. E.g</p>\n\n<p><code>function_prefix(json_object);</code></p>\n\n<p>in order for the browser to <code>eval</code> \"inline\" the JSON string as an expression. This trick makes it possible for the server to \"inject\" javascript code directly in the Client browser and this with bypassing the \"same origin\" restrictions.</p>\n\n<p>In other words, you can achieve <strong>cross-domain data exchange</strong>.</p>\n\n<hr>\n\n<p>Normally, <code>XMLHttpRequest</code> doesn't permit cross-domain data-exchange directly (one needs to go through a server in the same domain) whereas:</p>\n\n<p><code>&lt;script src=\"some_other_domain/some_data.js&amp;prefix=function_prefix</code>>` one can access data from a domain different than from the origin.</p>\n\n<hr>\n\n<p>Also worth noting: even though the server should be considered as \"trusted\" before attempting that sort of \"trick\", the side-effects of possible change in object format etc. can be contained.  If a <code>function_prefix</code> (i.e. a proper js function) is used to receive the JSON object, the said function can perform checks before accepting/further processing the returned data.</p>\n"},{"score":2105,"body":"<p>It's actually not too complicated...</p>\n\n<p>Say you're on domain <strong><code>example.com</code></strong>, and you want to make a request to domain <strong><code>example.net</code></strong>. To do so, you need to <strong>cross domain</strong> boundaries, a <strong>no-no</strong> in most of browserland. </p>\n\n<p>The one item that bypasses this limitation is <code>&lt;script&gt;</code> tags. When you use a script tag, the domain limitation is ignored, but under normal circumstances, you can't really <strong>do</strong> anything with the results, the script just gets evaluated.</p>\n\n<p>Enter <strong><code>JSONP</code></strong>. When you make your request to a server that is JSONP enabled, you pass a special parameter that tells the server a little bit about your page. That way, the server is able to nicely wrap up its response in a way that your page can handle. </p>\n\n<p>For example, say the server expects a parameter called <strong><code>callback</code></strong> to enable its JSONP capabilities. Then your request would look like:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>http://www.example.net/sample.aspx?callback=mycallback\n</code></pre>\n\n<p>Without JSONP, this might return some basic JavaScript object, like so:</p>\n\n<pre><code>{ foo: 'bar' }\n</code></pre>\n\n<p>However, with JSONP, when the server receives the \"callback\" parameter, it wraps up the result a little differently, returning something like this:</p>\n\n<pre><code>mycallback({ foo: 'bar' });\n</code></pre>\n\n<p>As you can see, it will now invoke the method you specified. So, in your page, you define the callback function:</p>\n\n<pre><code>mycallback = function(data){\n  alert(data.foo);\n};\n</code></pre>\n\n<p>And now, when the script is loaded, it'll be evaluated, and your function will be executed. Voila, cross-domain requests!</p>\n\n<p>It's also worth noting the one major issue with JSONP: you lose a lot of control of the request. For example, there is no \"nice\" way to get proper failure codes back. As a result, you end up using timers to monitor the request, etc, which is always a bit suspect. The proposition for <a href=\"http://www.json.org/JSONRequest.html\" rel=\"noreferrer\">JSONRequest</a> is a great solution to allowing cross domain scripting, maintaining security, and allowing proper control of the request.</p>\n\n<p>These days (2015), <a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"noreferrer\">CORS</a> is the recommended approach vs. JSONRequest. JSONP is still useful for older browser support, but given the security implications, unless you have no choice CORS is the better choice.</p>\n"},{"score":733,"body":"<p><strong>JSONP</strong> is really a simple trick to overcome the <strong>XMLHttpRequest</strong> same domain policy. (As you know one cannot send <strong>AJAX (XMLHttpRequest)</strong> request to a different domain.)</p>\n\n<p>So - instead of using <strong>XMLHttpRequest</strong> we have to use <strong>script</strong> HTML tags, the ones you usually use to load js files, in order for js to get data from another domain. Sounds weird?</p>\n\n<p>Thing is - turns out <strong>script</strong> tags can be used in a fashion similar to <strong>XMLHttpRequest</strong>! Check this out:</p>\n\n<pre><code>script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.someWebApiServer.com/some-data';\n</code></pre>\n\n<p>You will end up with a <strong>script</strong> segment that looks like this after it loads the data:</p>\n\n<pre><code>&lt;script&gt;\n{['some string 1', 'some data', 'whatever data']}\n&lt;/script&gt;\n</code></pre>\n\n<p>However this is a bit inconvenient, because we have to fetch this array from <strong>script</strong> tag. So <strong>JSONP</strong> creators decided that this will work better(and it is):</p>\n\n<pre><code>script = document.createElement('script');\nscript.type = 'text/javascript';\nscript.src = 'http://www.someWebApiServer.com/some-data<b>?callback=my_callback</b>';\n</code></pre>\n\n<p>Notice the <strong>my_callback</strong> function over there? So - when <strong>JSONP</strong> server receives your request and finds callback parameter - instead of returning plain js array it'll return this:</p>\n\n<pre><code>my_callback({['some string 1', 'some data', 'whatever data']});\n</code></pre>\n\n<p><strong>See where the profit is:</strong> now we get automatic callback (my_callback) that'll be triggered once we get the data.<br>\nThat's all there is to know about <strong>JSONP</strong>: it's a callback and script tags.</p>\n\n<p><strong>NOTE: these are simple examples of JSONP usage,  these are not production ready scripts.</strong></p>\n\n<p><strong>Basic JavaScript example (simple Twitter feed using JSONP)</strong></p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id = 'twitterFeed'&gt;&lt;/div&gt;\n        &lt;script&gt;\n        function myCallback(dataWeGotViaJsonp){\n            var text = '';\n            var len = dataWeGotViaJsonp.length;\n            for(var i=0;i&lt;len;i++){\n                twitterEntry = dataWeGotViaJsonp[i];\n                text += '&lt;p&gt;&lt;img src = \"' + twitterEntry.user.profile_image_url_https +'\"/&gt;' + twitterEntry['text'] + '&lt;/p&gt;'\n            }\n            document.getElementById('twitterFeed').innerHTML = text;\n        }\n        &lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"http://twitter.com/status/user_timeline/padraicb.json?count=10&amp;callback=myCallback\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>Basic jQuery example (simple Twitter feed using JSONP)</strong></p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n            $(document).ready(function(){\n                $.ajax({\n                    url: 'http://twitter.com/status/user_timeline/padraicb.json?count=10',\n                    dataType: 'jsonp',\n                    success: function(dataWeGotViaJsonp){\n                        var text = '';\n                        var len = dataWeGotViaJsonp.length;\n                        for(var i=0;i&lt;len;i++){\n                            twitterEntry = dataWeGotViaJsonp[i];\n                            text += '&lt;p&gt;&lt;img src = \"' + twitterEntry.user.profile_image_url_https +'\"/&gt;' + twitterEntry['text'] + '&lt;/p&gt;'\n                        }\n                        $('#twitterFeed').html(text);\n                    }\n                });\n            })\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id = 'twitterFeed'&gt;&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><br>\n<strong>JSONP</strong> stands for <strong>JSON with Padding</strong>. (very poorly named technique as it really has nothing to do with what most people would think of as “padding”.)</p>\n"},{"score":48,"body":"<p>JSONP works by constructing a “script” element (either in HTML markup or inserted into the DOM via JavaScript), which requests to a remote data service location. The response is a javascript loaded on to your browser with name of the pre-defined function along with parameter being passed that is tht JSON data being requested. When the script executes, the function is called along with JSON data, allowing the requesting page to receive and process the data.</p>\n\n<p><strong>For Further Reading Visit:</strong> <a href=\"https://blogs.sap.com/2013/07/15/secret-behind-jsonp/\" rel=\"noreferrer\">https://blogs.sap.com/2013/07/15/secret-behind-jsonp/</a></p>\n\n<p><strong>client side snippet of code</strong></p>\n\n<pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n     &lt;title&gt;AvLabz - CORS : The Secrets Behind JSONP &lt;/title&gt;\n     &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n      &lt;input type=\"text\" id=\"username\" placeholder=\"Enter Your Name\"/&gt;\n      &lt;button type=\"submit\" onclick=\"sendRequest()\"&gt; Send Request to Server &lt;/button&gt;\n    &lt;script&gt;\n    \"use strict\";\n    //Construct the script tag at Runtime\n    function requestServerCall(url) {\n      var head = document.head;\n      var script = document.createElement(\"script\");\n\n      script.setAttribute(\"src\", url);\n      head.appendChild(script);\n      head.removeChild(script);\n    }\n\n    //Predefined callback function    \n    function jsonpCallback(data) {\n      alert(data.message); // Response data from the server\n    }\n\n    //Reference to the input field\n    var username = document.getElementById(\"username\");\n\n    //Send Request to Server\n    function sendRequest() {\n      // Edit with your Web Service URL\n      requestServerCall(\"http://localhost/PHP_Series/CORS/myService.php?callback=jsonpCallback&amp;message=\"+username.value+\"\");\n    }    \n\n  &lt;/script&gt;\n   &lt;/body&gt;\n   &lt;/html&gt;\n</code></pre>\n\n<p><strong>Server side piece of PHP code</strong></p>\n\n<pre><code>&lt;?php\n    header(\"Content-Type: application/javascript\");\n    $callback = $_GET[\"callback\"];\n    $message = $_GET[\"message\"].\" you got a response from server yipeee!!!\";\n    $jsonResponse = \"{\\\"message\\\":\\\"\" . $message . \"\\\"}\";\n    echo $callback . \"(\" . $jsonResponse . \")\";\n?&gt;\n</code></pre>\n"},{"score":19,"body":"<p>JSONP is a great away to get around cross-domain scripting errors. You can consume a JSONP service purely with JS without having to implement a AJAX proxy on the server side. </p>\n\n<p>You can use the <a href=\"http://b1t.co\" rel=\"noreferrer\">b1t.co</a> service to see how it works. This is a free JSONP service that alllows you to minify your URLs. Here is the url to use for the service:</p>\n\n<p><a href=\"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=[resultsCallBack]&amp;url=[escapedUrlToMinify]\" rel=\"noreferrer\">http://b1t.co/Site/api/External/MakeUrlWithGet?callback=[resultsCallBack]&amp;url=[escapedUrlToMinify]</a></p>\n\n<p>For example the call, <a href=\"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=whateverJavascriptName&amp;url=google.com\" rel=\"noreferrer\">http://b1t.co/Site/api/External/MakeUrlWithGet?callback=whateverJavascriptName&amp;url=google.com</a></p>\n\n<p>would return</p>\n\n<pre><code>whateverJavascriptName({\"success\":true,\"url\":\"http://google.com\",\"shortUrl\":\"http://b1t.co/54\"});\n</code></pre>\n\n<p>And thus when that get's loaded in your js as a src, it will automatically run whateverJavascriptName which you should implement as your callback function:</p>\n\n<pre><code>function minifyResultsCallBack(data)\n{\n    document.getElementById(\"results\").innerHTML = JSON.stringify(data);\n}\n</code></pre>\n\n<p>To actually make the JSONP call, you can do it about several ways (including using jQuery) but here is a pure JS example:</p>\n\n<pre><code>function minify(urlToMinify)\n{\n   url = escape(urlToMinify);\n   var s = document.createElement('script');\n   s.id = 'dynScript';\n   s.type='text/javascript';\n   s.src = \"http://b1t.co/Site/api/External/MakeUrlWithGet?callback=resultsCallBack&amp;url=\" + url;\n   document.getElementsByTagName('head')[0].appendChild(s);\n}\n</code></pre>\n\n<p>A step by step example and a jsonp web service to practice on is available at: <a href=\"http://b1t.co/5f\" rel=\"noreferrer\">this post</a></p>\n"},{"score":14,"body":"<p>A simple example for the usage of JSONP.</p>\n\n<p><strong>client.html</strong></p>\n\n<pre><code>    &lt;html&gt;\n    &lt;head&gt;\n   &lt;/head&gt;\n     body&gt;\n\n\n    &lt;input type=\"button\" id=\"001\" onclick=gO(\"getCompany\") value=\"Company\"  /&gt;\n    &lt;input type=\"button\" id=\"002\" onclick=gO(\"getPosition\") value=\"Position\"/&gt;\n    &lt;h3&gt;\n    &lt;div id=\"101\"&gt;\n\n    &lt;/div&gt;\n    &lt;/h3&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n\n    var elem=document.getElementById(\"101\");\n\n    function gO(callback){\n\n    script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = 'http://localhost/test/server.php?callback='+callback;\n    elem.appendChild(script);\n    elem.removeChild(script);\n\n\n    }\n\n    function getCompany(data){\n\n    var message=\"The company you work for is \"+data.company +\"&lt;img src='\"+data.image+\"'/   &gt;\";\n    elem.innerHTML=message;\n}\n\n    function getPosition(data){\n    var message=\"The position you are offered is \"+data.position;\n    elem.innerHTML=message;\n    }\n    &lt;/script&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n\n<p><strong>server.php</strong></p>\n\n<pre><code>  &lt;?php\n\n    $callback=$_GET[\"callback\"];\n    echo $callback;\n\n    if($callback=='getCompany')\n    $response=\"({\\\"company\\\":\\\"Google\\\",\\\"image\\\":\\\"xyz.jpg\\\"})\";\n\n    else\n    $response=\"({\\\"position\\\":\\\"Development Intern\\\"})\";\n    echo $response;\n\n    ?&gt;    \n</code></pre>\n"},{"score":8,"body":"<p>Before understanding JSONP, you need to know JSON format and XML. Currently the most frequently used data format on the web is XML, but XML is very complicated. It makes users inconvenient to process embedded in Web pages. </p>\n\n<p>To make JavaScript can easily exchange data, even as the data processing program, we use the wording according to JavaScript objects and developed a simple data exchange format, which is JSON. JSON can be used as data, or as a JavaScript program. </p>\n\n<p>JSON can be directly embedded in JavaScript, using them you can directly execute certain JSON program, but due to security constraints, the browser Sandbox mechanism disables cross-domain JSON code execution.</p>\n\n<p>To make JSON can be passed after the execution, we developed a JSONP. JSONP bypass the security limits of the browser with JavaScript Callback functionality and the &lt; script > tag. </p>\n\n<p>So in short it explains what JSONP is, what problem it solves (when to use it).</p>\n"},{"score":4,"body":"<p>The great answers have already been given, I just need to give my piece in the form of code blocks in javascript (I will also include more modern and better solution for cross-origin requests: CORS with HTTP Headers):</p>\n\n<p><strong>JSONP:</strong></p>\n\n<p>1.client_jsonp.js</p>\n\n<pre><code>$.ajax({\n    url: \"http://api_test_server.proudlygeek.c9.io/?callback=?\",\n    dataType: \"jsonp\",\n    success: function(data) {\n        console.log(data);    \n    }\n});​​​​​​​​​​​​​​​​​​\n</code></pre>\n\n<p>2.server_jsonp.js</p>\n\n<pre><code>var http = require(\"http\"),\n    url  = require(\"url\");\n\nvar server = http.createServer(function(req, res) {\n\n    var callback = url.parse(req.url, true).query.callback || \"myCallback\";\n    console.log(url.parse(req.url, true).query.callback);\n\n    var data = {\n        'name': \"Gianpiero\",\n        'last': \"Fiorelli\",\n        'age': 37\n    };\n\n    data = callback + '(' + JSON.stringify(data) + ');';\n\n    res.writeHead(200, {'Content-Type': 'application/json'});\n    res.end(data);\n});\n\nserver.listen(process.env.PORT, process.env.IP);\n\nconsole.log('Server running at '  + process.env.PORT + ':' + process.env.IP);\n</code></pre>\n\n<p><strong>CORS</strong>:</p>\n\n<p>3.client_cors.js</p>\n\n<pre><code>$.ajax({\n    url: \"http://api_test_server.proudlygeek.c9.io/\",\n    success: function(data) {\n        console.log(data);    \n    }\n});​\n</code></pre>\n\n<p>4.server_cors.js</p>\n\n<pre><code>var http = require(\"http\"),\n    url  = require(\"url\");\n\nvar server = http.createServer(function(req, res) {\n    console.log(req.headers);\n\n    var data = {\n        'name': \"Gianpiero\",\n        'last': \"Fiorelli\",\n        'age': 37\n    };\n\n    res.writeHead(200, {\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n    });\n\n    res.end(JSON.stringify(data));\n});\n\nserver.listen(process.env.PORT, process.env.IP);\n\nconsole.log('Server running at '  + process.env.PORT + ':' + process.env.IP);\n</code></pre>\n"},{"score":1,"body":"<blockquote>\n  <p><strong>JSONP</strong> stands for <strong>JSON</strong> with <strong>Padding</strong>.</p>\n</blockquote>\n\n<p>Here is the site, with <strong>great examples</strong>, <strong>with the explanation from the simplest use</strong> of this technique <strong>to the most advanced</strong> in plane JavaScript:</p>\n\n<p><a href=\"https://www.w3schools.com/js/js_json_jsonp.asp\" rel=\"nofollow noreferrer\">w3schools.com / JSONP</a></p>\n\n<p>One of my more favorite techniques described above is <strong>Dynamic JSON Result</strong>, which <strong>allow to send JSON to the PHP file in URL parameter</strong>, and let the <strong>PHP file also return a JSON object based on the information it gets</strong>.</p>\n\n<p>Tools like <a href=\"https://learn.jquery.com/ajax/working-with-jsonp/\" rel=\"nofollow noreferrer\">jQuery also have facilities to use JSONP</a>:</p>\n\n<pre><code>jQuery.ajax({\n  url: \"https://data.acgov.org/resource/k9se-aps6.json?city=Berkeley\",\n  jsonp: \"callbackName\",\n  dataType: \"jsonp\"\n}).done(\n  response =&gt; console.log(response)\n);\n</code></pre>\n"},{"score":11,"body":"<h1>TL;DR</h1>\n\n<p>JSONP is an <strong>old trick</strong> invented to bypass the security restriction that forbids us to get JSON data from a different server (a different <strong>origin*</strong>).</p>\n\n<p>The trick works by using a <code>&lt;script&gt;</code> tag that asks for the JSON from that place, e.g.: <code>{ \"user\":\"Smith\" }</code>, but wrapped in a function, the <em>actual JSONP</em> (\"JSON with Padding\"): </p>\n\n<pre><code>peopleDataJSONP({\"user\":\"Smith\"})\n</code></pre>\n\n<p>Receiving it in this form enables us to use the data within our <code>peopleDataJSONP</code> function. <strong>JSONP is a bad practice</strong>, don't use it (read below)</p>\n\n<p><br></p>\n\n<h1>The problem</h1>\n\n<p>Say we're navigating on <code>ourweb.com</code>, and we want to get JSON data (or any raw data really) from <code>anotherweb.com</code>. If we were to use GET request (like <code>XMLHttpRequest</code>, a <code>fetch</code> call, <code>$.ajax</code>, etc.), our browser would tell us it's not allowed with this ugly error:</p>\n\n<p><a href=\"https://i.stack.imgur.com/lezhN.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/lezhN.png\" alt=\"Chrome CORS console error\"></a></p>\n\n<p>How to get the data we want? Well, <code>&lt;script&gt;</code> tags are not subjected to this whole server (origin*) restriction! That's why we can load a library like jQuery or Google Maps from any server, such as a CDN, without any errors.</p>\n\n<p><strong>Important point</strong>: if you think about it, those libraries are <em>actual, runnable JS code</em> (usually a massive function with all the logic inside). But raw data? JSON data <em>is not code</em>. There's nothing to run; it's just plain data.</p>\n\n<p>Therefore, there's no way to handle or manipulate our precious data. The browser will download the data pointed at by our <code>&lt;script&gt;</code> tag and when processing it'll rightfully complain:</p>\n\n<blockquote>\n  <p>wtf is this <code>{\"user\":\"Smith\"}</code> crap we loaded? It's not code. I can't compute, syntax error!</p>\n</blockquote>\n\n<p><br></p>\n\n<h1>The JSONP hack</h1>\n\n<p>The old/hacky way to utilize that data? We need that server to send it with some logic, so when it's loaded, your code in the browser will be able to use said data. So the foreign server sends us the JSON data inside a JS function. The data itself is set up as that function's input. It looks like this:</p>\n\n<pre><code>peopleDataJSONP({\"user\":\"Smith\"})\n</code></pre>\n\n<p>which makes it <em>JS code</em> our browser will parse without complaining! Exactly like it does with the jQuery library.\nNow, to get it like that, the client \"asks\" the JSONP-friendly server for it, usually done like this:</p>\n\n<pre><code>&lt;script src=\"https://anotherweb.com/api/data-from-people.json?myCallback=peopleDataJSONP\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Our browser will receive the JSONP with that function name, hence we need a function with the same name in our code, like this:</p>\n\n<pre><code>const peopleDataJSONP = function(data){\n  alert(data.user); // \"Smith\"\n}\n</code></pre>\n\n<p>Or like this, same outcome:</p>\n\n<pre><code>function peopleDataJSONP(data){\n  alert(data.user); // \"Smith\"\n}\n</code></pre>\n\n<p>The browser will download the JSONP and run it, <strong>which calls our function</strong>, where the argument <code>data</code> will be our JSON. We can now do with our data whatever we want to.</p>\n\n<p><br></p>\n\n<h1>Don't use JSONP, use CORS</h1>\n\n<p>JSONP is a cross-site hack with a few downsides:</p>\n\n<ul>\n<li>We can only perform GET requests</li>\n<li>Since it's a GET request triggered by a simple script tag, we don't get helpful errors or progress info</li>\n<li>There are also some security concerns, like running in your client JS code that could be changed to a malicious payload</li>\n<li>It only solves the problem with JSON data, but Same-Origin security policy applies to other data (WebFonts, images/video drawn with drawImage()...)</li>\n<li>It's not very elegant nor readable.</li>\n</ul>\n\n<p>The takeaway is that there's <strong>no need to use it nowadays</strong>.</p>\n\n<p>JSONP is the trick to get JSON data from another server, but we'll violate the same security principle (Same-Origin) if we need other kinds of cross-site stuff.</p>\n\n<p>You should <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS\" rel=\"noreferrer\">read about CORS here</a>, but the gist of it is:</p>\n\n<blockquote>\n  <p>Cross-Origin Resource Sharing (CORS) is a mechanism that uses\n  additional HTTP headers to tell browsers to give a web application\n  running at one origin, access to selected resources from a different\n  origin. A web application executes a cross-origin HTTP request when it\n  requests a resource that has a different origin (domain, protocol, or\n  port) from its own.</p>\n</blockquote>\n\n<p><br></p>\n\n<hr>\n\n<p>*origin is defined by 3 things: <strong>protocol</strong>, <strong>port</strong>, and <strong>host</strong>. So, for example, <code>https://web.com</code> is a different origin than <code>http://web.com</code> (different protocol) and <code>https://web.com:8081</code> (different port) and obviously <code>https://thatotherweb.net</code> (different host)</p>\n"}],"score":2207}