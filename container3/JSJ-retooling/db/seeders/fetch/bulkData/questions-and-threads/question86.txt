{"body":"<p>Can someone suggest a way to compare the values of <strong>two dates</strong> greater than, less than, and not in the past using JavaScript? The values will be coming from text boxes.</p>\n","title":"Compare two dates with JavaScript","answers":[{"score":14,"body":"<pre><code>var date = new Date(); // will give you todays date.\n\n// following calls, will let you set new dates.\nsetDate()   \nsetFullYear()   \nsetHours()  \nsetMilliseconds()   \nsetMinutes()    \nsetMonth()  \nsetSeconds()    \nsetTime()\n\nvar yesterday = new Date();\nyesterday.setDate(...date info here);\n\nif(date&gt;yesterday)  // will compare dates\n</code></pre>\n"},{"score":35,"body":"<p>what format?</p>\n\n<p>If you construct a Javascript <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Date\" rel=\"noreferrer\">Date object</a>, you can just subtract them to get a milliseconds difference (edit: or just compare them) :</p>\n\n<pre><code>js&gt;t1 = new Date()\nThu Jan 29 2009 14:19:28 GMT-0500 (Eastern Standard Time)\njs&gt;t2 = new Date()\nThu Jan 29 2009 14:19:31 GMT-0500 (Eastern Standard Time)\njs&gt;t2-t1\n2672\njs&gt;t3 = new Date('2009 Jan 1')\nThu Jan 01 2009 00:00:00 GMT-0500 (Eastern Standard Time)\njs&gt;t1-t3\n2470768442\njs&gt;t1&gt;t3\ntrue\n</code></pre>\n"},{"score":2488,"body":"<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\" rel=\"noreferrer\">Date object</a> will do what you want - construct one for each date, then compare them using the <code>&gt;</code>, <code>&lt;</code>, <code>&lt;=</code> or <code>&gt;=</code>. </p>\n\n<p>The <code>==</code>, <code>!=</code>, <code>===</code>, and <code>!==</code> operators require you to use <code>date.getTime()</code> as in </p>\n\n<pre><code>var d1 = new Date();\nvar d2 = new Date(d1);\nvar same = d1.getTime() === d2.getTime();\nvar notSame = d1.getTime() !== d2.getTime();\n</code></pre>\n\n<p>to be clear just checking for equality directly with the date objects won't work</p>\n\n<pre><code>var d1 = new Date();\nvar d2 = new Date(d1);\n\nconsole.log(d1 == d2);   // prints false (wrong!) \nconsole.log(d1 === d2);  // prints false (wrong!)\nconsole.log(d1 != d2);   // prints true  (wrong!)\nconsole.log(d1 !== d2);  // prints true  (wrong!)\nconsole.log(d1.getTime() === d2.getTime()); // prints true (correct)\n</code></pre>\n\n<p>I suggest you use drop-downs or some similar constrained form of date entry rather than text boxes, though, lest you find yourself in input validation hell.</p>\n"},{"score":7,"body":"<p>In order to create dates from free text in Javascript you need to parse it into the Date() object.</p>\n\n<p>You could use Date.parse() which takes free text tries to convert it into a new date but if you have control over the page I would recommend using HTML select boxes instead or a date picker such as the <a href=\"http://developer.yahoo.com/yui/calendar/\" rel=\"noreferrer\">YUI calendar control</a> or the <a href=\"http://docs.jquery.com/UI/Datepicker\" rel=\"noreferrer\">jQuery UI Datepicker</a>.</p>\n\n<p>Once you have a date as other people have pointed out you can use simple arithmetic to subtract the dates and convert it back into a number of days by dividing the number (in seconds) by the number of seconds in a day (60*60*24 = 86400).</p>\n"},{"score":438,"body":"<p>The easiest way to compare dates in javascript is to first convert it to a Date object and then compare these date-objects.</p>\n\n<p>Below you find an object with three functions:</p>\n\n<ul>\n<li><p><strong>dates.compare(a,b)</strong></p>\n\n<p>Returns a number:</p>\n\n<ul>\n<li>-1 if a &lt; b</li>\n<li>0 if a = b</li>\n<li>1 if a &gt; b</li>\n<li>NaN if a or b is an illegal date</li>\n</ul></li>\n<li><p><strong>dates.inRange</strong> (d,start,end)</p>\n\n<p>Returns a boolean or NaN:</p>\n\n<ul>\n<li><em>true</em> if <em>d</em> is between the <em>start</em> and <em>end</em> (inclusive)</li>\n<li><em>false</em> if <em>d</em> is before <em>start</em> or after <em>end</em>.</li>\n<li>NaN if one or more of the dates are illegal.</li>\n</ul></li>\n<li><p><strong>dates.convert</strong></p>\n\n<p>Used by the other functions to convert their input to a date object. The input can be</p>\n\n<ul>\n<li>a <strong>date</strong>-object : The input is returned as is.</li>\n<li>an <strong>array</strong>: Interpreted as [year,month,day]. <strong>NOTE</strong> month is 0-11.</li>\n<li>a <strong>number</strong> : Interpreted as number of milliseconds since 1 Jan 1970 (a timestamp) </li>\n<li>a <strong>string</strong> : Several different formats is supported, like \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.</li>\n<li>an <strong>object</strong>: Interpreted as an object with year, month and date attributes.  <strong>NOTE</strong> month is 0-11.</li>\n</ul></li>\n</ul>\n\n<p>.</p>\n\n<pre><code>// Source: http://stackoverflow.com/questions/497790\nvar dates = {\n    convert:function(d) {\n        // Converts the date in d to a date-object. The input can be:\n        //   a date object: returned without modification\n        //  an array      : Interpreted as [year,month,day]. NOTE: month is 0-11.\n        //   a number     : Interpreted as number of milliseconds\n        //                  since 1 Jan 1970 (a timestamp) \n        //   a string     : Any format supported by the javascript engine, like\n        //                  \"YYYY/MM/DD\", \"MM/DD/YYYY\", \"Jan 31 2009\" etc.\n        //  an object     : Interpreted as an object with year, month and date\n        //                  attributes.  **NOTE** month is 0-11.\n        return (\n            d.constructor === Date ? d :\n            d.constructor === Array ? new Date(d[0],d[1],d[2]) :\n            d.constructor === Number ? new Date(d) :\n            d.constructor === String ? new Date(d) :\n            typeof d === \"object\" ? new Date(d.year,d.month,d.date) :\n            NaN\n        );\n    },\n    compare:function(a,b) {\n        // Compare two dates (could be of any type supported by the convert\n        // function above) and returns:\n        //  -1 : if a &lt; b\n        //   0 : if a = b\n        //   1 : if a &gt; b\n        // NaN : if a or b is an illegal date\n        // NOTE: The code inside isFinite does an assignment (=).\n        return (\n            isFinite(a=this.convert(a).valueOf()) &amp;&amp;\n            isFinite(b=this.convert(b).valueOf()) ?\n            (a&gt;b)-(a&lt;b) :\n            NaN\n        );\n    },\n    inRange:function(d,start,end) {\n        // Checks if date in d is between dates in start and end.\n        // Returns a boolean or NaN:\n        //    true  : if d is between start and end (inclusive)\n        //    false : if d is before start or after end\n        //    NaN   : if one or more of the dates is illegal.\n        // NOTE: The code inside isFinite does an assignment (=).\n       return (\n            isFinite(d=this.convert(d).valueOf()) &amp;&amp;\n            isFinite(start=this.convert(start).valueOf()) &amp;&amp;\n            isFinite(end=this.convert(end).valueOf()) ?\n            start &lt;= d &amp;&amp; d &lt;= end :\n            NaN\n        );\n    }\n}\n</code></pre>\n"},{"score":13,"body":"<pre><code>function datesEqual(a, b)\n{\n   return (!(a&gt;b || b&gt;a))\n}\n</code></pre>\n"},{"score":-8,"body":"<p>Dates comparison:</p>\n\n<pre><code>var str1  = document.getElementById(\"Fromdate\").value;\nvar str2  = document.getElementById(\"Todate\").value;\nvar dt1   = parseInt(str1.substring(0,2),10); \nvar mon1  = parseInt(str1.substring(3,5),10);\nvar yr1   = parseInt(str1.substring(6,10),10); \nvar dt2   = parseInt(str2.substring(0,2),10); \nvar mon2  = parseInt(str2.substring(3,5),10); \nvar yr2   = parseInt(str2.substring(6,10),10); \nvar date1 = new Date(yr1, mon1, dt1); \nvar date2 = new Date(yr2, mon2, dt2); \n\nif(date2 &lt; date1)\n{\n   alert(\"To date cannot be greater than from date\");\n   return false; \n} \nelse \n{ \n   alert(\"Submitting ...\");\n   document.form1.submit(); \n} \n</code></pre>\n"},{"score":8,"body":"<p>Say you got the date objects A and B, get their EPOC time value, then subtract to get the difference in milliseconds.</p>\n\n<pre><code>var diff = +A - +B;\n</code></pre>\n\n<p>That's all.</p>\n"},{"score":5,"body":"<p>An Improved version of the code posted by \"some\" </p>\n\n<pre><code>/* Compare the current date against another date.\n *\n * @param b  {Date} the other date\n * @returns   -1 : if this &lt; b\n *             0 : if this === b\n *             1 : if this &gt; b\n *            NaN : if a or b is an illegal date\n*/ \nDate.prototype.compare = function(b) {\n  if (b.constructor !== Date) {\n    throw \"invalid_date\";\n  }\n\n return (isFinite(this.valueOf()) &amp;&amp; isFinite(b.valueOf()) ? \n          (this&gt;b)-(this&lt;b) : NaN \n        );\n};\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>  var a = new Date(2011, 1-1, 1);\n  var b = new Date(2011, 1-1, 1);\n  var c = new Date(2011, 1-1, 31);\n  var d = new Date(2011, 1-1, 31);\n\n  assertEquals( 0, a.compare(b));\n  assertEquals( 0, b.compare(a));\n  assertEquals(-1, a.compare(c));\n  assertEquals( 1, c.compare(a));\n</code></pre>\n"},{"score":90,"body":"<p>By far the easiest method is to subtract one date from the other and compare the result.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var oDateOne = new Date();\r\nvar oDateTwo = new Date();\r\n\r\nalert(oDateOne - oDateTwo === 0);\r\nalert(oDateOne - oDateTwo &lt; 0);\r\nalert(oDateOne - oDateTwo &gt; 0);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":6,"body":"<p>If following is your date format, you can use this code:</p>\n\n<pre><code>var first = '2012-11-21';\nvar second = '2012-11-03';\nif(parseInt(first.replace(/-/g,\"\"),10) &gt; parseInt(second.replace(/-/g,\"\"),10)){\n   //...\n}\n</code></pre>\n\n<p>It will check whether <code>20121121</code> number is bigger than <code>20121103</code> or not.</p>\n"},{"score":1,"body":"<pre><code>        from_date ='10-07-2012';\n        to_date = '05-05-2012';\n        var fromdate = from_date.split('-');\n        from_date = new Date();\n        from_date.setFullYear(fromdate[2],fromdate[1]-1,fromdate[0]);\n        var todate = to_date.split('-');\n        to_date = new Date();\n        to_date.setFullYear(todate[2],todate[1]-1,todate[0]);\n        if (from_date &gt; to_date ) \n        {\n            alert(\"Invalid Date Range!\\nStart Date cannot be after End Date!\")\n\n            return false;\n        }\n</code></pre>\n\n<p>Use this code to compare the date using javascript.</p>\n\n<p>Thanks\nD.Jeeva</p>\n"},{"score":16,"body":"<p>you use this code,   </p>\n\n<pre><code>var firstValue = \"2012-05-12\".split('-');\nvar secondValue = \"2014-07-12\".split('-');\n\n var firstDate=new Date();\n firstDate.setFullYear(firstValue[0],(firstValue[1] - 1 ),firstValue[2]);\n\n var secondDate=new Date();\n secondDate.setFullYear(secondValue[0],(secondValue[1] - 1 ),secondValue[2]);     \n\n  if (firstDate &gt; secondDate)\n  {\n   alert(\"First Date  is greater than Second Date\");\n  }\n else\n  {\n    alert(\"Second Date  is greater than First Date\");\n  }\n</code></pre>\n\n<p>And also check this link\n<a href=\"http://www.w3schools.com/js/js_obj_date.asp\" rel=\"noreferrer\">http://www.w3schools.com/js/js_obj_date.asp</a></p>\n"},{"score":5,"body":"<p>I usually store <code>Dates</code> as <code>timestamps(Number)</code> in databases.</p>\n<p>When I need to compare, I simply compare among those timestamps or</p>\n<p>convert it to Date Object and then compare with <code>&gt; &lt;</code>if necessary.</p>\n<p><strong>Note that == or === does not work properly unless your variables are references of the same Date Object.</strong></p>\n<p><strong>Convert those Date objects to timestamp(number) first and then compare equality of them.</strong></p>\n<hr />\n<h2>Date to Timestamp</h2>\n<pre><code>var timestamp_1970 = new Date(0).getTime(); // 1970-01-01 00:00:00\nvar timestamp = new Date().getTime(); // Current Timestamp\n</code></pre>\n<h2>Timestamp to Date</h2>\n<pre><code>var timestamp = 0; // 1970-01-01 00:00:00\nvar DateObject = new Date(timestamp);\n</code></pre>\n"},{"score":8,"body":"<p>Subtract two date get the difference in millisecond, if you get <code>0</code> it's the same date</p>\n\n\n\n<pre><code>function areSameDate(d1, d2){\n    return d1 - d2 === 0\n}\n</code></pre>\n"},{"score":165,"body":"<p>The relational operators <code>&lt;</code> <code>&lt;=</code> <code>&gt;</code> <code>&gt;=</code> can be used to compare JavaScript dates:</p>\n\n<pre><code>var d1 = new Date(2013, 0, 1);\nvar d2 = new Date(2013, 0, 2);\nd1 &lt;  d2; // true\nd1 &lt;= d2; // true\nd1 &gt;  d2; // false\nd1 &gt;= d2; // false\n</code></pre>\n\n<p>However, the equality operators <code>==</code> <code>!=</code> <code>===</code> <code>!==</code> cannot be used to compare (the value of) dates <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators\">because</a>:</p>\n\n<blockquote>\n  <ul>\n  <li>Two distinct objects are never equal for either strict or abstract comparisons.</li>\n  <li>An expression comparing Objects is only true if the operands reference the same Object.</li>\n  </ul>\n</blockquote>\n\n<p>You can compare the value of dates for equality using any of these methods:</p>\n\n<pre><code>var d1 = new Date(2013, 0, 1);\nvar d2 = new Date(2013, 0, 1);\n/*\n * note: d1 == d2 returns false as described above\n */\nd1.getTime() == d2.getTime(); // true\nd1.valueOf() == d2.valueOf(); // true\nNumber(d1)   == Number(d2);   // true\n+d1          == +d2;          // true\n</code></pre>\n\n<p>Both <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\"><code>Date.getTime()</code></a> and <code>Date.valueOf()</code> return the number of milliseconds since January 1, 1970, 00:00 UTC. Both <code>Number</code> function and unary <code>+</code> operator call the <code>valueOf()</code> methods behind the scenes.</p>\n"},{"score":1,"body":"<pre><code>var curDate=new Date();\nvar startDate=document.forms[0].m_strStartDate;\n\nvar endDate=document.forms[0].m_strEndDate;\nvar startDateVal=startDate.value.split('-');\nvar endDateVal=endDate.value.split('-');\nvar firstDate=new Date();\nfirstDate.setFullYear(startDateVal[2], (startDateVal[1] - 1), startDateVal[0]);\n\nvar secondDate=new Date();\nsecondDate.setFullYear(endDateVal[2], (endDateVal[1] - 1), endDateVal[0]);\nif(firstDate &gt; curDate) {\n    alert(\"Start date cannot be greater than current date!\");\n    return false;\n}\nif (firstDate &gt; secondDate) {\n    alert(\"Start date cannot be greater!\");\n    return false;\n}\n</code></pre>\n"},{"score":321,"body":"<p>Compare <code>&lt;</code> and <code>&gt;</code> just as usual, but anything involving <code>=</code> should use a <code>+</code> prefix. Like so:</p>\n<pre><code>var x = new Date('2013-05-23');\nvar y = new Date('2013-05-23');\n\n// less than, greater than is fine:\nx &lt; y; =&gt; false\nx &gt; y; =&gt; false\nx === y; =&gt; false, oops!\n\n// anything involving '=' should use the '+' prefix\n// it will then compare the dates' millisecond values\n+x &lt;= +y;  =&gt; true\n+x &gt;= +y;  =&gt; true\n+x === +y; =&gt; true\n</code></pre>\n"},{"score":17,"body":"<p><strong>SHORT ANSWER</strong></p>\n\n<p>Here is a function that return {boolean} if the from dateTime > to dateTime <a href=\"http://jsfiddle.net/NTghK/\" rel=\"noreferrer\">Demo in action</a></p>\n\n<pre><code>var from = '08/19/2013 00:00'\nvar to = '08/12/2013 00:00 '\n\nfunction isFromBiggerThanTo(dtmfrom, dtmto){\n   return new Date(dtmfrom).getTime() &gt;=  new Date(dtmto).getTime() ;\n}\nconsole.log(isFromBiggerThanTo(from, to)); //true\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p><a href=\"http://jsfiddle.net/minagabriel/Fu7Ag/1/\" rel=\"noreferrer\">jsFiddle </a></p>\n\n<pre><code>var date_one = '2013-07-29 01:50:00',\ndate_two = '2013-07-29 02:50:00';\n//getTime() returns the number of milliseconds since 01.01.1970.\nvar timeStamp_date_one = new Date(date_one).getTime() ; //1375077000000 \nconsole.log(typeof timeStamp_date_one);//number \nvar timeStamp_date_two = new Date(date_two).getTime() ;//1375080600000 \nconsole.log(typeof timeStamp_date_two);//number \n</code></pre>\n\n<p>since you are now having both datetime in number type\nyou can compare them with any Comparison operations </p>\n\n<p>( >, &lt; ,= ,!= ,== ,!== ,>= AND &lt;=) </p>\n\n<p><strong>Then</strong></p>\n\n<p>if you are familiar with <code>C#</code> Custom Date and Time Format String this library should do the exact same thing and help you format your date and time <a href=\"https://rawgithub.com/minagabriel/dtmFRM/master/dtmFRM.js\" rel=\"noreferrer\">dtmFRM</a> whether you are passing in date time string or unix format </p>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>var myDateTime = new dtmFRM();\n\nalert(myDateTime.ToString(1375077000000, \"MM/dd/yyyy hh:mm:ss ampm\"));\n//07/29/2013 01:50:00 AM\n\nalert(myDateTime.ToString(1375077000000,\"the year is yyyy and the day is dddd\"));\n//this year is 2013 and the day is Monday\n\nalert(myDateTime.ToString('1/21/2014', \"this month is MMMM and the day is dd\"));\n//this month is january and the day is 21\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/minagabriel/8fPtd/2/\" rel=\"noreferrer\">DEMO</a></p>\n\n<p>all you have to do is passing any of these format pacified in the library <code>js</code> file </p>\n"},{"score":1,"body":"<p>Here is what I did in one of my projects,</p>\n\n<pre><code>function CompareDate(tform){\n     var startDate = new Date(document.getElementById(\"START_DATE\").value.substring(0,10));\n     var endDate = new Date(document.getElementById(\"END_DATE\").value.substring(0,10));\n\n     if(tform.START_DATE.value!=\"\"){\n         var estStartDate = tform.START_DATE.value;\n         //format for Oracle\n         tform.START_DATE.value = estStartDate + \" 00:00:00\";\n     }\n\n     if(tform.END_DATE.value!=\"\"){\n         var estEndDate = tform.END_DATE.value;\n         //format for Oracle\n         tform.END_DATE.value = estEndDate + \" 00:00:00\";\n     }\n\n     if(endDate &lt;= startDate){\n         alert(\"End date cannot be smaller than or equal to Start date, please review you selection.\");\n         tform.START_DATE.value = document.getElementById(\"START_DATE\").value.substring(0,10);\n         tform.END_DATE.value = document.getElementById(\"END_DATE\").value.substring(0,10);\n         return false;\n     }\n}\n</code></pre>\n\n<p>calling this on form onsubmit.\nhope this helps.</p>\n"},{"score":37,"body":"<p>Compare day only (ignoring time component):</p>\n\n<pre><code>Date.prototype.sameDay = function(d) {\n  return this.getFullYear() === d.getFullYear()\n    &amp;&amp; this.getDate() === d.getDate()\n    &amp;&amp; this.getMonth() === d.getMonth();\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>if(date1.sameDay(date2)) {\n    // highlight day on calendar or something else clever\n}\n</code></pre>\n"},{"score":3,"body":"<p>Before comparing the <code>Dates</code> object, try setting both of their milliseconds to zero like <code>Date.setMilliseconds(0);</code>.</p>\n\n<p>In some cases where the <code>Date</code> object is dynamically created in javascript, if you keep printing the <code>Date.getTime()</code>, you'll see the milliseconds changing, which will prevent the equality of both dates.</p>\n"},{"score":-2,"body":"<p>Try using this code    </p>\n\n<pre><code>var f =date1.split(\"/\");\n\nvar t =date2.split(\"/\");\n\nvar x =parseInt(f[2]+f[1]+f[0]);\n\nvar y =parseInt(t[2]+t[1]+t[0]);\n\nif(x &gt; y){\n    alert(\"date1 is after date2\");\n}\n\nelse if(x &lt; y){\n    alert(\"date1 is before date2\");\n}\n\nelse{\n    alert(\"both date are same\");\n}\n</code></pre>\n"},{"score":11,"body":"<p>Just to add yet another possibility to the many existing options, you could try:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if (date1.valueOf()==date2.valueOf()) .....\n</code></pre>\n\n<p>...which seems to work for me.  Of course you do have to ensure that both dates are not undefined...</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if ((date1?date1.valueOf():0)==(date2?date2.valueOf():0) .....\n</code></pre>\n\n<p>This way we can ensure that a positive comparison is made if both are undefined also, or...</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>if ((date1?date1.valueOf():0)==(date2?date2.valueOf():-1) .....\n</code></pre>\n\n<p>...if you prefer them not to be equal.</p>\n"},{"score":1,"body":"<p>Let's suppose that you deal with this <code>2014[:-/.]06[:-/.]06</code> or this <code>06[:-/.]06[:-/.]2014</code> date format, then you may compare dates this way </p>\n\n<pre><code>var a = '2014.06/07', b = '2014-06.07', c = '07-06/2014', d = '07/06.2014';\n\nparseInt(a.replace(/[:\\s\\/\\.-]/g, '')) == parseInt(b.replace(/[:\\s\\/\\.-]/g, '')); // true\nparseInt(c.replace(/[:\\s\\/\\.-]/g, '')) == parseInt(d.replace(/[:\\s\\/\\.-]/g, '')); // true\nparseInt(a.replace(/[:\\s\\/\\.-]/g, '')) &lt; parseInt(b.replace(/[:\\s\\/\\.-]/g, '')); // false\nparseInt(c.replace(/[:\\s\\/\\.-]/g, '')) &gt; parseInt(d.replace(/[:\\s\\/\\.-]/g, '')); // false\n</code></pre>\n\n<p>As you can see, we strip separator(s) and then compare integers.</p>\n"},{"score":6,"body":"<pre><code>var date_today=new Date();\nvar formated_date = formatDate(date_today);//Calling formatDate Function\n\nvar input_date=\"2015/04/22 11:12 AM\";\n\nvar currentDateTime = new Date(Date.parse(formated_date));\nvar inputDateTime   = new Date(Date.parse(input_date));\n\nif (inputDateTime &lt;= currentDateTime){\n    //Do something...\n}\n\nfunction formatDate(date) {\n    var hours = date.getHours();\n    var minutes = date.getMinutes();\n    var ampm = hours &gt;= 12 ? 'PM' : 'AM';\n\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    hours   = hours &lt; 10 ? '0'+hours : hours ;\n\n    minutes = minutes &lt; 10 ? '0'+minutes : minutes;\n\n    var strTime = hours+\":\"+minutes+ ' ' + ampm;\n    return  date.getFullYear()+ \"/\" + ((date.getMonth()+1) &lt; 10 ? \"0\"+(date.getMonth()+1) :\n    (date.getMonth()+1) ) + \"/\" + (date.getDate() &lt; 10 ? \"0\"+date.getDate() :\n    date.getDate()) + \" \" + strTime;\n}\n</code></pre>\n"},{"score":1,"body":"<p>Hi Here is my code to compare dates . In my case i am doing a check to not allow to select past dates.</p>\n\n<pre><code>var myPickupDate = &lt;pick up date&gt; ;\nvar isPastPickupDateSelected = false;\nvar currentDate = new Date();\n\nif(currentDate.getFullYear() &lt;= myPickupDate.getFullYear()){\n    if(currentDate.getMonth()+1 &lt;= myPickupDate.getMonth()+1 || currentDate.getFullYear() &lt; myPickupDate.getFullYear()){\n                        if(currentDate.getDate() &lt;= myPickupDate.getDate() || currentDate.getMonth()+1 &lt; myPickupDate.getMonth()+1 || currentDate.getFullYear() &lt; myPickupDate.getFullYear()){\n                                            isPastPickupDateSelected = false;\n                                            return;\n                                        }\n                    }\n}\nconsole.log(\"cannot select past pickup date\");\nisPastPickupDateSelected = true;\n</code></pre>\n"},{"score":12,"body":"<p><strong>Via <a href=\"https://momentjs.com/\" rel=\"nofollow noreferrer\">Moment.js</a></strong></p>\n\n<p>Jsfiddle: <a href=\"http://jsfiddle.net/guhokemk/1/\" rel=\"nofollow noreferrer\">http://jsfiddle.net/guhokemk/1/</a></p>\n\n<pre><code>function compare(dateTimeA, dateTimeB) {\n    var momentA = moment(dateTimeA,\"DD/MM/YYYY\");\n    var momentB = moment(dateTimeB,\"DD/MM/YYYY\");\n    if (momentA &gt; momentB) return 1;\n    else if (momentA &lt; momentB) return -1;\n    else return 0;\n}\n\nalert(compare(\"11/07/2015\", \"10/07/2015\"));\n</code></pre>\n\n<p>The method returns 1 if <code>dateTimeA</code> is greater than <code>dateTimeB</code></p>\n\n<p>The method returns 0 if <code>dateTimeA</code> equals <code>dateTimeB</code></p>\n\n<p>The method returns -1 if <code>dateTimeA</code> is less than <code>dateTimeB</code></p>\n"},{"score":8,"body":"<p>To compare two date we can use date.js JavaScript library which can be found at : <a href=\"https://code.google.com/archive/p/datejs/downloads\" rel=\"noreferrer\">https://code.google.com/archive/p/datejs/downloads</a></p>\n\n<p>and use the <code>Date.compare( Date date1, Date date2 )</code> method and it return a <strong>number</strong> which mean the following result:</p>\n\n<p>-1 = date1 is lessthan date2.</p>\n\n<p>0 = values are equal. </p>\n\n<p>1 = date1 is greaterthan date2.</p>\n"},{"score":1,"body":"<p>Another way to compare two dates, is through the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString\" rel=\"nofollow noreferrer\"><code>toISOString()</code></a> method. This is especially useful when comparing to a fixed date kept in a string, since you can avoid creating a short-lived object. By virtue of the ISO 8601 format, you can compare these strings lexicographically (at least when you're using the same timezone).</p>\n\n<p>I'm not necessarily saying that it's better than using time objects or timestamps; just offering this as another option. There might be edge cases when this could fail, but I haven't stumbled upon them yet :)</p>\n"},{"score":15,"body":"<p><strong>Note - Compare Only Date Part:</strong></p>\n\n<p>When we compare two date in javascript. It takes hours, minutes and seconds also into consideration.. So If we only need to compare date only, this is the approach: </p>\n\n<pre><code>var date1= new Date(\"01/01/2014\").setHours(0,0,0,0);\n\nvar date2= new Date(\"01/01/2014\").setHours(0,0,0,0);\n</code></pre>\n\n<p>Now: <code>if date1.valueOf()&gt; date2.valueOf()</code> will work like a charm.</p>\n"},{"score":-1,"body":"<p>try this\nwhile compare date should be iso format \"yyyy-MM-dd\"\nif you want to compare only dates use this datehelper</p>\n\n<pre><code>&lt;a href=\"https://plnkr.co/edit/9N8ZcC?p=preview\"&gt; Live Demo&lt;/a&gt;\n</code></pre>\n"},{"score":76,"body":"<p>Comparing <strong>dates</strong> in JavaScript is quite easy... JavaScript has <strong>built-in</strong> comparison system for <strong>dates</strong> which makes it so easy to do the comparison...</p>\n\n<p>Just follow these steps for comparing 2 dates value, for example you have 2 inputs which each has a Date value in <code>String</code> and you to compare them...</p>\n\n<p><strong>1.</strong> you have 2 string values you get from an input and you'd like to compare them, they are as below:</p>\n\n<pre><code>var date1 = '01/12/2018';\nvar date2 = '12/12/2018';\n</code></pre>\n\n<p><strong>2.</strong> They need to be <code>Date Object</code> to be compared as date values, so simply convert them to date, using <code>new Date()</code>, I just re-assign them for simplicity of explanation, but you can do it anyway you like:</p>\n\n<pre><code>date1 = new Date(date1);\ndate2 = new Date(date2);\n</code></pre>\n\n<p><strong>3.</strong> Now simply compare them,  using the <code>&gt;</code> <code>&lt;</code>  <code>&gt;=</code> <code>&lt;=</code></p>\n\n<pre><code>date1 &gt; date2;  //false\ndate1 &lt; date2;  //true\ndate1 &gt;= date2; //false\ndate1 &lt;= date2; //true\n</code></pre>\n\n<p><a href=\"https://i.stack.imgur.com/r078N.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/r078N.png\" alt=\"compare dates in javascript\"></a></p>\n"},{"score":0,"body":"<p>You can date compare as most simple and understandable way like.</p>\n\n<pre><code>&lt;input type=\"date\" id=\"getdate1\" /&gt;\n&lt;input type=\"date\" id=\"getdate2\" /&gt;\n</code></pre>\n\n<p>let suppose you have two date input you want to compare them.</p>\n\n<p>so firstly write a common method to parse date.</p>\n\n<pre><code> &lt;script type=\"text/javascript\"&gt;\n            function parseDate(input) {\n             var datecomp= input.split('.'); //if date format 21.09.2017\n\n              var tparts=timecomp.split(':');//if time also giving\n              return new Date(dparts[2], dparts[1]-1, dparts[0], tparts[0], tparts[1]);\n// here new date(  year, month, date,)\n            }\n        &lt;/script&gt;\n</code></pre>\n\n<p>parseDate() is the make common method for parsing the date.\n now you can checks your date =, > ,&lt; any type of compare</p>\n\n<pre><code>    &lt;script type=\"text/javascript\"&gt;\n\n              $(document).ready(function(){\n              //parseDate(pass in this method date);\n                    Var Date1=parseDate($(\"#getdate1\").val());\n                        Var Date2=parseDate($(\"#getdate2\").val());\n               //use any oe &lt; or &gt; or = as per ur requirment \n               if(Date1 = Date2){\n         return false;  //or your code {}\n}\n });\n    &lt;/script&gt;\n</code></pre>\n\n<p>For Sure this code will help you.</p>\n"},{"score":12,"body":"<p><strong>BEWARE THE TIMEZONE</strong></p>\n\n<p>A javascript date has <em>no notion of timezone</em>. It's a moment in time (ticks since the epoch) with handy functions for translating to and from strings in the \"local\" timezone. If you want to work with dates using date objects, as everyone here is doing, <strong>you want your dates to represent UTC midnight at the start of the date in question.</strong> This is a common and necessary convention that lets you work with dates regardless of the season or timezone of their creation. So you need to be very vigilant to manage the notion of timezone, particularly when you create your midnight UTC Date object.  </p>\n\n<p>Most of the time, you will want your date to reflect the timezone of the user. <strong>Click if today is your birthday</strong>. Users in NZ and US click at the same time and get different dates. In that case, do this...</p>\n\n<pre><code>// create a date (utc midnight) reflecting the value of myDate and the environment's timezone offset.\nnew Date(Date.UTC(myDate.getFullYear(),myDate.getMonth(), myDate.getDate()));\n</code></pre>\n\n<p>Sometimes, international comparability trumps local accuracy. In that case, do this...</p>\n\n<pre><code>// the date in London of a moment in time. Device timezone is ignored.\nnew Date(Date.UTC(myDate.getUTCYear(), myDate.getyUTCMonth(), myDate.getUTCDate()));\n</code></pre>\n\n<p><strong>Now you can directly compare your date objects as the other answers suggest.</strong></p>\n\n<p>Having taken care to manage timezone when you create, you also need to be sure to keep timezone out when you convert back to a string representation. <strong>So you can safely use...</strong></p>\n\n<ul>\n<li><code>toISOString()</code></li>\n<li><code>getUTCxxx()</code></li>\n<li><code>getTime() //returns a number with no time or timezone.</code></li>\n<li><code>.toLocaleDateString(\"fr\",{timezone:\"UTC\"}) // whatever locale you want, but ALWAYS UTC.</code></li>\n</ul>\n\n<p><strong>And totally avoid everything else, especially...</strong></p>\n\n<ul>\n<li><code>getYear()</code>,<code>getMonth()</code>,<code>getDate()</code> </li>\n</ul>\n"},{"score":18,"body":"<p>The simple way is,</p>\n\n<pre><code>var first = '2012-11-21';\nvar second = '2012-11-03';\n\nif (new Date(first) &gt; new Date(second) {\n    .....\n}\n</code></pre>\n"},{"score":1,"body":"<p>All the above-given answers only solved one thing: compare two dates.</p>\n\n<p>Indeed, they seem to be the answers to the question, but a big part is missing: </p>\n\n<p><strong>What if I want to check whether a person is fully 18 years old?</strong></p>\n\n<p><strong>Unfortunately, NONE of the above-given answers would be able to answer that question.</strong> </p>\n\n<p>For example, the current time (around the time when I started to type these words) is Fri Jan 31 2020 10:41:04 GMT-0600 (Central Standard Time), while a customer enters his Date of Birth as \"01/31/2002\". </p>\n\n<p>If we use <strong>\"365 days/year\"</strong>, which is <strong>\"31536000000\"</strong> milliseconds, we would get the following result:</p>\n\n<pre><code>       let currentTime = new Date();\n       let customerTime = new Date(2002, 1, 31);\n       let age = (currentTime.getTime() - customerTime.getTime()) / 31536000000\n       console.log(\"age: \", age);\n</code></pre>\n\n<p>with the following print-out: </p>\n\n<pre><code>       age: 17.92724710838407\n</code></pre>\n\n<p>But <strong>LEGALLY</strong>, that customer is already 18 years old. Even he enters \"01/30/2002\", the result would still be </p>\n\n<pre><code>       age: 17.930039743467784\n</code></pre>\n\n<p>which is less than 18. The system would report the \"under age\" error.</p>\n\n<p>And this would just keep going for \"01/29/2002\", \"01/28/2002\", \"01/27/2002\" ... \"01/05/2002\", <strong>UNTIL</strong> \"01/04/2002\". </p>\n\n<p><strong>A system like that would just kill all the customers who were born between 18 years 0 days and 18 years 26 days ago, because they are legally 18 years old, while the system shows \"under age\".</strong>  </p>\n\n<p><strong>The following is an answer to a question like that:</strong></p>\n\n<pre><code>invalidBirthDate: 'Invalid date. YEAR cannot be before 1900.',\ninvalidAge: 'Invalid age. AGE cannot be less than 18.',\n\npublic static birthDateValidator(control: any): any {\n    const val = control.value;\n    if (val != null) {\n        const slashSplit = val.split('-');\n        if (slashSplit.length === 3) {\n            const customerYear = parseInt(slashSplit[0], 10);\n            const customerMonth = parseInt(slashSplit[1], 10);\n            const customerDate = parseInt(slashSplit[2], 10);\n            if (customerYear &lt; 1900) {\n                return { invalidBirthDate: true };\n            } else {\n                const currentTime = new Date();\n                const currentYear = currentTime.getFullYear();\n                const currentMonth = currentTime.getMonth() + 1;\n                const currentDate = currentTime.getDate();\n                if (currentYear - customerYear &lt; 18) {\n                    return { invalidAge: true };\n                } else if (\n                    currentYear - customerYear === 18 &amp;&amp;\n                    currentMonth - customerMonth &lt; 0) {\n                    return { invalidAge: true };\n                } else if (\n                    currentYear - customerYear === 18 &amp;&amp;\n                    currentMonth - customerMonth === 0 &amp;&amp;\n                    currentDate - customerDate &lt; 0) {\n                    return { invalidAge: true };\n                } else {\n                    return null;\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"},{"score":5,"body":"<h2>Performance</h2>\n\n<p>Today 2020.02.27 I perform tests of chosen solutions on Chrome v80.0, Safari v13.0.5 and Firefox 73.0.1 on MacOs High Sierra v10.13.6 </p>\n\n<h3>Conclusions</h3>\n\n<ul>\n<li>solutions <code>d1==d2</code> (D) and <code>d1===d2</code> (E) are fastest for all browsers</li>\n<li>solution <code>getTime</code> (A) is faster than  <code>valueOf</code> (B) (both are medium fast)</li>\n<li>solutions F,L,N are slowest for all browsers</li>\n</ul>\n\n<p><a href=\"https://i.stack.imgur.com/jedLE.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/jedLE.png\" alt=\"enter image description here\"></a></p>\n\n<h3>Details</h3>\n\n<p>In below snippet solutions used in performance tests are presented. You can perform test in you machine <a href=\"https://jsbench.me/ofk73h7x6r/1\" rel=\"noreferrer\">HERE</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function A(d1,d2) {\r\n\treturn d1.getTime() == d2.getTime();\r\n}\r\n\r\nfunction B(d1,d2) {\r\n\treturn d1.valueOf() == d2.valueOf();\r\n}\r\n\r\nfunction C(d1,d2) {\r\n\treturn Number(d1)   == Number(d2);\r\n}\r\n\r\nfunction D(d1,d2) {\r\n\treturn d1 == d2;\r\n}\r\n\r\nfunction E(d1,d2) {\r\n\treturn d1 === d2;\r\n}\r\n\r\nfunction F(d1,d2) {\r\n\treturn (!(d1&gt;d2 || d2&gt;d1));\r\n}\r\n\r\nfunction G(d1,d2) {\r\n\treturn d1*1 == d2*1;\r\n}\r\n\r\nfunction H(d1,d2) {\r\n\treturn +d1 == +d2;\r\n}\r\n\r\nfunction I(d1,d2) {\r\n\treturn !(+d1 - +d2);\r\n}\r\n\r\nfunction J(d1,d2) {\r\n\treturn !(d1 - d2);\r\n}\r\n\r\nfunction K(d1,d2) {\r\n\treturn d1 - d2 == 0;\r\n}\r\n\r\nfunction L(d1,d2) {\r\n\treturn !((d1&gt;d2)-(d1&lt;d2));\r\n}\r\n\r\nfunction M(d1,d2) {\r\n  return d1.getFullYear() === d2.getFullYear()\r\n    &amp;&amp; d1.getDate() === d2.getDate()\r\n    &amp;&amp; d1.getMonth() === d2.getMonth();\r\n}\r\n\r\nfunction N(d1,d2) {\r\n\treturn (isFinite(d1.valueOf()) &amp;&amp; isFinite(d2.valueOf()) ? !((d1&gt;d2)-(d1&lt;d2)) : false );\r\n}\r\n\r\n\r\n// TEST\r\n\r\nlet past= new Date('2002-12-24'); // past\r\nlet now= new Date('2020-02-26');  // now\r\n\r\nconsole.log('Code  d1&gt;d2  d1&lt;d2  d1=d2')\r\nvar log = (l,f) =&gt; console.log(`${l}     ${f(now,past)}  ${f(past,now)}  ${f(now,now)}`);\r\n\r\nlog('A',A);\r\nlog('B',B);\r\nlog('C',C);\r\nlog('D',D);\r\nlog('E',E);\r\nlog('G',G);\r\nlog('H',H);\r\nlog('I',I);\r\nlog('J',J);\r\nlog('K',K);\r\nlog('L',L);\r\nlog('M',M);\r\nlog('N',N);</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>p {color: red}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;This snippet only presents tested solutions (it not perform tests itself)&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Results for chrome</p>\n\n<p><a href=\"https://i.stack.imgur.com/N0eSg.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/N0eSg.png\" alt=\"enter image description here\"></a></p>\n"}],"score":2104}