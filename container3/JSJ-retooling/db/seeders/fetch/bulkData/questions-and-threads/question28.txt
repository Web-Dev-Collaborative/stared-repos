{"body":"<p>How do I select the <code>&lt;li&gt;</code> element that is a direct parent of the anchor element?</p>\n\n<p>As an example, my CSS would be something like this:</p>\n\n<pre><code>li &lt; a.active {\n    property: value;\n}\n</code></pre>\n\n<p>Obviously there are ways of doing this with JavaScript, but I'm hoping that there is some sort of workaround that exists native to CSS Level 2.</p>\n\n<p>The menu that I am trying to style is being spewed out by a CMS, so I can't move the active element to the <code>&lt;li&gt;</code> element... (unless I theme the menu creation module which I'd rather not do).</p>\n\n<p>Any ideas?</p>\n","title":"Is there a CSS parent selector?","answers":[{"score":60,"body":"<p>There isn't a way to do this in CSS&nbsp;2. You could add the class to the <code>li</code> and reference the <code>a</code>:</p>\n\n<pre><code>li.active &gt; a {\n    property: value;\n}\n</code></pre>\n"},{"score":160,"body":"<p>I don’t think you can select the parent in CSS only.</p>\n\n<p>But as you already seem to have an <code>.active</code> class, it would be easier to move that class to the <code>li</code> (instead of the <code>a</code>). That way you can access both the <code>li</code> and the <code>a</code> via CSS only.</p>\n"},{"score":26,"body":"<p>Not in CSS 2 as far as I'm aware.  CSS 3 has more robust selectors but is not consistently implemented across all browsers.  Even with the improved selectors, I don't believe it will accomplish exactly what you've specified in your example.</p>\n"},{"score":2698,"body":"<p>There is currently no way to select the parent of an element in CSS.</p>\n<p>If there was a way to do it, it would be in either of the current CSS selectors specs:</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/css3-selectors/#selectors\" rel=\"noreferrer\">Selectors Level 3 Spec</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS2/selector.html#pattern-matching\" rel=\"noreferrer\">CSS 2.1 Selectors Spec</a></li>\n</ul>\n<p>That said, the <a href=\"https://dev.w3.org/csswg/selectors4/#relational\" rel=\"noreferrer\">Selectors Level 4 Working Draft</a> includes a <code>:has()</code> pseudo-class that will provide this capability. It will be similar to the <a href=\"https://api.jquery.com/has-selector/\" rel=\"noreferrer\">jQuery implementation</a>.</p>\n<pre class=\"lang-css prettyprint-override\"><code>li:has(&gt; a.active) { /* styles to apply to the li tag */ }\n</code></pre>\n<p>However, as of 2020, <strong><a href=\"https://caniuse.com/#feat=css-has\" rel=\"noreferrer\">this is still not supported by any browser</a></strong>.</p>\n<p>In the meantime, you'll have to resort to JavaScript if you need to select a parent element.</p>\n"},{"score":111,"body":"<p>As mentioned by a couple of others, there isn't a way to style an element's parent/s using just CSS but the following works with <a href=\"http://jquery.com/\" rel=\"noreferrer\" title=\"jQuery. Write less. Do more.\">jQuery</a>:</p>\n\n<pre><code>$(\"a.active\").parents('li').css(\"property\", \"value\");\n</code></pre>\n"},{"score":27,"body":"<p>The CSS selector “<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/General_sibling_selectors\" rel=\"nofollow noreferrer\">General Sibling Combinator</a>” could maybe used for what you want:</p>\n\n<pre><code>E ~ F {\n    property: value;\n}\n</code></pre>\n\n<p>This matches any <code>F</code> element that is preceded by an <code>E</code> element.</p>\n"},{"score":133,"body":"<p>You can use <a href=\"https://github.com/Idered/cssParentSelector\" rel=\"noreferrer\">this script</a>:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>*! &gt; input[type=text] { background: #000; }\n</code></pre>\n\n<p>This will select any parent of a text input. But wait, there's still much more. If you want, you can select a specified parent:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! &gt; input[type=text] { background: #000; }\n</code></pre>\n\n<p>Or select it when it's active:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! &gt; input[type=text]:focus { background: #000; }\n</code></pre>\n\n<p>Check out this HTML:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"input-wrap\"&gt;\n    &lt;input type=\"text\" class=\"Name\"/&gt;\n    &lt;span class=\"help hide\"&gt;Your name sir&lt;/span&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>You can select that <code>span.help</code> when the <code>input</code> is active and show it:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.input-wrap! .help &gt; input[type=text]:focus { display: block; }\n</code></pre>\n\n<p>There are many more capabilities; just check out the documentation of the plugin.</p>\n\n<p>BTW, it works in Internet&nbsp;Explorer.</p>\n"},{"score":9,"body":"<p>The W3C excluded such a selector because of the huge performance impact it would have on a browser.</p>\n"},{"score":37,"body":"<p>Try to switch <code>a</code> to <code>block</code> display, and then use any style you want. The <code>a</code> element will fill the <code>li</code> element, and you will be able to modify its look as you want. Don't forget to set <code>li</code> padding to 0.</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>li {\n  padding: 0;\n  overflow: hidden;\n}\na {\n  display: block;\n  width: 100%;\n  color: ..., background: ..., border-radius: ..., etc...\n}\na.active {\n  color: ..., background: ...\n}\n</code></pre>\n"},{"score":22,"body":"<p>You might try to use hyperlink as the parent, and then change the inner elements on hover. Like this:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>a.active h1 {color:red;}\n\na.active:hover h1 {color:green;}\n\na.active h2 {color:blue;}\n\na.active:hover h1 {color:yellow;}\n</code></pre>\n\n<p>This way you can change the style in multiple inner tags, based on the rollover of the parent element.</p>\n"},{"score":23,"body":"<p>I know the OP was looking for a CSS solution but it is simple to achieve using jQuery. In my case I needed to find the <code>&lt;ul&gt;</code> parent tag for a <code>&lt;span&gt;</code> tag contained in the child <code>&lt;li&gt;</code>. jQuery has the <code>:has</code> selector so it's possible to identify a parent by the children it contains:</p>\n\n<pre><code>$(\"ul:has(#someId)\")\n</code></pre>\n\n<p>will select the <code>ul</code> element that has a child element with id <em>someId</em>. Or to answer the original question, something like the following should do the trick (untested):</p>\n\n<pre><code>$(\"li:has(.active)\")\n</code></pre>\n"},{"score":75,"body":"<p>There is no parent selector; just the way there is no previous sibling selector. One good reason for not having these selectors is because the browser has to traverse through all children of an element to determine whether or not a class should be applied. For example, if you wrote:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body:contains-selector(a.active) { background: red; }\n</code></pre>\n\n<p>Then the browser will have to wait until it has loaded and parsed everything until the <code>&lt;/body&gt;</code> to determine if the page should be red or not.</p>\n\n<p>The article <em><a href=\"http://snook.ca/archives/html_and_css/css-parent-selectors\" rel=\"noreferrer\">Why we don't have a parent selector</a></em> explains it in detail.</p>\n"},{"score":14,"body":"<p>Currently there is no parent selector &amp; it is not even being discussed in any of the talks of W3C. You need to understand how CSS is evaluated by the browser to actually understand if we need it or not.</p>\n\n<p>There is a lot of technical explanation here.</p>\n\n<p><a href=\"http://snook.ca/archives/html_and_css/css-parent-selectors\" rel=\"noreferrer\">Jonathan Snook explains how CSS is evaluated</a>.</p>\n\n<p><a href=\"http://css-tricks.com/parent-selectors-in-css/\" rel=\"noreferrer\">Chris Coyier on the talks of Parent selector</a>.</p>\n\n<p><a href=\"http://csswizardry.com/2011/09/writing-efficient-css-selectors/\" rel=\"noreferrer\">Harry Roberts again on writing efficient CSS selectors</a>.</p>\n\n<p>But <a href=\"http://calendar.perfplanet.com/2011/css-selector-performance-has-changed-for-the-better/\" rel=\"noreferrer\">Nicole Sullivan has some interesting facts on positive trends</a>.</p>\n\n<p>These people are all top class in the field of front end development.</p>\n"},{"score":23,"body":"<p>This is the most discussed aspect of the <strong>Selectors Level 4</strong> specification.\nWith this, a selector will be able to style an element according to its child by using an exclamation mark after the given selector (!).</p>\n\n<p>For example:</p>\n\n<pre class=\"lang-css prettyprint-override\"><code>body! a:hover{\n   background: red;\n}\n</code></pre>\n\n<p>will set a red background-color if the user hovers over any anchor.</p>\n\n<p>But we have to wait for browsers' implementation :(</p>\n"},{"score":11,"body":"<p>Technically there is no direct way to do this. However, you can sort that out with either jQuery or JavaScript.</p>\n\n<p>However, you can do something like this as well.</p>\n\n<pre><code>a.active h1 {color: blue;}\na.active p {color: green;}\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>$(\"a.active\").parents('li').css(\"property\", \"value\");\n</code></pre>\n\n<p>If you want to achieve this using jQuery here is the reference for the <a href=\"http://www.snoopcode.com/jquery/jquery-parent-selector\" rel=\"nofollow noreferrer\">jQuery parent selector</a>.</p>\n"},{"score":15,"body":"<p>Just an idea for horizontal menu...</p>\n<h3>Part of HTML</h3>\n<pre><code>&lt;div class='list'&gt;\n  &lt;div class='item'&gt;\n    &lt;a&gt;Link&lt;/a&gt;\n  &lt;/div&gt;\n  &lt;div class='parent-background'&gt;&lt;/div&gt;\n  &lt;!-- submenu takes this place --&gt;\n&lt;/div&gt;\n</code></pre>\n<p>Part of CSS</p>\n<pre><code>/* Hide parent backgrounds... */\n.parent-background {\n  display: none; }\n\n/* ... and show it when hover on children */\n.item:hover + .parent-background {\n  display: block;\n  position: absolute;\n  z-index: 10;\n  top: 0;\n  width: 100%; }\n</code></pre>\n<p><a href=\"https://jsfiddle.net/ilyabogdanov/4fyxywee/\" rel=\"noreferrer\">Updated demo and the rest of code</a></p>\n<p><a href=\"https://jsfiddle.net/ilyabogdanov/o4fkL7kv/\" rel=\"noreferrer\">Another example</a> how to use it with text-inputs - select parent fieldset</p>\n"},{"score":4,"body":"<p>No, you cannot select the parent in CSS only.</p>\n\n<p>But as you already seem to have an <code>.active</code> class, it would be easier to move that class to the <code>li</code> (instead of the <code>a</code>). That way you can access both the <code>li</code> and the <code>a</code> via CSS only.</p>\n"},{"score":14,"body":"<p>There's a plugin that extends CSS to include some non-standard features that can really help when designing websites. It's called <a href=\"http://elementqueries.com\" rel=\"nofollow noreferrer\">EQCSS</a>.</p>\n\n<p>One of the things EQCSS adds is a parent selector. It works in all browsers, Internet&nbsp;Explorer&nbsp;8 and up. Here's the format:</p>\n\n<pre><code>@element 'a.active' {\n  $parent {\n    background: red;\n  }\n}\n</code></pre>\n\n<p>So here we've opened an element query on every element <code>a.active</code>, and for the styles inside that query, things like <code>$parent</code> make sense, because there's a reference point. The browser can find the parent, because it's very similar to <code>parentNode</code> in JavaScript.</p>\n\n<p><a href=\"http://elementqueries.com/demos/parent.html\" rel=\"nofollow noreferrer\">Here's a demo of <code>$parent</code></a> and <a href=\"http://staticresource.com/parent.html\" rel=\"nofollow noreferrer\">another <code>$parent</code> demo that works in Internet&nbsp;Explorer&nbsp;8</a>, as well as <a href=\"https://i.imgur.com/QyVAj2u.png\" rel=\"nofollow noreferrer\">a screenshot in case you don't have Internet&nbsp;Explorer&nbsp;8 around to test with</a>.</p>\n\n<p>EQCSS also includes <a href=\"http://elementqueries.com/#meta-selectors\" rel=\"nofollow noreferrer\">meta-selectors</a>: <code>$prev</code> for the element before a selected element and <code>$this</code> for only those elements that match an element query, and more.</p>\n"},{"score":-1,"body":"<p>In CSS, we can cascade to the properties down the hierarchy but not in the oppostite direction.\nTo modify the parent style on child event, probably use jQuery.</p>\n\n<pre><code>$el.closest('.parent').css('prop','value');\n</code></pre>\n"},{"score":6,"body":"<p>Although there is no parent selector in standard CSS at present, I am working on a (personal) project called <strong>axe</strong> (ie. <em>Augmented CSS Selector Syntax / ACSSSS</em>) which, among its 7 new selectors, includes both:</p>\n\n<ol>\n<li>an <em>immediate parent</em> selector <code>&lt;</code> (which enables the opposite selection to <code>&gt;</code>)</li>\n<li>an <em>any ancestor selector</em> <code>^</code> (which enables the opposite selection to <code>[SPACE]</code>)</li>\n</ol>\n\n<p><strong>axe</strong> is presently in a relatively early BETA stage of development.</p>\n\n<p>See a demo here:</p>\n\n<p><a href=\"http://rounin.co.uk/projects/axe/axe2.html\" rel=\"noreferrer\">http://rounin.co.uk/projects/axe/axe2.html</a></p>\n\n<p>(compare the two lists on the left styled with standard selectors and the two lists on the right styled with axe selectors)</p>\n"},{"score":11,"body":"<p>The short answer is <strong>NO</strong>; we don't have a <code>parent selector</code> at this stage in CSS, but if you don't have to swap the elements or classes anyway, the second option is using JavaScript. Something like this:</p>\n\n<pre><code>var activeATag = Array.prototype.slice.call(document.querySelectorAll('a.active'));\n\nactiveATag.map(function(x) {\n  if(x.parentNode.tagName === 'LI') {\n    x.parentNode.style.color = 'red'; // Your property: value;\n  }\n});\n</code></pre>\n\n<p>Or a shorter way if you use <strong>jQuery</strong> in your application:</p>\n\n<pre><code>$('a.active').parents('li').css('color', 'red'); // Your property: value;\n</code></pre>\n"},{"score":27,"body":"<p>The pseudo element <code>:focus-within</code> allows a parent to be selected if a descendent has focus. </p>\n\n<p>An element can be focused if it has a <code>tabindex</code> attribute. </p>\n\n<p><a href=\"http://www.caniuse.com/#feat=css-focus-within\" rel=\"noreferrer\">Browser support for focus-within</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\" rel=\"noreferrer\">Tabindex</a></p>\n\n<p><strong>Example</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.click {\r\n  cursor: pointer;\r\n}\r\n\r\n.color:focus-within .change {\r\n  color: red;\r\n}\r\n\r\n.color:focus-within p {\r\n  outline: 0;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"color\"&gt;\r\n  &lt;p class=\"change\" tabindex=\"0\"&gt;\r\n    I will change color\r\n  &lt;/p&gt;\r\n  &lt;p class=\"click\" tabindex=\"1\"&gt;\r\n    Click me\r\n  &lt;/p&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":130,"body":"<p>Yes: <a href=\"https://developer.mozilla.org/docs/Web/CSS/:has\" rel=\"noreferrer\"><code>:has()</code></a></p>\n\n<p>Browser support: <a href=\"https://caniuse.com/#feat=css-has\" rel=\"noreferrer\">none</a></p>\n"},{"score":5,"body":"<p>At least up to and including CSS&nbsp;3 you cannot select like that.\nBut it can be done pretty easily nowadays in JavaScript, you just need to add a bit of vanilla JavaScript, notice that the code is pretty short.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>cells = document.querySelectorAll('div');\r\n[].forEach.call(cells, function (el) {\r\n    //console.log(el.nodeName)\r\n    if (el.hasChildNodes() &amp;&amp; el.firstChild.nodeName==\"A\") {\r\n        console.log(el)\r\n    };\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;Peter&lt;/div&gt;\r\n&lt;div&gt;&lt;a href=\"#\"&gt;Jackson link&lt;/a&gt;&lt;/div&gt;\r\n&lt;div&gt;Philip&lt;/div&gt;\r\n&lt;div&gt;&lt;a href=\"#\"&gt;Pullman link&lt;/a&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":17,"body":"<p>Here's a hack using <code>pointer-events</code> with <code>hover</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;style&gt;\n/* accessory */\n.parent {\n    width: 200px;\n    height: 200px;\n    background: gray;\n}\n.parent, \n.selector {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.selector {\n    cursor: pointer;\n    background: silver;\n    width: 50%;\n    height: 50%;\n}\n        &lt;/style&gt;\n        &lt;style&gt;\n/* pertinent */\n.parent {\n    background: gray;\n    pointer-events: none;\n}\n.parent:hover {\n    background: fuchsia;\n}\n.parent \n.selector {\n    pointer-events: auto;\n}\n        &lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div class=\"parent\"&gt;\n            &lt;div class=\"selector\"&gt;&lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":12,"body":"<p>It's now 2019, and the <a href=\"https://drafts.csswg.org/css-nesting-1/\" rel=\"noreferrer\">latest draft of the CSS Nesting Module</a> actually has something like this. Introducing <code>@nest</code> at-rules.</p>\n<blockquote>\n<p>3.2. The Nesting At-Rule: @nest</p>\n<p>While direct nesting looks nice, it is somewhat fragile. Some valid nesting selectors, like .foo &amp;, are disallowed, and editing the selector in certain ways can make the rule invalid unexpectedly. As well, some people find the nesting challenging to distinguish visually from the surrounding declarations.</p>\n<p>To aid in all these issues, this specification defines the @nest rule, which imposes fewer restrictions on how to validly nest style rules. Its syntax is:</p>\n<p><code>@nest = @nest &lt;selector&gt; { &lt;declaration-list&gt; }</code></p>\n<p>The @nest rule functions identically to a style rule: it starts with a selector, and contains declarations that apply to the elements the selector matches. The only difference is that the selector used in a @nest rule must be nest-containing, which means it contains a nesting selector in it somewhere. A list of selectors is nest-containing if all of its individual complex selectors are nest-containing.</p>\n</blockquote>\n<p>(Copy and pasted from the URL above).</p>\n<p>Example of valid selectors under this specification:</p>\n<pre><code>.foo {\n  color: red;\n  @nest &amp; &gt; .bar {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   .foo &gt; .bar { color: blue; }\n */\n\n.foo {\n  color: red;\n  @nest .parent &amp; {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   .parent .foo { color: blue; }\n */\n\n.foo {\n  color: red;\n  @nest :not(&amp;) {\n    color: blue;\n  }\n}\n/* Equivalent to:\n   .foo { color: red; }\n   :not(.foo) { color: blue; }\n */\n</code></pre>\n"},{"score":5,"body":"<blockquote>\n<p>Any ideas?</p>\n</blockquote>\n<p>CSS4 will be fancy if it adds some <em>hooks</em> into <em>walking backwards</em>. Until then it is possible (though <strong>not</strong> advisable) to use <code>checkbox</code> and/or <code>radio</code> <em><code>input</code>s</em> to <em>break</em> the usual way that things are connected, and through that also allow CSS to operate outside of its normal scope...</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/* Hide things that may be latter shown */\n.menu__checkbox__selection,\n.menu__checkbox__style,\n.menu__hidden {\n  display: none;\n  visibility: hidden;\n  opacity: 0;\n  filter: alpha(opacity=0); /* Old Microsoft opacity */\n}\n\n\n/* Base style for content and style menu */\n.main__content {\n  background-color: lightgray;\n  color: black;\n}\n\n.menu__hidden {\n  background-color: black;\n  color: lightgray;\n  /* Make list look not so _listy_ */\n  list-style: none;\n  padding-left: 5px;\n}\n\n.menu__option {\n  box-sizing: content-box;\n  display: block;\n  position: static;\n  z-index: auto;\n}\n\n/* &amp;#9660; - \\u2630 - Three Bars */\n/*\n.menu__trigger__selection::before {\n  content: '\\2630';\n  display: inline-block;\n}\n*/\n\n/* &amp;#9660; - Down Arrow */\n.menu__trigger__selection::after {\n  content: \"\\25BC\";\n  display: inline-block;\n  transform: rotate(90deg);\n}\n\n\n/* Customize to look more `select` like if you like */\n.menu__trigger__style:hover,\n.menu__trigger__style:active {\n  cursor: pointer;\n  background-color: darkgray;\n  color: white;\n}\n\n\n/**\n * Things to do when checkboxes/radios are checked\n */\n\n.menu__checkbox__selection:checked + .menu__trigger__selection::after,\n.menu__checkbox__selection[checked] + .menu__trigger__selection::after {\n  transform: rotate(0deg);\n}\n\n/* This bit is something that you may see elsewhere */\n.menu__checkbox__selection:checked ~ .menu__hidden,\n.menu__checkbox__selection[checked] ~ .menu__hidden {\n  display: block;\n  visibility: visible;\n  opacity: 1;\n  filter: alpha(opacity=100); /* Microsoft!? */\n}\n\n\n/**\n * Hacky CSS only changes based off non-inline checkboxes\n * ... AKA the stuff you cannot unsee after this...\n */\n.menu__checkbox__style[id=\"style-default\"]:checked ~ .main__content {\n  background-color: lightgray;\n  color: black;\n}\n\n.menu__checkbox__style[id=\"style-default\"]:checked ~ .main__content .menu__trigger__style[for=\"style-default\"] {\n  color: darkorange;\n}\n\n.menu__checkbox__style[id=\"style-one\"]:checked ~ .main__content {\n  background-color: black;\n  color: lightgray;\n}\n\n.menu__checkbox__style[id=\"style-one\"]:checked ~ .main__content .menu__trigger__style[for=\"style-one\"] {\n  color: darkorange;\n}\n\n.menu__checkbox__style[id=\"style-two\"]:checked ~ .main__content {\n  background-color: darkgreen;\n  color: red;\n}\n\n.menu__checkbox__style[id=\"style-two\"]:checked ~ .main__content .menu__trigger__style[for=\"style-two\"] {\n  color: darkorange;\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--\n  This bit works, but will one day cause troubles,\n  but truth is you can stick checkbox/radio inputs\n  just about anywhere and then call them by id with\n  a `for` label. Keep scrolling to see what I mean\n--&gt;\n&lt;input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-default\"&gt;\n&lt;input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-one\"&gt;\n&lt;input type=\"radio\"\n       name=\"colorize\"\n       class=\"menu__checkbox__style\"\n       id=\"style-two\"&gt;\n\n\n&lt;div class=\"main__content\"&gt;\n\n  &lt;p class=\"paragraph__split\"&gt;\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n  &lt;/p&gt;\n\n  &lt;input type=\"checkbox\"\n         class=\"menu__checkbox__selection\"\n         id=\"trigger-style-menu\"&gt;\n  &lt;label for=\"trigger-style-menu\"\n         class=\"menu__trigger__selection\"&gt; Theme&lt;/label&gt;\n\n  &lt;ul class=\"menu__hidden\"&gt;\n    &lt;li class=\"menu__option\"&gt;\n      &lt;label for=\"style-default\"\n             class=\"menu__trigger__style\"&gt;Default Style&lt;/label&gt;\n    &lt;/li&gt;\n\n    &lt;li class=\"menu__option\"&gt;\n      &lt;label for=\"style-one\"\n             class=\"menu__trigger__style\"&gt;First Alternative Style&lt;/label&gt;\n    &lt;/li&gt;\n\n    &lt;li class=\"menu__option\"&gt;\n      &lt;label for=\"style-two\"\n             class=\"menu__trigger__style\"&gt;Second Alternative Style&lt;/label&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;p class=\"paragraph__split\"&gt;\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\n    proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  &lt;/p&gt;\n\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>... pretty <em>gross</em>, but with just CSS and HTML it is possible to touch and re-touch anything but the <code>body</code> and <code>:root</code> from just about anywhere by linking the <code>id</code> and <code>for</code> properties of <code>radio</code>/<code>checkbox</code> <em><code>input</code>s</em> and <code>label</code> <em>triggers</em>; likely someone'll show how to re-touch those at some point.</p>\n<p>One additional caveat is that only <strong>one</strong> <code>input</code> of a specific <code>id</code> maybe used, first <code>checkbox</code>/<code>radio</code> <em>wins</em> a toggled state in other words... <strong>But</strong> multiple labels can all point to the same <code>input</code>, though that would make both the HTML and CSS look even grosser.</p>\n<hr />\n<blockquote>\n<p>... I'm hoping that there is some sort of workaround that exists native to CSS Level 2...</p>\n</blockquote>\n<p>I am not sure about the other pseudo classes, but I <code>:checked</code> for pre-CSS 3. If I remember correctly, it was something like <code>[checked]</code> which is why you may find it in the above code, for example,</p>\n<pre class=\"lang-css prettyprint-override\"><code>.menu__checkbox__selection:checked ~ .menu__hidden,\n.menu__checkbox__selection[checked] ~ .menu__hidden {\n /* rules: and-stuff; */\n}\n</code></pre>\n<p>... but for things like <code>::after</code> and <code>:hover</code>, I'm not at all certain in which CSS version those first appeared.</p>\n<p>That all stated, please don't ever use this in production, not even in anger. As a joke sure, or in other words just because something <em>can</em> be done does not always mean it <em>should</em>.</p>\n"},{"score":2,"body":"<p>I'd hire some JavaScript code to do that. For example, in React when you iterate over an array, add another class to the parent component, which indicates it contains your children:</p>\n\n<pre><code>&lt;div className={`parent ${hasKiddos ? 'has-kiddos' : ''}`}&gt;\n    {kiddos.map(kid =&gt; &lt;div key={kid.id} /&gt;)}\n&lt;/div&gt;\n</code></pre>\n\n<p>And then simply:</p>\n\n<pre><code>.parent {\n    color: #000;\n}\n\n.parent.has-kiddos {\n    color: red;\n}\n</code></pre>\n"},{"score":1,"body":"<p>Changing parent element based on child element can currently only happen when we have an <code>&lt;input&gt;</code> element inside the parent element. When an input gets focus, its corresponding parent element can get affected using CSS.</p>\n\n<p>Following example will help you understand using <code>:focus-within</code> in CSS.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.outer-div {\r\n  width: 400px;\r\n  height: 400px;\r\n  padding: 50px;\r\n  float: left\r\n}\r\n\r\n.outer-div:focus-within {\r\n  background: red;\r\n}\r\n\r\n.inner-div {\r\n  width: 200px;\r\n  height: 200px;\r\n  float: left;\r\n  background: yellow;\r\n  padding: 50px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"outer-div\"&gt;\r\n  &lt;div class=\"inner-div\"&gt;\r\n    I want to change outer-div(Background color) class based on inner-div. Is it possible?\r\n    &lt;input type=\"text\" placeholder=\"Name\" /&gt;\r\n  &lt;/div&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":4,"body":"<p>There no css (and therefore in css preprocessors) parent selector due to \"The major reasons for the CSS Working Group previously rejecting proposals for parent selectors are related to browser performance and incremental rendering issues.\"</p>\n"},{"score":1,"body":"<p>Just a work around.</p>\n<pre class=\"lang-css prettyprint-override\"><code>.div {\n  height: 400px;\n  width: 400px;\n  background: white;\n  pointer-events: none;\n  padding: 40px;\n}\n\n.h1 {\n  pointer-events: auto;\n}\n\n.div:hover {\n  background: blue;\n}\n</code></pre>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class =&quot;div&quot;&gt;\n    &lt;h1 class=&quot;h1&quot;&gt;\n        Amit Chauhan\n    &lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>\n"}],"score":3359}