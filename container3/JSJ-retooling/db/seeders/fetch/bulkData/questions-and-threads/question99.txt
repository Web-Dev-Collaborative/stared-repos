{"body":"<p>How do I get the selected value from a dropdown list using JavaScript?</p>\n<p>I tried the methods below, but they all return the selected index instead of the value:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var as = document.form1.ddlViewBy.value;\nvar e = document.getElementById(\"ddlViewBy\");\nvar strUser = e.options[e.selectedIndex].value;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n","title":"Get selected value in dropdown list using JavaScript","answers":[{"score":3101,"body":"<p>If you have a select element that looks like this:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;select id=&quot;ddlViewBy&quot;&gt;\n  &lt;option value=&quot;1&quot;&gt;test1&lt;/option&gt;\n  &lt;option value=&quot;2&quot; selected=&quot;selected&quot;&gt;test2&lt;/option&gt;\n  &lt;option value=&quot;3&quot;&gt;test3&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<p>Running this code:</p>\n<pre class=\"lang-js prettyprint-override\"><code>var e = document.getElementById(&quot;ddlViewBy&quot;);\nvar strUser = e.value;\n</code></pre>\n<p>Would make <code>strUser</code> be <code>2</code>. If what you actually want is <code>test2</code>, then do this:</p>\n<pre class=\"lang-js prettyprint-override\"><code>var e = document.getElementById(&quot;ddlViewBy&quot;);\nvar strUser = e.options[e.selectedIndex].text;\n</code></pre>\n<p>Which would make <code>strUser</code> be <code>test2</code></p>\n"},{"score":177,"body":"<pre><code>var strUser = e.options[e.selectedIndex].value;\n</code></pre>\n\n<p>This is correct and should give you the value.\nIs it the text you're after?</p>\n\n<pre><code>var strUser = e.options[e.selectedIndex].text;\n</code></pre>\n\n<p>So you're clear on the terminology:</p>\n\n<pre><code>&lt;select&gt;\n    &lt;option value=\"hello\"&gt;Hello World&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>This option has:</p>\n\n<ul>\n<li>Index = 0</li>\n<li>Value = hello</li>\n<li>Text = Hello World</li>\n</ul>\n"},{"score":14,"body":"<p>Beginners are likely to want to access values from a select with the NAME attribute rather than ID attribute. We know all form elements need names, even before they get ids.</p>\n\n<p>So, I'm adding the <code>getElementByName()</code> solution just for new developers to see too.</p>\n\n<p>NB. names for form elements will need to be unique for your form to be usable once posted, but the DOM can allow a name be shared by more than one element. For that reason consider adding IDs to forms if you can, or be explicit with form element names <code>my_nth_select_named_x</code> and <code>my_nth_text_input_named_y</code>.</p>\n\n<p>Example using <code>getElementByName</code>:</p>\n\n<pre><code>var e = document.getElementByName(\"my_select_with_name_ddlViewBy\");\nvar strUser = e.options[e.selectedIndex].value;\n</code></pre>\n"},{"score":394,"body":"<p>Plain JavaScript:</p>\n\n<pre><code>var e = document.getElementById(\"elementId\");\nvar value = e.options[e.selectedIndex].value;\nvar text = e.options[e.selectedIndex].text;\n</code></pre>\n\n<p>jQuery:</p>\n\n<pre><code>$(\"#elementId :selected\").text(); // The text content of the selected option\n$(\"#elementId :selected\").val(); // The value of the selected option\n</code></pre>\n\n<p><a href=\"http://en.wikipedia.org/wiki/AngularJS\" rel=\"noreferrer\">AngularJS</a>: (<a href=\"http://jsfiddle.net/qk5wwyct\" rel=\"noreferrer\">http://jsfiddle.net/qk5wwyct</a>):</p>\n\n<pre><code>// HTML\n&lt;select ng-model=\"selectItem\" ng-options=\"item as item.text for item in items\"&gt;\n&lt;/select&gt;\n&lt;p&gt;Text: {{selectItem.text}}&lt;/p&gt;\n&lt;p&gt;Value: {{selectItem.value}}&lt;/p&gt;\n\n// JavaScript\n$scope.items = [{\n  value: 'item_1_id',\n  text: 'Item 1'\n}, {\n  value: 'item_2_id',\n  text: 'Item 2'\n}];\n</code></pre>\n"},{"score":22,"body":"<p>If you ever run across code written purely for Internet&nbsp;Explorer you might see this:</p>\n\n<pre><code>var e = document.getElementById(\"ddlViewBy\");\nvar strUser = e.options(e.selectedIndex).value;\n</code></pre>\n\n<p>Running the above in Firefox et al will give you an 'is not a function' error, because Internet&nbsp;Explorer  allows you to get away with using () instead of []:</p>\n\n<pre><code>var e = document.getElementById(\"ddlViewBy\");\nvar strUser = e.options[e.selectedIndex].value;\n</code></pre>\n\n<p>The correct way is to use square brackets.</p>\n"},{"score":63,"body":"<p>The following code exhibits various examples related to getting/putting of values from input/select fields using JavaScript.</p>\n\n<p><strong><a href=\"http://www.freakyjolly.com/how-to-get-selected-value-in-dropdown-list-using-jquery-javascript/\" rel=\"nofollow noreferrer\">Source Link</a></strong></p>\n\n<p>Working <a href=\"https://freakyjolly.com/demo/getDropDownValue_JavaScript_jQuery.html\" rel=\"nofollow noreferrer\"><strong>Javascript &amp; jQuery Demo</strong></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/8LJas.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/8LJas.jpg\" alt=\"enter image description here\"></a></p>\n\n<p><a href=\"https://i.stack.imgur.com/GnfKD.jpg\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/GnfKD.jpg\" alt=\"enter image description here\"></a></p>\n\n<pre><code> &lt;select id=\"Ultra\" onchange=\"run()\"&gt;  &lt;!--Call run() function--&gt;\n     &lt;option value=\"0\"&gt;Select&lt;/option&gt;\n     &lt;option value=\"8\"&gt;text1&lt;/option&gt;\n     &lt;option value=\"5\"&gt;text2&lt;/option&gt;\n     &lt;option value=\"4\"&gt;text3&lt;/option&gt;\n&lt;/select&gt;&lt;br&gt;&lt;br&gt;\nTextBox1&lt;br&gt;\n&lt;input type=\"text\" id=\"srt\" placeholder=\"get value on option select\"&gt;&lt;br&gt;\nTextBox2&lt;br&gt;\n&lt;input type=\"text\" id=\"rtt\"  placeholder=\"Write Something !\" onkeyup=\"up()\"&gt;\n</code></pre>\n\n<p><strong>The following script is getting the value of the selected option and putting it in text box 1</strong></p>\n\n<pre><code>&lt;script&gt;\n    function run() {\n        document.getElementById(\"srt\").value = document.getElementById(\"Ultra\").value;\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>The following script is getting a value from a text box 2 and alerting with its value</strong></p>\n\n<pre><code>&lt;script&gt;\n    function up() {\n        //if (document.getElementById(\"srt\").value != \"\") {\n            var dop = document.getElementById(\"srt\").value;\n        //}\n        alert(dop);\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>The following script is calling a function from a function</strong></p>\n\n<pre><code>&lt;script&gt;\n    function up() {\n        var dop = document.getElementById(\"srt\").value;\n        pop(dop); // Calling function pop\n    }\n\n    function pop(val) {\n        alert(val);\n    }?\n&lt;/script&gt;\n</code></pre>\n"},{"score":45,"body":"<pre><code>var selectedValue = document.getElementById(\"ddlViewBy\").value;\n</code></pre>\n"},{"score":12,"body":"<p>Just use</p>\n\n<ul>\n<li><p><code>$('#SelectBoxId option:selected').text();</code> for getting the text as listed</p></li>\n<li><p><code>$('#SelectBoxId').val();</code> for getting the selected index value</p></li>\n</ul>\n"},{"score":0,"body":"<p>Here's an easy way to do it in an onchange function:</p>\n\n<p><code>event.target.options[event.target.selectedIndex].dataset.name</code></p>\n"},{"score":19,"body":"<pre><code>&lt;select id=\"Ultra\" onchange=\"alert(this.value)\"&gt; \n &lt;option value=\"0\"&gt;Select&lt;/option&gt;\n &lt;option value=\"8\"&gt;text1&lt;/option&gt;\n &lt;option value=\"5\"&gt;text2&lt;/option&gt;\n &lt;option value=\"4\"&gt;text3&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Any input/form field can use a “this” keyword when you are  accessing it from inside the element. This eliminates the need for locating a form in the dom tree and then locating this element inside the form.</p>\n"},{"score":9,"body":"<p>The previous answers still leave room for improvement because of the possibilities, the intuitiveness of the code, and the use of <code>id</code> versus <code>name</code>. One can get a read-out of three data of a selected option -- its index number, its value and its text. This simple, cross-browser code does all three:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Demo GetSelectOptionData&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form name=\"demoForm\"&gt;\n        &lt;select name=\"demoSelect\" onchange=\"showData()\"&gt;\n            &lt;option value=\"zilch\"&gt;Select:&lt;/option&gt;\n            &lt;option value=\"A\"&gt;Option 1&lt;/option&gt;\n            &lt;option value=\"B\"&gt;Option 2&lt;/option&gt;\n            &lt;option value=\"C\"&gt;Option 3&lt;/option&gt;\n        &lt;/select&gt;\n    &lt;/form&gt;\n\n    &lt;p id=\"firstP\"&gt;&amp;nbsp;&lt;/p&gt;\n    &lt;p id=\"secondP\"&gt;&amp;nbsp;&lt;/p&gt;\n    &lt;p id=\"thirdP\"&gt;&amp;nbsp;&lt;/p&gt;\n\n    &lt;script&gt;\n    function showData() {\n        var theSelect = demoForm.demoSelect;\n        var firstP = document.getElementById('firstP');\n        var secondP = document.getElementById('secondP');\n        var thirdP = document.getElementById('thirdP');\n        firstP.innerHTML = ('This option\\'s index number is: ' + theSelect.selectedIndex + ' (Javascript index numbers start at 0)');\n        secondP.innerHTML = ('Its value is: ' + theSelect[theSelect.selectedIndex].value);\n        thirdP.innerHTML = ('Its text is: ' + theSelect[theSelect.selectedIndex].text);\n    }\n     &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Live demo: <a href=\"http://jsbin.com/jiwena/1/edit?html,output\" rel=\"nofollow noreferrer\">http://jsbin.com/jiwena/1/edit?html,output</a> .</p>\n\n<p><code>id</code> should be used for make-up purposes. For functional form purposes, <code>name</code> is still valid, also in HTML5, and should still be used. Lastly, mind the use of square versus round brackets in certain places. As was explained before, only (older versions of) Internet&nbsp;Explorer will accept round ones in all places.</p>\n"},{"score":4,"body":"<p>In 2015, in <a href=\"http://en.wikipedia.org/wiki/Mozilla_Firefox\" rel=\"nofollow\">Firefox</a>, the following also works.</p>\n\n<blockquote>\n  <p>e.<strong>options</strong>.selectedIndex</p>\n</blockquote>\n"},{"score":8,"body":"<p>Using jQuery:</p>\n\n<pre><code>$('select').val();\n</code></pre>\n"},{"score":3,"body":"<p>Here is a JavaScript code line:</p>\n\n<pre><code>var x = document.form1.list.value;\n</code></pre>\n\n<p>Assuming that the dropdown menu named list <code>name=\"list\"</code> and included in a form with name attribute <code>name=\"form1\"</code>.</p>\n"},{"score":5,"body":"<p>To go along with the previous answers, this is how I do it as a one-liner. This is for getting the actual text of the selected option. There are good examples for getting the index number already. (And for the text, I just wanted to show this way)</p>\n\n<pre><code>let selText = document.getElementById('elementId').options[document.getElementById('elementId').selectedIndex].text\n</code></pre>\n\n<p>In some rare instances you may need to use parentheses, but this would be very rare.</p>\n\n<pre><code>let selText = (document.getElementById('elementId')).options[(document.getElementById('elementId')).selectedIndex].text;\n</code></pre>\n\n<p>I doubt this processes any faster than the two line version. I simply like to consolidate my code as much as possible.</p>\n\n<p>Unfortunately this still fetches the element twice, which is not ideal. A method that only grabs the element once would be more useful, but I have not figured that out yet, in regards to doing this with one line of code.</p>\n"},{"score":6,"body":"<p>Running example of how it works:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var e = document.getElementById(\"ddlViewBy\");\r\nvar val1 = e.options[e.selectedIndex].value;\r\nvar txt = e.options[e.selectedIndex].text;\r\n\r\ndocument.write(\"&lt;br /&gt;Selected option Value: \"+ val1);\r\ndocument.write(\"&lt;br /&gt;Selected option Text: \"+ txt);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;select id=\"ddlViewBy\"&gt;\r\n  &lt;option value=\"1\"&gt;test1&lt;/option&gt;\r\n  &lt;option value=\"2\"&gt;test2&lt;/option&gt;\r\n  &lt;option value=\"3\"  selected=\"selected\"&gt;test3&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Note: The values don't change as the dropdown is changed, if you require that functionality then an onClick change is to be implemented.</p>\n"},{"score":5,"body":"<p>You can use <code>querySelector</code>.</p>\n\n<p><strong>E.g.</strong></p>\n\n<pre><code>var myElement = document.getElementById('ddlViewBy');\n\nvar myValue = myElement.querySelector('[selected]').value;\n</code></pre>\n"},{"score":7,"body":"<p>Another solution is:</p>\n\n<pre><code>document.getElementById('elementId').selectedOptions[0].value\n</code></pre>\n"},{"score":16,"body":"<p>There are two ways to get this done either using JavaScript or jQuery.</p>\n\n<p><strong>JavaScript:</strong></p>\n\n<pre><code>var getValue = document.getElementById('ddlViewBy').selectedOptions[0].value;\n\nalert (getValue); // This will output the value selected.\n</code></pre>\n\n<p><strong>OR</strong></p>\n\n<pre><code>var ddlViewBy = document.getElementById('ddlViewBy');\n\nvar value = ddlViewBy.options[ddlViewBy.selectedIndex].value;\n\nvar text = ddlViewBy.options[ddlViewBy.selectedIndex].text;\n\nalert (value); // This will output the value selected\n\nalert (text); // This will output the text of the value selected\n</code></pre>\n\n<p><strong>jQuery:</strong></p>\n\n<pre><code>$(\"#ddlViewBy:selected\").text(); // Text of the selected value\n\n$(\"#ddlViewBy\").val(); // Outputs the value of the ID in 'ddlViewBy'\n</code></pre>\n"},{"score":5,"body":"<p>I have a bit different view of how to achieve this. I'm usually doing this with the following approach (it is an easier way and works with every browser as far as I know):</p>\n\n<pre><code>&lt;select onChange=\"functionToCall(this.value);\" id=\"ddlViewBy\"&gt;\n  &lt;option value=\"value1\"&gt;Text one&lt;/option&gt;\n  &lt;option value=\"value2\"&gt;Text two&lt;/option&gt;\n  &lt;option value=\"value3\"&gt;Text three&lt;/option&gt;\n  &lt;option value=\"valueN\"&gt;Text N&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n"},{"score":0,"body":"<p>Just do: <code>document.getElementById('idselect').options.selectedIndex</code></p>\n\n<p>Then you i'll get select index value, starting in 0.</p>\n"},{"score":0,"body":"<p>Try</p>\n\n<pre><code>ddlViewBy.value                      // value\n\nddlViewBy.selectedOptions[0].text    // label\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log( ddlViewBy.value );\r\n\r\nconsole.log( ddlViewBy.selectedOptions[0].text );</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;select id=\"ddlViewBy\"&gt;\r\n  &lt;option value=\"1\"&gt;Happy&lt;/option&gt;\r\n  &lt;option value=\"2\"&gt;Tree&lt;/option&gt;\r\n  &lt;option value=\"3\"  selected=\"selected\"&gt;Friends&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>You should be using <code>querySelector</code> to achieve this. This also standardize the way of getting value from form elements.</p>\n\n<p><code>var dropDownValue = document.querySelector('#ddlViewBy').value;</code></p>\n\n<p>Fiddle: <a href=\"https://jsfiddle.net/3t80pubr/\" rel=\"nofollow noreferrer\">https://jsfiddle.net/3t80pubr/</a></p>\n"},{"score":1,"body":"<p>I don't know if I'm the one that doesn't get the question right, but this just worked for me:\nUsing an onchange() event in your html, eg.</p>\n\n<pre><code>&lt;select id=\"numberToSelect\" onchange=\"selectNum\"&gt;\n    &lt;option value=\"1\"&gt;One&lt;/option&gt;\n    &lt;option value=\"2\"&gt;Two&lt;/option&gt;\n    &lt;option value=\"3\"&gt;Three&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>//javascript</p>\n\n<pre><code>function sele(){\n    var strUser = numberToSelect.value;\n}\n</code></pre>\n\n<p>This will give you whatever value is on the select dropdown per click</p>\n"},{"score":5,"body":"<p>The simplest way to do this is:</p>\n\n<pre><code>var value = document.getElementById(\"selectId\").value;\n</code></pre>\n"},{"score":0,"body":"<p>Make a drop-down menu with several options (As many as you want!)</p>\n\n<pre><code>&lt;select&gt;\n  &lt;option value=\"giveItAName\"&gt;Give it a name\n  &lt;option value=\"bananaShark\"&gt;Ridiculous animal\n  &lt;ooption value=\"Unknown\"&gt;Give more options!\n&lt;/select&gt;\n</code></pre>\n\n<p>I made a bit hilarious.\nHere's the code snippet:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;select&gt;\r\n  &lt;option value=\"RidiculousObject\"&gt;Banana Shark\r\n  &lt;option value=\"SuperDuperCoding\"&gt;select tag and option tag!\r\n  &lt;option value=\"Unknown\"&gt;Add more tags to add more options!\r\n&lt;/select&gt;\r\n&lt;h1&gt;Only 1 option (Useless)&lt;/h1&gt;\r\n&lt;select&gt;\r\n  &lt;option value=\"Single\"&gt;Single Option\r\n&lt;/select&gt;  </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>yay the snippet worked</p>\n"},{"score":1,"body":"<p>In more modern browsers, <code>querySelector</code> allows us to retrieve the selected option in one statement, using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:checked\" rel=\"nofollow noreferrer\"><code>:checked</code> pseudo-class</a>. From the selected option, we can gather whatever information we need:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const opt = document.querySelector('#ddlViewBy option:checked');\r\n// opt is now the selected option, so\r\nconsole.log(opt.value, 'is the selected value');\r\nconsole.log(opt.text, \"is the selected option's text\");</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;select id=\"ddlViewBy\"&gt;\r\n  &lt;option value=\"1\"&gt;test1&lt;/option&gt;\r\n  &lt;option value=\"2\" selected=\"selected\"&gt;test2&lt;/option&gt;\r\n  &lt;option value=\"3\"&gt;test3&lt;/option&gt;\r\n&lt;/select&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":0,"body":"<p>I think you can attach an event listener to the select tag itself e.g:</p>\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script&gt;\n  document.addEventListener(&quot;DOMContentLoaded&quot;, (_) =&gt; {\n    document.querySelector(&quot;select&quot;).addEventListener(&quot;change&quot;, (e) =&gt; {\n      console.log(e.target.value);\n    });\n  });\n&lt;/script&gt;\n</code></pre>\n<p>In this scenario, you should make sure you have a value attribute for all of your options, and they are not null.</p>\n"}],"score":1904}