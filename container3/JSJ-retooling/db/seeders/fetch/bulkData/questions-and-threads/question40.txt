{"body":"<p>I have an array of JavaScript objects:</p>\n\n<pre><code>var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n</code></pre>\n\n<p>How can I sort them by the value of <code>last_nom</code> in JavaScript?</p>\n\n<p>I know about <code>sort(a,b)</code>, but that only seems to work on strings and numbers. Do I need to add a <code>toString()</code> method to my objects?</p>\n","title":"Sort array of objects by string property value","answers":[{"score":4238,"body":"<p>It's easy enough to write your own comparison function:</p>\n\n<pre><code>function compare( a, b ) {\n  if ( a.last_nom &lt; b.last_nom ){\n    return -1;\n  }\n  if ( a.last_nom &gt; b.last_nom ){\n    return 1;\n  }\n  return 0;\n}\n\nobjs.sort( compare );\n</code></pre>\n\n<p>Or inline (c/o Marco Demaio): </p>\n\n<pre><code>objs.sort((a,b) =&gt; (a.last_nom &gt; b.last_nom) ? 1 : ((b.last_nom &gt; a.last_nom) ? -1 : 0)); \n</code></pre>\n"},{"score":66,"body":"<p>If you have duplicate last names you might sort those by first name-</p>\n\n<pre><code>obj.sort(function(a,b){\n  if(a.last_nom&lt; b.last_nom) return -1;\n  if(a.last_nom &gt;b.last_nom) return 1;\n  if(a.first_nom&lt; b.first_nom) return -1;\n  if(a.first_nom &gt;b.first_nom) return 1;\n  return 0;\n});\n</code></pre>\n"},{"score":32,"body":"<p>Instead of using a custom comparison function, you could also create an object type with custom <code>toString()</code> method (which is invoked by the default comparison function):</p>\n\n<pre><code>function Person(firstName, lastName) {\n    this.firtName = firstName;\n    this.lastName = lastName;\n}\n\nPerson.prototype.toString = function() {\n    return this.lastName + ', ' + this.firstName;\n}\n\nvar persons = [ new Person('Lazslo', 'Jamf'), ...]\npersons.sort();\n</code></pre>\n"},{"score":875,"body":"<p>You can also create a dynamic sort function that sorts objects by their value that you pass:</p>\n\n<pre><code>function dynamicSort(property) {\n    var sortOrder = 1;\n    if(property[0] === \"-\") {\n        sortOrder = -1;\n        property = property.substr(1);\n    }\n    return function (a,b) {\n        /* next line works with strings and numbers, \n         * and you may want to customize it to your needs\n         */\n        var result = (a[property] &lt; b[property]) ? -1 : (a[property] &gt; b[property]) ? 1 : 0;\n        return result * sortOrder;\n    }\n}\n</code></pre>\n\n<p>So you can have an array of objects like this:</p>\n\n<pre><code>var People = [\n    {Name: \"Name\", Surname: \"Surname\"},\n    {Name:\"AAA\", Surname:\"ZZZ\"},\n    {Name: \"Name\", Surname: \"AAA\"}\n];\n</code></pre>\n\n<p>...and it will work when you do:</p>\n\n<pre><code>People.sort(dynamicSort(\"Name\"));\nPeople.sort(dynamicSort(\"Surname\"));\nPeople.sort(dynamicSort(\"-Surname\"));\n</code></pre>\n\n<p>Actually this already answers the question. Below part is written because many people contacted me, complaining that <a href=\"https://stackoverflow.com/questions/11379361\">it doesn't work with multiple parameters</a>.</p>\n\n<h2>Multiple Parameters</h2>\n\n<p>You can use the function below to generate sort functions with multiple sort parameters.</p>\n\n<pre><code>function dynamicSortMultiple() {\n    /*\n     * save the arguments object as it will be overwritten\n     * note that arguments object is an array-like object\n     * consisting of the names of the properties to sort by\n     */\n    var props = arguments;\n    return function (obj1, obj2) {\n        var i = 0, result = 0, numberOfProperties = props.length;\n        /* try getting a different result from 0 (equal)\n         * as long as we have extra properties to compare\n         */\n        while(result === 0 &amp;&amp; i &lt; numberOfProperties) {\n            result = dynamicSort(props[i])(obj1, obj2);\n            i++;\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p>Which would enable you to do something like this:</p>\n\n<pre><code>People.sort(dynamicSortMultiple(\"Name\", \"-Surname\"));\n</code></pre>\n\n<h3>Subclassing Array</h3>\n\n<p>For the lucky among us who can use ES6, which allows extending the native objects:</p>\n\n<pre><code>class MyArray extends Array {\n    sortBy(...args) {\n        return this.sort(dynamicSortMultiple.apply(null, args));\n    }\n}\n</code></pre>\n\n<p>That would enable this:</p>\n\n<pre><code>MyArray.from(People).sortBy(\"Name\", \"-Surname\");\n</code></pre>\n"},{"score":193,"body":"<p><a href=\"http://underscorejs.org/#sortBy\">underscore.js</a></p>\n\n<p>use underscore, its small and awesome...</p>\n\n<blockquote>\n  <p>sortBy_.sortBy(list, iterator, [context])  Returns a sorted copy of\n  list, ranked in ascending order by the results of running each value\n  through iterator. Iterator may also be the string name of the property\n  to sort by (eg. length).</p>\n</blockquote>\n\n<pre><code>var objs = [ \n  { first_nom: 'Lazslo',last_nom: 'Jamf' },\n  { first_nom: 'Pig', last_nom: 'Bodine'  },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nvar sortedObjs = _.sortBy( objs, 'first_nom' );\n</code></pre>\n"},{"score":51,"body":"<p>Simple and quick solution to this problem using prototype inheritance:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Array.prototype.sortBy = function(p) {\n  return this.slice(0).sort(function(a,b) {\n    return (a[p] &gt; b[p]) ? 1 : (a[p] &lt; b[p]) ? -1 : 0;\n  });\n}\n</code></pre>\n\n<p><strong>Example / Usage</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>objs = [{age:44,name:'vinay'},{age:24,name:'deepak'},{age:74,name:'suresh'}];\n\nobjs.sortBy('age');\n// Returns\n// [{\"age\":24,\"name\":\"deepak\"},{\"age\":44,\"name\":\"vinay\"},{\"age\":74,\"name\":\"suresh\"}]\n\nobjs.sortBy('name');\n// Returns\n// [{\"age\":24,\"name\":\"deepak\"},{\"age\":74,\"name\":\"suresh\"},{\"age\":44,\"name\":\"vinay\"}]\n</code></pre>\n\n<p><strong>Update:</strong> No longer modifies original array.</p>\n"},{"score":10,"body":"<p>additional desc params for <strong>Ege Özcan</strong> code</p>\n\n<pre><code>function dynamicSort(property, desc) {\n    if (desc) {\n        return function (a, b) {\n            return (a[property] &gt; b[property]) ? -1 : (a[property] &lt; b[property]) ? 1 : 0;\n        }   \n    }\n    return function (a, b) {\n        return (a[property] &lt; b[property]) ? -1 : (a[property] &gt; b[property]) ? 1 : 0;\n    }\n}\n</code></pre>\n"},{"score":10,"body":"<p>Combining Ege's dynamic solution with Vinay's idea, you get a nice robust solution:</p>\n\n<pre><code>Array.prototype.sortBy = function() {\n    function _sortByAttr(attr) {\n        var sortOrder = 1;\n        if (attr[0] == \"-\") {\n            sortOrder = -1;\n            attr = attr.substr(1);\n        }\n        return function(a, b) {\n            var result = (a[attr] &lt; b[attr]) ? -1 : (a[attr] &gt; b[attr]) ? 1 : 0;\n            return result * sortOrder;\n        }\n    }\n    function _getSortFunc() {\n        if (arguments.length == 0) {\n            throw \"Zero length arguments not allowed for Array.sortBy()\";\n        }\n        var args = arguments;\n        return function(a, b) {\n            for (var result = 0, i = 0; result == 0 &amp;&amp; i &lt; args.length; i++) {\n                result = _sortByAttr(args[i])(a, b);\n            }\n            return result;\n        }\n    }\n    return this.sort(_getSortFunc.apply(null, arguments));\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>// Utility for printing objects\nArray.prototype.print = function(title) {\n    console.log(\"************************************************************************\");\n    console.log(\"**** \"+title);\n    console.log(\"************************************************************************\");\n    for (var i = 0; i &lt; this.length; i++) {\n        console.log(\"Name: \"+this[i].FirstName, this[i].LastName, \"Age: \"+this[i].Age);\n    }\n}\n\n// Setup sample data\nvar arrObj = [\n    {FirstName: \"Zach\", LastName: \"Emergency\", Age: 35},\n    {FirstName: \"Nancy\", LastName: \"Nurse\", Age: 27},\n    {FirstName: \"Ethel\", LastName: \"Emergency\", Age: 42},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 48},\n    {FirstName: \"Anthony\", LastName: \"Emergency\", Age: 44},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 32},\n    {FirstName: \"Ed\", LastName: \"Emergency\", Age: 28},\n    {FirstName: \"Peter\", LastName: \"Physician\", Age: 58},\n    {FirstName: \"Al\", LastName: \"Emergency\", Age: 51},\n    {FirstName: \"Ruth\", LastName: \"Registration\", Age: 62},\n    {FirstName: \"Ed\", LastName: \"Emergency\", Age: 38},\n    {FirstName: \"Tammy\", LastName: \"Triage\", Age: 29},\n    {FirstName: \"Alan\", LastName: \"Emergency\", Age: 60},\n    {FirstName: \"Nina\", LastName: \"Nurse\", Age: 54}\n];\n\n//Unit Tests\narrObj.sortBy(\"LastName\").print(\"LastName Ascending\");\narrObj.sortBy(\"-LastName\").print(\"LastName Descending\");\narrObj.sortBy(\"LastName\", \"FirstName\", \"-Age\").print(\"LastName Ascending, FirstName Ascending, Age Descending\");\narrObj.sortBy(\"-FirstName\", \"Age\").print(\"FirstName Descending, Age Ascending\");\narrObj.sortBy(\"-Age\").print(\"Age Descending\");\n</code></pre>\n"},{"score":7,"body":"<p>You may need to convert them to the lower case in order to prevent from confusion.</p>\n\n<pre><code>objs.sort(function (a,b) {\n\nvar nameA=a.last_nom.toLowerCase(), nameB=b.last_nom.toLowerCase()\n\nif (nameA &lt; nameB)\n  return -1;\nif (nameA &gt; nameB)\n  return 1;\nreturn 0;  //no sorting\n\n})\n</code></pre>\n"},{"score":197,"body":"<p>Don't get why people make it so complicated:</p>\n\n<pre><code>objs.sort(function(a, b){\n  return a.last_nom &gt; b.last_nom;\n});\n</code></pre>\n\n<p>For stricter engines:</p>\n\n<pre><code>objs.sort(function(a, b){\n  return a.last_nom == b.last_nom ? 0 : +(a.last_nom &gt; b.last_nom) || -1;\n});\n</code></pre>\n\n<p>Swap the operator to have it sorted by reverse alphabetical order.</p>\n"},{"score":24,"body":"<p>Example Usage:</p>\n\n<pre><code>objs.sort(sortBy('last_nom'));\n</code></pre>\n\n<p>Script: </p>\n\n<pre><code>/**\n * @description\n * Returns a function which will sort an\n * array of objects by the given key.\n *\n * @param  {String}  key\n * @param  {Boolean} reverse\n * @return {Function}\n */\nconst sortBy = (key, reverse) =&gt; {\n\n  // Move smaller items towards the front\n  // or back of the array depending on if\n  // we want to sort the array in reverse\n  // order or not.\n  const moveSmaller = reverse ? 1 : -1;\n\n  // Move larger items towards the front\n  // or back of the array depending on if\n  // we want to sort the array in reverse\n  // order or not.\n  const moveLarger = reverse ? -1 : 1;\n\n  /**\n   * @param  {*} a\n   * @param  {*} b\n   * @return {Number}\n   */\n  return (a, b) =&gt; {\n    if (a[key] &lt; b[key]) {\n      return moveSmaller;\n    }\n    if (a[key] &gt; b[key]) {\n      return moveLarger;\n    }\n    return 0;\n  };\n};\n</code></pre>\n"},{"score":8,"body":"<p>Acording your example, you need to sort by two fields (last name, first name), rather then one. You can use <a href=\"http://github.com/agershun/alasql\">Alasql</a> library to make this sort in one line:</p>\n\n<pre><code>var res = alasql('SELECT * FROM ? ORDER BY last_nom, first_nom',[objs]);\n</code></pre>\n\n<p>Try this example <a href=\"http://jsfiddle.net/agershun/4f4Lr9ss/1/\">at jsFiddle</a>.</p>\n"},{"score":4,"body":"<p>Using <strong>xPrototype</strong>: <a href=\"https://github.com/reduardo7/xPrototype/blob/master/README.md#sortbycol1-col2-coln\" rel=\"nofollow\">https://github.com/reduardo7/xPrototype/blob/master/README.md#sortbycol1-col2-coln</a></p>\n\n<pre><code>var o = [ \n  { Name: 'Lazslo', LastName: 'Jamf'     },\n  { Name: 'Pig',    LastName: 'Bodine'   },\n  { Name: 'Pirate', LastName: 'Prentice' },\n  { Name: 'Pag',    LastName: 'Bodine'   }\n];\n\n\n// Original\no.each(function (a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 3 Object {Name: \"Pag\", LastName: \"Bodine\"}\n*/\n\n\n// Sort By LastName ASC, Name ASC\no.sortBy('LastName', 'Name').each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 3 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n*/\n\n\n// Sort by LastName ASC and Name ASC\no.sortBy('LastName'.asc, 'Name'.asc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 1 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 2 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 3 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n*/\n\n\n// Sort by LastName DESC and Name DESC\no.sortBy('LastName'.desc, 'Name'.desc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 1 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 2 Object {Name: \"Pig\", LastName: \"Bodine\"}\n 3 Object {Name: \"Pag\", LastName: \"Bodine\"}\n*/\n\n\n// Sort by LastName DESC and Name ASC\no.sortBy('LastName'.desc, 'Name'.asc).each(function(a, b) { console.log(a, b); });\n/*\n 0 Object {Name: \"Pirate\", LastName: \"Prentice\"}\n 1 Object {Name: \"Lazslo\", LastName: \"Jamf\"}\n 2 Object {Name: \"Pag\", LastName: \"Bodine\"}\n 3 Object {Name: \"Pig\", LastName: \"Bodine\"}\n*/\n</code></pre>\n"},{"score":5,"body":"<p>I Just enhanced <a href=\"https://stackoverflow.com/users/300011\">Ege Özcan</a>'s dynamic sort to dive deep inside objects. \nIf Data looks like this: </p>\n\n<pre><code>obj = [\n    {\n        a: { a: 1, b: 2, c: 3 },\n        b: { a: 4, b: 5, c: 6 }\n    },\n    { \n        a: { a: 3, b: 2, c: 1 },\n        b: { a: 6, b: 5, c: 4 }\n}];\n</code></pre>\n\n<p>and if you want to sort it over <strong>a.a</strong> property I think my enhancement helps very well. I add new functionality to objects like this:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, 'deepVal', {\n    enumerable: false,\n    writable: true,\n    value: function (propertyChain) {\n        var levels = propertyChain.split('.');\n        parent = this;\n        for (var i = 0; i &lt; levels.length; i++) {\n            if (!parent[levels[i]])\n                return undefined;\n            parent = parent[levels[i]];\n        }\n        return parent;\n    }\n});\n</code></pre>\n\n<p>and changed <strong>_dynamicSort</strong>'s <em>return</em> function:</p>\n\n<pre><code>return function (a,b) {\n        var result = ((a.deepVal(property) &gt; b.deepVal(property)) - (a.deepVal(property) &lt; b.deepVal(property)));\n        return result * sortOrder;\n    }\n</code></pre>\n\n<p>And now you can sort by <strong>a.a.</strong> this way:</p>\n\n<pre><code>obj.sortBy('a.a');\n</code></pre>\n\n<p>See Commplete script in <a href=\"http://jsfiddle.net/Gigapedia/ofd0a1nd/1/\" rel=\"nofollow noreferrer\">JSFiddle</a></p>\n"},{"score":15,"body":"<h1>Sorting (more) Complex Arrays of Objects</h1>\n\n<p>Since you probably encounter more complex data structures like this array, I would expand the solution. </p>\n\n<h2>TL;DR</h2>\n\n<blockquote>\n  <p>Are more pluggable version based on <strong><a href=\"https://stackoverflow.com/users/300011/ege-%C3%96zcan\">@ege-Özcan</a></strong>'s very lovely <a href=\"https://stackoverflow.com/a/4760279/3580261\">answer</a>.</p>\n</blockquote>\n\n<h2>Problem</h2>\n\n<p>I encountered the below and couldn't change it. I also did not want to flatten the object temporarily. Nor did I want to use underscore / lodash, mainly for performance reasons and the fun to implement it myself.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var People = [\n   {Name: {name: \"Name\", surname: \"Surname\"}, Middlename: \"JJ\"},\n   {Name: {name: \"AAA\", surname: \"ZZZ\"}, Middlename:\"Abrams\"},\n   {Name: {name: \"Name\", surname: \"AAA\"}, Middlename: \"Wars\"}\n];\n</code></pre>\n\n<h3>Goal</h3>\n\n<p>The goal is to sort it primarily by <code>People.Name.name</code> and secondarily by <code>People.Name.surname</code></p>\n\n<h3>Obstacles</h3>\n\n<p>Now, in the base solution uses bracket notation to compute the properties to sort for dynamically. Here, though, we would have to construct the bracket notation dynamically also, since you would expect some like <code>People['Name.name']</code> would work - which doesn't. </p>\n\n<p>Simply doing <code>People['Name']['name']</code>, on the other hand, is static and only allows you to go down the <em>n</em>-th level.</p>\n\n<h2>Solution</h2>\n\n<p>The main addition here will be to walk down the object tree and determine the value of the last leaf, you have to specify, as well as any intermediary leaf.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var People = [\n   {Name: {name: \"Name\", surname: \"Surname\"}, Middlename: \"JJ\"},\n   {Name: {name: \"AAA\", surname: \"ZZZ\"}, Middlename:\"Abrams\"},\n   {Name: {name: \"Name\", surname: \"AAA\"}, Middlename: \"Wars\"}\n];\n\nPeople.sort(dynamicMultiSort(['Name','name'], ['Name', '-surname']));\n// Results in...\n// [ { Name: { name: 'AAA', surname: 'ZZZ' }, Middlename: 'Abrams' },\n//   { Name: { name: 'Name', surname: 'Surname' }, Middlename: 'JJ' },\n//   { Name: { name: 'Name', surname: 'AAA' }, Middlename: 'Wars' } ]\n\n// same logic as above, but strong deviation for dynamic properties \nfunction dynamicSort(properties) {\n  var sortOrder = 1;\n  // determine sort order by checking sign of last element of array\n  if(properties[properties.length - 1][0] === \"-\") {\n    sortOrder = -1;\n    // Chop off sign\n    properties[properties.length - 1] = properties[properties.length - 1].substr(1);\n  }\n  return function (a,b) {\n    propertyOfA = recurseObjProp(a, properties)\n    propertyOfB = recurseObjProp(b, properties)\n    var result = (propertyOfA &lt; propertyOfB) ? -1 : (propertyOfA &gt; propertyOfB) ? 1 : 0;\n    return result * sortOrder;\n  };\n}\n\n/**\n * Takes an object and recurses down the tree to a target leaf and returns it value\n * @param  {Object} root - Object to be traversed.\n * @param  {Array} leafs - Array of downwards traversal. To access the value: {parent:{ child: 'value'}} -&gt; ['parent','child']\n * @param  {Number} index - Must not be set, since it is implicit.\n * @return {String|Number}       The property, which is to be compared by sort.\n */\nfunction recurseObjProp(root, leafs, index) {\n  index ? index : index = 0\n  var upper = root\n  // walk down one level\n  lower = upper[leafs[index]]\n  // Check if last leaf has been hit by having gone one step too far.\n  // If so, return result from last step.\n  if (!lower) {\n    return upper\n  }\n  // Else: recurse!\n  index++\n  // HINT: Bug was here, for not explicitly returning function\n  // https://stackoverflow.com/a/17528613/3580261\n  return recurseObjProp(lower, leafs, index)\n}\n\n/**\n * Multi-sort your array by a set of properties\n * @param {...Array} Arrays to access values in the form of: {parent:{ child: 'value'}} -&gt; ['parent','child']\n * @return {Number} Number - number for sort algorithm\n */\nfunction dynamicMultiSort() {\n  var args = Array.prototype.slice.call(arguments); // slight deviation to base\n\n  return function (a, b) {\n    var i = 0, result = 0, numberOfProperties = args.length;\n    // REVIEW: slightly verbose; maybe no way around because of `.sort`-'s nature\n    // Consider: `.forEach()`\n    while(result === 0 &amp;&amp; i &lt; numberOfProperties) {\n      result = dynamicSort(args[i])(a, b);\n      i++;\n    }\n    return result;\n  }\n}\n</code></pre>\n\n<h2>Example</h2>\n\n<p>Working example <a href=\"http://jsbin.com/lotifa/2/edit?js,console\" rel=\"nofollow noreferrer\">on JSBin</a></p>\n"},{"score":7,"body":"<pre><code>function compare(propName) {\n    return function(a,b) {\n        if (a[propName] &lt; b[propName])\n            return -1;\n        if (a[propName] &gt; b[propName])\n            return 1;\n        return 0;\n    };\n}\n\nobjs.sort(compare(\"last_nom\"));\n</code></pre>\n"},{"score":7,"body":"<p>This is a simple problem, don't know why people have such complex solution.<br>\nA simple sort function (based on <strong>quick-sort</strong> algorithm):</p>\n\n<pre><code>function sortObjectsArray(objectsArray, sortKey)\n        {\n            // Quick Sort:\n            var retVal;\n\n            if (1 &lt; objectsArray.length)\n            {\n                var pivotIndex = Math.floor((objectsArray.length - 1) / 2);  // middle index\n                var pivotItem = objectsArray[pivotIndex];                    // value in the middle index\n                var less = [], more = [];\n\n                objectsArray.splice(pivotIndex, 1);                          // remove the item in the pivot position\n                objectsArray.forEach(function(value, index, array)\n                {\n                    value[sortKey] &lt;= pivotItem[sortKey] ?                   // compare the 'sortKey' proiperty\n                        less.push(value) :\n                        more.push(value) ;\n                });\n\n                retVal = sortObjectsArray(less, sortKey).concat([pivotItem], sortObjectsArray(more, sortKey));\n            }\n            else\n            {\n                retVal = objectsArray;\n            }\n\n            return retVal;\n        }\n</code></pre>\n\n<p>Use example:</p>\n\n<pre><code>var myArr = \n        [\n            { val: 'x', idx: 3 },\n            { val: 'y', idx: 2 },\n            { val: 'z', idx: 5 },\n        ];\nmyArr = sortObjectsArray(myArr, 'idx');\n</code></pre>\n"},{"score":11,"body":"<p>A simple way:</p>\n\n<pre><code>objs.sort(function(a,b) {\n  return b.last_nom.toLowerCase() &lt; a.last_nom.toLowerCase();\n});\n</code></pre>\n\n<p>See that <code>'.toLowerCase()'</code> is necessary to prevent erros \nin comparing strings.</p>\n"},{"score":504,"body":"<p>In ES6/ES2015 or later you can do this way:</p>\n\n<pre><code>objs.sort((a, b) =&gt; a.last_nom.localeCompare(b.last_nom));\n</code></pre>\n\n<p>Prior to ES6/ES2015</p>\n\n<pre><code>objs.sort(function(a, b) {\n    return a.last_nom.localeCompare(b.last_nom)\n});\n</code></pre>\n"},{"score":9,"body":"<pre><code>objs.sort(function(a,b){return b.last_nom&gt;a.last_nom})\n</code></pre>\n"},{"score":2,"body":"<p>I came into problem of sorting array of objects, with changing priority of values, basically I want to sort array of peoples by their Age, and then by surname - or just by surname, name. \nI think that this is most simple solution compared to another answers.</p>\n\n<p>it' is used by calling sortPeoples(['array', 'of', 'properties'], reverse=false)</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>///////////////////////example array of peoples ///////////////////////\r\n\r\nvar peoples = [\r\n    {name: \"Zach\", surname: \"Emergency\", age: 1},\r\n    {name: \"Nancy\", surname: \"Nurse\", age: 1},\r\n    {name: \"Ethel\", surname: \"Emergency\", age: 1},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 42},\r\n    {name: \"Anthony\", surname: \"Emergency\", age: 42},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 32},\r\n    {name: \"Ed\", surname: \"Emergency\", age: 28},\r\n    {name: \"Peter\", surname: \"Physician\", age: 58},\r\n    {name: \"Al\", surname: \"Emergency\", age: 58},\r\n    {name: \"Ruth\", surname: \"Registration\", age: 62},\r\n    {name: \"Ed\", surname: \"Emergency\", age: 38},\r\n    {name: \"Tammy\", surname: \"Triage\", age: 29},\r\n    {name: \"Alan\", surname: \"Emergency\", age: 60},\r\n    {name: \"Nina\", surname: \"Nurse\", age: 58}\r\n];\r\n\r\n\r\n\r\n//////////////////////// Sorting function /////////////////////\r\nfunction sortPeoples(propertyArr, reverse) {\r\n        function compare(a,b) {\r\n            var i=0;\r\n            while (propertyArr[i]) {\r\n                if (a[propertyArr[i]] &lt; b[propertyArr[i]])  return -1;\r\n                if (a[propertyArr[i]] &gt; b[propertyArr[i]])  return 1;\r\n                i++;\r\n            }\r\n            return 0;\r\n            }\r\n        peoples.sort(compare);\r\n        if (reverse){\r\n            peoples.reverse();\r\n        }\r\n    };\r\n\r\n////////////////end of sorting method///////////////\r\nfunction printPeoples(){\r\n  $('#output').html('');\r\npeoples.forEach( function(person){\r\n $('#output').append(person.surname+\" \"+person.name+\" \"+person.age+\"&lt;br&gt;\");\r\n} )\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;head&gt;\r\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n  &lt;html&gt;\r\n  &lt;body&gt;\r\n&lt;button onclick=\"sortPeoples(['surname']); printPeoples()\"&gt;sort by ONLY by surname ASC results in mess with same name cases&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['surname', 'name'], true); printPeoples()\"&gt;sort by surname then name DESC&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['age']); printPeoples()\"&gt;sort by AGE ASC. Same issue as in first case&lt;/button&gt;&lt;br&gt;\r\n&lt;button onclick=\"sortPeoples(['age', 'surname']); printPeoples()\"&gt;sort by AGE and Surname ASC. Adding second field fixed it.&lt;/button&gt;&lt;br&gt;\r\n        \r\n    &lt;div id=\"output\"&gt;&lt;/div&gt;\r\n    &lt;/body&gt;\r\n  &lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":26,"body":"<p>There are many good answers here, but I would like to point out that they can be extended very simply to achieve a lot more complex sorting. The only thing you have to do is to use the OR operator to chain comparision functions like this:</p>\n\n<pre><code>objs.sort((a,b)=&gt; fn1(a,b) || fn2(a,b) || fn3(a,b) )\n</code></pre>\n\n<p>Where <code>fn1</code>, <code>fn2</code>, ... are the sort functions which return [-1,0,1]. This results in \"sorting by fn1\", \"sorting by fn2\" which is pretty much equal to ORDER BY in SQL.</p>\n\n<p>This solution is based on the behaviour of <code>||</code> operator which evaluates to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\" rel=\"noreferrer\">first evaluated expression which can be converted to true</a>.</p>\n\n<p><strong>The simplest form</strong> has only one inlined function like this:</p>\n\n<pre><code>// ORDER BY last_nom\nobjs.sort((a,b)=&gt; a.last_nom.localeCompare(b.last_nom) )\n</code></pre>\n\n<p>Having two steps with  <code>last_nom</code>,<code>first_nom</code> sort order would look like this:</p>\n\n<pre><code>// ORDER_BY last_nom, first_nom\nobjs.sort((a,b)=&gt; a.last_nom.localeCompare(b.last_nom) || \n                  a.first_nom.localeCompare(b.first_nom)  )\n</code></pre>\n\n<p><strong>A generic comparision function</strong> could be something like this:</p>\n\n<pre><code>// ORDER BY &lt;n&gt;\nlet cmp = (a,b,n)=&gt;a[n].localeCompare(b[n])\n</code></pre>\n\n<p>This function could be extended to support numeric fields, case sensitity, arbitary datatypes etc.</p>\n\n<p>You can them use it with chaining them by sort priority:</p>\n\n<pre><code>// ORDER_BY last_nom, first_nom\nobjs.sort((a,b)=&gt; cmp(a,b, \"last_nom\") || cmp(a,b, \"first_nom\") )\n// ORDER_BY last_nom, first_nom DESC\nobjs.sort((a,b)=&gt; cmp(a,b, \"last_nom\") || -cmp(a,b, \"first_nom\") )\n// ORDER_BY last_nom DESC, first_nom DESC\nobjs.sort((a,b)=&gt; -cmp(a,b, \"last_nom\") || -cmp(a,b, \"first_nom\") )\n</code></pre>\n\n<p>The point here is that pure JavaScript with functional approach can take you a long way without external libraries or complex code. It is also very effective, since no string parsing have to be done</p>\n"},{"score":13,"body":"<p>One more option:</p>\n\n<pre><code>var someArray = [...];\n\nfunction generateSortFn(prop, reverse) {\n    return function (a, b) {\n        if (a[prop] &lt; b[prop]) return reverse ? 1 : -1;\n        if (a[prop] &gt; b[prop]) return reverse ? -1 : 1;\n        return 0;\n    };\n}\n\nsomeArray.sort(generateSortFn('name', true));\n</code></pre>\n\n<p>sorts ascending by default.</p>\n"},{"score":2,"body":"<pre><code>// Sort Array of Objects\n\n// Data\nvar booksArray = [\n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\n// Property to Sort By\nvar args = \"last_nom\";\n\n// Function to Sort the Data by given Property\nfunction sortByProperty(property) {\n    return function (a, b) {\n        var sortStatus = 0,\n            aProp = a[property].toLowerCase(),\n            bProp = b[property].toLowerCase();\n        if (aProp &lt; bProp) {\n            sortStatus = -1;\n        } else if (aProp &gt; bProp) {\n            sortStatus = 1;\n        }\n        return sortStatus;\n    };\n}\n\n// Implementation\nvar sortedArray = booksArray.sort(sortByProperty(args));\n\nconsole.log(\"sortedArray: \" + JSON.stringify(sortedArray) );\n</code></pre>\n\n<p>Console log output:</p>\n\n<pre><code>\"sortedArray: \n[{\"first_nom\":\"Pig\",\"last_nom\":\"Bodine\"},\n{\"first_nom\":\"Lazslo\",\"last_nom\":\"Jamf\"},\n{\"first_nom\":\"Pirate\",\"last_nom\":\"Prentice\"}]\"\n</code></pre>\n\n<p>Adapted based on this source: <a href=\"http://www.levihackwith.com/code-snippet-how-to-sort-an-array-of-json-objects-by-property/\" rel=\"nofollow\">http://www.levihackwith.com/code-snippet-how-to-sort-an-array-of-json-objects-by-property/</a></p>\n"},{"score":2,"body":"<p>This will sort a two level nested array by the property passed to it in alpha numeric order.</p>\n\n<pre><code>function sortArrayObjectsByPropAlphaNum(property) {\n    return function (a,b) {\n        var reA = /[^a-zA-Z]/g;\n        var reN = /[^0-9]/g;\n        var aA = a[property].replace(reA, '');\n        var bA = b[property].replace(reA, '');\n\n        if(aA === bA) {\n            var aN = parseInt(a[property].replace(reN, ''), 10);\n            var bN = parseInt(b[property].replace(reN, ''), 10);\n            return aN === bN ? 0 : aN &gt; bN ? 1 : -1;\n        } else {\n            return a[property] &gt; b[property] ? 1 : -1;\n        }\n    };\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>objs.sort(utils.sortArrayObjectsByPropAlphaNum('last_nom'));\n</code></pre>\n"},{"score":21,"body":"<p>I know this question is too old, but I didn't see any implementation similar to mine.<br>\nThis version is based on the <a href=\"https://en.wikipedia.org/wiki/Schwartzian_transform\" rel=\"noreferrer\">Schwartzian transform idiom</a>. </p>\n\n<pre><code>function sortByAttribute(array, ...attrs) {\n  // generate an array of predicate-objects contains\n  // property getter, and descending indicator\n  let predicates = attrs.map(pred =&gt; {\n    let descending = pred.charAt(0) === '-' ? -1 : 1;\n    pred = pred.replace(/^-/, '');\n    return {\n      getter: o =&gt; o[pred],\n      descend: descending\n    };\n  });\n  // schwartzian transform idiom implementation. aka: \"decorate-sort-undecorate\"\n  return array.map(item =&gt; {\n    return {\n      src: item,\n      compareValues: predicates.map(predicate =&gt; predicate.getter(item))\n    };\n  })\n  .sort((o1, o2) =&gt; {\n    let i = -1, result = 0;\n    while (++i &lt; predicates.length) {\n      if (o1.compareValues[i] &lt; o2.compareValues[i]) result = -1;\n      if (o1.compareValues[i] &gt; o2.compareValues[i]) result = 1;\n      if (result *= predicates[i].descend) break;\n    }\n    return result;\n  })\n  .map(item =&gt; item.src);\n}\n</code></pre>\n\n<p>Here's an example how to use it:</p>\n\n<pre><code>let games = [\n  { name: 'Mashraki',          rating: 4.21 },\n  { name: 'Hill Climb Racing', rating: 3.88 },\n  { name: 'Angry Birds Space', rating: 3.88 },\n  { name: 'Badland',           rating: 4.33 }\n];\n\n// sort by one attribute\nconsole.log(sortByAttribute(games, 'name'));\n// sort by mupltiple attributes\nconsole.log(sortByAttribute(games, '-rating', 'name'));\n</code></pre>\n"},{"score":2,"body":"<p>So here is one sorting algorithm which can sort in any order , throughout array of any kind of objects , without the restriction of datatype comparison ( i.e. Number , String )</p>\n\n<pre><code>function smoothSort(items,prop,reverse) {  \n    var length = items.length;\n    for (var i = (length - 1); i &gt;= 0; i--) {\n        //Number of passes\n        for (var j = (length - i); j &gt; 0; j--) {\n            //Compare the adjacent positions\n            if(reverse){\n              if (items[j][prop] &gt; items[j - 1][prop]) {\n                //Swap the numbers\n                var tmp = items[j];\n                items[j] = items[j - 1];\n                items[j - 1] = tmp;\n            }\n            }\n\n            if(!reverse){\n              if (items[j][prop] &lt; items[j - 1][prop]) {\n                  //Swap the numbers\n                  var tmp = items[j];\n                  items[j] = items[j - 1];\n                  items[j - 1] = tmp;\n              }\n            }\n        }\n    }\n\n    return items;\n}\n</code></pre>\n\n<ul>\n<li><p>the first argument <em>items</em> is the array of objects , </p></li>\n<li><p><em>prop</em> is the key of the object on which you want to sort ,</p></li>\n<li><p><em>reverse</em> is a boolean parameter which on being true results in Ascending  order and in false it returns descending order.</p></li>\n</ul>\n"},{"score":7,"body":"<p>Using Ramda,</p>\n\n<p><strong>npm install ramda</strong></p>\n\n<pre><code>import R from 'ramda'\nvar objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\nvar ascendingSortedObjs = R.sortBy(R.prop('last_nom'), objs)\nvar descendingSortedObjs = R.reverse(ascendingSortedObjs)\n</code></pre>\n"},{"score":1,"body":"<p>I will give you a solution implementing selectionSort algorithm ,it is simple and effective</p>\n\n<pre><code>var objs = [ \n{ first_nom: 'Lazslo', last_nom: 'Jamf'     },\n{ first_nom: 'Pig',    last_nom: 'Bodine'   },\n{ first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\n\nfunction selection_Sort(num) { \n //console.log(num);  \n var temp, index;\n for (var i = 0; i &lt;= num.length - 1; i++) {\nindex = i;\nfor (var j = i + 1; j &lt;= num.length - 1; j++) {\n // you can use first_nom/last_nom,any way you choose to sort\n\n  if (num[j]. last_nom &lt; num[index]. last_nom) {\n    index = j;\n  } \n}\n\n//below is the swapping part\ntemp = num[i]. last_nom;\nnum[i]. last_nom = num[index]. last_nom;\nnum[index]. last_nom = temp;\n };\n console.log(num); \n return num; \n  }\n  selection_Sort(objs);\n</code></pre>\n\n<p>Great to see such great answers</p>\n"},{"score":37,"body":"<p><a href=\"https://lodash.com\" rel=\"noreferrer\">Lodash.js</a> (superset of <a href=\"http://underscorejs.org\" rel=\"noreferrer\">Underscore.js</a>)</p>\n\n<p>It's good not to add a framework for every simple piece of logic, but relying on well tested utility frameworks can speed up development and reduce the amount of bugs.</p>\n\n<p>Lodash produces very clean code and promotes a more <em>functional programming</em> style. In one glimpse it becomes clear what the intent of the code is.</p>\n\n<p>OP's issue can simply be solved as:</p>\n\n<pre><code>const sortedObjs = _.sortBy(objs, 'last_nom');\n</code></pre>\n\n<p>More info? E.g. we have following nested object:</p>\n\n<pre><code>const users = [\n  { 'user': {'name':'fred', 'age': 48}},\n  { 'user': {'name':'barney', 'age': 36 }},\n  { 'user': {'name':'wilma'}},\n  { 'user': {'name':'betty', 'age': 32}}\n];\n</code></pre>\n\n<p>We now can use the <a href=\"https://lodash.com/docs/4.17.15#property\" rel=\"noreferrer\">_.property</a> shorthand <code>user.age</code> to specify the path to the property that should be matched. We will sort the user objects by the nested age property. Yes, it allows for nested property matching!</p>\n\n<pre><code>const sortedObjs = _.sortBy(users, ['user.age']);\n</code></pre>\n\n<p>Want it reversed? No problem. Use <a href=\"https://lodash.com/docs/4.17.15#reverse\" rel=\"noreferrer\">_.reverse</a>.</p>\n\n<pre><code>const sortedObjs = _.reverse(_.sortBy(users, ['user.age']));\n</code></pre>\n\n<p>Want to combine both using <a href=\"https://lodash.com/docs/4.17.15#chain\" rel=\"noreferrer\">chain</a>?</p>\n\n<pre><code>const { chain } = require('lodash');\nconst sortedObjs = chain(users).sortBy('user.age').reverse().value();\n</code></pre>\n\n<p>Or when do you prefer <a href=\"https://lodash.com/docs/4.17.15#flow\" rel=\"noreferrer\">flow</a> over chain</p>\n\n<pre><code>const { flow, reverse, sortBy } = require('lodash/fp');\nconst sortedObjs = flow([sortBy('user.age'), reverse])(users); \n</code></pre>\n"},{"score":41,"body":"<p>Old answer that is not correct:</p>\n\n<pre><code>arr.sort((a, b) =&gt; a.name &gt; b.name)\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>From Beauchamp's comment:</p>\n\n<pre><code>arr.sort((a, b) =&gt; a.name &lt; b.name ? -1 : (a.name &gt; b.name ? 1 : 0))\n</code></pre>\n\n<p>More readable format:</p>\n\n<pre><code>arr.sort((a, b) =&gt; {\n  if (a.name &lt; b.name) return -1\n  return a.name &gt; b.name ? 1 : 0\n})\n</code></pre>\n\n<p>Without nested ternaries:</p>\n\n<pre><code>arr.sort((a, b) =&gt; a.name &lt; b.name ? - 1 : Number(a.name &gt; b.name))\n</code></pre>\n\n<p>Explanation: <code>Number()</code> will cast <code>true</code> to <code>1</code> and <code>false</code> to <code>0</code>.</p>\n"},{"score":8,"body":"<p>Given the original example:</p>\n\n<pre><code>var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n</code></pre>\n\n<p>Sort by multiple fields:</p>\n\n<pre><code>objs.sort(function(left, right) {\n    var last_nom_order = left.last_nom.localeCompare(right.last_nom);\n    var first_nom_order = left.first_nom.localeCompare(right.first_nom);\n    return last_nom_order || first_nom_order;\n});\n</code></pre>\n\n<p>Notes</p>\n\n<ul>\n<li><code>a.localeCompare(b)</code> is <a href=\"https://caniuse.com/#feat=localecompare\" rel=\"noreferrer\">universally supported</a> and returns -1,0,1 if <code>a&lt;b</code>,<code>a==b</code>,<code>a&gt;b</code> respectively.</li>\n<li><code>||</code> in the last line gives <code>last_nom</code> priority over <code>first_nom</code>.</li>\n<li>Subtraction works on numeric fields: <code>var age_order = left.age - right.age;</code></li>\n<li>Negate to reverse order, <code>return -last_nom_order || -first_nom_order || -age_order;</code></li>\n</ul>\n"},{"score":3,"body":"<p>Using lodash or Underscore, its a piece of cake </p>\n\n<pre><code>&gt; const sortedList = _.orderBy(objs, [last_nom], [asc]); // asc or desc\n</code></pre>\n"},{"score":11,"body":"<p>A simple function that sort an array of object by a property</p>\n\n<pre><code>function sortArray(array, property, direction) {\n    direction = direction || 1;\n    array.sort(function compare(a, b) {\n        let comparison = 0;\n        if (a[property] &gt; b[property]) {\n            comparison = 1 * direction;\n        } else if (a[property] &lt; b[property]) {\n            comparison = -1 * direction;\n        }\n        return comparison;\n    });\n    return array; // Chainable\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nsortArray(objs, \"last_nom\"); // Asc\nsortArray(objs, \"last_nom\", -1); // Desc\n</code></pre>\n"},{"score":6,"body":"<p>Way 1 :  </p>\n\n<p>You can use <code>Underscore.js</code>. Import underscore first.    </p>\n\n<pre><code> import * as _ from 'underscore';\n let SortedObjs = _.sortBy(objs, 'last_nom');\n</code></pre>\n\n<p>Way 2 :  Use compare function.    </p>\n\n<pre><code>function compare(first, second) {\n     if (first.last_nom &lt; second.last_nom)\n         return -1;\n     if (first.last_nom &gt; second.last_nom)\n       return 1;\n    return 0;\n }\n\nobjs.sort(compare);\n</code></pre>\n"},{"score":43,"body":"<p>As of 2018 there is a much shorter and elegant solution. Just use. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\">Array.prototype.sort()</a>.</p>\n\n<p>Example:</p>\n\n<pre><code>var items = [\n  { name: 'Edward', value: 21 },\n  { name: 'Sharpe', value: 37 },\n  { name: 'And', value: 45 },\n  { name: 'The', value: -12 },\n  { name: 'Magnetic', value: 13 },\n  { name: 'Zeros', value: 37 }\n];\n\n// sort by value\nitems.sort(function (a, b) {\n  return a.value - b.value;\n});\n</code></pre>\n"},{"score":4,"body":"<blockquote>\n  <p>It works for me. Here It will keep <strong>undefined</strong> to the end.</p>\n</blockquote>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code> function sort(items, property, direction) {\r\n\r\n    function compare(a, b) {\r\n      if(!a[property] &amp;&amp; !b[property]) {\r\n        return 0;\r\n      } else if(a[property] &amp;&amp; !b[property]) {\r\n        return -1;\r\n      } else if(!a[property] &amp;&amp; b[property]) {\r\n        return 1;\r\n      } else {\r\n        const value1 = a[property].toString().toUpperCase(); // ignore upper and lowercase\r\n        const value2 = b[property].toString().toUpperCase(); // ignore upper and lowercase\r\n        if (value1 &lt; value2) {\r\n          return direction === 0 ? -1 : 1;\r\n        } else if (value1 &gt; value2) {\r\n          return direction === 0 ? 1 : -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n        \r\n      }\r\n    }\r\n    \r\n    return items.sort(compare);\r\n   } \r\n   \r\n   var items = [\r\n  { name: 'Edward', value: 21 },\r\n  { name: 'Sharpe', value: 37 },\r\n  { name: 'And', value: 45 },\r\n  { name: 'The', value: -12 },\r\n  { name: undefined, value: -12 },\r\n  { name: 'Magnetic', value: 13 },\r\n  { name: 'Zeros', value: 37 }\r\n];\r\n   console.log('Ascending Order:- ');\r\n   console.log(sort(items, 'name', 0));\r\n   console.log('Decending Order:- ');\r\n   console.log(sort(items, 'name', 1));\r\n    \r\n    </code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":32,"body":"<p>I haven't seen this particular approach suggested, so here's a terse comparison method I like to use that works for both <code>string</code> and <code>number</code> types:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const objs = [ \n  { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n  { first_nom: 'Pig',    last_nom: 'Bodine'   },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nconst sortBy = fn =&gt; {\n  const cmp = (a, b) =&gt; -(a &lt; b) || +(a &gt; b);\n  return (a, b) =&gt; cmp(fn(a), fn(b));\n};\n\nconst getLastName = o =&gt; o.last_nom;\nconst sortByLastName = sortBy(getLastName);\n\nobjs.sort(sortByLastName);\nconsole.log(objs.map(getLastName));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Explanation of <code>sortBy()</code></h3>\n<p><code>sortBy()</code> accepts a <code>fn</code> that selects a value from an object to use in comparison, and returns a function that can be passed to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" rel=\"noreferrer\"><code>Array.prototype.sort()</code></a>. In this example, we're comparing <code>o.last_nom</code>. Whenever we receive two objects such as</p>\n<pre><code>a = { first_nom: 'Lazslo', last_nom: 'Jamf' }\nb = { first_nom: 'Pig', last_nom: 'Bodine' }\n</code></pre>\n<p>we compare them with <code>(a, b) =&gt; cmp(fn(a), fn(b))</code>. Given that</p>\n<pre><code>fn = o =&gt; o.last_nom\n</code></pre>\n<p>we can expand the comparison function to <code>(a, b) =&gt; cmp(a.last_nom, b.last_nom)</code>. Because of the way <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" rel=\"noreferrer\">logical OR (<code>||</code>)</a> works in JavaScript, <code>cmp(a.last_nom, b.last_nom)</code> is equivalent to</p>\n<pre><code>if (a.last_nom &lt; b.last_nom) return -1;\nif (a.last_nom &gt; b.last_nom) return 1;\nreturn 0;\n</code></pre>\n<p>Incidentally, this is called the <a href=\"https://stackoverflow.com/a/30365399/1541563\">three-way comparison &quot;spaceship&quot; (<code>&lt;=&gt;</code>) operator</a> in other languages.</p>\n<p>Finally, here's the ES5-compatible syntax without using arrow functions:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var objs = [ \n  { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n  { first_nom: 'Pig',    last_nom: 'Bodine'   },\n  { first_nom: 'Pirate', last_nom: 'Prentice' }\n];\n\nfunction sortBy(fn) {\n  function cmp(a, b) { return -(a &lt; b) || +(a &gt; b); }\n  return function (a, b) { return cmp(fn(a), fn(b)); };\n}\n\nfunction getLastName(o) { return o.last_nom; }\nvar sortByLastName = sortBy(getLastName);\n\nobjs.sort(sortByLastName);\nconsole.log(objs.map(getLastName));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":30,"body":"<p>You can use</p>\n\n<h2>Easiest Way: <em>Lodash</em></h2>\n\n<p>(<a href=\"https://lodash.com/docs/4.17.10#orderBy\" rel=\"noreferrer\">https://lodash.com/docs/4.17.10#orderBy</a>)</p>\n\n<p>This method is like _.sortBy except that it allows specifying the sort orders of the iteratees to sort by. If orders is unspecified, all values are sorted in ascending order. Otherwise, specify an order of \"desc\" for descending or \"asc\" for ascending sort order of corresponding values.</p>\n\n<p><strong>Arguments</strong></p>\n\n<p>collection (Array|Object): The collection to iterate over.\n[iteratees=[_.identity]] (Array[]|Function[]|Object[]|string[]): The iteratees to sort by.\n[orders] (string[]): The sort orders of iteratees.</p>\n\n<p><strong>Returns</strong></p>\n\n<p>(Array): Returns the new sorted array.</p>\n\n<hr>\n\n<pre><code>var _ = require('lodash');\nvar homes = [\n    {\"h_id\":\"3\",\n     \"city\":\"Dallas\",\n     \"state\":\"TX\",\n     \"zip\":\"75201\",\n     \"price\":\"162500\"},\n    {\"h_id\":\"4\",\n     \"city\":\"Bevery Hills\",\n     \"state\":\"CA\",\n     \"zip\":\"90210\",\n     \"price\":\"319250\"},\n    {\"h_id\":\"6\",\n     \"city\":\"Dallas\",\n     \"state\":\"TX\",\n     \"zip\":\"75000\",\n     \"price\":\"556699\"},\n    {\"h_id\":\"5\",\n     \"city\":\"New York\",\n     \"state\":\"NY\",\n     \"zip\":\"00010\",\n     \"price\":\"962500\"}\n    ];\n\n_.orderBy(homes, ['city', 'state', 'zip'], ['asc', 'desc', 'asc']);\n</code></pre>\n"},{"score":1,"body":"<p>In case you have nested objects</p>\n\n<pre><code>const objs = [{\n        first_nom: 'Lazslo',\n        last_nom: 'Jamf',\n        moreDetails: {\n            age: 20\n        }\n    }, {\n        first_nom: 'Pig',\n        last_nom: 'Bodine',\n        moreDetails: {\n            age: 21\n        }\n    }, {\n        first_nom: 'Pirate',\n        last_nom: 'Prentice',\n        moreDetails: {\n            age: 22\n        }\n    }];\n\nnestedSort = (prop1, prop2 = null, direction = 'asc') =&gt; (e1, e2) =&gt; {\n        const a = prop2 ? e1[prop1][prop2] : e1[prop1],\n            b = prop2 ? e2[prop1][prop2] : e2[prop1],\n            sortOrder = direction === \"asc\" ? 1 : -1\n        return (a &lt; b) ? -sortOrder : (a &gt; b) ? sortOrder : 0;\n    }\n</code></pre>\n\n<p>and call it like</p>\n\n<pre><code>objs.sort(nestedSort(\"last_nom\"));\nobjs.sort(nestedSort(\"last_nom\", null, \"desc\"));\nobjs.sort(nestedSort(\"moreDetails\", \"age\"));\nobjs.sort(nestedSort(\"moreDetails\", \"age\", \"desc\"));\n</code></pre>\n"},{"score":3,"body":"<p>It is also possible to make a dynamic sorting function when programming in <em>TypeScript</em>, but the types become more tricky in this case.</p>\n\n\n\n<pre><code>function sortByKey&lt;O&gt;(key: keyof O, decending: boolean = false): (a: O, b: O) =&gt; number {\n    const order = decending ? -1 : 1;\n    return (a, b): number =&gt; {\n        const valA = a[key];\n        const valB = b[key];\n        if (valA &lt; valB) {\n            return -order;\n        } else if (valA &gt; valB) {\n            return order;\n        } else {\n            return 0;\n        }\n    }\n}\n</code></pre>\n\n<p>This can be used in TypeScript as the following:</p>\n\n\n\n<pre><code>const test = [\n    {\n        id: 0,\n    },\n    {\n        id: 2,\n    }\n]\n\ntest.sort(sortByKey('id')) // OK\ntest.sort(sortByKey('id1')) // ERROR\ntest.sort(sortByKey('')) // ERROR\n</code></pre>\n"},{"score":3,"body":"<p><strong>this sorting funciton can be use for all object sorting,</strong> </p>\n\n<ul>\n<li><p>object</p></li>\n<li><p>deepObject</p></li>\n<li>numeric array</li>\n</ul>\n\n<p>you can also do assending or desending sort by passing 1,-1 as param</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Object.defineProperty(Object.prototype, 'deepVal', {\r\n    enumerable: false,\r\n    writable: true,\r\n    value: function (propertyChain) {\r\n        var levels = propertyChain.split('.');\r\n        parent = this;\r\n        for (var i = 0; i &lt; levels.length; i++) {\r\n            if (!parent[levels[i]])\r\n                return undefined;\r\n            parent = parent[levels[i]];\r\n        }\r\n        return parent;\r\n    }\r\n});\r\n\r\n\r\nfunction dynamicSortAll(property,sortOrders=1) {\r\n\r\n/**default sorting will be ascending order if you need descending order\r\nsording you have to pass -1 as param**/\r\n\r\n    var sortOrder = sortOrders;\r\n   \r\n    return function (a,b) {\r\n\r\n\t\t var result =(property? ((a.deepVal(property) &gt; b.deepVal(property)) ? 1 : (a.deepVal(property) &lt; b.deepVal(property)) ? -1 : 0) :((a &gt; b) ? 1 : (a &lt; b) ? -1 : 0))\r\n\t\t\r\n        return result * sortOrder;\r\n\t\t\r\n   \r\n    }\r\n}\r\n\r\ndeepObj = [\r\n    {\r\n        a: { a: 1, b: 2, c: 3 },\r\n        b: { a: 4, b: 5, c: 6 }\r\n    },\r\n    { \r\n        a: { a: 3, b: 2, c: 1 },\r\n        b: { a: 6, b: 5, c: 4 }\r\n}];\r\n\r\nlet deepobjResult=deepObj.sort(dynamicSortAll('a.a',1))\r\nconsole.log('deepobjResult :'+ JSON.stringify(deepobjResult))\r\nvar obj = [ \r\n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\r\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\r\n    { first_nom: 'Pirate', last_nom: 'Prentice' }\r\n];\r\nlet objResult=obj.sort(dynamicSortAll('last_nom',1))\r\nconsole.log('objResult :'+ JSON.stringify(objResult))\r\n\r\nvar numericObj=[1,2,3,4,5,6]\r\n\r\nlet numResult=numericObj.sort(dynamicSortAll(null,-1))\r\nconsole.log('numResult :'+ JSON.stringify(numResult))\r\n\r\nlet stringSortResult='helloworld'.split('').sort(dynamicSortAll(null,1))\r\n\r\n console.log('stringSortResult:'+ JSON.stringify(stringSortResult))\r\n\r\nlet uniqueStringOrger=[...new Set(stringSortResult)]; \r\n console.log('uniqueStringOrger:'+ JSON.stringify(uniqueStringOrger))</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>Hers a function you can use to sort the list by multiple objects, where if the first object is equal, the second order will be used as a fallback. empty values should also be ignored to fallback order if possible.</p>\n\n<pre><code>function sortObjects(list, orderBy){\n    list.sort(function(a, b){\n        let byIndex = 0;\n        let order = orderBy[byIndex];\n        while(!a[order.by] || !b[order.by] || a[order.by] === b[order.by]){\n            byIndex++;\n            if(byIndex &gt;= orderBy.length){break;}\n            order = orderBy[byIndex];\n        }\n        if(!a[order.by] || !b[order.by] || a[order.by] === b[order.by]){\n            return false;\n        }\n        if(order.desc){\n            return a[order.by] &lt; b[order.by];\n        }\n        return a[order.by] &gt; b[order.by];\n    });\n    return list;\n}\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>var objs = [\n    {a: 10, b: 20, c: 30},\n    {a: 30, b: 10, c: 20},\n    {a: 20, b: 10, c: 30},\n];\n\nsortObjectList(objs, [{by: 'a'}]);\n[\n    {a: 10, b: 20, c: 30},\n    {a: 20, b: 10, c: 30},\n    {a: 30, b: 10, c: 20},\n]\n\nsortObjectList(objs, [{by: 'a', desc: true}]);\n[\n    {a: 30, b: 10, c: 20},\n    {a: 20, b: 10, c: 30},\n    {a: 10, b: 20, c: 30},\n]\n\nsortObjectList(objs, [{by: 'b', desc: true}, {by: 'c'}]);\n[\n    {a: 10, b: 20, c: 30},\n    {a: 30, b: 10, c: 20},\n    {a: 20, b: 10, c: 30},\n]\n</code></pre>\n\n<p>another example:</p>\n\n<pre><code>var objs = [\n    {a: 5, b: 5},\n    {a: 10, b: 15},\n    {a: 15, b: 25},\n    {b: 10},\n    {b: 20},\n    {a: 10, b: 30},\n    {a: 10, b: 12},\n];\n\nsortObjectList(objs, [{by: 'a'}, {by: 'b'}]);\n[\n    {a: 5, b: 5},\n    {b: 10},\n    {a: 10, b: 12},\n    {a: 10, b: 15},\n    {b: 20},\n    {a: 10, b: 30},\n    {a: 15, b: 25},\n]\n</code></pre>\n"},{"score":9,"body":"<p>This is my take on this:</p>\n<p>The <code>order</code> parameter is optional and defaults to &quot;ASC&quot; for ascending order.</p>\n<p>Works on <strong>accented chars and it's case insensitive</strong>.</p>\n<p><strong>NOTE:</strong> It sorts and returns the <strong>ORIGINAL</strong> array.</p>\n<pre><code>function sanitizeToSort(str) {\n  return str\n    .normalize('NFD')                   // REMOVE ACCENTED AND DIACRITICS\n    .replace(/[\\u0300-\\u036f]/g,'')     // REMOVE ACCENTED AND DIACRITICS\n    .toLowerCase()                      // SORT WILL BE CASE INSENSITIVE\n  ;\n}\n\nfunction sortByProperty(arr, property, order=&quot;ASC&quot;) {\n  arr.forEach((item) =&gt; item.tempProp = sanitizeToSort(item[property]));\n  arr.sort((a,b) =&gt; order === &quot;ASC&quot; ?\n      a.tempProp &gt; b.tempProp ?  1 : a.tempProp &lt; b.tempProp ? -1 : 0\n    : a.tempProp &gt; b.tempProp ? -1 : a.tempProp &lt; b.tempProp ?  1 : 0\n  );\n  arr.forEach((item) =&gt; delete item.tempProp);\n  return arr;\n}\n</code></pre>\n<p><strong>SNIPPET</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function sanitizeToSort(str) {\n  return str\n    .normalize('NFD')                   // REMOVE ACCENTED CHARS\n    .replace(/[\\u0300-\\u036f]/g,'')     // REMOVE DIACRITICS\n    .toLowerCase()\n  ;\n}\n\nfunction sortByProperty(arr, property, order=\"ASC\") {\n  arr.forEach((item) =&gt; item.tempProp = sanitizeToSort(item[property]));\n  arr.sort((a,b) =&gt; order === \"ASC\" ?\n      a.tempProp &gt; b.tempProp ?  1 : a.tempProp &lt; b.tempProp ? -1 : 0\n    : a.tempProp &gt; b.tempProp ? -1 : a.tempProp &lt; b.tempProp ?  1 : 0\n  );\n  arr.forEach((item) =&gt; delete item.tempProp);\n  return arr;\n}\n\nconst rockStars = [\n  { name: \"Axl\",\n    lastname: \"Rose\" },\n  { name: \"Elthon\",\n    lastname: \"John\" },\n  { name: \"Paul\",\n    lastname: \"McCartney\" },\n  { name: \"Lou\",\n    lastname: \"Reed\" },\n  { name: \"freddie\",             // WORKS ON LOWER/UPPER CASE\n    lastname: \"mercury\" },\n  { name: \"Ámy\",                 // WORKS ON ACCENTED CHARS TOO\n    lastname: \"winehouse\"}\n  \n];\n\nsortByProperty(rockStars,\"name\");\n\nconsole.log(\"Ordered by name A-Z:\");\nrockStars.forEach((item) =&gt; console.log(item.name + \" \" + item.lastname));\n\nsortByProperty(rockStars,\"lastname\",\"DESC\");\n\nconsole.log(\"\\nOrdered by lastname Z-A:\");\nrockStars.forEach((item) =&gt; console.log(item.lastname + \", \" + item.name));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":19,"body":"<p>Try this,</p>\n\n<pre><code>UPTO ES5\n\n//Ascending Sort\nitems.sort(function (a, b) {\n   return a.value - b.value;\n});\n\n\n//Descending Sort\nitems.sort(function (a, b) {\n   return b.value - a.value;\n});\n\n\nIN ES6 &amp; above:\n\n// Ascending sort\nitems.sort((a, b) =&gt; a.value - b.value);\n\n// Descending Sort\n items.sort((a, b) =&gt; b.value - a.value);\n</code></pre>\n"},{"score":6,"body":"<p>You can use a reusable sort function.</p>\n<pre class=\"lang-js prettyprint-override\"><code>Array.prototype.order= function(prop, methods = {}) {\n  let swipe = 1;\n  if (prop?.constructor == Object) methods = prop;\n  swipe = methods.reverse ? -1 : 1;\n  function key(x) {\n    if (typeof prop == &quot;string&quot;)\n      return methods.insensitive ? String(x[prop]).toLowerCase() : x[prop];\n    if (methods.insensitive) return String(x).toLowerCase();\n    return x;\n  }\n  this.sort((a, b) =&gt; {\n    if (key(a) &lt; key(b)) return -1 * swipe;\n    if (key(b) &lt; key(a)) return 1 * swipe;\n    return 0;\n  });\n  return this;\n};\n</code></pre>\n<p>Its can be use to sort both <strong>Array</strong> and <strong>Object</strong> in array<br>.</p>\n<pre class=\"lang-js prettyprint-override\"><code>let arr = [6, 2, 4, 1, 5, 3];\nlet arr2 = [\n  { name: &quot;Bar&quot;, age: 12 },\n  { name: &quot;Nur&quot;, age: 18 },\n  { name: &quot;foo&quot;, age: 30 },\n  { name: &quot;bazz&quot;, age: 15 }\n];\narr.order({ reverse: true }); //  [ 6, 5, 4, 3, 2, 1 ]\narr2.order(&quot;name&quot;, { reverse: 1, insensitive: 0});\nlet arr3 = [...arr2].order(&quot;age&quot;);  // new sorted array created from arr2 (But does not change original array)\n</code></pre>\n<p><em>1nd  (optional)</em> &gt;  to sort object contain  in array. <br>\n<em>2rd is method</em>   &gt;   <code>{ reverse: Boolean, insensitive: Boolean }</code><br></p>\n"},{"score":1,"body":"<h1>Deep</h1>\n<p>Based on <a href=\"https://javascript.info/string#comparing-strings\" rel=\"nofollow noreferrer\">this</a> excellent tutorial I would like to develop <a href=\"https://stackoverflow.com/a/35092754/860099\">Vlad Bezden answer</a> and explain why <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" rel=\"nofollow noreferrer\"><code>localeCompare</code></a> is better than standard comarison method like <code>strA &gt; strB</code>. Lets run this example</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log( 'Österreich' &gt; 'Zealand' );  // We expect false\nconsole.log( 'a' &gt; 'Z' );                 // We expect false</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>The reason is that in JS all strings are encoded using <a href=\"https://en.wikipedia.org/wiki/UTF-16\" rel=\"nofollow noreferrer\">UTF-16</a> and</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let str = '';\n\n// order of characters in JS\nfor (let i = 65; i &lt;= 220; i++) {\n  str += String.fromCodePoint(i); // code to character\n}\n\nconsole.log(str);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Capital letters go first (have small codes) and then go small letters and then go character <code>Ö</code> (after <code>z</code>). This is reason why we get true in first snippet - becasue operator <code>&gt;</code> compare characters codes.</p>\n<p>As you can see compare characters in diffrent languages is non trivial task - but luckily, modern browsers support the internationalization standard <a href=\"http://www.ecma-international.org/ecma-402/1.0/ECMA-402.pdf\" rel=\"nofollow noreferrer\">ECMA-402</a>. So in JS we have <code>strA.localeCompare(strB)</code> which do the job (<code>-1</code> means <code>strA</code> is less than <code>strB</code>; 1 means opposite; 0 means equal)</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>console.log( 'Österreich'.localeCompare('Zealand') ); // We expect -1\nconsole.log( 'a'.localeCompare('Z') );                // We expect -1</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>I would like to add that <code>localeCompare</code> supports two parameters: language and additional <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator\" rel=\"nofollow noreferrer\">rules </a></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var objs = [ \n    { first_nom: 'Lazslo', last_nom: 'Jamf'     },\n    { first_nom: 'Pig',    last_nom: 'Bodine'   },\n    { first_nom: 'Pirate', last_nom: 'Prentice' },\n    { first_nom: 'Test',   last_nom: 'jamf'     } \n];\n\nobjs.sort((a,b)=&gt; a.last_nom.localeCompare(b.last_nom,'en',{sensitivity:'case'}))\n\nconsole.log(objs);\n\n// in '&gt;' comparison 'Jamf' will NOT be next to 'jamf'</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1,"body":"<p><strong>Simple answer:</strong></p>\n<pre class=\"lang-js prettyprint-override\"><code>objs.sort((a,b)=&gt;a.last_nom.localeCompare(b.last_nom))\n</code></pre>\n<p><strong>Details:</strong></p>\n<p>Today it is very simple, You can compare strings with <code>localeCompare</code>. As the Mozilla Doc says:</p>\n<blockquote>\n<p>The <code>localeCompare()</code> method returns a number indicating whether a\nreference string comes <code>before</code>, or <code>after</code>, or <code>is the same as the given string in sort order</code>.</p>\n</blockquote>\n<pre class=\"lang-js prettyprint-override\"><code>    //example1:\n    console.log(&quot;aaa&quot;.localeCompare(&quot;aab&quot;)); //-1\n    console.log(&quot;aaa&quot;.localeCompare(&quot;aaa&quot;)); //0\n    console.log(&quot;aab&quot;.localeCompare(&quot;aaa&quot;)); //1\n</code></pre>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //example2:\n    const a = 'réservé'; // with accents, lowercase\n    const b = 'RESERVE'; // no accents, uppercase\n\n    console.log(a.localeCompare(b));\n    // expected output: 1\n    console.log(a.localeCompare(b, 'en', { sensitivity: 'base' }));\n    // expected output: 0\n</code></pre>\n<p>For more details see Mozilla doc<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\" rel=\"nofollow noreferrer\"><code>localeCompare</code></a>:</p>\n"}],"score":2981}