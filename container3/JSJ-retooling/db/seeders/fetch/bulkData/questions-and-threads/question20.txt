{"body":"<p>I'd like to do something like this to tick a <code>checkbox</code> using <strong>jQuery</strong>:</p>\n\n<pre><code>$(\".myCheckBox\").checked(true);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\".myCheckBox\").selected(true);\n</code></pre>\n\n<p>Does such a thing exist?</p>\n","title":"Setting &quot;checked&quot; for a checkbox with jQuery","answers":[{"score":149,"body":"<p>You can do</p>\n\n<pre><code>$('.myCheckbox').attr('checked',true) //Standards compliant\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"form #mycheckbox\").attr('checked', true)\n</code></pre>\n\n<p>If you have custom code in the onclick event for the checkbox that you want to fire, use this one instead:</p>\n\n<pre><code>$(\"#mycheckbox\").click();\n</code></pre>\n\n<p>You can uncheck by removing the attribute entirely:</p>\n\n<pre><code>$('.myCheckbox').removeAttr('checked')\n</code></pre>\n\n<p>You can check all checkboxes like this:</p>\n\n<pre><code>$(\".myCheckbox\").each(function(){\n    $(\"#mycheckbox\").click()\n});\n</code></pre>\n"},{"score":6071,"body":"<h2>Modern jQuery</h2>\n\n<p>Use <a href=\"https://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code></a>:</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n\n<h2>DOM API</h2>\n\n<p>If you're working with just one element, you can always just access the underlying <a href=\"https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement\" rel=\"noreferrer\"><code>HTMLInputElement</code></a> and modify its <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#Properties_checkbox_radio\" rel=\"noreferrer\"><code>.checked</code></a> property:</p>\n\n<pre><code>$('.myCheckbox')[0].checked = true;\n$('.myCheckbox')[0].checked = false;\n</code></pre>\n\n<p>The benefit to using the <code>.prop()</code> and <code>.attr()</code> methods instead of this is that they will operate on all matched elements.</p>\n\n<h2>jQuery 1.5.x and below</h2>\n\n<p>The <code>.prop()</code> method is not available, so you need to use <a href=\"https://api.jquery.com/attr\" rel=\"noreferrer\"><code>.attr()</code></a>.</p>\n\n<pre><code>$('.myCheckbox').attr('checked', true);\n$('.myCheckbox').attr('checked', false);\n</code></pre>\n\n<p>Note that this is <a href=\"https://github.com/jquery/jquery/blob/1.5.2/test/unit/attributes.js#L157\" rel=\"noreferrer\">the approach used by jQuery's unit tests prior to version 1.6</a> and is preferable to using <code>$('.myCheckbox').removeAttr('checked');</code> since the latter will, if the box was initially checked, change the behaviour of a call to <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.reset\" rel=\"noreferrer\"><code>.reset()</code></a> on any form that contains it â€“ a subtle but probably unwelcome behaviour change.</p>\n\n<p>For more context, some incomplete discussion of the changes to the handling of the <code>checked</code> attribute/property in the transition from 1.5.x to 1.6 can be found in the <a href=\"https://blog.jquery.com/2011/05/03/jquery-16-released/\" rel=\"noreferrer\">version 1.6 release notes</a> and the <strong>Attributes vs. Properties</strong> section of the <a href=\"https://api.jquery.com/prop\" rel=\"noreferrer\"><code>.prop()</code> documentation</a>.</p>\n"},{"score":724,"body":"<p>Use:</p>\n\n<pre><code>$(\".myCheckbox\").attr('checked', true); // Deprecated\n$(\".myCheckbox\").prop('checked', true);\n</code></pre>\n\n<p>And if you want to check if a checkbox is checked or not:</p>\n\n<pre><code>$('.myCheckbox').is(':checked');\n</code></pre>\n"},{"score":65,"body":"<pre><code>$(\"#mycheckbox\")[0].checked = true;\n$(\"#mycheckbox\").attr('checked', true);\n$(\"#mycheckbox\").click();\n</code></pre>\n\n<p>The last one will fire the click event for the checkbox, the others will not.\nSo if you have custom code in the onclick event for the checkbox that you want to fire, use the last one.</p>\n"},{"score":81,"body":"<p>You can also extend the $.fn object with new methods:</p>\n\n<pre><code>(function($)  {\n   $.fn.extend({\n      check : function()  {\n         return this.filter(\":radio, :checkbox\").attr(\"checked\", true);\n      },\n      uncheck : function()  {\n         return this.filter(\":radio, :checkbox\").removeAttr(\"checked\");\n      }\n   });\n}(jQuery));\n</code></pre>\n\n<p>Then you can just do:</p>\n\n<pre><code>$(\":checkbox\").check();\n$(\":checkbox\").uncheck();\n</code></pre>\n\n<p>Or you may want to give them more unique names like mycheck() and myuncheck()  in case you use some other library that uses those names.</p>\n"},{"score":53,"body":"<p>This selects elements that have the specified attribute with a value containing the given substring \"ckbItem\":</p>\n\n<pre><code>$('input[name *= ckbItem]').prop('checked', true);\n</code></pre>\n\n<p>It will select all elements that contain ckbItem in its name attribute.</p>\n"},{"score":63,"body":"<p>To check a checkbox you should use</p>\n\n<pre><code> $('.myCheckbox').attr('checked',true);\n</code></pre>\n\n<p>or</p>\n\n<pre><code> $('.myCheckbox').attr('checked','checked');\n</code></pre>\n\n<p>and to uncheck a check box you should always set it to false:</p>\n\n<pre><code> $('.myCheckbox').attr('checked',false);\n</code></pre>\n\n<p>If you do</p>\n\n<pre><code>  $('.myCheckbox').removeAttr('checked')\n</code></pre>\n\n<p>it removes the attribute all together and therefore you will not be able to reset the form.</p>\n\n<p><a href=\"http://jsfiddle.net/mcgrailm/34vhs/\" rel=\"noreferrer\">BAD DEMO jQuery 1.6</a>. I think this is broken. For 1.6 I am going to make a new post on that.</p>\n\n<p><a href=\"http://jsfiddle.net/mcgrailm/24FLg/\" rel=\"noreferrer\">NEW WORKING DEMO jQuery 1.5.2</a> works in Chrome.</p>\n\n<p>Both demos use</p>\n\n<pre><code>$('#tc').click(function() {\n    if ( $('#myCheckbox').attr('checked')) {\n        $('#myCheckbox').attr('checked', false);\n    } else {\n        $('#myCheckbox').attr('checked', 'checked');\n    }\n});\n</code></pre>\n"},{"score":320,"body":"<p>This is the correct way of checking and unchecking checkboxes with jQuery, as it is cross-platform standard, and <em>will</em> allow form reposts.</p>\n\n<pre><code>$('.myCheckBox').each(function(){ this.checked = true; });\n\n$('.myCheckBox').each(function(){ this.checked = false; });\n</code></pre>\n\n<p>By doing this, you are using JavaScript standards for checking and unchecking checkboxes, so any browser that properly implements the \"checked\" property of the checkbox element will run this code flawlessly. This <em>should</em> be all major browsers, but I am unable to test previous to Internet&nbsp;Explorer&nbsp;9.</p>\n\n<p><strong>The Problem</strong> (jQuery 1.6):</p>\n\n<p>Once a user clicks on a checkbox, that checkbox stops responding to the \"checked\" attribute changes.</p>\n\n<p>Here is an example of the checkbox attribute failing to do the job after someone has <em>clicked</em> the checkbox (this happens in Chrome).</p>\n\n<p><strong><a href=\"http://jsfiddle.net/xixonia/zgcrB/\">Fiddle</a></strong></p>\n\n<p><strong>The Solution:</strong></p>\n\n<p>By using JavaScript's \"checked\" property on the <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a> elements, we are able to solve the problem directly, instead of trying to manipulate the DOM into doing what we <em>want</em> it to do.</p>\n\n<p><a href=\"http://jsfiddle.net/xixonia/WnbNC/\"><strong>Fiddle</strong></a></p>\n\n<p>This plugin will alter the checked property of any elements selected by jQuery, and successfully check and uncheck checkboxes under all circumstances. So, while this may seem like an over-bearing solution, it will make your site's user experience better, and help prevent user frustration.</p>\n\n<pre><code>(function( $ ) {\n    $.fn.checked = function(value) {\n        if(value === true || value === false) {\n            // Set the value of the checkbox\n            $(this).each(function(){ this.checked = value; });\n        } \n        else if(value === undefined || value === 'toggle') {\n            // Toggle the checkbox\n            $(this).each(function(){ this.checked = !this.checked; });\n        }\n\n        return this;\n    };\n})( jQuery );\n</code></pre>\n\n<p>Alternatively, if you do not want to use a plugin, you can use the following code snippets:</p>\n\n<pre><code>// Check\n$(':checkbox').prop('checked', true);\n\n// Un-check\n$(':checkbox').prop('checked', false);\n\n// Toggle\n$(':checkbox').prop('checked', function (i, value) {\n    return !value;\n});\n</code></pre>\n"},{"score":30,"body":"<p>We can use <code>elementObject</code> with jQuery for getting the attribute checked:</p>\n\n<pre><code>$(objectElement).attr('checked');\n</code></pre>\n\n<p>We can use this for all jQuery versions without any error.</p>\n\n<p>Update: Jquery 1.6+ has the new prop method which replaces attr, e.g.:</p>\n\n<pre><code>$(objectElement).prop('checked');\n</code></pre>\n"},{"score":32,"body":"<p>Here is code for checked and unchecked with a button:</p>\n\n<pre><code>var set=1;\nvar unset=0;\njQuery( function() {\n    $( '.checkAll' ).live('click', function() {\n        $( '.cb-element' ).each(function () {\n            if(set==1){ $( '.cb-element' ).attr('checked', true) unset=0; }\n            if(set==0){ $( '.cb-element' ).attr('checked', false); unset=1; }\n        });\n        set=unset;\n    });\n});\n</code></pre>\n\n<p>Update: Here is the same code block using the newer Jquery 1.6+ prop method, which replaces attr:</p>\n\n<pre><code>var set=1;\nvar unset=0;\njQuery( function() {\n    $( '.checkAll' ).live('click', function() {\n        $( '.cb-element' ).each(function () {\n            if(set==1){ $( '.cb-element' ).prop('checked', true) unset=0; }\n            if(set==0){ $( '.cb-element' ).prop('checked', false); unset=1; }\n        });\n        set=unset;\n    });\n});\n</code></pre>\n"},{"score":13,"body":"<p>I couldn't get it working using:</p>\n\n<pre><code>$(\"#cb\").prop('checked', 'true');\n$(\"#cb\").prop('checked', 'false');\n</code></pre>\n\n<p>Both true and false would check the checkbox. What worked for me was:</p>\n\n<pre><code>$(\"#cb\").prop('checked', 'true'); // For checking\n$(\"#cb\").prop('checked', '');     // For unchecking\n</code></pre>\n"},{"score":47,"body":"<p>Assuming that the question is...</p>\n\n<h1>How do I check a checkbox-set <strong>BY VALUE?</strong></h1>\n\n<p>Remember that in a typical checkbox set, all input tags have the same name, <strong>they differ by the attribute <code>value</code></strong>:  there are no ID for each input of the set.</p>\n\n<p>Xian's answer can be extended with a <em>more specific selector</em>, using the following line of code:</p>\n\n<pre><code>$(\"input.myclass[name='myname'][value='the_value']\").prop(\"checked\", true);\n</code></pre>\n"},{"score":26,"body":"<p>If you are using <a href=\"http://en.wikipedia.org/wiki/PhoneGap\">PhoneGap</a> doing application development, and you have a value on the button that you want to show instantly, remember to do this</p>\n\n<pre><code>$('span.ui-[controlname]',$('[id]')).text(\"the value\");\n</code></pre>\n\n<p>I found that without the span, the interface will not update no matter what you do.</p>\n"},{"score":46,"body":"<p>I'm missing the solution. I'll always use:</p>\n\n<pre><code>if ($('#myCheckBox:checked').val() !== undefined)\n{\n    //Checked\n}\nelse\n{\n    //Not checked\n}\n</code></pre>\n"},{"score":31,"body":"<p>Try this:</p>\n\n<pre><code>$('#checkboxid').get(0).checked = true;  //For checking\n\n$('#checkboxid').get(0).checked = false; //For unchecking\n</code></pre>\n"},{"score":38,"body":"<p>Here is a way to do it without jQuery</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function addOrAttachListener(el, type, listener, useCapture) {\r\n  if (el.addEventListener) {\r\n    el.addEventListener(type, listener, useCapture);\r\n  } else if (el.attachEvent) {\r\n    el.attachEvent(\"on\" + type, listener);\r\n  }\r\n};\r\n\r\naddOrAttachListener(window, \"load\", function() {\r\n  var cbElem = document.getElementById(\"cb\");\r\n  var rcbElem = document.getElementById(\"rcb\");\r\n  addOrAttachListener(cbElem, \"click\", function() {\r\n    rcbElem.checked = cbElem.checked;\r\n  }, false);\r\n}, false);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;label&gt;Click Me!\r\n  &lt;input id=\"cb\" type=\"checkbox\" /&gt;\r\n&lt;/label&gt;\r\n&lt;label&gt;Reflection:\r\n  &lt;input id=\"rcb\" type=\"checkbox\" /&gt;\r\n&lt;/label&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":19,"body":"<p>If using mobile and you want the interface to update and show the checkbox as unchecked, use the following:</p>\n\n<pre><code>$(\"#checkbox1\").prop('checked', false).checkboxradio(\"refresh\");\n</code></pre>\n"},{"score":11,"body":"<p><strong>Here's the complete answer</strong>\nusing jQuery</p>\n\n<p>I test it and it works 100% :D</p>\n\n<pre><code>    // when the button (select_unit_button) is clicked it returns all the checed checkboxes values \n    $(\"#select_unit_button\").on(\"click\", function(e){\n\n             var arr = [];\n\n             $(':checkbox:checked').each(function(i){\n                 arr[i] = $(this).val(); // u can get id or anything else\n             });\n\n              //console.log(arr); // u can test it using this in google chrome\n    });\n</code></pre>\n"},{"score":43,"body":"<p>To check a checkbox using <strong>jQuery 1.6</strong> or higher just do this:</p>\n\n<pre><code>checkbox.prop('checked', true);\n</code></pre>\n\n<p>To uncheck, use:</p>\n\n<pre><code>checkbox.prop('checked', false);\n</code></pre>\n\n<p>Here' s what I like to use to toggle a checkbox using jQuery:</p>\n\n<pre><code>checkbox.prop('checked', !checkbox.prop('checked'));\n</code></pre>\n\n<hr>\n\n<p>If you're using <strong>jQuery 1.5</strong> or lower:</p>\n\n<pre><code>checkbox.attr('checked', true);\n</code></pre>\n\n<p>To uncheck, use:</p>\n\n<pre><code>checkbox.attr('checked', false);\n</code></pre>\n"},{"score":7,"body":"<pre><code>$(\".myCheckBox\").prop(\"checked\",\"checked\");\n</code></pre>\n"},{"score":19,"body":"<p>Be aware of memory leaks in Internet&nbsp;Explorer prior to <a href=\"http://en.wikipedia.org/wiki/Internet_Explorer_9\" rel=\"noreferrer\">Internet&nbsp;Explorer&nbsp;9</a>, as the <a href=\"http://api.jquery.com/prop/\" rel=\"noreferrer\">jQuery documentation states</a>:</p>\n\n<blockquote>\n  <p>In Internet Explorer prior to version 9, using .prop() to set a DOM\n  element property to anything other than a simple primitive value\n  (number, string, or boolean) can cause memory leaks if the property is\n  not removed (using .removeProp()) before the DOM element is removed\n  from the document. To safely set values on DOM objects without memory\n  leaks, use .data().</p>\n</blockquote>\n"},{"score":10,"body":"<p>In jQuery,</p>\n\n<pre><code>if($(\"#checkboxId\").is(':checked')){\n    alert(\"Checked\");\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if($(\"#checkboxId\").attr('checked')==true){\n    alert(\"Checked\");\n}\n</code></pre>\n\n<p>In JavaScript,</p>\n\n<pre><code>if (document.getElementById(\"checkboxID\").checked){\n    alert(\"Checked\");\n}\n</code></pre>\n"},{"score":17,"body":"<pre><code>$('controlCheckBox').click(function(){\n    var temp = $(this).prop('checked');\n    $('controlledCheckBoxes').prop('checked', temp);\n});\n</code></pre>\n"},{"score":26,"body":"<p>Here is the code and demo for how to check multiple check boxes...</p>\n\n<p><strong><a href=\"http://jsfiddle.net/tamilmani/z8TTt/\">http://jsfiddle.net/tamilmani/z8TTt/</a></strong></p>\n\n<pre><code>$(\"#check\").on(\"click\", function () {\n\n    var chk = document.getElementById('check').checked;\n    var arr = document.getElementsByTagName(\"input\");\n\n    if (chk) {\n        for (var i in arr) {\n            if (arr[i].name == 'check') arr[i].checked = true;\n        }\n    } else {\n        for (var i in arr) {\n            if (arr[i].name == 'check') arr[i].checked = false;\n        }\n    }\n});\n</code></pre>\n"},{"score":-6,"body":"<p>For overall:</p>\n\n<pre><code>$(\"#checkAll\").click(function(){\n    $(\".somecheckBoxes\").prop('checked',$(this).prop('checked')?true:false);\n});\n</code></pre>\n"},{"score":15,"body":"<p>Plain JavaScript is very simple and much less overhead:</p>\n\n<pre><code>var elements = document.getElementsByClassName('myCheckBox');\nfor(var i = 0; i &lt; elements.length; i++)\n{\n    elements[i].checked = true;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Zup4m/\">Example here</a></p>\n"},{"score":22,"body":"<p>Another possible solution:</p>\n\n<pre><code>    var c = $(\"#checkboxid\");\n    if (c.is(\":checked\")) {\n         $('#checkboxid').prop('checked', false);\n    } else {\n         $('#checkboxid').prop('checked', true);\n    }\n</code></pre>\n"},{"score":18,"body":"<p>To check and uncheck</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n"},{"score":5,"body":"<p>You can try this:</p>\n\n<pre><code>$('input[name=\"activity[task_state]\"]').val(\"specify the value you want to check \")\n</code></pre>\n"},{"score":16,"body":"<p>This is probably the shortest and easiest solution:</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = true;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = false;\n</code></pre>\n\n<hr>\n\n<p>Even shorter would be:</p>\n\n<pre><code>$(\".myCheckBox\")[0].checked = !0;\n$(\".myCheckBox\")[0].checked = !1;\n</code></pre>\n\n<hr>\n\n<p>Here is <a href=\"http://jsfiddle.net/8PCx8/\" rel=\"noreferrer\">a <em>jsFiddle</em></a> as well.</p>\n"},{"score":10,"body":"<p>In case you use <a href=\"http://en.wikipedia.org/wiki/ASP.NET_MVC_Framework\" rel=\"noreferrer\">ASP.NET MVC</a>, generate many checkboxes and later have <strong><em>to select/unselect all</em></strong> using JavaScript you can do the following.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>@foreach (var item in Model)\n{\n    @Html.CheckBox(string.Format(\"ProductId_{0}\", @item.Id), @item.IsSelected)\n}\n</code></pre>\n\n<p><strong>JavaScript</strong></p>\n\n<pre><code>function SelectAll() {       \n        $('input[id^=\"ProductId_\"]').each(function () {          \n            $(this).prop('checked', true);\n        });\n    }\n\n    function UnselectAll() {\n        $('input[id^=\"ProductId_\"]').each(function () {\n            $(this).prop('checked', false);\n        });\n    }\n</code></pre>\n"},{"score":13,"body":"<p>When you checked a checkbox like;</p>\n\n<pre><code>$('.className').attr('checked', 'checked')\n</code></pre>\n\n<p>it might not be enough. You should also call the function below;</p>\n\n<pre><code>$('.className').prop('checked', 'true')\n</code></pre>\n\n<p>Especially when you removed the checkbox checked attribute.</p>\n"},{"score":19,"body":"<p>For jQuery 1.6+</p>\n\n<pre><code>$('.myCheckbox').prop('checked', true);\n$('.myCheckbox').prop('checked', false);\n</code></pre>\n\n<p>For jQuery 1.5.x and below</p>\n\n<pre><code>$('.myCheckbox').attr('checked', true);\n$('.myCheckbox').attr('checked', false);\n</code></pre>\n\n<p>To check,</p>\n\n<pre><code>$('.myCheckbox').removeAttr('checked');\n</code></pre>\n"},{"score":20,"body":"<p>As @livefree75 said:</p>\n\n<p><strong>jQuery 1.5.x and below</strong></p>\n\n<p>You can also extend the $.fn object with new methods:</p>\n\n<pre><code>(function($)  {\n   $.fn.extend({\n      check : function()  {\n         return this.filter(\":radio, :checkbox\").attr(\"checked\", true);\n      },\n      uncheck : function()  {\n         return this.filter(\":radio, :checkbox\").removeAttr(\"checked\");\n      }\n   });\n}(jQuery));\n</code></pre>\n\n<p>But in new versions of jQuery, we have to use something like this:</p>\n\n<p><strong>jQuery 1.6+</strong></p>\n\n<pre><code>    (function($)  {\n       $.fn.extend({\n          check : function()  {\n             return this.filter(\":radio, :checkbox\").prop(\"checked\", true);\n          },\n          uncheck : function()  {\n             return this.filter(\":radio, :checkbox\").prop(\"checked\",false);\n          }\n       });\n    }(jQuery));\n</code></pre>\n\n<p>Then you can just do:</p>\n\n<pre><code>    $(\":checkbox\").check();\n    $(\":checkbox\").uncheck();\n</code></pre>\n"},{"score":9,"body":"<p>This may help someone.</p>\n\n<p>HTML5</p>\n\n<pre><code> &lt;input id=\"check_box\" type=\"checkbox\" onclick=\"handleOnClick()\"&gt;\n</code></pre>\n\n<p>JavaScript.</p>\n\n<pre><code>  function handleOnClick(){\n\n      if($(\"#check_box\").prop('checked'))\n      {        \n          console.log(\"current state: checked\");\n      }\n      else\n      {         \n          console.log(\"current state: unchecked\");\n      }    \n }\n</code></pre>\n"},{"score":4,"body":"<p><strong>If you happen to be using <a href=\"https://en.wikipedia.org/wiki/Bootstrap_%28front-end_framework%29\" rel=\"nofollow noreferrer\">Bootstrap</a> (perhaps unawarely) ...</strong></p>\n\n<pre><code>$('#myCheckbox').bootstrapToggle('on')\n$('#myCheckbox').bootstrapToggle('off')\n</code></pre>\n\n<p><a href=\"http://www.bootstraptoggle.com/\" rel=\"nofollow noreferrer\">http://www.bootstraptoggle.com/</a></p>\n"},{"score":7,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if($('jquery_selector').is(\":checked\")){\r\n  //somecode\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":6,"body":"<p>You can check a checkbox checked condition using JavaScript in different ways. You can see below.</p>\n\n<ol>\n<li><p>First method -\n<code>$('.myCheckbox').prop('checked', true);</code></p></li>\n<li><p>Second method -\n<code>$('.myCheckbox').attr('checked', true);</code></p></li>\n<li><p>Third method (for check condition if checkbox is checked or not) - <code>$('.myCheckbox').is(':checked')</code></p></li>\n</ol>\n"},{"score":7,"body":"<p>If you are using <code>.prop('checked', true|false)</code> and donâ€™t have changed <strong>checkbox</strong>, you need to add <code>trigger('click')</code> like this:</p>\n\n<pre><code>// Check\n$('#checkboxF1').prop( \"checked\", true).trigger('click');\n\n\n// Uncheck\n$('#checkboxF1').prop( \"checked\", false).trigger('click');\n</code></pre>\n"},{"score":4,"body":"<h1>Edited on 2019 January</h1>\n\n<p>You can use: <a href=\"https://api.jquery.com/prop/#prop-propertyName\" rel=\"noreferrer\"><strong>.prop( propertyName )</strong></a> - <em>version added: 1.6</em></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>p {margin: 20px 0 0;}\r\nb {color: red;}\r\nlabel {color: red;}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!doctype html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"utf-8\"&gt;\r\n  &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\"&gt;&lt;/script&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n \r\n&lt;input id=\"check1\" type=\"checkbox\" checked=\"checked\"&gt;\r\n&lt;label for=\"check1\"&gt;Check here&lt;/label&gt;\r\n&lt;p&gt;&lt;/p&gt;\r\n \r\n&lt;script&gt;\r\n$( \"input\" ).change(function() {\r\n  var $input = $( this );\r\n  $( \"p\" ).html(\r\n    \"The .attr( \\\"checked\\\" ): &lt;b&gt;\" + $input.attr( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\r\n    \"The .prop( \\\"checked\\\" ): &lt;b&gt;\" + $input.prop( \"checked\" ) + \"&lt;/b&gt;&lt;br&gt;\" +\r\n    \"The .is( \\\":checked\\\" ): &lt;b&gt;\" + $input.is( \":checked\" ) + \"&lt;/b&gt;\" );\r\n}).change();\r\n&lt;/script&gt;\r\n \r\n&lt;/body&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h1>On Angular Framework</h1>\n\n<h1>Example 1</h1>\n\n<p><em>In your .html file</em></p>\n\n<pre><code>&lt;input type=\"checkbox\" (change)=\"toggleEditable($event)\"&gt;\n</code></pre>\n\n<p><em>In your .ts file</em></p>\n\n<pre><code>toggleEditable(event) {\n     if ( event.target.checked ) {\n         this.contentEditable = true;\n    }\n}\n</code></pre>\n\n<h1>Example 2</h1>\n\n<p><em>In your .html file</em></p>\n\n<pre><code>&lt;input type=\"checkbox\" [(ngModel)]=\"isChecked\" (change)=\"checkAction(isChecked ? 'Action1':'Action2')\" /&gt;\n</code></pre>\n"},{"score":0,"body":"<p>A JavaScript solution can be also simple and with less overhead:</p>\n\n<pre><code>document.querySelectorAll('.myCheckBox').forEach(x=&gt; x.checked=1)\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.querySelectorAll('.myCheckBox').forEach(x=&gt; x.checked=1)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>checked A: &lt;input type=\"checkbox\" class=\"myCheckBox\"&gt;&lt;br/&gt;\r\nunchecked: &lt;input type=\"checkbox\"&gt;&lt;br/&gt;\r\nchecked B: &lt;input type=\"checkbox\" class=\"myCheckBox\"&gt;&lt;br/&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1,"body":"<p>You can do this if you have the id to check it</p>\n<p><code>document.getElementById('ElementId').checked = false</code></p>\n<p>And this to uncheck</p>\n<p><code>document.getElementById('ElementId').checked = true</code></p>\n"}],"score":4234}