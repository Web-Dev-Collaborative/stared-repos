{"body":"<p>Is there a way I can modify the URL of the current page without reloading the page?</p>\n\n<p>I would like to access the portion <strong>before</strong> the # hash if possible.</p>\n\n<p>I only need to change the portion <strong>after</strong> the domain, so it's not like I'm violating cross-domain policies.</p>\n\n<pre><code> window.location.href = \"www.mysite.com/page2.php\";  // Sadly this reloads\n</code></pre>\n","title":"How do I modify the URL without reloading the page?","answers":[{"score":111,"body":"<p><strong>NOTE: If you are working with an HTML5 browser then you should ignore this answer. This is now possible as can be seen in the other answers.</strong></p>\n\n<p>There is no way to modify the <a href=\"http://en.wikipedia.org/wiki/Uniform_resource_locator\" rel=\"noreferrer\">URL</a> in the browser without reloading the page. The URL represents what the last loaded page was. If you change it (<code>document.location</code>) then it will reload the page.</p>\n\n<p>One obvious reason being, you write a site on <code>www.mysite.com</code> that looks like a bank login page. Then you change the browser URL bar to say <code>www.mybank.com</code>. The user will be totally unaware that they are really looking at <code>www.mysite.com</code>.</p>\n"},{"score":13,"body":"<p>Any changes of the loction (either <code>window.location</code> or <code>document.location</code>) will cause a request on that new URL, if you’re not just changing the URL fragment. If you change the URL, you change the URL.</p>\n\n<p>Use server-side URL rewrite techniques like <a href=\"http://httpd.apache.org/docs/2.2/mod/mod_rewrite.html\" rel=\"noreferrer\">Apache’s mod_rewrite</a> if you don’t like the URLs you are currently using.</p>\n"},{"score":87,"body":"<pre><code>parent.location.hash = \"hello\";\n</code></pre>\n"},{"score":11,"body":"<p>You can add anchor tags. I use this on my site so that I can track with Google Analytics what people are visiting on the page.</p>\n\n<p>I just add an anchor tag and then the part of the page I want to track:</p>\n\n<pre><code>var trackCode = \"/#\" + urlencode($(\"myDiv\").text());\nwindow.location.href = \"http://www.piano-chords.net\" + trackCode;\npageTracker._trackPageview(trackCode);\n</code></pre>\n"},{"score":2128,"body":"<p>This can now be done in Chrome, Safari, Firefox 4+, and Internet&nbsp;Explorer&nbsp;10pp4+!</p>\n\n<p>See this question's answer for more information:\n<em><a href=\"https://stackoverflow.com/questions/3338642/updating-address-bar-with-new-url-without-hash-or-reloading-the-page\">Updating address bar with new URL without hash or reloading the page</a></em></p>\n\n<p>Example:</p>\n\n<pre><code> function processAjaxData(response, urlPath){\n     document.getElementById(\"content\").innerHTML = response.html;\n     document.title = response.pageTitle;\n     window.history.pushState({\"html\":response.html,\"pageTitle\":response.pageTitle},\"\", urlPath);\n }\n</code></pre>\n\n<p>You can then use <code>window.onpopstate</code> to detect the back/forward button navigation:</p>\n\n<pre><code>window.onpopstate = function(e){\n    if(e.state){\n        document.getElementById(\"content\").innerHTML = e.state.html;\n        document.title = e.state.pageTitle;\n    }\n};\n</code></pre>\n\n<hr>\n\n<p>For a more in-depth look at manipulating browser history, see <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history\" rel=\"noreferrer\">this MDN article</a>.</p>\n"},{"score":645,"body":"<p>HTML5 introduced the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState\" rel=\"noreferrer\"><code>history.pushState()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState\" rel=\"noreferrer\"><code>history.replaceState()</code></a> methods, which allow you to add and modify history entries, respectively.</p>\n\n<pre><code>window.history.pushState('page2', 'Title', '/page2.php');\n</code></pre>\n\n<p>Read more about this from <a href=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\" rel=\"noreferrer\">here</a></p>\n"},{"score":23,"body":"<p>If what you're trying to do is allow users to bookmark/share pages, and you don't need it to be exactly the right URL, and you're not using hash anchors for anything else, then you can do this in two parts; you use the location.hash discussed above, and then implement a check on the home page, to look for a URL with a hash anchor in it, and redirect you to the subsequent result.</p>\n\n<p>For instance:</p>\n\n<p>1) User is on <code>www.site.com/section/page/4</code></p>\n\n<p>2) User does some action which changes the URL to <code>www.site.com/#/section/page/6</code> (with the hash). Say you've loaded the correct content for page 6 into the page, so apart from the hash the user is not too disturbed.</p>\n\n<p>3) User passes this URL on to someone else, or bookmarks it</p>\n\n<p>4) Someone else, or the same user at a later date, goes to <code>www.site.com/#/section/page/6</code></p>\n\n<p>5) Code on <code>www.site.com/</code> redirects the user to <code>www.site.com/section/page/6</code>, using something like this: </p>\n\n<pre><code>if (window.location.hash.length &gt; 0){ \n   window.location = window.location.hash.substring(1);\n}\n</code></pre>\n\n<p>Hope that makes sense! It's a useful approach for some situations. </p>\n"},{"score":144,"body":"<p>You can also use HTML5 <strong>replaceState</strong> if you want to change the url but don't want to add the entry to the browser history:</p>\n\n<pre><code>if (window.history.replaceState) {\n   //prevents browser from storing history with each change:\n   window.history.replaceState(statedata, title, url);\n}\n</code></pre>\n\n<p>This would 'break' the back button functionality. This may be required in some instances such as an image gallery (where you want the back button to return back to the gallery index page instead of moving back through each and every image you viewed) whilst giving each image its own unique url.</p>\n"},{"score":26,"body":"<p>The HTML5 replaceState is the answer, as already mentioned by Vivart and geo1701. However it is not supported in all browsers/versions.\n<a href=\"https://github.com/balupton/history.js\" rel=\"noreferrer\">History.js</a> wraps HTML5 state features and provides additional support for HTML4 browsers.</p>\n"},{"score":9,"body":"<p>As pointed out by Thomas Stjernegaard Jeppesen, you could use <a href=\"https://github.com/browserstate/history.js\" rel=\"noreferrer\">History.js</a> to modify URL parameters whilst the user navigates through your Ajax links and apps. </p>\n\n<p>Almost an year has passed since that answer, and History.js grew and became more stable and cross-browser. Now it can be used to manage history states in HTML5-compliant as well as in many HTML4-only browsers. <a href=\"http://browserstate.github.io/history.js/demo/?state=1\" rel=\"noreferrer\">In this demo</a> You can see an example of how it works (as well as being able to try its functionalities and limits. </p>\n\n<p>Should you need any help in how to use and implement this library, i suggest you to take a look at the source code of the demo page: you will see it's very easy to do.</p>\n\n<p>Finally, for a comprehensive explanation of what can be the issues about using hashes (and hashbangs), check out <a href=\"https://github.com/browserstate/history.js/wiki/Intelligent-State-Handling\" rel=\"noreferrer\">this link</a> by Benjamin Lupton. </p>\n"},{"score":24,"body":"<p>Before HTML5 we can use:</p>\n\n<pre><code>parent.location.hash = \"hello\";\n</code></pre>\n\n<p>and:</p>\n\n<pre><code>window.location.replace(\"http:www.example.com\");\n</code></pre>\n\n<p>This method will reload your page, but HTML5 introduced the <code>history.pushState(page, caption, replace_url)</code> that should not reload your page.</p>\n"},{"score":132,"body":"<p>Here is my solution (newUrl is your new URL which you want to replace with the current one):</p>\n\n<pre><code>history.pushState({}, null, newUrl);\n</code></pre>\n"},{"score":8,"body":"<p>Use <code>history.pushState()</code> from the HTML 5 History API.</p>\n\n<p>Refer to the <a href=\"http://diveintohtml5.info/history.html\" rel=\"noreferrer\">HTML5 History API</a> for more details.</p>\n"},{"score":17,"body":"<p>Below is the function to change the URL without reloading the page. It is only supported for HTML5.</p>\n\n<pre><code>  function ChangeUrl(page, url) {\n        if (typeof (history.pushState) != \"undefined\") {\n            var obj = {Page: page, Url: url};\n            history.pushState(obj, obj.Page, obj.Url);\n        } else {\n            window.location.href = \"homePage\";\n            // alert(\"Browser does not support HTML5.\");\n        }\n    }\n\n  ChangeUrl('Page1', 'homePage');\n</code></pre>\n"},{"score":31,"body":"<p>In modern <strong>browsers and HTML5</strong>, there is a method called <code>pushState</code> on window <code>history</code>. That will change the URL and push it to the history without loading the page.</p>\n\n<p>You can use it like this, it will take 3 parameters, 1) state object 2) title and a URL):</p>\n\n<pre><code>window.history.pushState({page: \"another\"}, \"another page\", \"example.html\");\n</code></pre>\n\n<p>This will change the URL, but not reload the page. Also, it doesn't check if the page exist, so if you do some JavaScript code which be reacting to the URL, you can work with them like this.</p>\n\n<p>Also there is <code>history.replaceState()</code> which does exactly the same thing, except it will modify the current history instead of creating a new one!</p>\n\n<p>Also you can create a function to check if <code>history.pushState</code> exist, then carry on with the rest like this:</p>\n\n<pre><code>function goTo(page, title, url) {\n  if (\"undefined\" !== typeof history.pushState) {\n    history.pushState({page: page}, title, url);\n  } else {\n    window.location.assign(url);\n  }\n}\n\ngoTo(\"another page\", \"example\", 'example.html');\n</code></pre>\n\n<p>Also you can change the <code>#</code> for <code>&lt;HTML5 browsers</code>, which won't reload the page. That's the way Angular uses to do <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" rel=\"noreferrer\">SPA</a> according to hashtag...</p>\n\n<p>Changing <code>#</code> is quite easy, doing like:</p>\n\n<pre><code>window.location.hash = \"example\";\n</code></pre>\n\n<p>And you can detect it like this:</p>\n\n<pre><code>window.onhashchange = function () {\n  console.log(\"#changed\", window.location.hash);\n}\n</code></pre>\n"},{"score":9,"body":"<p>You can use this beautiful and simple function to so so anywhere on your application.</p>\n\n<pre><code>function changeurl(url, title) {\n    var new_url = '/' + url;\n    window.history.pushState('data', 'Title', new_url);\n    document.title = title;\n}\n</code></pre>\n\n<p>You can not only edit URL but you can update title along with it.</p>\n\n<p>Quite helpful everyone.</p>\n"},{"score":0,"body":"<p><strong>This is all you will need to navigate without reload</strong></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// add setting without reload \nlocation.hash = \"setting\";\n\n// if url change with hash do somthing\nwindow.addEventListener('hashchange', () =&gt; {\n    console.log('url hash changed!');\n});\n\n// if url change do somthing (dont detect changes with hash)\n//window.addEventListener('locationchange', function(){\n//    console.log('url changed!');\n//})\n\n\n// remove #setting without reload \n\nhistory.back();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":5,"body":"<p>Your new url.</p>\n<pre><code>let newUrlIS =  window.location.origin + '/user/profile/management';\n</code></pre>\n<p>In a sense, calling pushState() is similar to setting window.location = &quot;#foo&quot;, in that both will also create and activate another history entry associated with the current document. But pushState() has a few advantages:</p>\n<pre><code>history.pushState({}, null, newUrlIS);\n</code></pre>\n"}],"score":2526}