{"body":"<p>How would you explain JavaScript closures to someone with a knowledge of the concepts they consist of (for example functions, variables and the like), but does not understand closures themselves?</p>\n\n<p>I have seen <a href=\"http://en.wikipedia.org/wiki/Scheme_%28programming_language%29\" rel=\"noreferrer\">the Scheme example</a> given on Wikipedia, but unfortunately it did not help.</p>\n","title":"How do JavaScript closures work?","answers":[{"score":7588,"body":"<p>A closure is a pairing of:</p>\n<ol>\n<li>A function, and</li>\n<li>A reference to that function's outer scope (lexical environment)</li>\n</ol>\n<p>A lexical environment is part of every execution context (stack frame), and is a map between identifiers (ie. local variable names) and values.</p>\n<p>Every function in JavaScript maintains a reference to its outer lexical environment. This reference is used to configure the execution context created when a function is invoked. This reference enables code inside the function to &quot;see&quot; variables declared outside the function, regardless of when and where the function is called.</p>\n<p>If a function was called by a function, which in turn was called by another function, then a chain of references to outer lexical environments is created. This chain is called the scope chain.</p>\n<p>In the following code, <code>inner</code> forms a closure with the lexical environment of the execution context created when <code>foo</code> is invoked, <em>closing over</em> variable <code>secret</code>:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  const secret = Math.trunc(Math.random()*100)\n  return function inner() {\n    console.log(`The secret number is ${secret}.`)\n  }\n}\nconst f = foo() // `secret` is not directly accessible from outside `foo`\nf() // The only way to retrieve `secret`, is to invoke `f`</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>In other words: in JavaScript, functions carry a reference to a private &quot;box of state&quot;, to which only they (and any other functions declared within the same lexical environment) have access. This box of state is invisible to the caller of the function, delivering an excellent mechanism for data-hiding and encapsulation.</p>\n<p>And remember: functions in JavaScript can be passed around like variables (first-class functions), meaning these pairings of functionality and state can be passed around your program: similar to how you might pass an instance of a class around in C++.</p>\n<p>If JavaScript did not have closures, then more state would have to be passed between functions <em>explicitly</em>, making parameter lists longer and code noisier.</p>\n<p>So, if you want a function to always have access to a private piece of state, you can use a closure.</p>\n<p>...and frequently we <em>do</em> want to associate state with a function. For example, in Java or C++, when you add a private instance variable and a method to a class, you are associating state with functionality.</p>\n<p>In C and most other common languages, after a function returns, all the local variables are no longer accessible because the stack-frame is destroyed. In JavaScript, if you declare a function within another function, then the local variables of the outer function can remain accessible after returning from it. In this way, in the code above, <code>secret</code> remains available to the function object <code>inner</code>, <em>after</em> it has been returned from <code>foo</code>.</p>\n<h2>Uses of Closures</h2>\n<p>Closures are useful whenever you need private state associated with a function. This is a very common scenario - and remember: JavaScript did not have a class syntax until 2015, and it still does not have a private field syntax. Closures meet this need.</p>\n<h3>Private Instance Variables</h3>\n<p>In the following code, function <code>toString</code> closes over the details of the car.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function Car(manufacturer, model, year, color) {\n  return {\n    toString() {\n      return `${manufacturer} ${model} (${year}, ${color})`\n    }\n  }\n}\nconst car = new Car('Aston Martin','V8 Vantage','2012','Quantum Silver')\nconsole.log(car.toString())</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Functional Programming</h3>\n<p>In the following code, function <code>inner</code> closes over both <code>fn</code> and <code>args</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function curry(fn) {\n  const args = []\n  return function inner(arg) {\n    if(args.length === fn.length) return fn(...args)\n    args.push(arg)\n    return inner\n  }\n}\n\nfunction add(a, b) {\n  return a + b\n}\n\nconst curriedAdd = curry(add)\nconsole.log(curriedAdd(2)(3)()) // 5</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Event-Oriented Programming</h3>\n<p>In the following code, function <code>onClick</code> closes over variable <code>BACKGROUND_COLOR</code>.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const $ = document.querySelector.bind(document)\nconst BACKGROUND_COLOR = 'rgba(200,200,242,1)'\n\nfunction onClick() {\n  $('body').style.background = BACKGROUND_COLOR\n}\n\n$('button').addEventListener('click', onClick)</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button&gt;Set background color&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Modularization</h3>\n<p>In the following example, all the implementation details are hidden inside an immediately executed function expression. The functions <code>tick</code> and <code>toString</code> close over the private state and functions they need to complete their work. Closures have enabled us to modularise and encapsulate our code.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>let namespace = {};\n\n(function foo(n) {\n  let numbers = []\n  function format(n) {\n    return Math.trunc(n)\n  }\n  function tick() {\n    numbers.push(Math.random() * 100)\n  }\n  function toString() {\n    return numbers.map(format)\n  }\n  n.counter = {\n    tick,\n    toString\n  }\n}(namespace))\n\nconst counter = namespace.counter\ncounter.tick()\ncounter.tick()\nconsole.log(counter.toString())</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Examples</h2>\n<h3>Example 1</h3>\n<p>This example shows that the local variables are not copied in the closure: the closure maintains a reference to the original variables <em>themselves</em>. It is as though the stack-frame stays alive in memory even after the outer function exits.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  let x = 42\n  let inner  = function() { console.log(x) }\n  x = x+1\n  return inner\n}\nvar f = foo()\nf() // logs 43</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Example 2</h3>\n<p>In the following code, three methods <code>log</code>, <code>increment</code> and <code>update</code> all close over the same lexical environment.</p>\n<p>And every time <code>createObject</code> is called, a new execution context (stack frame) is created and a completely new variable <code>x</code>, and a new set of functions (<code>log</code> etc.) are created, that close over this new variable.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function createObject() {\n  let x = 42;\n  return {\n    log() { console.log(x) },\n    increment() { x++ },\n    update(value) { x = value }\n  }\n}\n\nconst o = createObject()\no.increment()\no.log() // 43\no.update(5)\no.log() // 5\nconst p = createObject()\np.log() // 42</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h3>Example 3</h3>\n<p>If you are using variables declared using <code>var</code>, be careful you understand which variable you are closing over. Variables declared using <code>var</code> are hoisted. This is much less of a problem in modern JavaScript due to the introduction of <code>let</code> and <code>const</code>.</p>\n<p>In the following code, each time around the loop, a new function <code>inner</code> is created, which closes over <code>i</code>. But because <code>var i</code> is hoisted outside the loop, all of these inner functions close over the same variable, meaning that the final value of <code>i</code> (3) is printed, three times.</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo() {\n  var result = []\n  for (var i = 0; i &lt; 3; i++) {\n    result.push(function inner() { console.log(i) } )\n  }\n  return result\n}\n\nconst result = foo()\n// The following will print `3`, three times...\nfor (var i = 0; i &lt; 3; i++) {\n  result[i]() \n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<h2>Final points:</h2>\n<ul>\n<li>Whenever a function is declared in JavaScript a closure is created.</li>\n<li>Returning a <code>function</code> from inside another function is the classic example of a closure, because the state inside the outer function is implicitly available to the returned inner function, even after the outer function has completed execution.</li>\n<li>Whenever you use <code>eval()</code> inside a function, a closure is used. The text you <code>eval</code> can reference local variables of the function, and in non-strict mode you can even create new local variables by using <code>eval('var foo = …')</code>.</li>\n<li>When you use <code>new Function(…)</code> (the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function\" rel=\"noreferrer\">Function constructor</a>) inside a function, it does not close over its lexical environment: it closes over the global context instead. The new function cannot reference the local variables of the outer function.</li>\n<li>A closure in JavaScript is like keeping a reference (<strong>NOT</strong> a copy) to the scope at the point of function declaration, which in turn keeps a reference to its outer scope, and so on, all the way to the global object at the top of the scope chain.</li>\n<li>A closure is created when a function is declared; this closure is used to configure the execution context when the function is invoked.</li>\n<li>A new set of local variables is created every time a function is called.</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li>Douglas Crockford's simulated <a href=\"http://www.crockford.com/javascript/private.html\" rel=\"noreferrer\">private attributes and private methods</a> for an object, using closures.</li>\n<li>A great explanation of how closures can <a href=\"https://www.codeproject.com/Articles/12231/Memory-Leakage-in-Internet-Explorer-revisited\" rel=\"noreferrer\">cause memory leaks in IE</a> if you are not careful.</li>\n<li>MDN documentation on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"noreferrer\">JavaScript Closures</a>.</li>\n</ul>\n"},{"score":386,"body":"<p><strong>TLDR</strong></p>\n\n<p>A closure is a link between a function and its outer lexical (ie. as-written) environment, such that the identifiers (variables, parameters, function declarations etc) defined within that environment are visible from within the function, regardless of when or from where the function is invoked.</p>\n\n<p><strong>Details</strong></p>\n\n<p>In the terminology of the ECMAScript specification, a closure can be said to be implemented by the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize\" rel=\"noreferrer\"><code>[[Environment]]</code></a> reference of every function-object, which points to the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-lexical-environments\" rel=\"noreferrer\">lexical environment</a> within which the function is defined.</p>\n\n<p>When a function is invoked via the internal <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-ecmascript-function-objects-call-thisargument-argumentslist\" rel=\"noreferrer\"><code>[[Call]]</code></a> method, the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-functioninitialize\" rel=\"noreferrer\"><code>[[Environment]]</code></a> reference on the function-object is copied into the <em>outer environment reference</em> of the <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-environment-records\" rel=\"noreferrer\">environment record</a> of the newly-created <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-execution-contexts\" rel=\"noreferrer\">execution context</a> (stack frame).</p>\n\n<p>In the following example, function <code>f</code> closes over the lexical environment of the global execution context:</p>\n\n<pre><code>function f() {}\n</code></pre>\n\n<p>In the following example, function <code>h</code> closes over the lexical environment of function <code>g</code>, which, in turn, closes over the lexical environment of the global execution context.</p>\n\n<pre><code>function g() {\n    function h() {}\n}\n</code></pre>\n\n<p>If an inner function is returned by an outer, then the outer lexical environment will persist after the outer function has returned. This is because the outer lexical environment needs to be available if the inner function is eventually invoked.</p>\n\n<p>In the following example, function <code>j</code> closes over the lexical environment of function <code>i</code>, meaning that variable <code>x</code> is visible from inside function <code>j</code>, long after function <code>i</code> has completed execution:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function i() {\r\n    var x = 'mochacchino'\r\n    return function j() {\r\n        console.log('Printing the value of x, from within function j: ', x)\r\n    }\r\n} \r\n\r\nconst k = i()\r\nsetTimeout(k, 500) // invoke k (which is j) after 500ms</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>In a closure, the variables in the outer lexical environment <em>themselves</em> are available, <em>not</em> copies.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function l() {\r\n  var y = 'vanilla';\r\n\r\n  return {\r\n    setY: function(value) {\r\n      y = value;\r\n    },\r\n    logY: function(value) {\r\n      console.log('The value of y is: ', y);\r\n    }\r\n  }\r\n}\r\n\r\nconst o = l()\r\no.logY() // The value of y is: vanilla\r\no.setY('chocolate')\r\no.logY() // The value of y is: chocolate</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The chain of lexical environments, linked between execution contexts via outer environment references, forms a <em>scope chain</em> and defines the identifiers visible from any given function.</p>\n\n<p><strong>Please note that in an attempt to improve clarity and accuracy, this answer has been substantially changed from the original.</strong></p>\n"},{"score":505,"body":"<p>Closures are hard to explain because they are used to make some behaviour work that everybody intuitively expects to work anyway. I find the best way to explain them (and the way that <em>I</em> learned what they do) is to imagine the situation without them:</p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>const makePlus = function(x) {\n    return function(y) { return x + y; };\n}\n\nconst plus5 = makePlus(5);\nconsole.log(plus5(3));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>What would happen here if JavaScript <em>didn't</em> know closures? Just replace the call in the last line by its method body (which is basically what function calls do) and you get:</p>\n<pre><code>console.log(x + 3);\n</code></pre>\n<p>Now, where's the definition of <code>x</code>? We didn't define it in the current scope. The only solution is to let <code>plus5</code> <em>carry</em> its scope (or rather, its parent's scope) around. This way, <code>x</code> is well-defined and it is bound to the value 5.</p>\n"},{"score":4023,"body":"<p>Every function in JavaScript maintains a link to its outer lexical environment. A lexical environment is a map of all the names (eg. variables, parameters) within a scope, with their values.</p>\n\n<p>So, whenever you see the <code>function</code> keyword, code inside that function has access to variables declared outside the function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  function bar(y) {\r\n    console.log(x + y + (++tmp)); // will log 16\r\n  }\r\n\r\n  bar(10);\r\n}\r\n\r\nfoo(2);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>This will log <code>16</code> because function <code>bar</code> closes over the parameter <code>x</code> and the variable <code>tmp</code>, both of which exist in the lexical environment of outer function <code>foo</code>.</p>\n\n<p>Function <code>bar</code>, together with its link with the lexical environment of function <code>foo</code> is a closure. </p>\n\n<p>A function doesn't have to <em>return</em> in order to create a closure. Simply by virtue of its declaration, every function closes over its enclosing lexical environment, forming a closure.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function foo(x) {\r\n  var tmp = 3;\r\n\r\n  return function (y) {\r\n    console.log(x + y + (++tmp)); // will also log 16\r\n  }\r\n}\r\n\r\nvar bar = foo(2);\r\nbar(10); // 16\r\nbar(10); // 17</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>The above function will also log 16, because the code inside <code>bar</code> can still refer to argument <code>x</code> and variable <code>tmp</code>, even though they are no longer directly in scope.</p>\n\n<p>However, since <code>tmp</code> is still hanging around inside <code>bar</code>'s closure, it is available to be incremented. It will be incremented each time you call <code>bar</code>.</p>\n\n<p>The simplest example of a closure is this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var a = 10;\r\n\r\nfunction test() {\r\n  console.log(a); // will output 10\r\n  console.log(b); // will output 6\r\n}\r\nvar b = 6;\r\ntest();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>When a JavaScript function is invoked, a new execution context <code>ec</code> is created. Together with the function arguments and the target object, this execution context also receives a link to the lexical environment of the calling execution context, meaning the variables declared in the outer lexical environment (in the above example, both <code>a</code> and <code>b</code>) are available from <code>ec</code>.</p>\n\n<p>Every function creates a closure because every function has a link to its outer lexical environment. </p>\n\n<p>Note that variables <em>themselves</em> are visible from within a closure, <em>not</em> copies.</p>\n"},{"score":91,"body":"<p>A closure is where an inner function has access to variables in its outer function. That's probably the simplest one-line explanation you can get for closures.</p>\n"},{"score":367,"body":"<p>This is an attempt to clear up several (possible) misunderstandings about closures that appear in some of the other answers.</p>\n\n<ul>\n<li><strong>A closure is not only created when you return an inner function.</strong> In fact, the enclosing function <em>does not need to return at all</em> in order for its closure to be created. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be called immediately or any time later. Therefore, the closure of the enclosing function is probably created <em>as soon as the enclosing function is called</em> since any inner function has access to that closure whenever the inner function is called, before or after the enclosing function returns. </li>\n<li><strong>A closure does not reference a copy of the <em>old values</em> of variables in its scope.</strong> The variables themselves are part of the closure, and so the value seen when accessing one of those variables is the latest value at the time it is accessed. This is why inner functions created inside of loops can be tricky, since each one has access to the same outer variables rather than grabbing a copy of the variables at the time the function is created or called.</li>\n<li><strong>The \"variables\" in a closure include any named functions</strong> declared within the function. They also include arguments of the function. A closure also has access to its containing closure's variables, all the way up to the global scope.</li>\n<li><strong>Closures use memory, but they don't cause memory leaks</strong> since JavaScript by itself cleans up its own circular structures that are not referenced. Internet&nbsp;Explorer memory leaks involving closures are created when it fails to disconnect DOM attribute values that reference closures, thus maintaining references to possibly circular structures.</li>\n</ul>\n"},{"score":93,"body":"<p>Example for the first point by dlaliberte:</p>\n\n<blockquote>\n  <p>A closure is not only created when you return an inner function. In fact, the enclosing function does not need to return at all. You might instead assign your inner function to a variable in an outer scope, or pass it as an argument to another function where it could be used immediately. Therefore, the closure of the enclosing function probably already exists at the time that enclosing function was called since any inner function has access to it as soon as it is called.</p>\n</blockquote>\n\n<pre><code>var i;\nfunction foo(x) {\n    var tmp = 3;\n    i = function (y) {\n        console.log(x + y + (++tmp));\n    }\n}\nfoo(2);\ni(3);\n</code></pre>\n"},{"score":201,"body":"<h2><a href=\"https://stackoverflow.com/questions/1700514/how-do-you-explain-closure-to-a-5-year-old/1700627#1700627\">Can you explain closures to a 5-year-old?*</a></h2>\n<p>I still think <a href=\"http://code.google.com/apis/ajax/playground/?exp=maps#closure_simple\" rel=\"noreferrer\">Google's explanation</a> works very well and is concise:</p>\n<pre><code>/*\n*    When a function is defined in another function and it\n*    has access to the outer function's context even after\n*    the outer function returns.\n*\n* An important concept to learn in JavaScript.\n*/\n\nfunction outerFunction(someNum) {\n    var someString = 'Hey!';\n    var content = document.getElementById('content');\n    function innerFunction() {\n        content.innerHTML = someNum + ': ' + someString;\n        content = null; // Internet Explorer memory leak for DOM reference\n    }\n    innerFunction();\n}\n\nouterFunction(1);​\n</code></pre>\n<p><img src=\"https://i.stack.imgur.com/N0mn0.png\" alt=\"Proof that this example creates a closure even if the inner function doesn't return\" /></p>\n<p><sub>*A C# question</sub></p>\n"},{"score":237,"body":"<p>I wrote a blog post a while back explaining closures. Here's what I said about closures in terms of <strong>why</strong> you'd want one.</p>\n\n<blockquote>\n  <p>Closures are a way to let a function\n  have <strong>persistent, private variables</strong> -\n  that is, variables that only one\n  function knows about, where it can\n  keep track of info from previous times\n  that it was run.</p>\n</blockquote>\n\n<p>In that sense, they let a function act a bit like an object with private attributes.</p>\n\n<p>Full post:</p>\n\n<p><a href=\"http://sleeplessgeek.blogspot.com/2009/12/so-what-are-these-closure-thingys.html\" rel=\"noreferrer\">So what are these closure thingys?</a></p>\n"},{"score":78,"body":"<p>JavaScript functions can access their:</p>\n\n<ol>\n<li>Arguments</li>\n<li>Locals (that is, their local variables and local functions)</li>\n<li>Environment, which includes:\n\n<ul>\n<li>globals, including the DOM</li>\n<li>anything in outer functions</li>\n</ul></li>\n</ol>\n\n<p>If a function accesses its environment, then the function is a closure.</p>\n\n<p>Note that outer functions are not required, though they do offer benefits I don't discuss here. By accessing data in its environment, a closure keeps that data alive. In the subcase of outer/inner functions, an outer function can create local data and eventually exit, and yet, if any inner function(s) survive after the outer function exits, then the inner function(s) keep the outer function's local data alive.</p>\n\n<p>Example of a closure that uses the global environment:</p>\n\n<p>Imagine that the Stack Overflow Vote-Up and Vote-Down button events are implemented as closures, voteUp_click and voteDown_click, that have access to external variables isVotedUp and isVotedDown, which are defined globally. (For simplicity's sake, I am referring to StackOverflow's Question Vote buttons, not the array of Answer Vote buttons.)</p>\n\n<p>When the user clicks the VoteUp button, the voteUp_click function checks whether isVotedDown == true to determine whether to vote up or merely cancel a down vote. Function voteUp_click is a closure because it is accessing its environment.</p>\n\n<pre><code>var isVotedUp = false;\nvar isVotedDown = false;\n\nfunction voteUp_click() {\n  if (isVotedUp)\n    return;\n  else if (isVotedDown)\n    SetDownVote(false);\n  else\n    SetUpVote(true);\n}\n\nfunction voteDown_click() {\n  if (isVotedDown)\n    return;\n  else if (isVotedUp)\n    SetUpVote(false);\n  else\n    SetDownVote(true);\n}\n\nfunction SetUpVote(status) {\n  isVotedUp = status;\n  // Do some CSS stuff to Vote-Up button\n}\n\nfunction SetDownVote(status) {\n  isVotedDown = status;\n  // Do some CSS stuff to Vote-Down button\n}\n</code></pre>\n\n<p>All four of these functions are closures as they all access their environment.</p>\n"},{"score":2477,"body":"<p>FOREWORD: this answer was written when the question was:</p>\n\n<blockquote>\n  <p>Like the old Albert said : \"If you can't explain it to a six-year old, you really don't understand it yourself.”. Well I tried to explain JS closures to a 27 years old friend and completely failed.</p>\n  \n  <p>Can anybody consider that I am 6 and strangely interested in that subject ?</p>\n</blockquote>\n\n<p>I'm pretty sure I was one of the only people that attempted to take the initial question literally. Since then, the question has mutated several times, so my answer may now seem incredibly silly &amp; out of place. Hopefully the general idea of the story remains fun for some.</p>\n\n<hr>\n\n<p>I'm a big fan of analogy and metaphor when explaining difficult concepts, so let me try my hand with a story.</p>\n\n<p><strong>Once upon a time:</strong></p>\n\n<p>There was a princess...</p>\n\n<pre><code>function princess() {\n</code></pre>\n\n<p>She lived in a wonderful world full of adventures. She met her Prince Charming, rode around her world on a unicorn, battled dragons, encountered talking animals, and many other fantastical things.</p>\n\n<pre><code>    var adventures = [];\n\n    function princeCharming() { /* ... */ }\n\n    var unicorn = { /* ... */ },\n        dragons = [ /* ... */ ],\n        squirrel = \"Hello!\";\n\n    /* ... */\n</code></pre>\n\n<p>But she would always have to return back to her dull world of chores and grown-ups.</p>\n\n<pre><code>    return {\n</code></pre>\n\n<p>And she would often tell them of her latest amazing adventure as a princess.</p>\n\n<pre><code>        story: function() {\n            return adventures[adventures.length - 1];\n        }\n    };\n}\n</code></pre>\n\n<p>But all they would see is a little girl...</p>\n\n<pre><code>var littleGirl = princess();\n</code></pre>\n\n<p>...telling stories about magic and fantasy.</p>\n\n<pre><code>littleGirl.story();\n</code></pre>\n\n<p>And even though the grown-ups knew of real princesses, they would never believe in the unicorns or dragons because they could never see them. The grown-ups said that they only existed inside the little girl's imagination.</p>\n\n<p>But we know the real truth; that the little girl with the princess inside...</p>\n\n<p>...is really a princess with a little girl inside.</p>\n"},{"score":82,"body":"<p>You're having a sleep over and you invite Dan.\nYou tell Dan to bring one XBox controller.</p>\n\n<p>Dan invites Paul.\nDan asks Paul to bring one controller. How many controllers were brought to the party?</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function sleepOver(howManyControllersToBring) {\n\n    var numberOfDansControllers = howManyControllersToBring;\n\n    return function danInvitedPaul(numberOfPaulsControllers) {\n        var totalControllers = numberOfDansControllers + numberOfPaulsControllers;\n        return totalControllers;\n    }\n}\n\nvar howManyControllersToBring = 1;\n\nvar inviteDan = sleepOver(howManyControllersToBring);\n\n// The only reason Paul was invited is because Dan was invited. \n// So we set Paul's invitation = Dan's invitation.\n\nvar danInvitedPaul = inviteDan(howManyControllersToBring);\n\nalert(\"There were \" + danInvitedPaul + \" controllers brought to the party.\");\n</code></pre>\n"},{"score":136,"body":"<p>I put together an interactive JavaScript tutorial to explain how closures work.\n<a href=\"http://nathansjslessons.appspot.com\" rel=\"noreferrer\">What's a Closure?</a></p>\n\n<p>Here's one of the examples:</p>\n\n<pre><code>var create = function (x) {\n    var f = function () {\n        return x; // We can refer to x here!\n    };\n    return f;\n};\n// 'create' takes one argument, creates a function\n\nvar g = create(42);\n// g is a function that takes no arguments now\n\nvar y = g();\n// y is 42 here\n</code></pre>\n"},{"score":165,"body":"<p><a href=\"http://en.wikipedia.org/wiki/Closure_(computer_science)\" rel=\"noreferrer\">Wikipedia on closures</a>:</p>\n\n<blockquote>\n  <p>In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.</p>\n</blockquote>\n\n<p>Technically, in <a href=\"http://en.wikipedia.org/wiki/JavaScript\" rel=\"noreferrer\">JavaScript</a>, <strong>every function is a closure</strong>. It always has an access to variables defined in the surrounding scope.</p>\n\n<p>Since <strong>scope-defining construction in JavaScript is a function</strong>, not a code block like in many other languages, <strong>what we usually mean by <em>closure</em> in JavaScript</strong> is a <strong>function working with nonlocal variables defined in already executed surrounding function</strong>.</p>\n\n<p>Closures are often used for creating functions with some hidden private data (but it's not always the case).</p>\n\n<pre><code>var db = (function() {\n    // Create a hidden object, which will hold the data\n    // it's inaccessible from the outside.\n    var data = {};\n\n    // Make a function, which will provide some access to the data.\n    return function(key, val) {\n        if (val === undefined) { return data[key] } // Get\n        else { return data[key] = val } // Set\n    }\n    // We are calling the anonymous surrounding function,\n    // returning the above inner function, which is a closure.\n})();\n\ndb('x')    // -&gt; undefined\ndb('x', 1) // Set x to 1\ndb('x')    // -&gt; 1\n// It's impossible to access the data object itself.\n// We are able to get or set individual it.\n</code></pre>\n\n<p>ems</p>\n\n<p>The example above is using an anonymous function, which was executed once. But it does not have to be. It can be named (e.g. <code>mkdb</code>) and executed later, generating a database function each time it is invoked. Every generated function will have its own hidden database object. Another usage example of closures is when we don't return a function, but an object containing multiple functions for different purposes, each of those function having access to the same data.</p>\n"},{"score":766,"body":"<p>Taking the question seriously, we should find out what a typical 6-year-old is capable of cognitively, though admittedly, one who is interested in JavaScript is not so typical.  </p>\n\n<p>On  <a href=\"http://www.howkidsdevelop.com/5-7years.html\" rel=\"noreferrer\">Childhood Development: 5 to 7 Years </a> it says:</p>\n\n<blockquote>\n  <p>Your child will be able to follow two-step directions. For example, if you say to your child, \"Go to the kitchen and get me a trash bag\" they will be able to remember that direction.</p>\n</blockquote>\n\n<p>We can use this example to explain closures, as follows:</p>\n\n<blockquote>\n  <p>The kitchen is a closure that has a local variable, called <code>trashBags</code>.  There is a function inside the kitchen called <code>getTrashBag</code> that gets one trash bag and returns it.</p>\n</blockquote>\n\n<p>We can code this in JavaScript like this:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function makeKitchen() {\r\n  var trashBags = ['A', 'B', 'C']; // only 3 at first\r\n\r\n  return {\r\n    getTrashBag: function() {\r\n      return trashBags.pop();\r\n    }\r\n  };\r\n}\r\n\r\nvar kitchen = makeKitchen();\r\n\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag C\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag B\r\nconsole.log(kitchen.getTrashBag()); // returns trash bag A</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Further points that explain why closures are interesting:</p>\n\n<ul>\n<li>Each time <code>makeKitchen()</code> is called, a new closure is created with its own separate <code>trashBags</code>.</li>\n<li>The <code>trashBags</code> variable is local to the inside of each kitchen and is not accessible outside, but the inner function on the <code>getTrashBag</code> property does have access to it.  </li>\n<li>Every function call creates a closure, but there would be no need to keep the closure around unless an inner function, which has access to the inside of the closure, can be called from outside the closure.  Returning the object with the <code>getTrashBag</code> function does that here.</li>\n</ul>\n"},{"score":86,"body":"<p>I know there are plenty of solutions already, but I guess that this small and simple script can be useful to demonstrate the concept:</p>\n\n<pre><code>// makeSequencer will return a \"sequencer\" function\nvar makeSequencer = function() {\n    var _count = 0; // not accessible outside this function\n    var sequencer = function () {\n        return _count++;\n    }\n    return sequencer;\n}\n\nvar fnext = makeSequencer();\nvar v0 = fnext();     // v0 = 0;\nvar v1 = fnext();     // v1 = 1;\nvar vz = fnext._count // vz = undefined\n</code></pre>\n"},{"score":14,"body":"<p>After a function is invoked, it goes out of scope. If that function contains something like a callback function, then that callback function is still in scope. If the callback function references some local variable in the immediate environment of the parent function, then naturally you'd expect that variable to be inaccessible to the callback function and return undefined.</p>\n\n<p>Closures ensure that any property that is referenced by the callback function is available for use by that function, even when its parent function may have gone out of scope.</p>\n"},{"score":20,"body":"<p>From a personal <a href=\"http://tshikatshikaaa.blogspot.nl/2012/08/purpose-of-javascript-closure.html\" rel=\"noreferrer\">blog post</a>:</p>\n\n<p>By default, JavaScript knows two types of scopes: global and local.</p>\n\n<pre><code>var a = 1;\n\nfunction b(x) {\n    var c = 2;\n    return x * c;\n}\n</code></pre>\n\n<p>In the above code, variable a and function b are available from anywhere in the code (that is, globally). Variable <code>c</code> is only available within the <code>b</code> function scope (that is, local). Most software developers won't be happy with this lack of scope flexibility, especially in large programs.</p>\n\n<p>JavaScript closures help solving that issue by tying a function with a context:</p>\n\n<pre><code>function a(x) {\n    return function b(y) {\n        return x + y;\n    }\n}\n</code></pre>\n\n<p>Here, function <code>a</code> returns a function called <code>b</code>. Since <code>b</code> is defined within <code>a</code>, it automatically has access to whatever is defined in <code>a</code>, that is, <code>x</code> in this example. This is why <code>b</code> can return <code>x</code> + <code>y</code> without declaring <code>x</code>.</p>\n\n<pre><code>var c = a(3);\n</code></pre>\n\n<p>Variable <code>c</code> is assigned the result of a call to a with parameter 3. That is, an instance of function <code>b</code> where <code>x</code> = 3. In other words, <code>c</code> is now a function equivalent to:</p>\n\n<pre><code>var c = function b(y) {\n    return 3 + y;\n}\n</code></pre>\n\n<p>Function <code>b</code> remembers that <code>x</code> = 3 in its context. Therefore:</p>\n\n<pre><code>var d = c(4);\n</code></pre>\n\n<p>will assign the value 3 + 4 to <code>d</code>, that is 7.</p>\n\n<p><strong>Remark</strong>: If someone modifies the value of <code>x</code> (say <code>x</code> = 22) after the instance of function <code>b</code> has been created, this will be reflected in <code>b</code> too. Hence a later call to <code>c</code>(4) would return 22 + 4, that is 26.</p>\n\n<p>Closures can also be used to limit the scope of variables and methods declared globally:</p>\n\n<pre><code>(function () {\n    var f = \"Some message\";\n    alert(f);\n})();\n</code></pre>\n\n<p>The above is a closure where the function has no name, no argument and is called immediately. The highlighted code, which declares a global variable <code>f</code>, limits the scopes of <code>f</code> to the closure.</p>\n\n<p>Now, there is a common JavaScript caveat where closures can help:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(x) { return x + i ; }\n}\n</code></pre>\n\n<p>From the above, most would assume that array <code>a</code> would be initialized as follows:</p>\n\n<pre><code>a[0] = function (x) { return x + 0 ; }\na[1] = function (x) { return x + 1 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>In reality, this is how a is initialized, since the last value of <code>i</code> in the context is 2:</p>\n\n<pre><code>a[0] = function (x) { return x + 2 ; }\na[1] = function (x) { return x + 2 ; }\na[2] = function (x) { return x + 2 ; }\n</code></pre>\n\n<p>The solution is:</p>\n\n<pre><code>var a = new Array();\n\nfor (var i=0; i&lt;2; i++) {\n    a[i]= function(tmp) {\n        return function (x) { return x + tmp ; }\n    } (i);\n}\n</code></pre>\n\n<p>The argument/variable <code>tmp</code> holds a local copy of the changing value of <code>i</code> when creating function instances.</p>\n"},{"score":50,"body":"<p>A function in JavaScript is not just a reference to a set of instructions (as in C language), but it also includes a hidden data structure which is composed of references to all nonlocal variables it uses (captured variables). Such two-piece functions are called closures. Every function in JavaScript can be considered a closure.</p>\n\n<p>Closures are functions with a state. It is somewhat similar to \"this\" in the sense that \"this\" also provides state for a function but function and \"this\" are separate objects (\"this\" is just a fancy parameter, and the only way to bind it permanently to a function is to create a closure). While \"this\" and function always live separately, a function cannot be separated from its closure and the language provides no means to access captured variables.</p>\n\n<p>Because all these external variables referenced by a lexically nested function are actually local variables in the chain of its lexically enclosing functions (global variables can be assumed to be local variables of some root function), and every single execution of a function creates new instances of its local variables, it follows that every execution of a function returning (or otherwise transferring it out, such as registering it as a callback) a nested function creates a new closure (with its own potentially unique set of referenced nonlocal variables which represent its execution context).</p>\n\n<p>Also, it must be understood that local variables in JavaScript are created not on the stack frame, but on the heap and destroyed only when no one is referencing them. When a function returns, references to its local variables are decremented, but they can still be non-null if during the current execution they became part of a closure and are still referenced by its lexically nested functions (which can happen only if the references to these nested functions were returned or otherwise transferred to some external code).</p>\n\n<p>An example:</p>\n\n<pre><code>function foo (initValue) {\n   //This variable is not destroyed when the foo function exits.\n   //It is 'captured' by the two nested functions returned below.\n   var value = initValue;\n\n   //Note that the two returned functions are created right now.\n   //If the foo function is called again, it will return\n   //new functions referencing a different 'value' variable.\n   return {\n       getValue: function () { return value; },\n       setValue: function (newValue) { value = newValue; }\n   }\n}\n\nfunction bar () {\n    //foo sets its local variable 'value' to 5 and returns an object with\n    //two functions still referencing that local variable\n    var obj = foo(5);\n\n    //Extracting functions just to show that no 'this' is involved here\n    var getValue = obj.getValue;\n    var setValue = obj.setValue;\n\n    alert(getValue()); //Displays 5\n    setValue(10);\n    alert(getValue()); //Displays 10\n\n    //At this point getValue and setValue functions are destroyed\n    //(in reality they are destroyed at the next iteration of the garbage collector).\n    //The local variable 'value' in the foo is no longer referenced by\n    //anything and is destroyed too.\n}\n\nbar();\n</code></pre>\n"},{"score":14,"body":"<p>Closures are a means through which inner functions can refer to the variables present in their outer enclosing function after their parent functions have already terminated.</p>\n\n<pre><code>// A function that generates a new function for adding numbers.\nfunction addGenerator( num ) {\n    // Return a simple function for adding two numbers\n    // with the first number borrowed from the generator\n    return function( toAdd ) {\n        return num + toAdd\n    };\n}\n\n// addFive now contains a function that takes one argument,\n// adds five to it, and returns the resulting number.\nvar addFive = addGenerator( 5 );\n// We can see here that the result of the addFive function is 9,\n// when passed an argument of 4.\nalert( addFive( 4 ) == 9 );\n</code></pre>\n"},{"score":595,"body":"<h1>The Straw Man</h1>\n<p>I need to know how many times a button has been clicked and do something on every third click...</p>\n<h2>Fairly Obvious Solution</h2>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Declare counter outside event handler's scope\nvar counter = 0;\nvar element = document.getElementById('button');\n\nelement.addEventListener(\"click\", function() {\n  // Increment outside counter\n  counter++;\n\n  if (counter === 3) {\n    // Do something every third time\n    console.log(\"Third time's the charm!\");\n\n    // Reset counter\n    counter = 0;\n  }\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"button\"&gt;Click Me!&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Now this will work, but it does encroach into the outer scope by adding a variable, whose sole purpose is to keep track of the count. In some situations, this would be preferable as your outer application might need access to this information. But in this case, we are only changing every third click's behavior, so it is preferable to <strong>enclose this functionality inside the event handler</strong>.</p>\n<h2>Consider this option</h2>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var element = document.getElementById('button');\n\nelement.addEventListener(\"click\", (function() {\n  // init the count to 0\n  var count = 0;\n\n  return function(e) { // &lt;- This function becomes the click handler\n    count++; //    and will retain access to the above `count`\n\n    if (count === 3) {\n      // Do something every third time\n      console.log(\"Third time's the charm!\");\n\n      //Reset counter\n      count = 0;\n    }\n  };\n})());</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;button id=\"button\"&gt;Click Me!&lt;/button&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n<p>Notice a few things here.</p>\n<p>In the above example, I am using the closure behavior of JavaScript. <strong>This behavior allows any function to have access to the scope in which it was created, indefinitely.</strong> To practically apply this, I immediately invoke a function that returns another function, and because the function I'm returning has access to the internal count variable (because of the closure behavior explained above) this results in a private scope for usage by the resulting function... Not so simple? Let's dilute it down...</p>\n<p><strong>A simple one-line closure</strong></p>\n<pre><code>//          _______________________Immediately invoked______________________\n//         |                                                                |\n//         |        Scope retained for use      ___Returned as the____      |\n//         |       only by returned function   |    value of func     |     |\n//         |             |            |        |                      |     |\n//         v             v            v        v                      v     v\nvar func = (function() { var a = 'val'; return function() { alert(a); }; })();\n</code></pre>\n<p>All variables outside the returned function are available to the returned function, but they are not directly available to the returned function object...</p>\n<pre><code>func();  // Alerts &quot;val&quot;\nfunc.a;  // Undefined\n</code></pre>\n<p>Get it? So in our primary example, the count variable is contained within the closure and always available to the event handler, so it retains its state from click to click.</p>\n<p>Also, this private variable state is <strong>fully</strong> accessible, for both readings and assigning to its private scoped variables.</p>\n<p>There you go; you're now fully encapsulating this behavior.</p>\n<p><strong><a href=\"http://jondavidjohn.com/javascript-closure-explained-using-events/\" rel=\"noreferrer\">Full Blog Post</a></strong> (including jQuery considerations)</p>\n"},{"score":57,"body":"<p>Okay, talking with a 6-year old child, I would possibly use following associations.</p>\n\n<blockquote>\n  <p>Imagine - you are playing with your little brothers and sisters in the entire house, and you are moving around with your toys and brought some of them into your older brother's room. After a while your brother returned from the school and went to his room, and he locked inside it, so now you could not access toys left there anymore in a direct way. But you could knock the door and ask your brother for that toys. This is called toy's <em>closure</em>; your brother made it up for you, and he is now into outer <em>scope</em>.</p>\n</blockquote>\n\n<p>Compare with a situation when a door was locked by draft and nobody inside (general function execution), and then some local fire occur and burn down the room (garbage collector:D), and then a new room was build and now you may leave another toys there (new function instance), but never get the same toys which were left in the first room instance.</p>\n\n<p>For an advanced child I would put something like the following. It is not perfect, but it makes you feel about what it is:</p>\n\n<pre><code>function playingInBrothersRoom (withToys) {\n  // We closure toys which we played in the brother's room. When he come back and lock the door\n  // your brother is supposed to be into the outer [[scope]] object now. Thanks god you could communicate with him.\n  var closureToys = withToys || [],\n      returnToy, countIt, toy; // Just another closure helpers, for brother's inner use.\n\n  var brotherGivesToyBack = function (toy) {\n    // New request. There is not yet closureToys on brother's hand yet. Give him a time.\n    returnToy = null;\n    if (toy &amp;&amp; closureToys.length &gt; 0) { // If we ask for a specific toy, the brother is going to search for it.\n\n      for ( countIt = closureToys.length; countIt; countIt--) {\n        if (closureToys[countIt - 1] == toy) {\n          returnToy = 'Take your ' + closureToys.splice(countIt - 1, 1) + ', little boy!';\n          break;\n        }\n      }\n      returnToy = returnToy || 'Hey, I could not find any ' + toy + ' here. Look for it in another room.';\n    }\n    else if (closureToys.length &gt; 0) { // Otherwise, just give back everything he has in the room.\n      returnToy = 'Behold! ' + closureToys.join(', ') + '.';\n      closureToys = [];\n    }\n    else {\n      returnToy = 'Hey, lil shrimp, I gave you everything!';\n    }\n    console.log(returnToy);\n  }\n  return brotherGivesToyBack;\n}\n// You are playing in the house, including the brother's room.\nvar toys = ['teddybear', 'car', 'jumpingrope'],\n    askBrotherForClosuredToy = playingInBrothersRoom(toys);\n\n// The door is locked, and the brother came from the school. You could not cheat and take it out directly.\nconsole.log(askBrotherForClosuredToy.closureToys); // Undefined\n\n// But you could ask your brother politely, to give it back.\naskBrotherForClosuredToy('teddybear'); // Hooray, here it is, teddybear\naskBrotherForClosuredToy('ball'); // The brother would not be able to find it.\naskBrotherForClosuredToy(); // The brother gives you all the rest\naskBrotherForClosuredToy(); // Nothing left in there\n</code></pre>\n\n<p>As you can see, the toys left in the room are still accessible via the brother and no matter if the room is locked. Here is <a href=\"http://jsbin.com/ubakor/9/edit\" rel=\"noreferrer\">a jsbin</a> to play around with it.</p>\n"},{"score":46,"body":"<p>I'd simply point them to the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures\">Mozilla Closures page</a>. It's the best, most <strong>concise and simple explanation</strong> of closure basics and practical usage that I've found. It is highly recommended to anyone learning JavaScript.</p>\n\n<p>And yes, I'd even recommend it to a 6-year old -- if the 6-year old is learning about closures, then it's logical they're ready to comprehend the <em>concise and simple explanation</em> provided in the article.</p>\n"},{"score":15,"body":"<p>If you want to explain it to a six-year old child then you must find something very much simpler and NO code.</p>\n\n<p>Just tell the child that he is \"open\", which says that he is able to have relations with some others, his friends. At some point in time, he has determined friends (we can know the names of his friends), that is a closure. If you take a picture of him and his friends then he is \"closed\" relatively to his friendship ability. But in general, he is \"open\". During his whole life he will have many different sets of friends. One of these sets is a closure.</p>\n"},{"score":17,"body":"<p>I found very clear chapter 8 section 6, \"Closures,\" of <em>JavaScript: The Definitive Guide</em> by David Flanagan, 6th edition, O'Reilly, 2011. I'll try to paraphrase.  </p>\n\n<ol>\n<li><p>When a function is invoked, a new object is created to hold the local variables for that invocation.  </p></li>\n<li><p>A function's scope depends on its declaration location, not its execution location.</p></li>\n</ol>\n\n<p>Now, assume an inner function declared within an outer function and referring to variables of that outer function. Further assume the outer function returns the inner function, as a function. Now there is an external reference to whatever values were in the inner function's scope (which, by our assumptions, includes values from the outer function).</p>\n\n<p>JavaScript will preserve those values, as they have remained in scope of the current execution thanks to being passed out of the completed outer function. All functions are closures, but the closures of interest are the inner functions which, in our assumed scenario, preserve outer function values within their \"enclosure\" (I hope I'm using language correctly here) when they (the inner functions) are returned from outer functions. I know this doesn't meet the six-year-old requirement, but hopefully it is still helpful.</p>\n"},{"score":20,"body":"<p>A function is executed in the scope of the object/function in which it is defined. The said function can access the variables defined in the object/function where it has been defined while it is executing.</p>\n\n<p>And just take it literally.... as the code is written :P</p>\n"},{"score":30,"body":"<p>For a six-year-old?</p>\n\n<p>You and your family live in the mythical town of Ann Ville. You have a friend who lives next door, so you call them and ask them to come out and play. You dial:</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>After a month, you and your family move out of Ann Ville to the next town, but you and your friend still keep in touch, so now you have to dial the area code for the town that your friend lives in, before dialling their 'proper' number:</p>\n\n<blockquote>\n  <p>001 000001 (annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>A year after that, your parents move to a whole new country, but you and your friend still keep in touch, so after bugging your parents to let you make international rate calls, you now dial:</p>\n\n<blockquote>\n  <p>01 001 000001 (myOldCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Strangely though, after moving to your new country, you and your family just so happen to move to a new town called Ann Ville... and you just so happen to make friends with some new person called Jamie... You give them a call...</p>\n\n<blockquote>\n  <p>000001 (jamiesHouse)</p>\n</blockquote>\n\n<p>Spooky...</p>\n\n<p>So spooky in fact, that you tell Jamie from your old country about it... You have a good laugh about it. So one day, you and your family take a holiday back to the old country. You visit your old town (Ann Ville), and go to visit Jamie...</p>\n\n<ul>\n<li>\"Really? Another Jamie? In Ann Ville? In your new country!!?\"</li>\n<li>\"Yeah... Let's call them...\"</li>\n</ul>\n\n<blockquote>\n  <p>02 001 000001 (myNewCountry.annVille.jamiesHouse)</p>\n</blockquote>\n\n<p>Opinions?</p>\n\n<p><em>What's more, I have a load of questions about the patience of a modern six-year-old...</em></p>\n"},{"score":50,"body":"<p>An answer for a six-year-old (assuming he knows what a function is and what a variable is, and what data is):</p>\n\n<p>Functions can return data. One kind of data you can return from a function is another function. When that new function gets returned, all the variables and arguments used in the function that created it don't go away. Instead, that parent function \"closes.\" In other words, nothing can look inside of it and see the variables it used except for the function it returned. That new function has a special ability to look back inside the function that created it and see the data inside of it.</p>\n\n<pre><code>function the_closure() {\n  var x = 4;\n  return function () {\n    return x; // Here, we look back inside the_closure for the value of x\n  }\n}\n\nvar myFn = the_closure();\nmyFn(); //=&gt; 4\n</code></pre>\n\n<p>Another really simple way to explain it is in terms of scope:</p>\n\n<p>Any time you create a smaller scope inside of a larger scope, the smaller scope will always be able to see what is in the larger scope.</p>\n"},{"score":15,"body":"<p>I'm sure, <a href=\"https://en.wikipedia.org/wiki/Albert_Einstein\" rel=\"nofollow\">Einstein</a> didn't say it with a direct expectation for us to pick any esoteric brainstormer thing and run over six-year-olds with futile attempts to get those 'crazy' (and what is even worse for them-boring) things to their childish minds :) If I were six years old I wouldn't like to have such parents or wouldn't make friendship with such boring philanthropists, sorry :)</p>\n\n<p>Anyway, for babies, <strong>closure</strong> is simply a <strong>hug</strong>, I guess, whatever way you try to explain :) And when you hug a friend of yours then you both kind of share anything you guys have at the moment. It's a rite of passage, once you've hugged somebody you're showing her trust and willingness to let her do with you a lot of things you don't allow and would hide from others. It's an act of friendship :).</p>\n\n<p>I really don't know how to explain it to 5-6 years old babies. I neither think they will appreciate any JavaScript code snippets like:</p>\n\n<pre><code>function Baby(){\n    this.iTrustYou = true;\n}\n\nBaby.prototype.hug = function (baby) {\n    var smiles = 0;\n\n    if (baby.iTrustYou) {\n        return function() {\n            smiles++;\n            alert(smiles);\n        };\n    }\n};\n\nvar\n   arman = new Baby(\"Arman\"),\n   morgan = new Baby(\"Morgana\");\n\nvar hug = arman.hug(morgan);\nhug();\nhug();\n</code></pre>\n\n<p>For children only:</p>\n\n<p><strong>Closure</strong> is <strong>hug</strong></p>\n\n<p><strong>Bug</strong> is <strong>fly</strong></p>\n\n<p><strong>KISS</strong> is <strong>smooch!</strong> :)</p>\n"},{"score":384,"body":"<p>OK, 6-year-old closures fan. Do you want to hear the simplest example of closure?</p>\n\n<p>Let's imagine the next situation: a driver is sitting in a car. That car is inside a plane. Plane is in the airport. The ability of driver to access things outside his car, but inside the plane, even if that plane leaves an airport, is a closure. That's it. When you turn 27, look at the <a href=\"https://stackoverflow.com/a/111200/1393791\">more detailed explanation</a> or at the example below.</p>\n\n<p>Here is how I can convert my plane story into the code.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var plane = function(defaultAirport) {\r\n\r\n  var lastAirportLeft = defaultAirport;\r\n\r\n  var car = {\r\n    driver: {\r\n      startAccessPlaneInfo: function() {\r\n        setInterval(function() {\r\n          console.log(\"Last airport was \" + lastAirportLeft);\r\n        }, 2000);\r\n      }\r\n    }\r\n  };\r\n  car.driver.startAccessPlaneInfo();\r\n\r\n  return {\r\n    leaveTheAirport: function(airPortName) {\r\n      lastAirportLeft = airPortName;\r\n    }\r\n  }\r\n}(\"Boryspil International Airport\");\r\n\r\nplane.leaveTheAirport(\"John F. Kennedy\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":178,"body":"<p>I tend to learn better by GOOD/BAD comparisons. I like to see working code followed by non-working code that someone is likely to encounter. I put together <a href=\"http://jsfiddle.net/KMQZK/\" rel=\"noreferrer\">a jsFiddle</a> that does a comparison and tries to boil down the differences to the simplest explanations I could come up with.</p>\n<h2>Closures done right:</h2>\n<pre><code>console.log('CLOSURES DONE RIGHT');\n\nvar arr = [];\n\nfunction createClosure(n) {\n    return function () {\n        return 'n = ' + n;\n    }\n}\n\nfor (var index = 0; index &lt; 10; index++) {\n    arr[index] = createClosure(index);\n}\n\nfor (var index in arr) {\n    console.log(arr[index]());\n}\n</code></pre>\n<ul>\n<li><p>In the above code <code>createClosure(n)</code> is invoked in every iteration of the loop. Note that I named the variable <code>n</code> to highlight that it is a <strong>new</strong> variable created in a new function scope and is not the same variable as <code>index</code> which is bound to the outer scope.</p>\n</li>\n<li><p>This creates a new scope and <code>n</code> is bound to that scope; this means we have 10 separate scopes, one for each iteration.</p>\n</li>\n<li><p><code>createClosure(n)</code> returns a function that returns the n within that scope.</p>\n</li>\n<li><p>Within each scope <code>n</code> is bound to whatever value it had when <code>createClosure(n)</code> was invoked so the nested function that gets returned will always return the value of <code>n</code> that it had when <code>createClosure(n)</code> was invoked.</p>\n</li>\n</ul>\n<h2>Closures done wrong:</h2>\n<pre><code>console.log('CLOSURES DONE WRONG');\n\nfunction createClosureArray() {\n    var badArr = [];\n\n    for (var index = 0; index &lt; 10; index++) {\n        badArr[index] = function () {\n            return 'n = ' + index;\n        };\n    }\n    return badArr;\n}\n\nvar badArr = createClosureArray();\n\nfor (var index in badArr) {\n    console.log(badArr[index]());\n}\n</code></pre>\n<ul>\n<li><p>In the above code the loop was moved within the <code>createClosureArray()</code> function and the function now just returns the completed array, which at first glance seems more intuitive.</p>\n</li>\n<li><p>What might not be obvious is that since <code>createClosureArray()</code> is only invoked once only one scope is created for this function instead of one for every iteration of the loop.</p>\n</li>\n<li><p>Within this function a variable named <code>index</code> is defined. The loop runs and adds functions to the array that return <code>index</code>. Note that <code>index</code> is defined within the <code>createClosureArray</code> function which only ever gets invoked one time.</p>\n</li>\n<li><p>Because there was only one scope within the <code>createClosureArray()</code> function, <code>index</code> is only bound to a value within that scope. In other words, each time the loop changes the value of <code>index</code>, it changes it for everything that references it within that scope.</p>\n</li>\n<li><p>All of the functions added to the array return the SAME <code>index</code> variable from the parent scope where it was defined instead of 10 different ones from 10 different scopes like the first example. The end result is that all 10 functions return the same variable from the same scope.</p>\n</li>\n<li><p>After the loop finished and <code>index</code> was done being modified the end value was 10, therefore every function added to the array returns the value of the single <code>index</code> variable which is now set to 10.</p>\n</li>\n</ul>\n<h2>Result</h2>\n<blockquote>\n<p>CLOSURES DONE RIGHT<br />\nn = 0<br />\nn = 1<br />\nn = 2<br />\nn = 3<br />\nn = 4<br />\nn = 5<br />\nn = 6<br />\nn = 7<br />\nn = 8<br />\nn = 9</p>\n<p>CLOSURES DONE WRONG<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10<br />\nn = 10</p>\n</blockquote>\n"},{"score":22,"body":"<h2>Given the following function</h2>\n\n<pre><code>function person(name, age){\n\n    var name = name;\n    var age = age;\n\n    function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n\n    return introduce;\n}\n\nvar a = person(\"Jack\",12);\nvar b = person(\"Matt\",14);\n</code></pre>\n\n<p>Everytime the function <code>person</code> is called a new closure is created. While variables <code>a</code> and <code>b</code> have the same <code>introduce</code> function, it is linked to different closures. And that closure will still exist even after the function <code>person</code> finishes execution.</p>\n\n<p><img src=\"https://i.stack.imgur.com/LDEhE.png\" alt=\"Enter image description here\"></p>\n\n<pre><code>a(); //My name is Jack, and I'm 12\nb(); //My name is Matt, and I'm 14\n</code></pre>\n\n<p>An abstract closures could be represented to something like this:</p>\n\n<pre><code>closure a = {\n    name: \"Jack\",\n    age: 12,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n\nclosure b = {\n    name: \"Matt\",\n    age: 14,\n    call: function introduce(){\n        alert(\"My name is \"+name+\", and I'm \"+age);\n    }\n}\n</code></pre>\n\n<hr>\n\n<p>Assuming you know how a <code>class</code> in another language work, I will make an analogy.</p>\n\n<p>Think like</p>\n\n<ul>\n<li>JavaScript <code>function</code> as a <code>constructor</code></li>\n<li><code>local variables</code> as <code>instance properties</code></li>\n<li>these <code>properties</code> are private</li>\n<li><code>inner functions</code> as <code>instance methods</code></li>\n</ul>\n\n<p>Everytime a <code>function</code> is called</p>\n\n<ul>\n<li>A new <code>object</code> containing all local variables will be created.</li>\n<li>Methods of this object have access to <code>\"properties\"</code> of that instance object.</li>\n</ul>\n"},{"score":10,"body":"<p>Considering the question is about explaining it simply as if to a <strong>6-year-old</strong>, my answer would be:</p>\n\n<p><strong>\"When you declare a function in JavaScript it has forever access to all the variables and functions that were available in the line before that function declaration. The function and all the outer variables and functions that it has access to is what we call a closure.\"</strong></p>\n"},{"score":216,"body":"<h2><strong>Closures are simple:</strong></h2>\n\n<p>The following simple example covers all the main points of JavaScript closures.<sup>*</sup>\n&nbsp;</p>\n\n<p>Here is a factory that produces calculators that can add and multiply:</p>\n\n<pre><code>function make_calculator() {\n  var n = 0; // this calculator stores a single number n\n  return {\n    add: function(a) {\n      n += a;\n      return n;\n    },\n    multiply: function(a) {\n      n *= a;\n      return n;\n    }\n  };\n}\n\nfirst_calculator = make_calculator();\nsecond_calculator = make_calculator();\n\nfirst_calculator.add(3); // returns 3\nsecond_calculator.add(400); // returns 400\n\nfirst_calculator.multiply(11); // returns 33\nsecond_calculator.multiply(10); // returns 4000\n</code></pre>\n\n<p><strong>The key point:</strong> Each call to <code>make_calculator</code> creates a new local variable <code>n</code>, which continues to be usable by that calculator's <code>add</code> and <code>multiply</code> functions long after <code>make_calculator</code> returns.</p>\n\n<p><em>If you are familiar with stack frames, these calculators seem strange: How can they keep accessing <code>n</code> after <code>make_calculator</code> returns?  The answer is to imagine that JavaScript doesn't use \"stack frames\", but instead uses \"heap frames\", which can persist after the function call that made them returns.</em></p>\n\n<p>Inner functions like <code>add</code> and <code>multiply</code>, which access variables declared in an outer function<sup>**</sup>, are called <em>closures</em>.</p>\n\n<p><strong>That is pretty much all there is to closures.</strong></p>\n\n<p><br></p>\n\n<hr>\n\n<p><sup><sup>*</sup> For example, it covers all the points in the \"Closures for Dummies\" article given in <a href=\"https://stackoverflow.com/a/111111/706054\">another answer</a>, except example 6, which simply shows that variables can be used before they are declared, a nice fact to know but completely unrelated to closures. It also covers all the points in <a href=\"https://stackoverflow.com/a/111200/706054\">the accepted answer</a>, except for the points (1) that functions copy their arguments into local variables (the named function arguments), and (2) that copying numbers creates a new number, but copying an object reference gives you another reference to the same object. These are also good to know but again completely unrelated to closures. It is also very similar to the example in <a href=\"https://stackoverflow.com/a/111114/706054\">this answer</a> but a bit shorter and less abstract. It does not cover the point of <a href=\"https://stackoverflow.com/a/17200991/706054\">this answer</a> or <a href=\"https://stackoverflow.com/questions/111102/how-do-javascript-closures-work/17308587?noredirect=1#comment26377355_111111\">this comment</a>, which is that JavaScript makes it difficult to plug the <em>current</em> value of a loop variable into your inner function: The \"plugging in\" step can only be done with a helper function that encloses your inner function and is invoked on each loop iteration. (Strictly speaking, the inner function accesses the helper function's copy of the variable, rather than having anything plugged in.) Again, very useful when creating closures, but not part of what a closure is or how it works. There is additional confusion due to closures working differently in functional languages like ML, where variables are bound to values rather than to storage space, providing a constant stream of people who understand closures in a way (namely the \"plugging in\" way) that is simply incorrect for JavaScript, where variables are always bound to storage space, and never to values. </sup></p>\n\n<p><sup><sup>**</sup> Any outer function, if several are nested, or even in the global context, as <a href=\"https://stackoverflow.com/a/5099447/706054\">this answer</a> points out clearly.</sup></p>\n"},{"score":6,"body":"<p>A closure is basically creating two things :\n- a function\n- a private scope that only that function can access</p>\n\n<p>It is like putting some coating around a function.</p>\n\n<p>So to a 6-years-old, it could be explained by giving an analogy. Let's say I build a robot. That robot can do many things. Among those things, I programmed it to count the number of birds he sees in the sky. Each time he has seen 25 birds, he should tell me how many birds he has seen since the beginning.</p>\n\n<p>I don't know how many birds he has seen unless he has told me. Only he knows. That's the private scope. That's basically the robot's memory. Let's say I gave him 4&nbsp;GB.</p>\n\n<p>Telling me how many birds he has seen is the returned function. I also created that.</p>\n\n<p>That analogy is a bit sucky, but someone could improve it I guess.</p>\n"},{"score":6,"body":"<p>The word <em>closure</em> simply refers to being able to access <em>objects</em> (six-year-old: things) that are <em>closed</em> (six-year-old: private) within a <em>function</em> (six-year-old: box). Even if the <em>function</em> (six-year-old: box) is out of <em>scope</em> (six-year-old: sent far away).</p>\n"},{"score":22,"body":"<p>The more I think about closure the more I see it as a 2-step process: <strong>init - action</strong></p>\n\n<pre><code>init: pass first what's needed...\naction: in order to achieve something for later execution.\n</code></pre>\n\n<p>To a 6-year old, I'd emphasize on the <em>practical aspect</em> of closure:</p>\n\n<pre><code>Daddy: Listen. Could you bring mum some milk (2).\nTom: No problem.\nDaddy: Take a look at the map that Daddy has just made: mum is there and daddy is here.\nDaddy: But get ready first. And bring the map with you (1), it may come in handy\nDaddy: Then off you go (3). Ok?\nTom: A piece of cake!\n</code></pre>\n\n<p><strong>Example</strong>: <em>Bring some milk to mum (=action). First get ready and bring the map (=init).</em></p>\n\n<pre><code>function getReady(map) {\n    var cleverBoy = 'I examine the ' + map;\n    return function(what, who) {\n        return 'I bring ' + what + ' to ' + who + 'because + ' cleverBoy; //I can access the map\n    }\n}\nvar offYouGo = getReady('daddy-map');\noffYouGo('milk', 'mum');\n</code></pre>\n\n<p>Because if you bring with you a very important piece of information (the map), you're knowledgeable enough to execute other similar actions:</p>\n\n<pre><code>offYouGo('potatoes', 'great mum');\n</code></pre>\n\n<p>To a developer I'd make a parallel between closures and <a href=\"http://en.wikipedia.org/wiki/Object-oriented_programming\" rel=\"noreferrer\">OOP</a>.\nThe <strong>init phase</strong> is similar to passing arguments to a constructor in a traditional OO language; the <strong>action phase</strong> is ultimately the method you call to achieve what you want. And the method has access these init arguments using a mechanism called <em>closure</em>.</p>\n\n<p>See my another answer illustrating the parallelism between OO and closures:</p>\n\n<p><em><a href=\"https://stackoverflow.com/questions/1595611/how-to-properly-create-a-custom-object-in-javascript/21352366#21352366\">How to &quot;properly&quot; create a custom object in JavaScript?</a></em></p>\n"},{"score":205,"body":"<p>How I'd explain it to a six-year-old:</p>\n\n<p>You know how grown-ups can own a house, and they call it home? When a mom has a child, the child doesn't really own anything, right? But its parents own a house, so whenever someone asks the child \"Where's your home?\", he/she can answer \"that house!\", and point to the house of its parents. A \"Closure\" is the ability of the child to always (even if abroad) be able to say it has a home, even though it's really the parent's who own the house.</p>\n"},{"score":4,"body":"<h1>The simplest, shortest, most-easy-to-understand answer:</h1>\n<p>A closure is a block of code where each line can reference the same set of variables with the same variable names.</p>\n<p>If &quot;this&quot; means something different than it does somewhere else, then you know it is two different closures.</p>\n"},{"score":13,"body":"<p>If you understand it well you can explain it simple. And the simplest way is abstracting it from the context. Code aside, even programming aside. A metaphor example will do it better.</p>\n\n<p>Let's imagine that a function is a room whose walls are of glass, but they are special glass, like the ones in an interrogation room. From outside they are opaque, from inside they are transparent. It can be rooms inside other rooms, and the only way of contact is a phone.</p>\n\n<p>If you call from the outside, you don't know what is in it, but you know that the people inside will do a task if you give them certain information. They can see outside, so they can ask you for stuff that are outside and make changes to that stuff, but you can't change what it is inside from the outside, you don't even see (know) what it is inside. The people inside that room you are calling see what it is outside, but not what it is inside the rooms in that room, so they interact with them the way you are doing from outside. The people inside the most inner rooms can see many things, but the people of the most outer room  don't even know about the most inner rooms' existence.</p>\n\n<p>For each call to an inner room, the people in that room keeps a record of the information about that specific call, and they are so good doing that that they never mistake one call stuff with other call stuff.</p>\n\n<p>Rooms are functions, visibility is scope, people doing task is statements, stuff are objects, phone calls are function calls, phone call information is arguments, call records are scope instances, the most outer room is the global object.</p>\n"},{"score":21,"body":"<p>Even though many beautiful definitions of JavaScript closures exists on the Internet, I am trying to start explaining my six-year-old friend with my favourite definitions of closure which helped me to understand the closure much better.</p>\n\n<p><strong>What is a Closure?</strong></p>\n\n<p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.</p>\n\n<p>A closure is the local variables for a function - kept alive after the function has returned.</p>\n\n<p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created in.</p>\n\n<p>Closures are an extension of the concept of scope. With closures, functions have access to variables that were available in the scope where the function was created.</p>\n\n<p>A closure is a stack-frame which is not deallocated when the function returns. (As if a 'stack-frame' were malloc'ed instead of being on the stack!)</p>\n\n<p>Languages such as Java provide the ability to declare methods private, meaning that they can only be called by other methods in the same class. JavaScript does not provide a native way of doing this, but it is possible to emulate private methods using closures.</p>\n\n<p>A \"closure\" is an expression (typically a function) that can have free variables together with an environment that binds those variables (that \"closes\" the expression).</p>\n\n<p>Closures are an abstraction mechanism that allow you to separate concerns very cleanly.</p>\n\n<p><strong>Uses of Closures:</strong></p>\n\n<p>Closures are useful in hiding the implementation of functionality while still revealing the interface.</p>\n\n<p>You can emulate the encapsulation concept in JavaScript using closures.</p>\n\n<p>Closures are used extensively in <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> and <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a>.</p>\n\n<p>While object literals are certainly easy to create and convenient for storing data, closures are often a better choice for creating static singleton namespaces in a large web application.</p>\n\n<p><strong>Example of Closures:</strong></p>\n\n<p>Assuming my 6-year-old friend get to know addition very recently in his primary school, I felt this example of adding the two numbers would be the simplest and apt for the six-year-old to learn the closure.</p>\n\n<p><strong>Example 1: Closure is achieved here by returning a function.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return function(y) {\n        return x + y;\n    };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n</code></pre>\n\n<p><strong>Example 2: Closure is achieved here by returning an object literal.</strong></p>\n\n<pre><code>function makeAdder(x) {\n    return {\n        add: function(y){\n            return x + y;\n        }\n    }\n}\n\nvar add5 = makeAdder(5);\nconsole.log(add5.add(2));//7\n\nvar add10 = makeAdder(10);\nconsole.log(add10.add(2));//12\n</code></pre>\n\n<p><strong>Example 3: Closures in jQuery</strong></p>\n\n<pre><code>$(function(){\n    var name=\"Closure is easy\";\n    $('div').click(function(){\n        $('p').text(name);\n    });\n});\n</code></pre>\n\n<p><strong>Useful Links:</strong></p>\n\n<ul>\n<li><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Closures\">Closures</a></em> (Mozilla Developer Network)</li>\n<li><em><a href=\"http://javascriptissexy.com/understand-javascript-closures-with-ease/\">Understand JavaScript Closures With Ease</a></em></li>\n</ul>\n\n<p>Thanks to the above links which helps me to understand and explain closure better.</p>\n"},{"score":6,"body":"<p>I have read all of these before in the past, and they are all very informative. Some come very close to getting the simple explanation and then get complex or remain abstract, defeating the purpose and failing to show a very simple real world use. </p>\n\n<p>Though combing through all the examples and explanations you get a good idea of what closures are and aren't via comments and code, I was still unsatisfied with a very simple illustration that helped me get a closures usefulness without getting so complex. My wife wants to learn coding and I figured I needed to be able to show here not only what, but why, and and how.</p>\n\n<p>I am not sure a six year old will get this, but I think it might be a little closer to demonstrating a simple case in a real world way that might acually be useful and that is easily understandable.</p>\n\n<p>One of the best (or closest to simplest) is the retelling of Morris' Closures for Dummies example.</p>\n\n<p>Taking the \"SayHi2Bob\" concept just one step further demonstrates the two basic things you can glean from reading all the answers:</p>\n\n<ol>\n<li>Closures have access to the containing function's variables.</li>\n<li>Closures persist in their own memory space (and thus are useful for all kinds of oop-y instantiation stuff)</li>\n</ol>\n\n<p>Proving and demonstrating this to myself, I made a little fiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/9ZMyr/2/\">http://jsfiddle.net/9ZMyr/2/</a></p>\n\n<pre><code>function sayHello(name) {\n  var text = 'Hello ' + name; // Local variable\n  console.log(text);\n  var sayAlert = function () {\n      alert(text);\n  }\n  return sayAlert;\n}\n\nsayHello(); \n/* This will write 'Hello undefined' to the console (in Chrome anyway), \nbut will not alert though since it returns a function handle to nothing). \nSince no handle or reference is created, I imagine a good js engine would \ndestroy/dispose of the internal sayAlert function once it completes. */\n\n// Create a handle/reference/instance of sayHello() using the name 'Bob'\nsayHelloBob = sayHello('Bob');\nsayHelloBob();\n\n// Create another handle or reference to sayHello with a different name\nsayHelloGerry = sayHello('Gerry');\nsayHelloGerry();\n\n/* Now calling them again demonstrates that each handle or reference contains its own \nunique local variable memory space. They remain in memory 'forever' \n(or until your computer/browser explode) */\nsayHelloBob();\nsayHelloGerry();\n</code></pre>\n\n<p>This demonstrates both of the basic concepts you should get about closures. </p>\n\n<p>In simple terms to explain the why this is useful, I have a base function to which I can make references or handles that contain unique data which persists within that memory reference. I don't have to rewrite the function for each time I want to say someone's name. I have encapsulated that routine and made it reusable.</p>\n\n<p>To me this leads to at least the basic concepts of constructors, oop practices, singletons vs instantiated instances with their own data, etc. etc.</p>\n\n<p>If you start a neophyte with this, then you can move on to more complex object property/member based calls, and hopefully the concepts carry.</p>\n"},{"score":11,"body":"<p>A closure is created when the inner function is somehow made available to any scope outside the outer function.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var outer = function(params){ //Outer function defines a variable called params\n    var inner = function(){ // Inner function has access to the params variable of the outer function\n        return params;\n    }\n    return inner; //Return inner function exposing it to outer scope\n},\nmyFunc = outer(\"myParams\");\nmyFunc(); //Returns \"myParams\"\n</code></pre>\n"},{"score":8,"body":"<p>Closure is when a function is <strong>closed</strong> in a way that it was defined in a namespace which is immutable by the time the function is called.</p>\n\n<p>In JavaScript, it happens when you:</p>\n\n<ul>\n<li>Define one function inside the other function</li>\n<li>The inner function is called after the outer function returned</li>\n</ul>\n\n\n\n<pre><code>// 'name' is resolved in the namespace created for one invocation of bindMessage\n// the processor cannot enter this namespace by the time displayMessage is called\nfunction bindMessage(name, div) {\n\n    function displayMessage() {\n        alert('This is ' + name);\n    }\n\n    $(div).click(displayMessage);\n}\n</code></pre>\n"},{"score":6,"body":"<p>I think it is valuable to take a step back, and examine a more general notion of a \"closure\" -- the so-called \"join operator\".</p>\n\n<p>In mathematics, a \"join\" operator is a function on a partially ordered set which returns the smallest object greater than or equal to its arguments.  In symbols, join [a,b] = d such that d >= a and d >= b, but there does not exist an e such that d > e >= a or d > e >= b.</p>\n\n<p>So the join gives you the smallest thing \"bigger\" than the parts.</p>\n\n<p>Now, note that JavaScript scopes are a partially ordered structure.  So that there is a sensible notion of a join.  In particular, a join of scopes is the smallest scope bigger than the original scopes.  That scope is called the <strong>closure</strong>.</p>\n\n<p>So a closure for the variables a, b, c is the smallest scope (in the lattice of scopes for your program!) that brings a, b, and c into scope.</p>\n"},{"score":11,"body":"<p>A closure is a block of code which meets three criteria:</p>\n\n<ul>\n<li><p>It can be passed around as a value and</p></li>\n<li><p>executed on demand by anyone who has that value, at which time</p></li>\n<li><p>it can refer to variables from the context in which it was created\n(that is, it is closed with respect to variable access, in the\nmathematical sense of the word \"closed\").</p></li>\n</ul>\n\n<p>(The word \"closure\" actually has an imprecise meaning, and some people don't think that criterion #1 is part of the definition. I think it is.)</p>\n\n<p>Closures are a mainstay of functional languages, but they are present in many other languages as well (for example, Java's anonymous inner classes). You can do cool stuff with them: they allow deferred execution and some elegant tricks of style.</p>\n\n<p>By: Paul Cantrell, @ <a href=\"http://innig.net/software/ruby/closures-in-ruby\">http://innig.net/software/ruby/closures-in-ruby</a></p>\n"},{"score":13,"body":"<p>Imagine there is a very large park in your town where you see a magician called Mr. Coder starting baseball games in different corners of the park using his magic wand, called JavaScript.</p>\n\n<p>Naturally each baseball game has the exact same rules and each game has its own score board.</p>\n\n<p>Naturally, the scores of one baseball game are completely separate from the other games.</p>\n\n<p>A closure is the special way Mr.Coder keeps the scoring of all his magical baseball games separate.</p>\n"},{"score":28,"body":"<p>Here is a simple real-time scenario. Just read it through, and you will understand how we have used closure here (see how seat number is changing).</p>\n\n<p>All other examples explained previously are also very good to understand the concept.</p>\n\n<pre><code>function movieBooking(movieName) {\n    var bookedSeatCount = 0;\n    return function(name) {\n        ++bookedSeatCount ;\n        alert( name + \" - \" + movieName + \", Seat - \" + bookedSeatCount )\n    };\n};\n\nvar MI1 = movieBooking(\"Mission Impossible 1 \");\nvar MI2 = movieBooking(\"Mission Impossible 2 \");\n\nMI1(\"Mayur\");\n// alert\n// Mayur - Mission Impossible 1, Seat - 1\n\nMI1(\"Raju\");\n// alert\n// Raju - Mission Impossible 1, Seat - 2\n\nMI2(\"Priyanka\");\n// alert\n// Raja - Mission Impossible 2, Seat - 1\n</code></pre>\n"},{"score":60,"body":"<p>As a father of a 6-year-old, currently teaching young children (and a relative novice to coding with no formal education so corrections will be required), I think the lesson would stick best through hands-on play. If the 6-year-old is ready to understand what a closure is, then they are old enough to have a go themselves. I'd suggest pasting the code into jsfiddle.net, explaining a bit, and leaving them alone to concoct a unique song. The explanatory text below is probably more appropriate for a 10 year old.</p>\n\n<pre><code>function sing(person) {\n\n    var firstPart = \"There was \" + person + \" who swallowed \";\n\n    var fly = function() {\n        var creature = \"a fly\";\n        var result = \"Perhaps she'll die\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var spider = function() {\n        var creature = \"a spider\";\n        var result = \"that wiggled and jiggled and tickled inside her\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var bird = function() {\n        var creature = \"a bird\";\n        var result = \"How absurd!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    var cat = function() {\n        var creature = \"a cat\";\n        var result = \"Imagine That!\";\n        alert(firstPart + creature + \"\\n\" + result);\n    };\n\n    fly();\n    spider();\n    bird();\n    cat();\n}\n\nvar person=\"an old lady\";\n\nsing(person);\n</code></pre>\n\n<p><strong>INSTRUCTIONS</strong></p>\n\n<p>DATA: Data is a collection of facts. It can be numbers, words, measurements, observations or even just descriptions of things. You can't touch it, smell it or taste it. You can write it down, speak it and hear it. You could use it to <em>create</em> touch smell and taste using a computer. It can be made useful by a computer using code.</p>\n\n<p>CODE: All the writing above is called <em>code</em>. It is written in JavaScript.</p>\n\n<p>JAVASCRIPT: JavaScript is a language. Like English or French or Chinese are languages. There are lots of languages that are understood by computers and other electronic processors. For JavaScript to be understood by a computer it needs an interpreter. Imagine if a teacher who only speaks Russian comes to teach your class at school. When the teacher says \"все садятся\", the class would not understand. But luckily you have a Russian pupil in your class who tells everyone this means \"everybody sit down\" - so you all do. The class is like a computer and the Russian pupil is the interpreter. For JavaScript the most common interpreter is called a browser.</p>\n\n<p>BROWSER: When you connect to the Internet on a computer, tablet or phone to visit a website, you use a browser. Examples you may know are Internet Explorer, Chrome, Firefox and Safari. The browser can understand JavaScript and tell the computer what it needs to do. The JavaScript instructions are called functions.</p>\n\n<p>FUNCTION: A function in JavaScript is like a factory. It might be a little factory with only one machine inside. Or it might contain many other little factories, each with many machines doing different jobs. In a real life clothes factory you might have reams of cloth and bobbins of thread going in and T-shirts and jeans coming out. Our JavaScript factory only processes data, it can't sew, drill a hole or melt metal. In our JavaScript factory data goes in and data comes out.</p>\n\n<p>All this data stuff sounds a bit boring, but it is really very cool; we might have a function that tells a robot what to make for dinner. Let's say I invite you and your friend to my house. You like chicken legs best, I like sausages, your friend always wants what you want and my friend does not eat meat.</p>\n\n<p>I haven't got time to go shopping, so the function needs to know what we have in the fridge to make decisions. Each ingredient has a different cooking time and we want everything to be served hot by the robot at the same time. We need to provide the function with the data about what we like, the function could 'talk' to the fridge, and the function could control the robot.</p>\n\n<p>A function normally has a name, parentheses and braces. Like this:</p>\n\n<pre><code>function cookMeal() {  /*  STUFF INSIDE THE FUNCTION  */  }\n</code></pre>\n\n<p><em>Note that <code>/*...*/</code> and <code>//</code> stop code being read by the browser.</em></p>\n\n<p>NAME: You can call a function just about whatever word you want. The example \"cookMeal\" is typical in joining two words together and giving the second one a capital letter at the beginning - but this is not necessary. It can't have a space in it, and it can't be a number on its own.</p>\n\n<p>PARENTHESES: \"Parentheses\" or <code>()</code> are the letter box on the JavaScript function factory's door or a post box in the street for sending packets of information to the factory. Sometimes the postbox might be marked <em>for example</em> <code>cookMeal(you, me, yourFriend, myFriend, fridge, dinnerTime)</code>, in which case you know what data you have to give it.</p>\n\n<p>BRACES: \"Braces\" which look like this <code>{}</code> are the tinted windows of our factory. From inside the factory you can see out, but from the outside you can't see in.</p>\n\n<p><strong>THE LONG CODE EXAMPLE ABOVE</strong></p>\n\n<p>Our code begins with the word <em>function</em>, so we know that it is one! Then the name of the function <em>sing</em> - that's my own description of what the function is about. Then parentheses <em>()</em>. The parentheses are always there for a function. Sometimes they are empty, and sometimes they have something in. This one has a word in: <code>(person)</code>. After this there is a brace like this <code>{</code> . This marks the start of the function <em>sing()</em>. It has a partner which marks the end of <em>sing()</em> like this <code>}</code></p>\n\n<pre><code>function sing(person) {  /* STUFF INSIDE THE FUNCTION */  }\n</code></pre>\n\n<p>So this function might have something to do with singing, and might need some data about a person. It has instructions inside to do something with that data.</p>\n\n<p>Now, after the function <em>sing()</em>, near the end of the code is the line</p>\n\n<pre><code>var person=\"an old lady\";\n</code></pre>\n\n<p>VARIABLE: The letters <em>var</em> stand for \"variable\". A variable is like an envelope. On the outside this envelope is marked \"person\". On the inside it contains a slip of paper with the information our function needs, some letters and spaces joined together like a piece of string (it's called a string) that make a phrase reading \"an old lady\". Our envelope could contain other kinds of things like numbers (called integers), instructions (called functions), lists (called <em>arrays</em>). Because this variable is written outside of all the braces <code>{}</code>, and because you can see out through the tinted windows when you are inside the braces, this variable can be seen from anywhere in the code. We call this a 'global variable'.</p>\n\n<p>GLOBAL VARIABLE: <em>person</em> is a global variable, meaning that if you change its value from \"an old lady\" to \"a young man\", the <em>person</em> will keep being a young man until you decide to change it again and that any other function in the code can see that it's a young man. Press the <kbd>F12</kbd> button or look at the Options settings to open the developer console of a browser and type \"person\" to see what this value is. Type <code>person=\"a young man\"</code> to change it and then type \"person\" again to see that it has changed.</p>\n\n<p>After this we have the line</p>\n\n<pre><code>sing(person);\n</code></pre>\n\n<p>This line is calling the function, as if it were calling a dog</p>\n\n<blockquote>\n  <p>\"Come on <em>sing</em>, Come and get <em>person</em>!\"</p>\n</blockquote>\n\n<p>When the browser has loaded the JavaScript code an reached this line, it will start the function. I put the line at the end to make sure that the browser has all the information it needs to run it.</p>\n\n<p>Functions define actions  - the main function is about singing. It contains a variable called <em>firstPart</em> which applies to the singing about the person that applies to each of the verses of the song: \"There was \" + person + \" who swallowed\". If you type <em>firstPart</em> into the console, you won't get an answer because the variable is locked up in a function - the browser can't see inside the tinted windows of the braces.</p>\n\n<p>CLOSURES: The closures are the smaller functions that are inside the big <em>sing()</em> function. The little factories inside the big factory. They each have their own braces which mean that the variables inside them can't be seen from the outside. That's why the names of the variables (<em>creature</em> and <em>result</em>) can be repeated in the closures but with different values. If you type these variable names in the console window, you won't get its value because it's hidden by two layers of tinted windows.</p>\n\n<p>The closures all know what the <em>sing()</em> function's variable called <em>firstPart</em> is, because they can see out from their tinted windows.</p>\n\n<p>After the closures come the lines</p>\n\n<pre><code>fly();\nspider();\nbird();\ncat();\n</code></pre>\n\n<p>The sing() function will call each of these functions in the order they are given. Then the sing() function's work will be done.</p>\n"},{"score":34,"body":"<p>In JavaScript closures are awesome and unique, where variables or arguments are available to inner functions, and they will be alive even after the outer function has returned. Closures are used in most of the design patterns in JS</p>\n<pre><code>function getFullName(a, b) {\n  return a + b;\n}\n\nfunction makeFullName(fn) {\n\n  return function(firstName) {\n\n    return function(secondName) {\n\n      return fn(firstName, secondName);\n\n    }\n  }\n}\n\nmakeFullName(getFullName)(&quot;Stack&quot;)(&quot;overflow&quot;); // Stackoverflow\n</code></pre>\n"},{"score":13,"body":"<p>Maybe you should consider an object-oriented structure instead of inner functions. For example:</p>\n\n<pre><code>var calculate = {\n    number: 0,\n    init: function (num) {\n        this.number = num;\n    },\n    add: function (val) {\n        this.number += val;\n    },\n    rem: function (val) {\n        this.number -= val;\n    }\n};\n</code></pre>\n\n<p>And read the result from the calculate.number variable, who needs \"return\" anyway.</p>\n"},{"score":105,"body":"<p><strong>I do not understand why the answers are so complex here.</strong></p>\n<p>Here is a closure:</p>\n<pre><code>var a = 42;\n\nfunction b() { return a; }\n</code></pre>\n<p>Yes. You probably use that many times a day.</p>\n<br>\n<blockquote>\n<p>There is no reason to believe closures are a complex design hack to address specific problems. No, closures are just about using a variable that comes from a higher scope <strong>from the perspective of where the function was declared (not run)</strong>.</p>\n<p>Now what it <em>allows</em> you to do can be more spectacular, see other answers.</p>\n</blockquote>\n"},{"score":48,"body":"<p>Perhaps a little beyond all but the most precocious of six-year-olds, but a few examples that helped make the concept of closure in JavaScript click for me.</p>\n\n<p>A closure is a function that has access to another function's scope (its variables and functions). The easiest way to create a closure is with a function within a function; the reason being that in JavaScript a function always has access to its containing function’s scope.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>In the above example, outerFunction is called which in turn calls innerFunction. Note how outerVar is available to innerFunction, evidenced by its correctly alerting the value of outerVar.</p>\n\n<p>Now consider the following:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey</p>\n\n<p>referenceToInnerFunction is set to outerFunction(), which simply returns a reference to innerFunction. When referenceToInnerFunction is called, it returns outerVar. Again, as above, this demonstrates that innerFunction has access to outerVar, a variable of outerFunction. Furthermore, it is interesting to note that it retains this access even after outerFunction has finished executing.</p>\n\n<p>And here is where things get really interesting. If we were to get rid of outerFunction, say set it to null, you might think that referenceToInnerFunction would loose its access to the value of outerVar. But this is not the case. </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        return outerVar;\r\n    }\r\n    \r\n    return innerFunction;\r\n}\r\n\r\nvar referenceToInnerFunction = outerFunction();\r\nalert(referenceToInnerFunction());\r\n\r\nouterFunction = null;\r\nalert(referenceToInnerFunction());</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: monkey\nALERT: monkey</p>\n\n<p>But how is this so? How can referenceToInnerFunction still know the value of outerVar now that outerFunction has been set to null?</p>\n\n<p>The reason that referenceToInnerFunction can still access the value of outerVar is because when the closure was first created by placing innerFunction inside of outerFunction, innerFunction added a reference to outerFunction’s scope (its variables and functions) to its scope chain. What this means is that innerFunction has a pointer or reference to all of outerFunction’s variables, including outerVar. So even when outerFunction has finished executing, or even if it is deleted or set to null, the variables in its scope, like outerVar, stick around in memory because of the outstanding reference to them on the part of the innerFunction that has been returned to referenceToInnerFunction. To truly release outerVar and the rest of outerFunction’s variables from memory you would have to get rid of this outstanding reference to them, say by setting referenceToInnerFunction to null as well.</p>\n\n<p>//////////</p>\n\n<p>Two other things about closures to note. First, the closure will always have access to the last values of its containing function.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function outerFunction() {\r\n    var outerVar = \"monkey\";\r\n    \r\n    function innerFunction() {\r\n        alert(outerVar);\r\n    }\r\n    \r\n    outerVar = \"gorilla\";\r\n\r\n    innerFunction();\r\n}\r\n\r\nouterFunction();</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>ALERT: gorilla</p>\n\n<p>Second, when a closure is created, it retains a reference to all of its enclosing function’s variables and functions; it doesn’t get to pick and choose. And but so, closures should be used sparingly, or at least carefully, as they can be memory intensive; a lot of variables can be kept in memory long after a containing function has finished executing.</p>\n"},{"score":22,"body":"<p>(I am not taking the 6-years-old thing into account.)</p>\n\n<p>In a language like JavaScript, where you can pass functions as parameters to other functions (languages where functions are <em>first class citizens</em>), you will often find yourself doing something like:</p>\n\n<pre><code>var name = 'Rafael';\n\nvar sayName = function() {\n  console.log(name);\n};\n</code></pre>\n\n<p>You see, <code>sayName</code> doesn't have the definition for the <code>name</code> variable, but it does use the value of <code>name</code> that was defined outside of <code>sayName</code> (in a parent scope).</p>\n\n<p>Let's say you pass <code>sayName</code> as a parameter to another function, that will call <code>sayName</code> as a callback:</p>\n\n<pre><code>functionThatTakesACallback(sayName);\n</code></pre>\n\n<p>Note that:</p>\n\n<ol>\n<li><code>sayName</code> will be called from inside <code>functionThatTakesACallback</code> (assume that, since I haven't implemented <code>functionThatTakesACallback</code> in this example).</li>\n<li>When <code>sayName</code> is called, it will log the value of the <code>name</code> variable.</li>\n<li><code>functionThatTakesACallback</code> doesn't define a <code>name</code> variable (well, it could, but it wouldn't matter, so assume it doesn't).</li>\n</ol>\n\n<p>So we have <code>sayName</code> being called inside <code>functionThatTakesACallback</code> and referring to a <code>name</code> variable that is not defined inside <code>functionThatTakesACallback</code>.</p>\n\n<p>What happens then? A <code>ReferenceError: name is not defined</code>?</p>\n\n<p>No! The value of <code>name</code> is captured inside a <strong>closure</strong>. You can think of this closure as <strong>context associated to a function</strong>, that holds the values that were available where that function was defined.</p>\n\n<p>So: Even though <code>name</code> is not in scope where the function <code>sayName</code> will be called (inside <code>functionThatTakesACallback</code>), <code>sayName</code> can access the value for <code>name</code> that is captured in the closure associated with <code>sayName</code>.</p>\n\n<p>--</p>\n\n<p>From the book <em>Eloquent JavaScript</em>:</p>\n\n<blockquote>\n  <p>A good mental model is to think of function values as containing both the code in their body and the environment in which they are created. When called, the function body sees its original environment, not the environment in which the call is made.</p>\n</blockquote>\n"},{"score":24,"body":"<p>Here's the most Zen answer I can give:</p>\n\n<p>What would you expect this code to do? Tell me in a comment before you run it. I'm curious!</p>\n\n<pre><code>function foo() {\n  var i = 1;\n  return function() {\n    console.log(i++);\n  }\n}\n\nvar bar = foo();\nbar();\nbar();\nbar();\n\nvar baz = foo();\nbaz();\nbaz();\nbaz();\n</code></pre>\n\n<p>Now open the console in your browser (<kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> or <kbd>F12</kbd>, hopefully) and paste the code in and hit <kbd>Enter</kbd>.</p>\n\n<p>If this code printed what you expect (JavaScript newbies - ignore the \"undefined\" at the end), then you already have <em>wordless understanding</em>.  <em>In words</em>, the variable <code>i</code> is part of the inner function <em>instance's</em> closure.</p>\n\n<p>I put it this way because, once I understood that this code is putting instances of <code>foo()</code>'s inner function in <code>bar</code> and <code>baz</code> and then calling them via those variables, nothing else surprised me.</p>\n\n<p>But if I'm wrong and the console output surprised you, let me know!</p>\n"},{"score":42,"body":"<p>I believe in shorter explanations, so see the below image.</p>\n\n<p><img src=\"https://i.stack.imgur.com/qbv6M.jpg\" alt=\"Enter image description here\"></p>\n\n<p><code>function f1()</code> ..>  Light Red Box</p>\n\n<p><code>function f2()</code> ..>  Red Small Box</p>\n\n<p>Here we have two functions, <code>f1()</code> and <code>f2()</code>. f2() is inner to f1().\nf1() has a variable, <code>var x = 10</code>.</p>\n\n<p>When invoking the function <code>f1()</code>, <code>f2()</code> can access the value of <code>var x = 10</code>.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>function f1() {\n    var x=10;\n\n    function f2() {\n        console.log(x)\n    }\n\n    return f2\n\n}\nf1()\n</code></pre>\n\n<p><code>f1()</code> invoking here:</p>\n\n<p><img src=\"https://i.stack.imgur.com/zg4UT.jpg\" alt=\"Enter image description here\"></p>\n"},{"score":6,"body":"<p>The easiest use case I can think of to explain <strong>JavaScript closures</strong> is the Module Pattern. In the Module Pattern you define a function and call it immediately afterwards in what is called an Immediately Invoked Function Expression (IIFE). <strong>Everything that you write inside that function has private scope because it's defined inside the closure</strong>, thus allowing you to \"simulate\" privacy in JavaScript. Like so:</p>\n\n<pre><code> var Closure = (function () {\n    // This is a closure\n    // Any methods, variables and properties you define here are \"private\"\n    // and can't be accessed from outside the function.\n\n    //This is a private variable\n    var foo = \"\";\n\n    //This is a private method\n    var method = function(){\n\n    }\n})();\n</code></pre>\n\n<p>If, on the other hand, you'd like to make one or multiple variables or methods visible outside  the closure, you can return them inside an object literal. Like so:</p>\n\n<pre><code>var Closure = (function () {\n  // This is a closure\n  // Any methods, variables and properties you define here are \"private\"\n  // and can't be accessed from outside the function.\n\n  //This is a private variable\n  var foo = \"\";\n\n  //This is a private method\n  var method = function(){\n\n  }\n\n  //The method will be accessible from outside the closure\n  return {\n    method: method\n  }\n\n})();\n\nClosure.method();\n</code></pre>\n\n<p>Hope it helps.\nRegards,</p>\n"},{"score":4,"body":"<p><em>Also...</em>  Perhaps we should cut your 27-year-old friend a little <em>slack,</em> because the entire concept of \"closures\" really <strong>is(!)</strong> ... <em>voodoo!</em> </p>\n\n<p>By that I mean: <em>(a)</em> you do not, intuitively, expect it ...AND... <em>(b)</em> when someone takes the time to explain it to you, you certainly do not expect it to <em>work!</em></p>\n\n<p>Intuition tells you that \"this must be nonsense... <em>surely</em> it must result in some kind of syntax-error or something!\"  <em>How on earth(!)</em> could you, in effect, \"pull a function from 'the middle of' wherever-it's-at,\" such that you could [still!] actually have read/write access to the context of \"wherever-it-<em>was</em>-at?!\"</p>\n\n<p>When you finally realize that such a thing is <em>possible,</em> then ... sure ... anyone's <em>after-the-fact</em> reaction would be: \"whoa-a-a-a(!)... kew-el-l-l-l...(!!!)\"</p>\n\n<p>But there will be a \"big counter-intuitive hurdle\" to overcome, first.  Intuition gives you plenty of utterly-plausible expectations that such a thing would be \"of <em>course,</em> absolutely nonsensical and therefore quite impossible.\"</p>\n\n<p>Like I said: \"it's voodoo.\"</p>\n"},{"score":21,"body":"<p>A closure is <strong><em>a function within a function</em></strong> that has access to its \"parent\" function's variables and parameters.</p>\n\n<p>Example:</p>\n\n<pre><code>function showPostCard(Sender, Receiver) {\n\n    var PostCardMessage = \" Happy Spring!!! Love, \";\n\n    function PreparePostCard() {\n        return \"Dear \" + Receiver + PostCardMessage + Sender;\n    }\n\n    return PreparePostCard();\n}\nshowPostCard(\"Granny\", \"Olivia\");\n</code></pre>\n"},{"score":131,"body":"<blockquote>\n  <p>The children will always remember the secrets they have shared with their parents, even after their parents are\n  gone. This is what closures are for functions.</p>\n</blockquote>\n\n<p>The secrets for JavaScript functions are the private variables</p>\n\n<pre><code>var parent = function() {\n var name = \"Mary\"; // secret\n}\n</code></pre>\n\n<p>Every time you call it, local variable \"name\" is created and given name \"Mary\". And every time the function exits the variable is lost and the name is forgotten.</p>\n\n<p>As you may guess, because the variables are re-created every time the function is called, and nobody else will know them, there must be a secret place where they are stored. It could be called <strong>Chamber of Secrets</strong> or <strong>stack</strong> or <strong>local scope</strong> but it doesn't really matter. We know they are there, somewhere, hidden in the memory.</p>\n\n<p>But, in JavaScript there is this very special thing that functions which are created inside other functions, can also know the local variables of their parents and keep them as long as they live.</p>\n\n<pre><code>var parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    // I can also see that \"name\" is \"Mary\"\n  }\n}\n</code></pre>\n\n<p>So, as long as we are in the parent -function, it can create one or more child functions which do share the secret variables from the secret place.</p>\n\n<p>But the sad thing is, if the child is also a private variable of its parent function, it would also die when the parent ends, and the secrets would die with them.</p>\n\n<p>So to live, the child has to leave before it's too late</p>\n\n<pre><code>var parent = function() {\n  var name = \"Mary\";\n  var child = function(childName) {\n    return \"My name is \" + childName  +\", child of \" + name; \n  }\n  return child; // child leaves the parent -&gt;\n}\nvar child = parent(); // &lt; - and here it is outside \n</code></pre>\n\n<p>And now, even though Mary is \"no longer running\", the memory of her is not lost and her child will always remember her name and other secrets they shared during their time together.</p>\n\n<p>So, if you call the child \"Alice\", she will respond</p>\n\n<pre><code>child(\"Alice\") =&gt; \"My name is Alice, child of Mary\"\n</code></pre>\n\n<p>That's all there is to tell.</p>\n"},{"score":17,"body":"<p>A closure is something many JavaScript developers use all the time, but we take it for granted. How it works is not that complicated. Understanding how to use it purposefully <em>is</em> complex.</p>\n\n<p>At its simplest definition (as other answers have pointed out), a closure is basically a function defined inside another function. And that inner function has access to variables defined in the scope of the outer function. The most common practice that you'll see using closures is defining variables and functions in the global scope, and having access to those variables in the function scope of that function.</p>\n\n<pre><code>var x = 1;\nfunction myFN() {\n  alert(x); //1, as opposed to undefined.\n}\n// Or\nfunction a() {\n   var x = 1;\n   function b() {\n       alert(x); //1, as opposed to undefined.\n   }\n   b();\n}\n</code></pre>\n\n<p>So what?</p>\n\n<p>A closure isn't that special to a JavaScript user until you think about what life would be like without them. In other languages, variables used in a function get cleaned up when that function returns. In the above, x would have been a \"null pointer\", and you'd need to establish a getter and setter and start passing references. Doesn't sound like JavaScript right? Thank the mighty closure.</p>\n\n<p>Why should I care?</p>\n\n<p>You don't really have to be aware of closures to use them. But as others have also pointed out, they can be <strong>leveraged</strong> to create faux private variables. Until you get to needing private variables, just use them like you always have.</p>\n"},{"score":9,"body":"<p>I like Kyle Simpson's definition of a closure:  </p>\n\n<blockquote>\n  <p>Closure is when a function is able to remember and access its lexical\n  scope even when that function is executing outside its lexical scope.</p>\n</blockquote>\n\n<p>Lexical scope is when an inner scope can access its outer scope.</p>\n\n<p>Here is a modified example he provides in his book series 'You Don't Know JS: Scopes &amp; Closures'. </p>\n\n<pre><code>function foo() {\n  var a = 2;\n\n  function bar() {\n    console.log( a );\n  }\n  return bar;\n}\n\nfunction test() {\n  var bz = foo();\n  bz();\n}\n\n// prints 2. Here function bar referred by var bz is outside \n// its lexical scope but it can still access it\ntest(); \n</code></pre>\n"},{"score":18,"body":"<p>The following example is a simple illustration of a JavaScript closure.\nThis is the closure function, which returns a function, with access to its local variable x,</p>\n\n<pre><code>function outer(x){\n     return function inner(y){\n         return x+y;\n     }\n}\n</code></pre>\n\n<p>Invoke the function like this:</p>\n\n<pre><code>var add10 = outer(10);\nadd10(20); // The result will be 30\nadd10(40); // The result will be 50\n\nvar add20 = outer(20);\nadd20(20); // The result will be 40\nadd20(40); // The result will be 60\n</code></pre>\n"},{"score":80,"body":"<p>The author of <em><a href=\"http://javascript.info/tutorial/closures\" rel=\"noreferrer\">Closures</a></em> has explained closures pretty well, explaining the reason why we need them and also explaining LexicalEnvironment which is necessary to understanding closures. <br/>\nHere is the summary:</p>\n\n<p>What if a variable is accessed, but it isn’t local? Like here:</p>\n\n<p><a href=\"https://i.stack.imgur.com/SLlVB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/SLlVB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>In this case, the interpreter finds the variable in the\nouter <a href=\"http://javascript.info/tutorial/initialization\" rel=\"noreferrer\"><code>LexicalEnvironment</code></a> object.</p>\n\n<p>The process consists of two steps:</p>\n\n<ol>\n<li>First, when a function f is created, it is not created in an empty\nspace. There is a current LexicalEnvironment object. In the case\nabove, it’s window (a is undefined at the time of function\ncreation).</li>\n</ol>\n\n<p><a href=\"https://i.stack.imgur.com/0KBin.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/0KBin.png\" alt=\"Enter image description here\"></a></p>\n\n<p>When a function is created, it gets a hidden property, named [[Scope]], which references the current LexicalEnvironment.</p>\n\n<p><a href=\"https://i.stack.imgur.com/U3yt7.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/U3yt7.png\" alt=\"Enter image description here\"></a></p>\n\n<p>If a variable is read, but can not be found anywhere, an error is generated.</p>\n\n<p><strong>Nested functions</strong></p>\n\n<p>Functions can be nested one inside another, forming a chain of LexicalEnvironments which can also be called a scope chain.</p>\n\n<p><a href=\"https://i.stack.imgur.com/2hUwr.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/2hUwr.png\" alt=\"Enter image description here\"></a></p>\n\n<p>So, function g has access to g, a and f.</p>\n\n<p><strong>Closures</strong></p>\n\n<p>A nested function may continue to live after the outer function has finished:</p>\n\n<p><a href=\"https://i.stack.imgur.com/S1mlB.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/S1mlB.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Marking up LexicalEnvironments:</p>\n\n<p><a href=\"https://i.stack.imgur.com/BzUNi.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/BzUNi.png\" alt=\"Enter image description here\"></a></p>\n\n<p>As we see, <code>this.say</code> is a property in the user object, so it continues to live after User completed.</p>\n\n<p>And if you remember, when <code>this.say</code> is created, it (as every function) gets an internal reference <code>this.say.[[Scope]]</code> to the current LexicalEnvironment. So, the LexicalEnvironment of the current User execution stays in memory. All variables of User also are its properties, so they are also carefully kept, not junked as usually.</p>\n\n<p><strong>The whole point is to ensure that if the inner function wants to access an outer variable in the future, it is able to do so.</strong></p>\n\n<p>To summarize:</p>\n\n<ol>\n<li>The inner function keeps a reference to the outer\nLexicalEnvironment.</li>\n<li>The inner function may access variables from it\nany time even if the outer function is finished.</li>\n<li>The browser keeps the LexicalEnvironment and all its properties (variables) in memory until there is an inner function which references it.</li>\n</ol>\n\n<p>This is called a closure.</p>\n"},{"score":21,"body":"<p>Meet the <strong>illustrated explanation</strong>: <em><a href=\"http://dmitryfrank.com/articles/js_closures\">How do JavaScript closures work behind the scenes</a></em>.</p>\n\n<p>The article explains how the scope objects (or <code>LexicalEnvironment</code>s) are allocated and used in an intuitive way. Like, for this simple script:</p>\n\n<pre><code>\"use strict\";\n\nvar foo = 1;\nvar bar = 2;\n\nfunction myFunc() {\n  //-- Define local-to-function variables\n  var a = 1;\n  var b = 2;\n  var foo = 3;\n}\n\n//-- And then, call it:\nmyFunc();\n</code></pre>\n\n<p>When executing the top-level code, we have the following arrangement of scope objects:</p>\n\n<p><a href=\"https://i.stack.imgur.com/bwjyg.png\"><img src=\"https://i.stack.imgur.com/bwjyg.png\" alt=\"Enter image description here\"></a></p>\n\n<p>And when <code>myFunc()</code> is called, we have the following scope chain:</p>\n\n<p><a href=\"https://i.stack.imgur.com/zRu5Z.png\"><img src=\"https://i.stack.imgur.com/zRu5Z.png\" alt=\"Enter image description here\"></a></p>\n\n<p>Understanding of how scope objects are created, used and deleted is a key to having a big picture and to understand how do closures work under the hood.</p>\n\n<p>See the aforementioned article for all the details.</p>\n"},{"score":6,"body":"<p>The best way is to explain these concepts incrementally:</p>\n\n<p><strong>Variables</strong></p>\n\n<pre><code>console.log(x);\n// undefined\n</code></pre>\n\n<p>Here, <code>undefined</code> is JavaScript's way of saying \"I have no idea what <code>x</code> means.\"</p>\n\n<blockquote>\n  <p>Variables are like tags.</p>\n</blockquote>\n\n<p>You can say, tag <code>x</code> points to value <code>42</code>:</p>\n\n<pre><code>var x = 42;\nconsole.log(x);\n// 42\n</code></pre>\n\n<p>Now JavaScript knows what <code>x</code> means.</p>\n\n<blockquote>\n  <p>You can also re-assign a variable.</p>\n</blockquote>\n\n<p>Make tag <code>x</code> point to a different value:</p>\n\n<pre><code>x = 43;\nconsole.log(x);\n// 43\n</code></pre>\n\n<p>Now <code>x</code> means something else.</p>\n\n<p><strong>Scope</strong></p>\n\n<blockquote>\n  <p>When you make a function, the function has its own \"box\" for variables.</p>\n</blockquote>\n\n<pre><code>function A() {\n  var x = 42;\n}\n\nconsole.log(x);\n\n// undefined\n</code></pre>\n\n<p>From outside the box, you cannot see what's inside the box.</p>\n\n<p>But from inside the box, you can see what's outside that box:</p>\n\n<pre><code>var x = 42;\n\nfunction A() {\n  console.log(x);\n}\n\n// 42\n</code></pre>\n\n<blockquote>\n  <p>Inside function <code>A</code>, you have \"scope access\" to <code>x</code>.</p>\n</blockquote>\n\n<p>Now if you have two boxes side-by-side:</p>\n\n<pre><code>function A() {\n  var x = 42;\n}\n\nfunction B() {\n  console.log(x);\n}\n\n// undefined\n</code></pre>\n\n<blockquote>\n  <p>Inside function <code>B</code>, you have no access to variables inside function <code>A</code>.</p>\n</blockquote>\n\n<p>But if you put define function <code>B</code> inside function <code>A</code>:</p>\n\n<pre><code>function A() {\n\n  var x = 42;\n\n  function B() {\n    console.log(x);\n  }\n\n}\n\n// 42\n</code></pre>\n\n<p>You now have \"scope access\".</p>\n\n<p><strong>Functions</strong></p>\n\n<p>In JavaScript, you run a function by calling it:</p>\n\n<pre><code>function A() {\n  console.log(42);\n}\n</code></pre>\n\n<p>Like this:</p>\n\n<pre><code>A();\n\n// 42\n</code></pre>\n\n<p><strong>Functions as Values</strong></p>\n\n<p>In JavaScript, you can point a tag to a function, just like pointing to a number:</p>\n\n<pre><code>var a = function() {\n  console.log(42);\n};\n</code></pre>\n\n<blockquote>\n  <p>Variable <code>a</code> now means a function, you can run it.</p>\n</blockquote>\n\n<pre><code>a();\n// 42\n</code></pre>\n\n<p>You can also pass this variable around:</p>\n\n<pre><code>setTimeout(a, 1000);\n</code></pre>\n\n<p>In a second (1000 milliseconds), the function <code>a</code> points to is called:</p>\n\n<pre><code>// 42\n</code></pre>\n\n<p><strong>Closure Scope</strong></p>\n\n<p>Now when you define functions, those functions have access to their outer scopes.</p>\n\n<p>When you pass functions around as values, it would be troublesome if that access is lost.</p>\n\n<blockquote>\n  <p>In JavaScript, functions keep their access to outer scope variables.\n  Even when they are passed around to be run somewhere else.</p>\n</blockquote>\n\n<pre><code>var a = function() {\n\n  var text = 'Hello!'\n\n  var b = function() {\n    console.log(text);\n    // inside function `b`, you have access to `text`\n  };\n\n  // but you want to run `b` later, rather than right away\n  setTimeout(b, 1000);\n\n}\n</code></pre>\n\n<p>What happens now?</p>\n\n<pre><code>// 'Hello!'\n</code></pre>\n\n<p>Or consider this:</p>\n\n<pre><code>var c;\n\nvar a = function() {\n\n  var text = 'Hello!'\n\n  var b = function() {\n    console.log(text);\n    // inside function `b`, you have access to `text`\n  };\n\n  c = b;\n\n}\n\n// now we are out side of function `a`\n// call `a` so the code inside `a` runs\na(); \n\n// now `c` has a value that is a function\n// because what happened when `a` ran\n\n// when you run `c`\nc();\n\n// 'Hello!'\n</code></pre>\n\n<blockquote>\n  <p>You can still access variables in the closure scope.</p>\n</blockquote>\n\n<p>Even though <code>a</code> has finished running, and now you are running <code>c</code> outside of <code>a</code>.</p>\n\n<p>What just happened here is called '<strong><em>closure</em></strong>' in JavaScript.</p>\n"},{"score":13,"body":"<p><strong>Pinocchio: Closures in 1883 (over a century before JavaScript)</strong></p>\n\n<p>I think it can best be explained to a 6-year-old with a nice adventure... The part of the <a href=\"https://en.wikipedia.org/wiki/The_Adventures_of_Pinocchio\" rel=\"noreferrer\">Adventures of Pinocchio</a> where Pinocchio is being swallowed by an oversized dogfish...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var tellStoryOfPinocchio = function(original) {\r\n\r\n  // Prepare for exciting things to happen\r\n  var pinocchioFindsMisterGeppetto;\r\n  var happyEnding;\r\n\r\n  // The story starts where Pinocchio searches for his 'father'\r\n  var pinocchio = {\r\n    name: 'Pinocchio',\r\n    location: 'in the sea',\r\n    noseLength: 2\r\n  };\r\n\r\n  // Is it a dog... is it a fish...\r\n  // The dogfish appears, however there is no such concept as the belly\r\n  // of the monster, there is just a monster...\r\n  var terribleDogfish = {\r\n    swallowWhole: function(snack) {\r\n      // The swallowing of Pinocchio introduces a new environment (for the\r\n      // things happening inside it)...\r\n      // The BELLY closure... with all of its guts and attributes\r\n      var mysteriousLightLocation = 'at Gepetto\\'s ship';\r\n\r\n      // Yes: in my version of the story the monsters mouth is directly\r\n      // connected to its belly... This might explain the low ratings\r\n      // I had for biology...\r\n      var mouthLocation = 'in the monsters mouth and then outside';\r\n\r\n      var puppet = snack;\r\n\r\n\r\n      puppet.location = 'inside the belly';\r\n      alert(snack.name + ' is swallowed by the terrible dogfish...');\r\n\r\n      // Being inside the belly, Pinocchio can now experience new adventures inside it\r\n      pinocchioFindsMisterGeppetto = function() {\r\n        // The event of Pinocchio finding Mister Geppetto happens inside the\r\n        // belly and so it makes sence that it refers to the things inside\r\n        // the belly (closure) like the mysterious light and of course the\r\n        // hero Pinocchio himself!\r\n        alert(puppet.name + ' sees a mysterious light (also in the belly of the dogfish) in the distance and swims to it to find Mister Geppetto! He survived on ship supplies for two years after being swallowed himself. ');\r\n        puppet.location = mysteriousLightLocation;\r\n\r\n        alert(puppet.name + ' tells Mister Geppetto he missed him every single day! ');\r\n        puppet.noseLength++;\r\n      }\r\n\r\n      happyEnding = function() {\r\n        // The escape of Pinocchio and Mister Geppetto happens inside the belly:\r\n        // it refers to Pinocchio and the mouth of the beast.\r\n        alert('After finding Mister Gepetto, ' + puppet.name + ' and Mister Gepetto travel to the mouth of the monster.');\r\n        alert('The monster sleeps with its mouth open above the surface of the water. They escape through its mouth. ');\r\n        puppet.location = mouthLocation;\r\n        if (original) {\r\n          alert(puppet.name + ' is eventually hanged for his innumerable faults. ');\r\n        } else {\r\n          alert(puppet.name + ' is eventually turned into a real boy and they all lived happily ever after...');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  alert('Once upon a time...');\r\n  alert('Fast forward to the moment that Pinocchio is searching for his \\'father\\'...');\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  terribleDogfish.swallowWhole(pinocchio);\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  pinocchioFindsMisterGeppetto();\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n  happyEnding();\r\n  alert('Pinocchio is ' + pinocchio.location + '.');\r\n\r\n  if (pinocchio.noseLength &gt; 2)\r\n    console.log('Hmmm... apparently a little white lie was told. ');\r\n}\r\n\r\ntellStoryOfPinocchio(false);\r\n\r\n </code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":12,"body":"<h1>Closures are simple</h1>\n<p>You probably shouldn't tell a six-year old about closures, but if you do, you might say that closure gives an ability to gain access to a variable declared in some other function scope.</p>\n<p><a href=\"https://i.stack.imgur.com/OX92v.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/OX92v.png\" alt=\"enter image description here\" /></a></p>\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function getA() {\n  var a = [];\n\n  // this action happens later,\n  // after the function returned\n  // the `a` value\n  setTimeout(function() {\n    a.splice(0, 0, 1, 2, 3, 4, 5);\n  });\n\n  return a;\n}\n\nvar a = getA();\nout('What is `a` length?');\nout('`a` length is ' + a.length);\n\nsetTimeout(function() {\n  out('No wait...');\n  out('`a` length is ' + a.length);\n  out('OK :|')\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;pre id=\"output\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n  function out(k) {\n    document.getElementById('output').innerHTML += '&gt; ' + k + '\\n';\n  }\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":2,"body":"<p>A closure is a function that has access to information from the environment it was defined in.</p>\n\n<p>For some, the information is the <em>value</em> in the environment at the time of creation.  For others, the information is the variables in the environment at the time of creation.</p>\n\n<p>If the lexical environment that the closure refers to belongs to a function that has exited, then (in the case of a closure referring to the variables in the environment) those lexical variables will continue to exist for reference by the closure.</p>\n\n<p>A closure can be thought of a special case of global variables -- with a private copy created just for the function.</p>\n\n<p>Or it can be thought of as a method where the environment is a specific instance of an object whose properties are the variables in the environment.</p>\n\n<p>The former (closure as environment) similar to the latter where the environment copy is a context variable passed to each function in the former, and the instance variables form a context variable in the latter.</p>\n\n<p>So a closure is a way to call a function without having to specify the context explicitly as a parameter or as the object in a method invocation.</p>\n\n<pre><code>var closure = createclosure(varForClosure);\nclosure(param1);  // closure has access to whatever createclosure gave it access to,\n                  // including the parameter storing varForClosure.\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>var contextvar = varForClosure; // use a struct for storing more than one..\ncontextclosure(contextvar, param1);\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>var contextobj = new contextclass(varForClosure);\ncontextobj-&gt;objclosure(param1);\n</code></pre>\n\n<p>For maintainable code, I recommend the object oriented way.  However for a quick and easy set of tasks (for example creating a callback), a closure can become natural and more clear, especially in the context of lamda or anonymous functions.</p>\n"},{"score":13,"body":"<blockquote>\n  <p>A closure is a function having access to the parent scope, even after the parent function has closed.</p>\n</blockquote>\n\n<pre><code>var add = (function() {\n  var counter = 0;\n  return function() {\n    return counter += 1;\n  }\n})();\n\nadd();\nadd();\nadd();\n// The counter is now 3\n</code></pre>\n\n<p>Example explained:</p>\n\n<ul>\n<li>The variable <code>add</code> is assigned the return value of a self-invoking function.</li>\n<li>The self-invoking function only runs once. It sets the counter to zero (0), and returns a function expression.</li>\n<li>This way add becomes a function. The \"wonderful\" part is that it can access the counter in the parent scope.</li>\n<li>This is called a JavaScript closure. It makes it possible for a function to have \"private\" variables.</li>\n<li>The counter is protected by the scope of the anonymous function, and can only be changed using the add function.</li>\n</ul>\n\n<p><a href=\"http://www.w3schools.com/js/js_function_closures.asp\" rel=\"noreferrer\">Source</a></p>\n"},{"score":8,"body":"<p>For a six-year-old ...</p>\n\n<p>Do you know what objects are?</p>\n\n<p>Objects are things that have properties and do stuff.</p>\n\n<p>One of the most important things about closures is that they let you make objects in JavaScript. Objects in JavaScript are just functions and closures that lets JavaScript store the value of the property for the object once it has been created.</p>\n\n<p>Objects are very useful and keep everything nice and organised. Different objects can do different jobs and working together objects can do complicated things.</p>\n\n<p>It's lucky that JavaScript has closures for making objects, otherwise everything would become a messy nightmare.</p>\n"},{"score":7,"body":"<p>There once was a caveman </p>\n\n<pre><code>function caveman {\n</code></pre>\n\n<p>who had a very special rock,</p>\n\n<pre><code>var rock = \"diamond\";\n</code></pre>\n\n<p>You could not get the rock yourself because it was in the caveman's private cave. Only the caveman knew how to find and get the rock.</p>\n\n<pre><code>return {\n    getRock: function() {\n        return rock;\n    }\n};\n}\n</code></pre>\n\n<p>Luckily, he was a friendly caveman, and if you were willing to wait for his return, he would gladly get it for you.</p>\n\n<pre><code>var friend = caveman();\nvar rock = friend.getRock();\n</code></pre>\n\n<p>Pretty smart caveman.</p>\n"},{"score":3,"body":"<p>Closure can be private and public variables or functions.</p>\n\n<pre><code>var ClusureDemo = function() {\n    //privare variables\n    var localVa1, localVa2;\n\n    //private functions\n    var setVaOne = function(newVa) {\n        localVa1 = newVa;\n    },\n    setVaTwo = function(newVa) {\n        localVa2 = newVa;\n    },\n    getVaOne = function() {\n        return localVa1;\n    },\n    getVaTwo = function() {\n        return localVa2;\n    };\n\n    return {\n        //public variables and functions\n        outVaOne : localVa1,\n        outVaTwo : localVa2,\n        setVaOne : setVaOne,\n        setVaTwo : setVaTwo,\n        getVaOne : getVaOne,\n        getVaTwo : getVaTwo\n    };\n};\n\n//Test Demo\nvar app = new ClusureDemo();\napp.outVaOne = 'Hello Variable One';\napp.outVaTwo = 'Hello Variable Two';\napp.setVaOne(app.outVaOne);\napp.setVaTwo(app.outVaTwo);\n\nalert(app.getVaOne());\nalert(app.getVaTwo());\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/paoim/8o2ejzdq/\" rel=\"nofollow\">Demo</a></p>\n"},{"score":21,"body":"<p>To understand closures you have to get down to the program and literally execute as if you are the run time. Let's look at this simple piece of code:</p>\n\n<p><a href=\"https://i.stack.imgur.com/kWR82.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/kWR82.png\" alt=\"Enter image description here\"></a></p>\n\n<p>JavaScript runs the code in two phases:</p>\n\n<ul>\n<li>Compilation Phase    // JavaScript is not a pure interpreted language</li>\n<li>Execution Phase</li>\n</ul>\n\n<p>When JavaScript goes through the compilation phase it extract out the declarations of variables and functions. This is called hoisting. Functions encountered in this phase are saved as text blobs in memory also known as lambda. After compilation JavaScript enters the execution phase where it assigns all the values and runs the function. To run the function it prepares the execution context by assigning memory from the heap and repeating the compilation and execution phase for the function. This memory area is called scope of the function. There is a global scope when execution starts. Scopes are the key in understanding closures.</p>\n\n<p>In this example, in first go, variable <code>a</code> is defined and then <code>f</code> is defined in the compilation phase. All undeclared variables are saved in the global scope. In the execution phase <code>f</code> is called with an argument. <code>f</code>'s scope is assigned and the compilation and execution phase is repeated for it.</p>\n\n<p>Arguments are also saved in this local scope for <code>f</code>. Whenever a local execution context or scope is created it contain a reference pointer to its parent scope. All variable access follows this lexical scope chain to find its value. If a variable is not found in the local scope it follows the chain and find it in its parent scope. This is also why a local variable overrides variables in the parent scope. The parent scope is called the \"Closure\" for local a scope or function.</p>\n\n<p>Here when <code>g</code>'s scope is being set up it got a lexical pointer to its parents scope of <code>f</code>. The scope of <code>f</code> is the closure for <code>g</code>. In JavaScript, if there is some reference to functions, objects or scopes if you can reach them somehow, it will not get garbage collected. So when myG is running, it has a pointer to scope of <code>f</code> which is its closure. This area of memory will not get garbage collected even <code>f</code> has returned. This is a closure as far as the runtime is concerned.</p>\n\n<h2>SO WHAT IS A CLOSURE?</h2>\n\n<ul>\n<li>It is an implicit, permanent link between a function and its scope chain...</li>\n<li>A function definition's (lambda) hidden <code>[[scope]]</code> reference.</li>\n<li>Holds the scope chain (preventing garbage collection).</li>\n<li>It is used and copied as the \"outer environment reference\" anytime the function is run.</li>\n</ul>\n\n<h2>IMPLICIT CLOSURE</h2>\n\n<pre><code>var data = \"My Data!\";\nsetTimeout(function() {\n  console.log(data); // Prints \"My Data!\"\n}, 3000);\n</code></pre>\n\n<h2>EXPLICIT CLOSURES</h2>\n\n<pre><code>function makeAdder(n) {\n  var inc = n;\n  var sum = 0;\n  return function add() {\n    sum = sum + inc;\n    return sum;\n  };\n}\n\nvar adder3 = makeAdder(3);\n</code></pre>\n\n<p>A very interesting talk on closures and more is <em><a href=\"https://www.youtube.com/watch?v=QyUFheng6J0\" rel=\"noreferrer\">Arindam Paul - JavaScript VM internals, EventLoop, Async and ScopeChains</a></em>.</p>\n"},{"score":8,"body":"<p>This is how a beginner wrapped one's head around Closures like a function is wrapped inside of a functions body also known as <strong>Closures</strong>.</p>\n\n<p>Definition from the book Speaking JavaScript \"A closure is a function plus the connection to the scope in which the function was created\" -<em>Dr.Axel Rauschmayer</em></p>\n\n<p>So what could that look like? Here is an example</p>\n\n<pre><code>function newCounter() {\n  var counter = 0;\n   return function increment() {\n    counter += 1;\n   }\n}\n\nvar counter1 = newCounter();\nvar counter2 = newCounter();\n\ncounter1(); // Number of events: 1\ncounter1(); // Number of events: 2\ncounter2(); // Number of events: 1\ncounter1(); // Number of events: 3\n</code></pre>\n\n<p><em>newCounter</em> closes over <em>increment</em>, <em>counter</em> can be referenced to and accessed by <em>increment</em>.</p>\n\n<p><em>counter1</em> and <em>counter2</em> will keep track of their own value.</p>\n\n<p>Simple but hopefully a clear perspective of what a closure is around all these great and advanced answers.</p>\n"},{"score":10,"body":"<h2>Functions containing no free variables are called pure functions.</h2>\n<h2>Functions containing one or more free variables are called closures.</h2>\n<pre><code>var pure = function pure(x){\n  return x \n  // only own environment is used\n}\n\nvar foo = &quot;bar&quot;\n\nvar closure = function closure(){\n  return foo\n  // foo is free variable from the outer environment\n}\n</code></pre>\n<p><sup>src: <a href=\"https://leanpub.com/javascriptallongesix/read#leanpub-auto-if-functions-without-free-variables-are-pure-are-closures-impure\" rel=\"noreferrer\">https://leanpub.com/javascriptallongesix/read#leanpub-auto-if-functions-without-free-variables-are-pure-are-closures-impure</a></sup></p>\n"},{"score":9,"body":"<p>MDN explains it best I think:</p>\n\n<blockquote>\n  <p>Closures are functions that refer to independent (free) variables. In other words, the function defined in the closure 'remembers' the environment in which it was created.</p>\n</blockquote>\n\n<p>A closure always has an outer function and an inner function. The inner function is where all the work happens, and the outer function is just the environment that preserves the scope where the inner function was created. In this way, the inner function of a closure 'remembers' the environment/scope in which it was created. The most classic example is a counter function:</p>\n\n<pre><code>var closure = function() {\n  var count = 0;\n  return function() {\n    count++;\n    console.log(count);\n  };\n};\n\nvar counter = closure();\n\ncounter() // returns 1\ncounter() // returns 2\ncounter() // returns 3\n</code></pre>\n\n<p>In the above code, <code>count</code> is preserved by the outer function (environment function), so that every time you call <code>counter()</code>, the inner function (work function) can increment it.</p>\n"},{"score":26,"body":"<p>Closures allow JavaScript programmers to write better code. Creative, expressive, and concise. We frequently use closures in JavaScript, and, no matter our JavaScript experience, we undoubtedly encounter them time and again. Closures might appear complex but hopefully, after you read this, closures will be much more easily understood and thus more appealing for your everyday JavaScript programming tasks.</p>\n\n<p>You should be familiar with <a href=\"http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/\"><strong><em>JavaScript variable scope</em></strong></a> before you read further because to understand closures you must understand JavaScript’s variable scope.</p>\n\n<h2>What is a closure?</h2>\n\n<p>A closure is an inner function that has access to the outer (enclosing) function’s variables—scope chain. The closure has three scope chains: it has access to its own scope (variables defined between its curly brackets), it has access to the outer function’s variables, and it has access to the global variables.</p>\n\n<p>The inner function has access not only to the outer function’s variables, but also to the outer function’s parameters. Note that the inner function cannot call the outer function’s arguments object, however, even though it can call the outer function’s parameters directly.</p>\n\n<p>You create a closure by adding a function inside another function.</p>\n\n<p><strong>A Basic Example of Closures in JavaScript:</strong> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function showName (firstName, lastName) { \r\n  var nameIntro = \"Your name is \";\r\n  // this inner function has access to the outer function's variables, including the parameter\r\n  ​function makeFullName () {             \r\n​    return nameIntro + firstName + \" \" + lastName;         \r\n  }\r\n​\r\n​  return makeFullName (); \r\n} \r\n​\r\nshowName (\"Michael\", \"Jackson\"); // Your name is Michael Jackson </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>Closures are used extensively in Node.js; they are workhorses in Node.js’ asynchronous, non-blocking architecture. Closures are also frequently used in jQuery and just about every piece of JavaScript code you read.</p>\n\n<p><strong>A Classic jQuery Example of Closures:</strong> </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n​\r\n​  var selections = []; \r\n  $(\".niners\").click(function() { // this closure has access to the selections variable​\r\n    selections.push (this.prop(\"name\")); // update the selections variable in the outer function's scope​\r\n  });\r\n​});</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h2>Closures’ Rules and Side Effects</h2>\n\n<p><strong>1. Closures have access to the outer function’s variable even after the outer function returns:</strong></p>\n\n<p>One of the most important and ticklish features with closures is that the inner function still has access to the outer function’s variables even after the outer function has returned. Yep, you read that correctly. When functions in JavaScript execute, they use the same scope chain that was in effect when they were created. This means that even after the outer function has returned, the inner function still has access to the outer function’s variables. Therefore, you can call the inner function later in your program. This example demonstrates:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function celebrityName (firstName) {\r\n    var nameIntro = \"This celebrity is \";\r\n    // this inner function has access to the outer function's variables, including the parameter​\r\n   function lastName (theLastName) {\r\n        return nameIntro + firstName + \" \" + theLastName;\r\n    }\r\n    return lastName;\r\n}\r\n​\r\n​var mjName = celebrityName (\"Michael\"); // At this juncture, the celebrityName outer function has returned.​\r\n​\r\n​// The closure (lastName) is called here after the outer function has returned above​\r\n​// Yet, the closure still has access to the outer function's variables and parameter​\r\nmjName (\"Jackson\"); // This celebrity is Michael Jackson </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>2. Closures store references to the outer function’s variables:</strong></p>\n\n<p>They do not store the actual value.  Closures get more interesting when the value of the outer function’s variable changes before the closure is called. And this powerful feature can be harnessed in creative ways, such as this private variables example first demonstrated by Douglas Crockford: </p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function celebrityID () {\r\n    var celebrityID = 999;\r\n    // We are returning an object with some inner functions​\r\n    // All the inner functions have access to the outer function's variables​\r\n    return {\r\n        getID: function ()  {\r\n            // This inner function will return the UPDATED celebrityID variable​\r\n            // It will return the current value of celebrityID, even after the changeTheID function changes it​\r\n          return celebrityID;\r\n        },\r\n        setID: function (theNewID)  {\r\n            // This inner function will change the outer function's variable anytime​\r\n            celebrityID = theNewID;\r\n        }\r\n    }\r\n​\r\n}\r\n​\r\n​var mjID = celebrityID (); // At this juncture, the celebrityID outer function has returned.​\r\nmjID.getID(); // 999​\r\nmjID.setID(567); // Changes the outer function's variable​\r\nmjID.getID(); // 567: It returns the updated celebrityId variable </code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>3. Closures Gone Awry</strong></p>\n\n<p>Because closures have access to the updated values of the outer function’s variables, they can also lead to bugs when the outer function’s variable changes with a for loop. Thus:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// This example is explained in detail below (just after this code box).​\r\n​function celebrityIDCreator (theCelebrities) {\r\n    var i;\r\n    var uniqueID = 100;\r\n    for (i = 0; i &lt; theCelebrities.length; i++) {\r\n      theCelebrities[i][\"id\"] = function ()  {\r\n        return uniqueID + i;\r\n      }\r\n    }\r\n    \r\n    return theCelebrities;\r\n}\r\n​\r\n​var actionCelebs = [{name:\"Stallone\", id:0}, {name:\"Cruise\", id:0}, {name:\"Willis\", id:0}];\r\n​\r\n​var createIdForActionCelebs = celebrityIDCreator (actionCelebs);\r\n​\r\n​var stalloneID = createIdForActionCelebs [0];      console.log(stalloneID.id()); // 103</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<hr>\n\n<h2>More can be found here-</h2>\n\n<ol>\n<li><p><a href=\"http://javascript.info/tutorial/closures\">http://javascript.info/tutorial/closures</a></p></li>\n<li><p><a href=\"http://www.javascriptkit.com/javatutors/closures.shtml\">http://www.javascriptkit.com/javatutors/closures.shtml</a></p></li>\n</ol>\n"},{"score":20,"body":"<p>Version picture for this answer: <strong>[Resolved]</strong></p>\n\n<p>Just forget about scope every thing and remember: When a variable needed somewhere, javascript will not destroy it. The variable always point to newest value.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/ckxN9.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/ckxN9.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Example 2:</strong></p>\n\n<p><a href=\"https://i.stack.imgur.com/dAmCA.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/dAmCA.png\" alt=\"enter image description here\"></a></p>\n\n<p><strong>Example 3:</strong>\n<a href=\"https://i.stack.imgur.com/HRXgp.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/HRXgp.png\" alt=\"enter image description here\"></a></p>\n"},{"score":8,"body":"<p>Closure are not difficult to understand. It depends only from the point of view.</p>\n\n<p>I personally like to use them in cases of daily life.</p>\n\n<pre><code>function createCar()\n{\n    var rawMaterial = [/* lots of object */];\n    function transformation(rawMaterials)\n    {\n       /* lots of changement here */\n       return transformedMaterial;\n    }\n    var transformedMaterial = transformation(rawMaterial);\n    function assemblage(transformedMaterial)\n    {\n        /*Assemblage of parts*/\n        return car;\n    }\n    return assemblage(transformedMaterial);\n}\n</code></pre>\n\n<p>We only need to go through certain steps in particular cases. As for the transformation of materials is only useful when you have the parts.</p>\n"},{"score":12,"body":"<p><strong>Closures</strong> are a somewhat advanced, and often misunderstood feature of the JavaScript language. Simply put, closures are objects that contain a function and a reference to the environment in which the function was created. However, in order to fully understand closures, there are two other features of the JavaScript language that must first be understood―first-class functions and inner functions.</p>\n\n<p><strong>First-Class Functions</strong></p>\n\n<p>In programming languages, functions are considered to be first-class citizens if they can be manipulated like any other data type. For example, first-class functions can be constructed at runtime and assigned to variables.  They can also be passed to, and returned by other functions. In addition to meeting the previously mentioned criteria, JavaScript functions also have their own properties and methods. The following example shows some of the capabilities of first-class functions. In the example, two functions are created and assigned to the variables “foo” and “bar”. The function stored in “foo” displays a dialog box, while “bar” simply returns whatever argument is passed to it. The last line of the example does several things. First, the function stored in “bar” is called with “foo” as its argument. “bar” then returns the “foo” function reference. Finally, the returned “foo” reference is called, causing “Hello World!” to be displayed.</p>\n\n<pre><code>var foo = function() {\n  alert(\"Hello World!\");\n};\n\nvar bar = function(arg) {\n  return arg;\n};\n\nbar(foo)();\n</code></pre>\n\n<p><strong>Inner Functions</strong></p>\n\n<p>Inner functions, also referred to as nested functions, are functions that are defined inside of another function (referred to as the outer function). Each time the outer function is called, an instance of the inner function is created. The following example shows how inner functions are used. In this case, add() is the outer function. Inside of add(), the doAdd() inner function is defined and called.</p>\n\n<pre><code>function add(value1, value2) {\n  function doAdd(operand1, operand2) {\n    return operand1 + operand2;\n  }\n\n  return doAdd(value1, value2);\n}\n\nvar foo = add(1, 2);\n// foo equals 3\n</code></pre>\n\n<p>One important characteristic of inner functions is that they have implicit access to the outer function’s scope. This means that the inner function can use the variables, arguments, etc. of the outer function. In the previous example, the “<em>value1</em>” and “<em>value2</em>” arguments of add() were passed to <em>doAdd()</em> as the “<em>operand1</em>” and “operand2” arguments. However, this is unnecessary because <em>doAdd()</em> has direct access to “<em>value1</em>” and “<em>value2</em>”. The previous example has been rewritten below to show how <em>doAdd()</em> can use “<em>value1</em>” and “<em>value2</em>”.</p>\n\n<pre><code>function add(value1, value2) {\n  function doAdd() {\n    return value1 + value2;\n  }\n\n  return doAdd();\n}\n\nvar foo = add(1, 2);\n// foo equals 3\n</code></pre>\n\n<blockquote>\n  <p><strong>Creating Closures</strong></p>\n  \n  <p>A closure is created when an inner function is made accessible from\n  outside of the function that created it. This typically occurs when an\n  outer function returns an inner function.  When this happens, the\n  inner function maintains a reference to the environment in which it\n  was created.  This means that it remembers all of the variables (and\n  their values) that were in scope at the time. The following example\n  shows how a closure is created and used.</p>\n</blockquote>\n\n<pre><code>function add(value1) {\n  return function doAdd(value2) {\n    return value1 + value2;\n  };\n}\n\nvar increment = add(1);\nvar foo = increment(2);\n// foo equals 3\n</code></pre>\n\n<p>There are a number of things to note about this example.</p>\n\n<p>The add() function returns its inner function doAdd(). By returning a reference to an inner function, a closure is created.\n“value1” is a local variable of add(), and a non-local variable of doAdd(). Non-local variables refer to variables that are neither in the local nor the global scope.  “value2” is a local variable of doAdd().\nWhen add(1) is called, a closure is created and stored in “increment”. In the closure’s referencing environment, “value1” is bound to the value one.  Variables that are bound are also said to be closed over. This is where the name closure comes from.\nWhen increment(2) is called, the closure is entered. This means that doAdd() is called, with the “value1” variable holding the value one. The closure can essentially be thought of as creating the following function.</p>\n\n<pre><code>function increment(value2) {\n  return 1 + value2;\n}\n</code></pre>\n\n<blockquote>\n  <p><strong>When to Use Closures</strong></p>\n  \n  <p>Closures can be used to accomplish many things. They are very useful\n  for things like configuring callback functions with parameters. This\n  section covers two scenarios where closures can make your life as a\n  developer much simpler.</p>\n</blockquote>\n\n<p><strong>Working With Timers</strong></p>\n\n<p>Closures are useful when used in conjunction with the <em>setTimeout()</em> and <em>setInterval()</em> functions. To be more specific, closures allow you to pass arguments to the callback functions of <em>setTimeout()</em> and <em>setInterval()</em>. For example, the following code prints the string “some message” once per second by calling <em>showMessage()</em>.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Closures&lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;script&gt;\n    window.addEventListener(\"load\", function() {\n      window.setInterval(showMessage, 1000, \"some message&lt;br /&gt;\");\n    });\n\n    function showMessage(message) {\n      document.getElementById(\"message\").innerHTML += message;\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;span id=\"message\"&gt;&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Unfortunately, Internet Explorer does not support passing callback arguments via setInterval(). Instead of displaying “some message”, Internet Explorer displays “undefined” (since no value is actually passed to showMessage()). To work around this issue, a closure can be created which binds the “message” argument to the desired value. The closure can then be used as the callback function for setInterval(). To illustrate this concept, the JavaScript code from the previous example has been rewritten below to use a closure.</p>\n\n<pre><code>window.addEventListener(\"load\", function() {\n  var showMessage = getClosure(\"some message&lt;br /&gt;\");\n\n  window.setInterval(showMessage, 1000);\n});\n\nfunction getClosure(message) {\n  function showMessage() {\n    document.getElementById(\"message\").innerHTML += message;\n  }\n\n  return showMessage;\n}\n</code></pre>\n\n<p><strong>Emulating Private Data</strong></p>\n\n<p>Many object-oriented languages support the concept of private member data. However, JavaScript is not a pure object-oriented language and does not support private data. But, it is possible to emulate private data using closures. Recall that a closure contains a reference to the environment in which it was originally created―which is now out of scope. Since the variables in the referencing environment are only accessible from the closure function, they are essentially private data.</p>\n\n<p>The following example shows a constructor for a simple Person class. When each Person is created, it is given a name via the “<em>name</em>” argument.  Internally, the Person stores its name in the “<em>_name</em>” variable. Following good object-oriented programming practices, the method <em>getName()</em> is also provided for retrieving the name.</p>\n\n<pre><code>function Person(name) {\n  this._name = name;\n\n  this.getName = function() {\n    return this._name;\n  };\n}\n</code></pre>\n\n<p>There is still one major problem with the Person class. Because JavaScript does not support private data, there is nothing stopping somebody else from coming along and changing the name. For example, the following code creates a Person named Colin, and then changes its name to Tom.</p>\n\n<pre><code>var person = new Person(\"Colin\");\n\nperson._name = \"Tom\";\n// person.getName() now returns \"Tom\"\n</code></pre>\n\n<p>Personally, I wouldn’t like it if just anyone could come along and legally change my name. In order to stop this from happening, a closure can be used to make the “_name” variable private. The Person constructor has been rewritten below using a closure. Note that “_name” is now a local variable of the Person constructor instead of an object property. A closure is formed because the outer function, <em>Person()</em> exposes an inner function by creating the public <em>getName()</em> method.</p>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n}\n</code></pre>\n\n<p>Now, when getName() is called, it is guaranteed to return the value that was originally passed to the constructor. It is still possible for someone to add a new “_name” property to the object, but the internal workings of the object will not be affected as long as they refer to the variable bound by the closure.  The following code shows that the “_name” variable is, indeed, private.</p>\n\n<pre><code>var person = new Person(\"Colin\");\n\nperson._name = \"Tom\";\n// person._name is \"Tom\" but person.getName() returns \"Colin\"\n</code></pre>\n\n<blockquote>\n  <p><strong>When Not to Use Closures</strong></p>\n  \n  <p>It is important to understand how closures work and when to use them.\n  It is equally important to understand when they are not the right tool\n  for the job at hand. Overusing closures can cause scripts to execute\n  slowly and consume unnecessary memory. And because closures are so\n  simple to create, it is possible to misuse them without even knowing\n  it.  This section covers several scenarios where closures should be\n  used with caution.</p>\n</blockquote>\n\n<p><strong>In Loops</strong></p>\n\n<p>Creating closures within loops can have misleading results. An example of this is shown below. In this example, three buttons are created. When “button1” is clicked, an alert should be displayed that says “Clicked button 1”.  Similar messages should be shown for “button2” and “button3”.  However, when this code is run, all of the buttons show “Clicked button 4”. This is because, by the time one of the buttons is clicked, the loop has finished executing, and the loop variable has reached its final value of four.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;title&gt;Closures&lt;/title&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;script&gt;\n    window.addEventListener(\"load\", function() {\n      for (var i = 1; i &lt; 4; i++) {\n        var button = document.getElementById(\"button\" + i);\n\n        button.addEventListener(\"click\", function() {\n          alert(\"Clicked button \" + i);\n        });\n      }\n    });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;input type=\"button\" id=\"button1\" value=\"One\" /&gt;\n  &lt;input type=\"button\" id=\"button2\" value=\"Two\" /&gt;\n  &lt;input type=\"button\" id=\"button3\" value=\"Three\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>To solve this problem, the closure must be decoupled from the actual loop variable. This can be done by calling a new function, which in turn creates a new referencing environment. The following example shows how this is done. The loop variable is passed to the getHandler() function. getHandler() then returns a closure that is independent of the original “for” loop.</p>\n\n<pre><code>function getHandler(i) {\n  return function handler() {\n    alert(\"Clicked button \" + i);\n  };\n}\nwindow.addEventListener(\"load\", function() {\n  for (var i = 1; i &lt; 4; i++) {\n    var button = document.getElementById(\"button\" + i);\n    button.addEventListener(\"click\", getHandler(i));\n  }\n});\n</code></pre>\n\n<blockquote>\n  <p><strong>Unnecessary Use in Constructors</strong></p>\n  \n  <p>Constructor functions are another common source of closure misuse.\n  We’ve seen how closures can be used to emulate private data. However,\n  it is overkill to implement methods as closures if they don’t actually\n  access the private data. The following example revisits the Person\n  class, but this time adds a sayHello() method which doesn’t use the\n  private data.</p>\n</blockquote>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n\n  this.sayHello = function() {\n    alert(\"Hello!\");\n  };\n}\n</code></pre>\n\n<blockquote>\n  <p>Each time a Person is instantiated, time is spent creating the\n  sayHello() method. If many Person objects are created, this becomes a\n  waste of time.  A better approach would be to add sayHello() to the\n  Person prototype. By adding to the prototype, all Person objects can\n  share the same method.  This saves time in the constructor by not\n  having to create a closure for each instance. The previous example is\n  rewritten below with the extraneous closure moved into the prototype.</p>\n</blockquote>\n\n<pre><code>function Person(name) {\n  var _name = name;\n\n  this.getName = function() {\n    return _name;\n  };\n}\n\nPerson.prototype.sayHello = function() {\n  alert(\"Hello!\");\n};\n</code></pre>\n\n<p><strong>Things to Remember</strong></p>\n\n<ul>\n<li>Closures contain a function and a reference to the environment in\nwhich the function was created.</li>\n<li>A closure is formed when an outer function exposes an inner function.\nClosures can be used to easily pass parameters to callback functions.</li>\n<li>Private data can be emulated by using closures.  This is common in\nobject-oriented programming and namespace design.</li>\n<li>Closures should be not overused in constructors.  Adding to the\nprototype is a better idea.</li>\n</ul>\n\n<p><a href=\"https://www.sitepoint.com/javascript-closures-demystified/\">Link</a></p>\n"},{"score":7,"body":"<p>My perspective of Closures:</p>\n\n<p><strong><em>Closures can be compared to a book, with a bookmark, on a bookshelf.</em></strong></p>\n\n<p>Suppose you have read a book, and you like some page in the book.  You put in a bookmark at that page to track it.</p>\n\n<p>Now once you finish reading the book, you do not need the book anymore, except, you want to have access to that page.  You could have just cut out the page, but then you would loose the context on the story.  So you put the book back in your bookshelf with the bookmark.</p>\n\n<p>This is similar to a closure.  The book is the outer function, and the page is your inner function, which gets returned, from the outer function.  The bookmark is the reference to your page, and the context of the story is the lexical scope, which you need to retain.  The bookshelf is the function stack, which cannot be cleaned up of the old books, till you hold onto the page.</p>\n\n<p><strong><em>Code Example:</em></strong></p>\n\n<pre><code>function book() {\n   var pages = [....]; //array of pages in your book\n   var bookMarkedPage = 20; //bookmarked page number\n   function getPage(){\n       return pages[bookMarkedPage];\n   }\n   return getPage;\n}\n\nvar myBook = book(),\n    myPage = myBook.getPage();\n</code></pre>\n\n<p>When you run the <code>book()</code> function, you are allocating memory in the stack for the function to run in.  But since it returns a function, the memory cannot be released, as the inner function has access to the variables from the context outside it, in this case 'pages' and 'bookMarkedPage'.</p>\n\n<p>So effectively calling <code>book()</code> returns a reference to a closure, i.e not only a function, but a reference to the book and it's context, i.e. a reference to the function <em>getPage</em>, state of <em>pages</em> and <em>bookMarkedPage</em> variables.</p>\n\n<p><strong><em>Some points to consider:</em></strong></p>\n\n<p><strong>Point 1:</strong>\nThe bookshelf, just like the function stack has limited space, so use it wisely.</p>\n\n<p><strong>Point 2:</strong>\nThink about the fact, whether you need to hold onto the entire book when you just want to track a single page.  You can release part of the memory, by not storing all the pages in the book when the closure is returned.</p>\n\n<p><em>This is my perspective of Closures.  Hope it helps, and if anyone thinks that this is not correct, please do let me know, as I am very interested to understand even more about scopes and closures!</em>  </p>\n"},{"score":3,"body":"<p>A closure is simply when a function have access to its outside scope even after the scope's function has finished executing. \nExample: </p>\n\n<pre><code>function multiplier(n) {\n    function multiply(x) {\n          return n*x;\n    }\n    return mutliply;\n}\n\nvar 10xmultiplier = multiplier(10);\nvar x = 10xmultiplier(5); // x= 50\n</code></pre>\n\n<p>we can see that even after multiplier has finished executing, the inner function multiply gets still access to the value of x which is 10 in this example.</p>\n\n<p>A very common use of closures is currying (the same example above) where we spice our function progressively with parameters instead of supplying all of the arguments at once.</p>\n\n<p>We can achieve this because Javascript (in addition to the prototypal OOP) allows as to program in a functional fashion where higher order functions can take other functions as arguments (fisrt class functions).\n<a href=\"https://www.google.ae/url?sa=t&amp;source=web&amp;rct=j&amp;url=https://en.m.wikipedia.org/wiki/Functional_programming&amp;ved=0ahUKEwjaqeyM5enSAhUF7BQKHYyCBCUQFggZMAA&amp;usg=AFQjCNHcEMds9EmEfJfjtHIvLZhAivGFFQ&amp;sig2=rXB-1kc0AEVYLNy4fhGSmw\" rel=\"nofollow noreferrer\">functional programming in wikipedia</a></p>\n\n<p>I highly recommend you to read this book by Kyle Simpson: <a href=\"https://github.com/getify/You-Dont-Know-JS\" rel=\"nofollow noreferrer\">2</a> one part of the book series is dedicated to closures and it is called scope and closures.\n<a href=\"https://github.com/getify/You-Dont-Know-JS\" rel=\"nofollow noreferrer\">you don't know js: free reading on github</a></p>\n"},{"score":7,"body":"<p>Let's start from here, As defined on MDN: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"noreferrer\"><strong>Closures</strong></a> are functions that refer to independent (free) variables (variables that are used locally, but defined in an enclosing scope). In other words, these functions 'remember' the environment in which they were created.</p>\n\n<p><strong>Lexical scoping</strong><br>\nConsider the following:</p>\n\n<pre><code>function init() {\n  var name = 'Mozilla'; // name is a local variable created by init\n  function displayName() { // displayName() is the inner function, a closure\n    alert(name); // use variable declared in the parent function    \n  }\n  displayName();    \n}\ninit();\n</code></pre>\n\n<p>init() creates a local variable called name and a function called displayName(). The displayName() function is an inner function that is defined inside init() and is only available within the body of the  init() function. The displayName() function has no local variables of its own. However, because inner functions have access to the variables of outer functions, displayName() can access the variable name declared in the parent function, init().</p>\n\n<pre><code>function init() {\n    var name = \"Mozilla\"; // name is a local variable created by init\n    function displayName() { // displayName() is the inner function, a closure\n        alert (name); // displayName() uses variable declared in the parent function    \n    }\n    displayName();    \n}\ninit();\n</code></pre>\n\n<p>Run the code and notice that the alert() statement within the displayName() function successfully displays the value of the name variable, which is declared in its parent function. This is an example of lexical scoping, which describes how a parser resolves variable names when functions are nested. The word \"lexical\" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.</p>\n\n<p><strong>Closure</strong><br>\nNow consider the following example:</p>\n\n<pre><code>function makeFunc() {\n  var name = 'Mozilla';\n  function displayName() {\n    alert(name);\n  }\n  return displayName;\n}\n\nvar myFunc = makeFunc();\nmyFunc();\n</code></pre>\n\n<p>Running this code has exactly the same effect as the previous example of the init() function above: this time, the string \"Mozilla\" will be displayed in a JavaScript alert box. What's different — and interesting — is that the displayName() inner function is returned from the outer function before being executed.</p>\n\n<p>At first glance, it may seem unintuitive that this code still works. In some programming languages, the local variables within a function exist only for the duration of that function's execution. Once makeFunc() has finished executing, you might expect that the name variable would no longer be accessible. However, because the code still works as expected, this is obviously not the case in JavaScript.</p>\n\n<p>The reason is that functions in JavaScript form closures. A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time that the closure was created. In this case, myFunc is a reference to the instance of the function displayName created when makeFunc is run. The instance of displayName maintains a reference to its lexical environment, within which the variable name exists. For this reason, when myFunc is invoked, the variable name remains available for use and \"Mozilla\" is passed to alert.</p>\n\n<p>Here's a slightly more interesting example — a makeAdder function:</p>\n\n<pre><code>function makeAdder(x) {\n  return function(y) {\n    return x + y;\n  };\n}\n\nvar add5 = makeAdder(5);\nvar add10 = makeAdder(10);\n\nconsole.log(add5(2));  // 7\nconsole.log(add10(2)); // 12\n</code></pre>\n\n<p>In this example, we have defined a function makeAdder(x), which takes a single argument, x, and returns a new function. The function it returns takes a single argument, y, and returns the sum of x and y.</p>\n\n<p>In essence, makeAdder is a function factory — it creates functions which can add a specific value to their argument. In the above example we use our function factory to create two new functions — one that adds 5 to its argument, and one that adds 10.</p>\n\n<p>add5 and add10 are both closures. They share the same function body definition, but store different lexical environments. In add5's lexical environment, x is 5, while in the lexical environment for add10, x is 10.</p>\n\n<p><strong>Practical closures</strong></p>\n\n<p>Closures are useful because they let you associate some data (the lexical environment) with a function that operates on that data. This has obvious parallels to object oriented programming, where objects allow us to associate some data (the object's properties) with one or more methods.</p>\n\n<p>Consequently, you can use a closure anywhere that you might normally use an object with only a single method.</p>\n\n<p>Situations where you might want to do this are particularly common on the web. Much of the code we write in front-end JavaScript is event-based — we define some behavior, then attach it to an event that is triggered by the user (such as a click or a keypress). Our code is generally attached as a callback: a single function which is executed in response to the event.</p>\n\n<p>For instance, suppose we wish to add some buttons to a page that adjust the text size. One way of doing this is to specify the font-size of the body element in pixels, then set the size of the other elements on the page (such as headers) using the relative em unit:</p>\n\n<pre><code>body {\n  font-family: Helvetica, Arial, sans-serif;\n  font-size: 12px;\n}\n\nh1 {\n  font-size: 1.5em;\n}\n\nh2 {\n  font-size: 1.2em;\n}\n</code></pre>\n\n<p>Our interactive text size buttons can change the font-size property of the body element, and the adjustments will be picked up by other elements on the page thanks to the relative units.\nHere's the JavaScript:</p>\n\n<pre><code>function makeSizer(size) {\n  return function() {\n    document.body.style.fontSize = size + 'px';\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n</code></pre>\n\n<p>size12, size14, and size16 are now functions which will resize the body text to 12, 14, and 16 pixels, respectively. We can attach them to buttons (in this case links) as follows:</p>\n\n<pre><code>document.getElementById('size-12').onclick = size12;\ndocument.getElementById('size-14').onclick = size14;\ndocument.getElementById('size-16').onclick = size16;\n\n&lt;a href=\"#\" id=\"size-12\"&gt;12&lt;/a&gt;\n&lt;a href=\"#\" id=\"size-14\"&gt;14&lt;/a&gt;\n&lt;a href=\"#\" id=\"size-16\"&gt;16&lt;/a&gt;\n\n\nfunction makeSizer(size) {\n  return function() {\n    document.body.style.fontSize = size + 'px';\n  };\n}\n\nvar size12 = makeSizer(12);\nvar size14 = makeSizer(14);\nvar size16 = makeSizer(16);\n\ndocument.getElementById('size-12').onclick = size12;\ndocument.getElementById('size-14').onclick = size14;\ndocument.getElementById('size-16').onclick = size16;\n</code></pre>\n\n<p>for reading more about closures, visit the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" rel=\"noreferrer\">link on MDN</a></p>\n"},{"score":20,"body":"<p>This answer is a summary of this youtube video <a href=\"https://www.youtube.com/watch?v=FYrtnS3X_Lw\" rel=\"noreferrer\">Javascript Closures</a>. So full credits to that video.</p>\n\n<p><em>Closures are nothing but Stateful functions which maintain states of their private variables.</em> </p>\n\n<p>Normally when you make a call to a function as shown in the below figure. The variables are created on a stack ( running RAM memory) used and then disallocated.</p>\n\n<p><a href=\"https://i.stack.imgur.com/QVZg5.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/QVZg5.png\" alt=\"enter image description here\"></a></p>\n\n<p>But now there are situations where we want to maintain this state of the function thats where Javascript closures comes to use. A closure is a function inside function with a return call as shown in the below code.</p>\n\n<p><a href=\"https://i.stack.imgur.com/u8UIi.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/u8UIi.png\" alt=\"enter image description here\"></a></p>\n\n<p>So the closure code for the counter function above looks something as shown below.Its a function inside function with a return statement.</p>\n\n<pre><code>function Counter() {\n           var counter = 0;\n\n           var Increment = function () {\n               counter++;\n               alert(counter);\n           }\n           return {\n               Increment\n           }\n       }\n</code></pre>\n\n<p>So now if you make a call the counter will increment in other words the function call maintains states.</p>\n\n<pre><code>var x = Counter(); // get the reference of the closure\nx.Increment(); // Displays 1\nx.Increment(); // Display 2 ( Maintains the private variables)\n</code></pre>\n\n<p>But now the biggest question whats the use of such stateful function. Stateful functions are building blocks to implement OOP concept like abstraction ,encapsulation and creating self contained modules.</p>\n\n<p>So whatever you want encapsulated you can put it as private and things to be exposed to public should be put in return statement. Also these components are self contained isolated objects so they do not pollute global variables.</p>\n\n<p>A object which follows OOP principles is self contained , follows abstraction , follows encapsulation and so. With out closures in Javascript this is difficult to implement.</p>\n\n<p><a href=\"https://i.stack.imgur.com/tJ5Mm.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/tJ5Mm.png\" alt=\"enter image description here\"></a></p>\n"},{"score":34,"body":"<blockquote>\n  <p>A closure is a function having access to the parent scope, even after the parent function has closed.</p>\n</blockquote>\n\n<p>So basically a closure is a function of another function. We can say like a child function.</p>\n\n<blockquote>\n  <p>A closure is an inner function that has access to the outer\n  (enclosing) function’s variables—scope chain. The closure has three\n  scope chains: it has access to its own scope (variables defined\n  between its curly brackets), it has access to the outer function’s\n  variables, and it has access to the global variables.</p>\n  \n  <p>The inner function has access not only to the outer function’s\n  variables but also to the outer function’s parameters. Note that the\n  inner function cannot call the outer function’s arguments object,\n  however, even though it can call the outer function’s parameters\n  directly.</p>\n  \n  <p>You create a closure by adding a function inside another function.</p>\n</blockquote>\n\n<p>Also, it's very useful method which is used in many famous frameworks including <code>Angular</code>, <code>Node.js</code> and <code>jQuery</code>:</p>\n\n<blockquote>\n  <p>Closures are used extensively in Node.js; they are workhorses in\n  Node.js’ asynchronous, non-blocking architecture. Closures are also\n  frequently used in jQuery and just about every piece of JavaScript\n  code you read.</p>\n</blockquote>\n\n<p>But how the closures look like in a real-life coding?\nLook at this simple sample code:</p>\n\n<pre><code>function showName(firstName, lastName) {\n      var nameIntro = \"Your name is \";\n      // this inner function has access to the outer function's variables, including the parameter\n      function makeFullName() {\n          return nameIntro + firstName + \" \" + lastName;\n      }\n      return makeFullName();\n  }\n\n  console.log(showName(\"Michael\", \"Jackson\")); // Your name is Michael Jackson\n</code></pre>\n\n<p>Also, this is classic closure way in jQuery which every javascript and jQuery developers used it a lot:</p>\n\n<pre><code>$(function() {\n    var selections = [];\n    $(\".niners\").click(function() { // this closure has access to the selections variable\n        selections.push(this.prop(\"name\")); // update the selections variable in the outer function's scope\n    });\n});\n</code></pre>\n\n<p>But why we use closures? when we use it in an actual programming?\nwhat are the practical use of closures? the below is a good explanation and example by MDN:</p>\n\n<p><strong>Practical closures</strong></p>\n\n<blockquote>\n  <p>Closures are useful because they let you associate some data (the\n  lexical environment) with a function that operates on that data. This\n  has obvious parallels to object oriented programming, where objects\n  allow us to associate some data (the object's properties) with one or\n  more methods.</p>\n  \n  <p>Consequently, you can use a closure anywhere that you might normally\n  use an object with only a single method.</p>\n  \n  <p>Situations where you might want to do this are particularly common on\n  the web. Much of the code we write in front-end JavaScript is\n  event-based — we define some behavior, then attach it to an event that\n  is triggered by the user (such as a click or a keypress). Our code is\n  generally attached as a callback: a single function which is executed\n  in response to the event.</p>\n  \n  <p>For instance, suppose we wish to add some buttons to a page that\n  adjust the text size. One way of doing this is to specify the\n  font-size of the body element in pixels, then set the size of the\n  other elements on the page (such as headers) using the relative em\n  unit:</p>\n</blockquote>\n\n<p>Read the code below and run the code to see how closure help us here to easily make separate functions for each sections:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>//javascript\r\nfunction makeSizer(size) {\r\n  return function() {\r\n    document.body.style.fontSize = size + 'px';\r\n  };\r\n}\r\n\r\nvar size12 = makeSizer(12);\r\nvar size14 = makeSizer(14);\r\nvar size16 = makeSizer(16);\r\n\r\ndocument.getElementById('size-12').onclick = size12;\r\ndocument.getElementById('size-14').onclick = size14;\r\ndocument.getElementById('size-16').onclick = size16;</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/*css*/\r\nbody {\r\n  font-family: Helvetica, Arial, sans-serif;\r\n  font-size: 12px;\r\n}\r\n\r\nh1 {\r\n  font-size: 1.5em;\r\n}\r\n\r\nh2 {\r\n  font-size: 1.2em;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!--html&gt;&lt;!--&gt;\r\n&lt;p&gt;Some paragraph text&lt;/p&gt;\r\n&lt;h1&gt;some heading 1 text&lt;/h1&gt;\r\n&lt;h2&gt;some heading 2 text&lt;/h2&gt;\r\n\r\n&lt;a href=\"#\" id=\"size-12\"&gt;12&lt;/a&gt;\r\n&lt;a href=\"#\" id=\"size-14\"&gt;14&lt;/a&gt;\r\n&lt;a href=\"#\" id=\"size-16\"&gt;16&lt;/a&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>For further study about closures, I recommend you to visit this page by MDN:\n<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Closures\" rel=\"noreferrer\">https://developer.mozilla.org/en/docs/Web/JavaScript/Closures</a></p>\n"}],"score":7633}