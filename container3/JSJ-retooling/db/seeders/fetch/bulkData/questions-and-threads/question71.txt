{"body":"<p>I have this <code>input</code> element:</p>\n\n<pre><code>&lt;input type=\"text\" class=\"textfield\" value=\"\" id=\"subject\" name=\"subject\"&gt;\n</code></pre>\n\n<p>Then I have some other elements, like other text inputs, textareas, etc.</p>\n\n<p>When the user clicks on that <code>input</code> with <code>#subject</code>, the page should scroll to the last element of the page with a nice animation. It should be a scroll to bottom and not to top.</p>\n\n<p>The last item of the page is a <code>submit</code> button with <code>#submit</code>:</p>\n\n<pre><code>&lt;input type=\"submit\" class=\"submit\" id=\"submit\" name=\"submit\" value=\"Ok, Done.\"&gt;\n</code></pre>\n\n<p>The animation should not be too fast and should be fluid.</p>\n\n<p>I am running the latest jQuery version. I prefer to not install any plugin but to use the default jQuery features to achieve this.</p>\n","title":"jQuery scroll to element","answers":[{"score":4140,"body":"<p>Assuming you have a button with the id <code>button</code>, try this example:</p>\n\n<pre><code>$(\"#button\").click(function() {\n    $([document.documentElement, document.body]).animate({\n        scrollTop: $(\"#elementtoScrollToID\").offset().top\n    }, 2000);\n});\n</code></pre>\n\n<p>I got the code from the article <em><a href=\"http://www.abeautifulsite.net/smoothly-scroll-to-an-element-without-a-jquery-plugin-2/\" rel=\"noreferrer\">Smoothly scroll to an element without a jQuery plugin</a></em>. And I have tested it on the example below.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"false\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;html&gt;\r\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n    &lt;script&gt;\r\n        $(document).ready(function (){\r\n            $(\"#click\").click(function (){\r\n                $('html, body').animate({\r\n                    scrollTop: $(\"#div1\").offset().top\r\n                }, 2000);\r\n            });\r\n        });\r\n    &lt;/script&gt;\r\n    &lt;div id=\"div1\" style=\"height: 1000px; width 100px\"&gt;\r\n        Test\r\n    &lt;/div&gt;\r\n    &lt;br/&gt;\r\n    &lt;div id=\"div2\" style=\"height: 1000px; width 100px\"&gt;\r\n        Test 2\r\n    &lt;/div&gt;\r\n    &lt;button id=\"click\"&gt;Click me&lt;/button&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":540,"body":"<p><a href=\"http://demos.flesler.com/jquery/scrollTo/\" rel=\"noreferrer\"> <img src=\"https://i.stack.imgur.com/g55iQ.png\" alt=\"jQuery .scrollTo() Method\"> </a></p>\n\n<p><strong>jQuery .scrollTo(): <a href=\"http://demos.flesler.com/jquery/scrollTo/\" rel=\"noreferrer\"> View - Demo, API, Source </a></strong></p>\n\n<p>I wrote this lightweight plugin to make page/element scrolling much easier. It's flexible where you could pass in a target element or specified value. Perhaps this could be part of jQuery's next official release, what do you think?</p>\n\n<hr>\n\n<p><strong>Examples Usage:</strong></p>\n\n<pre><code>$('body').scrollTo('#target'); // Scroll screen to target element\n\n$('body').scrollTo(500); // Scroll screen 500 pixels down\n\n$('#scrollable').scrollTo(100); // Scroll individual element 100 pixels down\n</code></pre>\n\n<hr>\n\n<p><strong>Options:</strong></p>\n\n<p><em>scrollTarget</em>: A element, string, or number which indicates desired scroll position.</p>\n\n<p><em>offsetTop</em>: A number that defines additional spacing above scroll target.</p>\n\n<p><em>duration</em>: A string or number determining how long the animation will run.</p>\n\n<p><em>easing</em>: A string indicating which easing function to use for the transition.</p>\n\n<p><em>complete</em>: A function to call once the animation is complete.</p>\n"},{"score":55,"body":"<p>Using this simple script</p>\n\n<pre><code>if($(window.location.hash).length &gt; 0){\n        $('html, body').animate({ scrollTop: $(window.location.hash).offset().top}, 1000);\n}\n</code></pre>\n\n<p>Would make in sort that if a hash tag is found in the url, the scrollTo animate to the ID. If not hash tag found, then ignore the script.</p>\n"},{"score":395,"body":"<p>If you are not much interested in the smooth scroll effect and just interested in scrolling to a particular element, you don't require some jQuery function for this. Javascript has got your case covered:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView\">https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView</a></p>\n\n<p>So all you need to do is: <code>$(\"selector\").get(0).scrollIntoView();</code>  </p>\n\n<p><code>.get(0)</code> is used because we want to retrieve the JavaScript's DOM element and not the JQuery's DOM element.</p>\n"},{"score":33,"body":"<p>The solution by Steve and Peter works very well.</p>\n\n<p>But in some cases, you may have to convert the value to an integer. Strangely, the returned value from <code>$(\"...\").offset().top</code> is sometimes in <code>float</code>.<br>\nUse: <code>parseInt($(\"....\").offset().top)</code></p>\n\n<p>For example:</p>\n\n<pre><code>$(\"#button\").click(function() {\n    $('html, body').animate({\n        scrollTop: parseInt($(\"#elementtoScrollToID\").offset().top)\n    }, 2000);\n});\n</code></pre>\n"},{"score":3,"body":"<pre><code>$('html, body').animate({scrollTop: \n  Math.min( \n    $(to).offset().top-margintop, //margintop is the margin above the target\n    $('body')[0].scrollHeight-$('body').height()) //if the target is at the bottom\n}, 2000);\n</code></pre>\n"},{"score":2,"body":"<p>To show the full element (if it's possible with the current window size):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var element       = $(\"#some_element\");\nvar elementHeight = element.height();\nvar windowHeight  = $(window).height();\n\nvar offset = Math.min(elementHeight, windowHeight) + element.offset().top;\n$('html, body').animate({ scrollTop: offset }, 500);\n</code></pre>\n"},{"score":38,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>jQuery(document).ready(function($) {\r\n  $('a[href^=\"#\"]').bind('click.smoothscroll',function (e) {\r\n    e.preventDefault();\r\n    var target = this.hash,\r\n        $target = $(target);\r\n\r\n    $('html, body').stop().animate( {\r\n      'scrollTop': $target.offset().top-40\r\n    }, 900, 'swing', function () {\r\n      window.location.hash = target;\r\n    } );\r\n  } );\r\n} );</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;ul role=\"tablist\"&gt;\r\n  &lt;li class=\"active\" id=\"p1\"&gt;&lt;a href=\"#pane1\" role=\"tab\"&gt;Section 1&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li id=\"p2\"&gt;&lt;a href=\"#pane2\" role=\"tab\"&gt;Section 2&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li id=\"p3\"&gt;&lt;a href=\"#pane3\" role=\"tab\"&gt;Section 3&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;div id=\"pane1\"&gt;&lt;/div&gt;\r\n&lt;div id=\"pane2\"&gt;&lt;/div&gt;\r\n&lt;div id=\"pane3\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":22,"body":"<p>A compact version of \"animate\" solution.</p>\n\n<pre><code>$.fn.scrollTo = function (speed) {\n    if (typeof(speed) === 'undefined')\n        speed = 1000;\n\n    $('html, body').animate({\n        scrollTop: parseInt($(this).offset().top)\n    }, speed);\n};\n</code></pre>\n\n<p>Basic usage: <code>$('#your_element').scrollTo();</code></p>\n"},{"score":18,"body":"<p>If you are only handling scrolling to an input element, you can use <code>focus()</code>.  For example, if you wanted to scroll to the first visible input:</p>\n\n<pre><code>$(':input:visible').first().focus();\n</code></pre>\n\n<p>Or the first visible input in an container with class <code>.error</code>:</p>\n\n<pre><code>$('.error :input:visible').first().focus();\n</code></pre>\n\n<p>Thanks to <a href=\"https://stackoverflow.com/users/832777\">Tricia Ball</a> for pointing this out!</p>\n"},{"score":6,"body":"<p>This is my approach abstracting the ID's and href's, using a generic class selector</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(function() {\r\n  // Generic selector to be used anywhere\r\n  $(\".js-scroll-to\").click(function(e) {\r\n\r\n    // Get the href dynamically\r\n    var destination = $(this).attr('href');\r\n\r\n    // Prevent href=“#” link from changing the URL hash (optional)\r\n    e.preventDefault();\r\n\r\n    // Animate scroll to destination\r\n    $('html, body').animate({\r\n      scrollTop: $(destination).offset().top\r\n    }, 500);\r\n  });\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;!-- example of a fixed nav menu --&gt;\r\n&lt;ul class=\"nav\"&gt;\r\n  &lt;li&gt;\r\n    &lt;a href=\"#section-1\" class=\"nav-item js-scroll-to\"&gt;Item 1&lt;/a&gt;\r\n  &lt;/li&gt;\r\n  &lt;li&gt;\r\n    &lt;a href=\"#section-2\" class=\"nav-item js-scroll-to\"&gt;Item 2&lt;/a&gt;\r\n  &lt;/li&gt;\r\n  &lt;li&gt;\r\n    &lt;a href=\"#section-3\" class=\"nav-item js-scroll-to\"&gt;Item 3&lt;/a&gt;\r\n  &lt;/li&gt;\r\n&lt;/ul&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":4,"body":"<pre><code>var scrollTo = function($parent, $element) {\n    var topDiff = $element.position().top - $parent.position().top;\n\n    $parent.animate({\n        scrollTop : topDiff\n    }, 100);\n};\n</code></pre>\n"},{"score":8,"body":"<p>In most cases, it would be best to use a plugin. Seriously. I'm going to <a href=\"https://github.com/hashchange/jquery.scrollable\" rel=\"noreferrer\" title=\"jQuery.scrollable\">tout mine here</a>. Of course there are others, too. But please check if they really avoid the pitfalls for which you'd want a plugin in the first place - not all of them do.</p>\n\n<p>I have written about the reasons for using a plugin <a href=\"https://github.com/hashchange/jquery.scrollable#why\" rel=\"noreferrer\" title=\"jQuery.scrollable: Why even use it?\">elsewhere</a>. In a nutshell, the one liner underpinning most answers here </p>\n\n<pre><code>$('html, body').animate( { scrollTop: $target.offset().top }, duration );\n</code></pre>\n\n<p>is bad UX.</p>\n\n<ul>\n<li><p>The animation doesn't respond to user actions. It carries on even if the user clicks, taps, or tries to scroll.</p></li>\n<li><p>If the starting point of the animation is close to the target element, the animation is painfully slow. </p></li>\n<li><p>If the target element is placed near the bottom of the page, it can't be scrolled to the top of the window. The scroll animation stops abruptly then, in mid motion.</p></li>\n</ul>\n\n<p>To handle these issues (and a <a href=\"https://github.com/hashchange/jquery.scrollable#why\" rel=\"noreferrer\" title=\"jQuery.scrollable: Why even use it?\">bunch of others</a>), you can use a plugin of mine, <a href=\"https://github.com/hashchange/jquery.scrollable\" rel=\"noreferrer\" title=\"jQuery.scrollable\">jQuery.scrollable</a>. The call then becomes</p>\n\n<pre><code>$( window ).scrollTo( targetPosition );\n</code></pre>\n\n<p>and that's it. Of course, there are <a href=\"https://github.com/hashchange/jquery.scrollable#animation-options\" rel=\"noreferrer\" title=\"jQuery.scrollable: Animation options\">more options</a>.</p>\n\n<p>With regard to the target position, <code>$target.offset().top</code> does the job in most cases. But please be aware that the returned value doesn't take a border on the <code>html</code> element into account (<a href=\"http://jsbin.com/vifugo/3\" rel=\"noreferrer\" title=\"$elem.offset() does not account for html border - JS Bin\">see this demo</a>). If you need the target position to be accurate under any circumstances, it is better to use</p>\n\n<pre><code>targetPosition = $( window ).scrollTop() + $target[0].getBoundingClientRect().top;\n</code></pre>\n\n<p>That works even if a border on the <code>html</code> element is set.</p>\n"},{"score":2,"body":"<p>I wrote a general purpose function that scrolls to either a jQuery object, a CSS selector, or a numeric value.</p>\n\n<p>Example usage:</p>\n\n<pre><code>// scroll to \"#target-element\":\n$.scrollTo(\"#target-element\");\n\n// scroll to 80 pixels above first element with class \".invalid\":\n$.scrollTo(\".invalid\", -80);\n\n// scroll a container with id \"#my-container\" to 300 pixels from its top:\n$.scrollTo(300, 0, \"slow\", \"#my-container\");\n</code></pre>\n\n<p>The function's code:</p>\n\n<pre><code>/**\n* Scrolls the container to the target position minus the offset\n*\n* @param target    - the destination to scroll to, can be a jQuery object\n*                    jQuery selector, or numeric position\n* @param offset    - the offset in pixels from the target position, e.g.\n*                    pass -80 to scroll to 80 pixels above the target\n* @param speed     - the scroll speed in milliseconds, or one of the\n*                    strings \"fast\" or \"slow\". default: 500\n* @param container - a jQuery object or selector for the container to\n*                    be scrolled. default: \"html, body\"\n*/\njQuery.scrollTo = function (target, offset, speed, container) {\n\n    if (isNaN(target)) {\n\n        if (!(target instanceof jQuery))\n            target = $(target);\n\n        target = parseInt(target.offset().top);\n    }\n\n    container = container || \"html, body\";\n    if (!(container instanceof jQuery))\n        container = $(container);\n\n    speed = speed || 500;\n    offset = offset || 0;\n\n    container.animate({\n        scrollTop: target + offset\n    }, speed);\n};\n</code></pre>\n"},{"score":3,"body":"<blockquote>\n  <p>When the user clicks on that input with #subject, the page should\n  scroll to the last element of the page with a nice animation. It\n  should be a scroll to bottom and not to top.</p>\n  \n  <p>The last item of the page is a submit button with #submit</p>\n</blockquote>\n\n<pre><code>$('#subject').click(function()\n{\n    $('#submit').focus();\n    $('#subject').focus();\n});\n</code></pre>\n\n<p>This will first scroll down to <code>#submit</code> then restore the cursor back to the input that was clicked, which mimics a scroll down, and works on most browsers. It also doesn't require jQuery as it can be written in pure JavaScript.</p>\n\n<p>Can this fashion of using <code>focus</code> function mimic animation in a better way, through chaining <code>focus</code> calls. I haven't tested this theory, but it would look something like this:</p>\n\n<pre><code>&lt;style&gt;\n  #F &gt; *\n  {\n    width: 100%;\n  }\n&lt;/style&gt;\n\n&lt;form id=\"F\" &gt;\n  &lt;div id=\"child_1\"&gt; .. &lt;/div&gt;\n  &lt;div id=\"child_2\"&gt; .. &lt;/div&gt;\n  ..\n  &lt;div id=\"child_K\"&gt; .. &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;script&gt;\n  $('#child_N').click(function()\n  {\n    $('#child_N').focus();\n    $('#child_N+1').focus();\n    ..\n    $('#child_K').focus();\n\n    $('#child_N').focus();\n  });\n&lt;/script&gt;\n</code></pre>\n"},{"score":6,"body":"<p>Very simple and easy to use custom jQuery plugin. Just add the attribute <code>scroll=</code> to your clickable element and set its value to the selector you want to scroll to. </p>\n\n<p>Like so: <code>&lt;a scroll=\"#product\"&gt;Click me&lt;/a&gt;</code>. It can be used on any element. </p>\n\n<pre><code>(function($){\n    $.fn.animateScroll = function(){\n        console.log($('[scroll]'));\n        $('[scroll]').click(function(){\n            selector = $($(this).attr('scroll'));\n            console.log(selector);\n            console.log(selector.offset().top);\n            $('html body').animate(\n                {scrollTop: (selector.offset().top)}, //- $(window).scrollTop()\n                1000\n            );\n        });\n    }\n})(jQuery);\n\n// RUN\njQuery(document).ready(function($) {\n    $().animateScroll();\n});\n\n// IN HTML EXAMPLE\n// RUN ONCLICK ON OBJECT WITH ATTRIBUTE SCROLL=\".SELECTOR\"\n// &lt;a scroll=\"#product\"&gt;Click To Scroll&lt;/a&gt;\n</code></pre>\n"},{"score":2,"body":"<p>For what it's worth, this is how I managed to achieve such behavior for a general element which can be inside a DIV with scrolling. In our case we don't scroll the full body, but just particular elements with overflow: auto; within a larger layout.</p>\n\n<p>It creates a fake input of the height of the target element, and then puts a focus to it, and the browser will take care about the rest no matter how deep within the scrollable hierarchy you are. Works like a charm.</p>\n\n<pre><code>var $scrollTo = $('#someId'),\ninputElem = $('&lt;input type=\"text\"&gt;&lt;/input&gt;');\n\n$scrollTo.prepend(inputElem);\ninputElem.css({\n  position: 'absolute',\n  width: '1px',\n  height: $scrollTo.height()\n});\ninputElem.focus();\ninputElem.remove();\n</code></pre>\n"},{"score":19,"body":"<p>With <a href=\"https://jsfiddle.net/k148ccg9/\" rel=\"nofollow noreferrer\">this solution</a> you do not need any plugin and there's <em><strong>no setup required</strong></em> besides placing the script before your closing <code>&lt;/body&gt;</code> tag.</p>\n<pre><code>$(&quot;a[href^='#']&quot;).on(&quot;click&quot;, function(e) {\n  $(&quot;html, body&quot;).animate({\n    scrollTop: $($(this).attr(&quot;href&quot;)).offset().top\n  }, 1000);\n  return false;\n});\n\nif ($(window.location.hash).length &gt; 1) {\n  $(&quot;html, body&quot;).animate({\n    scrollTop: $(window.location.hash).offset().top\n  }, 1000);\n}\n</code></pre>\n<p>On load, if there is a hash in the address, we scroll to it.</p>\n<p>And - whenever you click an <code>a</code> link with an <code>href</code> hash e.g. <code>#top</code>, we scroll to it.</p>\n<p>##Edit 2020</p>\n<p>If you want a pure JavaScript solution: you could perhaps instead use something like:</p>\n<pre><code>var _scrollToElement = function (selector) {\n  try {\n    document.querySelector(selector).scrollIntoView({ behavior: 'smooth' });\n  } catch (e) {\n    console.warn(e);\n  }\n}\n\nvar _scrollToHashesInHrefs = function () {\n  document.querySelectorAll(&quot;a[href^='#']&quot;).forEach(function (el) {\n    el.addEventListener('click', function (e) {\n      _scrollToElement(el.getAttribute('href'));\n      return false;\n    })\n  })\n  if (window.location.hash) {\n    _scrollToElement(window.location.hash);\n  }\n}\n\n_scrollToHashesInHrefs();\n</code></pre>\n"},{"score":3,"body":"<p>I set up a module <a href=\"https://github.com/StevenIseki/scroll-element\" rel=\"nofollow noreferrer\">scroll-element</a> <code>npm install scroll-element</code>. It works like this:</p>\n\n<pre><code>import { scrollToElement, scrollWindowToElement } from 'scroll-element'\n\n/* scroll the window to your target element, duration and offset optional */\nlet targetElement = document.getElementById('my-item')\nscrollWindowToElement(targetElement)\n\n/* scroll the overflow container element to your target element, duration and offset optional */\nlet containerElement = document.getElementById('my-container')\nlet targetElement = document.getElementById('my-item')\nscrollToElement(containerElement, targetElement)\n</code></pre>\n\n<p>Written with help from the following SO posts:</p>\n\n<ul>\n<li><p><a href=\"https://stackoverflow.com/questions/18953144/how-do-i-get-the-offset-top-value-of-an-element-without-using-jquery\">offset-top-of-an-element-without-jquery</a></p></li>\n<li><p><a href=\"https://stackoverflow.com/questions/21474678/scrolltop-animation-without-jquery\">scrolltop-animation-without-jquery</a></p></li>\n</ul>\n\n<p>Here is the code:</p>\n\n<pre><code>export const scrollToElement = function(containerElement, targetElement, duration, offset) {\n  if (duration == null) { duration = 1000 }\n  if (offset == null) { offset = 0 }\n\n  let targetOffsetTop = getElementOffset(targetElement).top\n  let containerOffsetTop = getElementOffset(containerElement).top\n  let scrollTarget = targetOffsetTop + ( containerElement.scrollTop - containerOffsetTop)\n  scrollTarget += offset\n  scroll(containerElement, scrollTarget, duration)\n}\n\nexport const scrollWindowToElement = function(targetElement, duration, offset) {\n  if (duration == null) { duration = 1000 }\n  if (offset == null) { offset = 0 }\n\n  let scrollTarget = getElementOffset(targetElement).top\n  scrollTarget += offset\n  scrollWindow(scrollTarget, duration)\n}\n\nfunction scroll(containerElement, scrollTarget, duration) {\n  let scrollStep = scrollTarget / (duration / 15)\n  let interval = setInterval(() =&gt; {\n    if ( containerElement.scrollTop &lt; scrollTarget ) {\n      containerElement.scrollTop += scrollStep\n    } else {\n      clearInterval(interval)\n    }\n  },15)\n}\n\nfunction scrollWindow(scrollTarget, duration) {\n  let scrollStep = scrollTarget / (duration / 15)\n  let interval = setInterval(() =&gt; {\n    if ( window.scrollY &lt; scrollTarget ) {\n      window.scrollBy( 0, scrollStep )\n    } else {\n      clearInterval(interval)\n    }\n  },15)\n}\n\nfunction getElementOffset(element) {\n  let de = document.documentElement\n  let box = element.getBoundingClientRect()\n  let top = box.top + window.pageYOffset - de.clientTop\n  let left = box.left + window.pageXOffset - de.clientLeft\n  return { top: top, left: left }\n}\n</code></pre>\n"},{"score":4,"body":"<p><code>$('html, body').animate(...)</code> does not for me on iphone, android chrome safari browser.  </p>\n\n<p>I had to target root content element of the page.</p>\n\n<blockquote>\n  <p>$('#cotnent').animate(...)</p>\n</blockquote>\n\n<p>Here is what I have ended up with</p>\n\n<pre><code>if (navigator.userAgent.match(/(iPod|iPhone|iPad|Android)/)) {           \n    $('#content').animate({\n    scrollTop: $(\"#elementtoScrollToID\").offset().top\n   }, 'slow');\n}\nelse{\n    $('html, body').animate({\n    scrollTop: $(\"#elementtoScrollToID\").offset().top\n    }, 'slow');\n}\n</code></pre>\n\n<p>All body content wired up with a #content div</p>\n\n<pre><code>&lt;html&gt;\n....\n&lt;body&gt;\n&lt;div id=\"content\"&gt;\n....\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n"},{"score":9,"body":"<p>Animations:</p>\n\n<pre><code>// slide to top of the page\n$('.up').click(function () {\n    $(\"html, body\").animate({\n        scrollTop: 0\n    }, 600);\n    return false;\n});\n\n// slide page to anchor\n$('.menutop b').click(function(){\n    //event.preventDefault();\n    $('html, body').animate({\n        scrollTop: $( $(this).attr('href') ).offset().top\n    }, 600);\n    return false;\n});\n\n// Scroll to class, div\n$(\"#button\").click(function() {\n    $('html, body').animate({\n        scrollTop: $(\"#target-element\").offset().top\n    }, 1000);\n});\n\n// div background animate\n$(window).scroll(function () {\n\n    var x = $(this).scrollTop();\n\n    // freezze div background\n    $('.banner0').css('background-position', '0px ' + x +'px');\n\n    // from left to right\n    $('.banner0').css('background-position', x+'px ' +'0px');\n\n    // from right to left\n    $('.banner0').css('background-position', -x+'px ' +'0px');\n\n    // from bottom to top\n    $('#skills').css('background-position', '0px ' + -x + 'px');\n\n    // move background from top to bottom\n    $('.skills1').css('background-position', '0% ' + parseInt(-x / 1) + 'px' + ', 0% ' + parseInt(-x / 1) + 'px, center top');\n\n    // Show hide mtop menu  \n    if ( x &gt; 100 ) {\n    $( \".menu\" ).addClass( 'menushow' );\n    $( \".menu\" ).fadeIn(\"slow\");\n    $( \".menu\" ).animate({opacity: 0.75}, 500);\n    } else {\n    $( \".menu\" ).removeClass( 'menushow' );\n    $( \".menu\" ).animate({opacity: 1}, 500);\n    }\n\n});\n\n// progres bar animation simple\n$('.bar1').each(function(i) {\n  var width = $(this).data('width');  \n  $(this).animate({'width' : width + '%' }, 900, function(){\n    // Animation complete\n  });  \n});\n</code></pre>\n"},{"score":10,"body":"<p>If you want to scroll within an overflow container (instead of <code>$('html, body')</code> answered above), working also with absolute positioning, this is the way to do :</p>\n\n<pre><code>var elem = $('#myElement'),\n    container = $('#myScrollableContainer'),\n    pos = elem.position().top + container.scrollTop() - container.position().top;\n\ncontainer.animate({\n  scrollTop: pos\n}\n</code></pre>\n"},{"score":9,"body":"<p>Easy way to achieve the scroll of page to target div id</p>\n\n<pre><code>var targetOffset = $('#divID').offset().top;\n$('html, body').animate({scrollTop: targetOffset}, 1000);\n</code></pre>\n"},{"score":4,"body":"<p>This is Atharva's answer from: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView\" rel=\"nofollow noreferrer\">https://developer.mozilla.org/en-US/docs/Web/API/element.scrollIntoView</a>.\nJust wanted to add if your document is in an iframe, you can choose an element in the parent frame to scroll into view:</p>\n\n<pre><code> $('#element-in-parent-frame', window.parent.document).get(0).scrollIntoView();\n</code></pre>\n"},{"score":2,"body":"<p>This worked for me:</p>\n\n<pre><code>var targetOffset = $('#elementToScrollTo').offset().top;\n$('#DivParent').animate({scrollTop: targetOffset}, 2500);\n</code></pre>\n"},{"score":46,"body":"<p>I know a way without jQuery:</p>\n<pre><code>document.getElementById(&quot;element-id&quot;).scrollIntoView();\n</code></pre>\n<p>Edit: It's been two years and I'm still randomly getting reputation from this post lmao</p>\n<p>Edit 2: Please don't edit <em>my</em> comment without asking me.</p>\n"},{"score":3,"body":"<p>Updated answer as of 2019:</p>\n\n<pre><code>$('body').animate({\n    scrollTop: $('#subject').offset().top - $('body').offset().top + $('body').scrollTop()\n}, 'fast');\n</code></pre>\n"},{"score":2,"body":"<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>jQuery(document).ready(function($) {\r\n  $('a[href^=\"#\"]').bind('click.smoothscroll',function (e) {\r\n    e.preventDefault();\r\n    var target = this.hash,\r\n        $target = $(target);\r\n\r\n    $('html, body').stop().animate( {\r\n      'scrollTop': $target.offset().top-40\r\n    }, 900, 'swing', function () {\r\n      window.location.hash = target;\r\n    } );\r\n  } );\r\n} );</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n\r\n&lt;ul role=\"tablist\"&gt;\r\n  &lt;li class=\"active\" id=\"p1\"&gt;&lt;a href=\"#pane1\" role=\"tab\"&gt;Section 1&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li id=\"p2\"&gt;&lt;a href=\"#pane2\" role=\"tab\"&gt;Section 2&lt;/a&gt;&lt;/li&gt;\r\n  &lt;li id=\"p3\"&gt;&lt;a href=\"#pane3\" role=\"tab\"&gt;Section 3&lt;/a&gt;&lt;/li&gt;\r\n&lt;/ul&gt;\r\n\r\n&lt;div id=\"pane1\"&gt;&lt;/div&gt;\r\n&lt;div id=\"pane2\"&gt;&lt;/div&gt;\r\n&lt;div id=\"pane3\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":30,"body":"<p>This is the way I do it.</p>\n\n<pre><code>document.querySelector('scrollHere').scrollIntoView({ behavior: 'smooth' })\n</code></pre>\n\n<p>Works in any browser.</p>\n\n<p>It can easily be wrapped into a function</p>\n\n<pre><code>function scrollTo(selector) {\n    document.querySelector(selector).scrollIntoView({ behavior: 'smooth' })\n}\n</code></pre>\n\n<p>Here is a working example\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>$(\".btn\").click(function() {\r\n  document.getElementById(\"scrollHere\").scrollIntoView( {behavior: \"smooth\" })\r\n})</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.btn {margin-bottom: 500px;}\r\n.middle {display: block; margin-bottom: 500px; color: red;}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;button class=\"btn\"&gt;Scroll down&lt;/button&gt;\r\n\r\n&lt;h1 class=\"middle\"&gt;You see?&lt;/h1&gt;\r\n\r\n&lt;div id=\"scrollHere\"&gt;Arrived at your destination&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView\" rel=\"noreferrer\">Docs</a></p>\n"},{"score":3,"body":"<p><strong>ONELINER</strong></p>\n\n<pre><code>subject.onclick = e=&gt; window.scroll({ top: submit.offsetTop, behavior: 'smooth'});\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\" data-console=\"true\" data-babel=\"false\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>subject.onclick = e=&gt; window.scroll({top: submit.offsetTop, behavior: 'smooth'});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>.box,.foot{display: flex;background:#fdf;padding:500px 0} .foot{padding:250px}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input type=\"text\" class=\"textfield\" value=\"click here\" id=\"subject\" name=\"subject\"&gt;\r\n\r\n&lt;div class=\"box\"&gt;\r\n  Some content\r\n  &lt;textarea&gt;&lt;/textarea&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;input type=\"submit\" class=\"submit\" id=\"submit\" name=\"submit\" value=\"Ok, Done.\"&gt;\r\n\r\n&lt;div class=\"foot\"&gt;Some footer&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n"},{"score":1,"body":"<p>You just need:</p>\n<pre><code>$(&quot;selector&quot;).get(0).scrollTo(0, 0)\n</code></pre>\n"},{"score":0,"body":"<p>After finding the way to get my code work, I think I should make thing a bit clear:\nFor using:</p>\n<pre><code>$('html, body').animate({\n   scrollTop: $(&quot;#div1&quot;).offset().top\n}, 2000);\n</code></pre>\n<p>you need to be on top of the page since <code>$(&quot;#div1&quot;).offset().top</code> will return different numbers for different positions you scroll to. If you already scrolled out of the top, you need to specify the exact <code>pageY</code> value (see <code>pageY</code> definition here: <a href=\"https://javascript.info/coordinates\" rel=\"nofollow noreferrer\">https://javascript.info/coordinates</a>).</p>\n<p>So now, the problem is to calculate the <code>pageY</code> value of one element. Below is an example in case the scroll container is the body:</p>\n<pre><code>function getPageY(id) {\n    let elem = document.getElementById(id);\n    let box = elem.getBoundingClientRect();\n    var body = document.getElementsByTagName(&quot;BODY&quot;)[0];\n    return box.top + body.scrollTop; // for window scroll: box.top + window.scrollY;\n}\n</code></pre>\n<p>The above function returns the same number even if you scrolled somewhere. Now, to scroll back to that element:</p>\n<pre><code>$(&quot;html, body&quot;).animate({ scrollTop: getPageY('div1') }, &quot;slow&quot;);\n</code></pre>\n"}],"score":2424}