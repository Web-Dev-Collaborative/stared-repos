{"body":"<p>Is there something in JavaScript similar to <code>@import</code> in CSS that allows you to include a JavaScript file inside another JavaScript file?</p>\n","title":"How do I include a JavaScript file in another JavaScript file?","answers":[{"score":104,"body":"<p>It is possible to dynamically generate a JavaScript tag and append it to HTML document from inside other JavaScript code. This will load targeted JavaScript file.</p>\n\n<pre><code>function includeJs(jsFilePath) {\n    var js = document.createElement(\"script\");\n\n    js.type = \"text/javascript\";\n    js.src = jsFilePath;\n\n    document.body.appendChild(js);\n}\n\nincludeJs(\"/path/to/some/file.js\");\n</code></pre>\n"},{"score":64,"body":"<p>Maybe you can use this function that I found on this page <em><a href=\"http://forums.digitalpoint.com/showthread.php?t=146094\" rel=\"noreferrer\">How do I include a JavaScript file in a JavaScript file?</a></em>:</p>\n\n<pre><code>function include(filename)\n{\n    var head = document.getElementsByTagName('head')[0];\n\n    var script = document.createElement('script');\n    script.src = filename;\n    script.type = 'text/javascript';\n\n    head.appendChild(script)\n}\n</code></pre>\n"},{"score":4660,"body":"<p>The old versions of JavaScript had no import, include, or require, so many different approaches to this problem have been developed.</p>\n\n<p>But since 2015 (ES6), JavaScript has had the <a href=\"http://exploringjs.com/es6/ch_modules.html\" rel=\"noreferrer\">ES6 modules</a> standard to import modules in Node.js, which is also supported by <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">most modern browsers</a>.</p>\n\n<p>For compatibility with older browsers, build tools like <a href=\"https://webpack.github.io/\" rel=\"noreferrer\">Webpack</a> and <a href=\"https://rollupjs.org/\" rel=\"noreferrer\">Rollup</a> and/or transpilation tools like <a href=\"https://babeljs.io/\" rel=\"noreferrer\">Babel</a> can be used.</p>\n\n<h1>ES6 Modules</h1>\n\n<p>ECMAScript (ES6) modules have been <a href=\"https://nodejs.org/api/esm.html\" rel=\"noreferrer\">supported in Node.js</a> since v8.5, with the <code>--experimental-modules</code> flag, and since at least Node.js v13.8.0 without the flag. To enable \"ESM\" (vs. Node.js's previous CommonJS-style module system [\"CJS\"]) you either use <code>\"type\": \"module\"</code> in <code>package.json</code> or give the files the extension <code>.mjs</code>. (Similarly, modules written with Node.js's previous CJS module can be named <code>.cjs</code> if your default is ESM.)</p>\n\n<p>Using <code>package.json</code>:</p>\n\n<pre class=\"lang-json prettyprint-override\"><code>{\n    \"type\": \"module\"\n}\n</code></pre>\n\n<p>Then <code>module.js</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.js</code>:</p>\n\n<pre><code>import { hello } from './module.js';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<p>Using <code>.mjs</code>, you'd have <code>module.mjs</code>:</p>\n\n<pre><code>export function hello() {\n  return \"Hello\";\n}\n</code></pre>\n\n<p>Then <code>main.mjs</code>:</p>\n\n<pre><code>import { hello } from './module.mjs';\nlet val = hello();  // val is \"Hello\";\n</code></pre>\n\n<h2>ECMAScript modules in browsers</h2>\n\n<p>Browsers have had support for loading ECMAScript modules directly (no tools like Webpack required) <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">since</a> Safari 10.1, Chrome 61, Firefox 60, and Edge 16. Check the current support at <a href=\"https://caniuse.com/#feat=es6-module\" rel=\"noreferrer\">caniuse</a>. There is no need to use Node.js' <code>.mjs</code> extension; browsers completely ignore file extensions on modules/scripts.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import { hello } from './hello.mjs'; // Or it could be simply `hello.js`\n  hello('world');\n&lt;/script&gt;\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// hello.mjs -- or it could be simply `hello.js`\nexport function hello(text) {\n  const div = document.createElement('div');\n  div.textContent = `Hello ${text}`;\n  document.body.appendChild(div);\n}\n</code></pre>\n\n<p>Read more at <a href=\"https://jakearchibald.com/2017/es-modules-in-browsers/\" rel=\"noreferrer\">https://jakearchibald.com/2017/es-modules-in-browsers/</a></p>\n\n<h3>Dynamic imports in browsers</h3>\n\n<p>Dynamic imports let the script load other scripts as needed:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>&lt;script type=\"module\"&gt;\n  import('hello.mjs').then(module =&gt; {\n      module.hello('world');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Read more at <a href=\"https://developers.google.com/web/updates/2017/11/dynamic-import\" rel=\"noreferrer\">https://developers.google.com/web/updates/2017/11/dynamic-import</a></p>\n\n<h1>Node.js require</h1>\n\n<p>The older CJS module style, still widely used in Node.js, is the <a href=\"https://nodejs.org/api/modules.html\" rel=\"noreferrer\"><code>module.exports</code>/<code>require</code></a> system.</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// mymodule.js\nmodule.exports = {\n   hello: function() {\n      return \"Hello\";\n   }\n}\n</code></pre>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// server.js\nconst myModule = require('./mymodule');\nlet val = myModule.hello(); // val is \"Hello\"   \n</code></pre>\n\n<p>There are other ways for JavaScript to include external JavaScript contents in browsers that do not require preprocessing.</p>\n\n<h1>AJAX Loading</h1>\n\n<p>You could load an additional script with an AJAX call and then use <code>eval</code> to run it. This is the most straightforward way, but it is limited to your domain because of the JavaScript sandbox security model. Using <code>eval</code> also opens the door to bugs, hacks and security issues.</p>\n\n<h1>Fetch Loading</h1>\n\n<p>Like Dynamic Imports you can load one or many scripts with a <code>fetch</code> call using promises to control order of execution for script dependencies using the <a href=\"https://git.habd.as/jhabdas/fetch-inject\" rel=\"noreferrer\">Fetch Inject</a> library:</p>\n\n<pre><code>fetchInject([\n  'https://cdn.jsdelivr.net/momentjs/2.17.1/moment.min.js'\n]).then(() =&gt; {\n  console.log(`Finish in less than ${moment().endOf('year').fromNow(true)}`)\n})\n</code></pre>\n\n<h1>jQuery Loading</h1>\n\n<p>The <a href=\"http://jquery.com/\" rel=\"noreferrer\">jQuery</a> library provides loading functionality <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"noreferrer\">in one line</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>$.getScript(\"my_lovely_script.js\", function() {\n   alert(\"Script loaded but not necessarily executed.\");\n});\n</code></pre>\n\n<h1>Dynamic Script Loading</h1>\n\n<p>You could add a script tag with the script URL into the HTML. To avoid the overhead of jQuery, this is an ideal solution.</p>\n\n<p>The script can even reside on a different server. Furthermore, the browser evaluates the code. The <code>&lt;script&gt;</code> tag can be injected into either the web page <code>&lt;head&gt;</code>, or inserted just before the closing <code>&lt;/body&gt;</code> tag.</p>\n\n<p>Here is an example of how this could work:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function dynamicallyLoadScript(url) {\n    var script = document.createElement(\"script\");  // create a script DOM node\n    script.src = url;  // set its src to the provided URL\n\n    document.head.appendChild(script);  // add it to the end of the head section of the page (could change 'head' to 'body' to add it to the end of the body section instead)\n}\n</code></pre>\n\n<p>This function will add a new <code>&lt;script&gt;</code> tag to the end of the head section of the page, where the <code>src</code> attribute is set to the URL which is given to the function as the first parameter.</p>\n\n<p>Both of these solutions are discussed and illustrated in <a href=\"http://unixpapa.com/js/dyna.html\" rel=\"noreferrer\">JavaScript Madness: Dynamic Script Loading</a>.</p>\n\n<h1>Detecting when the script has been executed</h1>\n\n<p>Now, there is a big issue you must know about. Doing that implies that <em>you remotely load the code</em>. Modern web browsers will load the file and keep executing your current script because they load everything asynchronously to improve performance. (This applies to both the jQuery method and the manual dynamic script loading method.)</p>\n\n<p>It means that if you use these tricks directly, <em>you won't be able to use your newly loaded code the next line after you asked it to be loaded</em>, because it will be still loading.</p>\n\n<p>For example: <code>my_lovely_script.js</code> contains <code>MySuperObject</code>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n\nvar s = new MySuperObject();\n\nError : MySuperObject is undefined\n</code></pre>\n\n<p>Then you reload the page hitting <kbd>F5</kbd>. And it works! Confusing...</p>\n\n<p><strong>So what to do about it ?</strong></p>\n\n<p>Well, you can use the hack the author suggests in the link I gave you. In summary, for people in a hurry, he uses an event to run a callback function when the script is loaded. So you can put all the code using the remote library in the callback function. For example:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>function loadScript(url, callback)\n{\n    // Adding the script tag to the head as suggested before\n    var head = document.head;\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = callback;\n    script.onload = callback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Then you write the code you want to use AFTER the script is loaded in a <a href=\"http://en.wikipedia.org/wiki/Anonymous_function\" rel=\"noreferrer\">lambda function</a>:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>var myPrettyCode = function() {\n   // Here, do whatever you want\n};\n</code></pre>\n\n<p>Then you run all that:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>loadScript(\"my_lovely_script.js\", myPrettyCode);\n</code></pre>\n\n<p>Note that the script may execute after the DOM has loaded, or before, depending on the browser and whether you included the line <code>script.async = false;</code>. There's a <a href=\"http://www.html5rocks.com/en/tutorials/speed/script-loading/\" rel=\"noreferrer\">great article on Javascript loading in general</a> which discusses this.</p>\n\n<h1>Source Code Merge/Preprocessing</h1>\n\n<p>As mentioned at the top of this answer, many developers use build/transpilation tool(s) like Parcel, Webpack, or Babel in their projects, allowing them to use upcoming JavaScript syntax, provide backward compatibility for older browsers, combine files, minify, perform code splitting etc.</p>\n"},{"score":52,"body":"<p>I just wrote this JavaScript code (using <a href=\"http://en.wikipedia.org/wiki/Prototype_JavaScript_Framework\" rel=\"noreferrer\">Prototype</a> for <a href=\"http://en.wikipedia.org/wiki/Document_Object_Model\" rel=\"noreferrer\">DOM</a> manipulation):</p>\n\n<pre><code>var require = (function() {\n    var _required = {};\n    return (function(url, callback) {\n        if (typeof url == 'object') {\n            // We've (hopefully) got an array: time to chain!\n            if (url.length &gt; 1) {\n                // Load the nth file as soon as everything up to the\n                // n-1th one is done.\n                require(url.slice(0, url.length - 1), function() {\n                    require(url[url.length - 1], callback);\n                });\n            } else if (url.length == 1) {\n                require(url[0], callback);\n            }\n            return;\n        }\n        if (typeof _required[url] == 'undefined') {\n            // Haven't loaded this URL yet; gogogo!\n            _required[url] = [];\n\n            var script = new Element('script', {\n                src: url,\n                type: 'text/javascript'\n            });\n            script.observe('load', function() {\n                console.log(\"script \" + url + \" loaded.\");\n                _required[url].each(function(cb) {\n                    cb.call(); // TODO: does this execute in the right context?\n                });\n                _required[url] = true;\n            });\n\n            $$('head')[0].insert(script);\n        } else if (typeof _required[url] == 'boolean') {\n            // We already loaded the thing, so go ahead.\n            if (callback) {\n                callback.call();\n            }\n            return;\n        }\n\n        if (callback) {\n            _required[url].push(callback);\n        }\n    });\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;script src=\"prototype.js\"&gt;&lt;/script&gt;\n&lt;script src=\"require.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    require(['foo.js','bar.js'], function () {\n        /* Use foo.js and bar.js here */\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Gist: <a href=\"http://gist.github.com/284442\" rel=\"noreferrer\">http://gist.github.com/284442</a>.</p>\n"},{"score":32,"body":"<p>You can also assemble your scripts using <a href=\"http://en.wikipedia.org/wiki/PHP\" rel=\"noreferrer\">PHP</a>:</p>\n\n<p>File <code>main.js.php</code>:</p>\n\n<pre><code>&lt;?php\n    header('Content-type:text/javascript; charset=utf-8');\n    include_once(\"foo.js.php\");\n    include_once(\"bar.js.php\");\n?&gt;\n\n// Main JavaScript code goes here\n</code></pre>\n"},{"score":210,"body":"<p>There actually <em>is</em> a way to load a JavaScript file <em>not</em> asynchronously, so you could use the functions included in your newly loaded file right after loading it, and I think it works in all browsers.</p>\n\n<p>You need to use <code>jQuery.append()</code> on the <code>&lt;head&gt;</code> element of your page, that is:</p>\n\n<pre><code>$(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n</code></pre>\n\n<p>However, this method also has a problem: if an error happens in the imported JavaScript file, <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"noreferrer\">Firebug</a> (and also Firefox Error Console and <a href=\"https://developers.google.com/chrome-developer-tools/\" rel=\"noreferrer\">Chrome Developer Tools</a> as well) will report its place incorrectly, which is a big problem if you use Firebug to track JavaScript errors down a lot (I do). Firebug simply doesn't know about the newly loaded file for some reason, so if an error occurs in that file, it reports that it occurred in your main <a href=\"http://en.wikipedia.org/wiki/HTML\" rel=\"noreferrer\">HTML</a> file, and you will have trouble finding out the real reason for the error.</p>\n\n<p>But if that is not a problem for you, then this method should work.</p>\n\n<p>I have actually written a jQuery plugin called <em>$.import_js()</em> which uses this method:</p>\n\n<pre><code>(function($)\n{\n    /*\n     * $.import_js() helper (for JavaScript importing within JavaScript code).\n     */\n    var import_js_imported = [];\n\n    $.extend(true,\n    {\n        import_js : function(script)\n        {\n            var found = false;\n            for (var i = 0; i &lt; import_js_imported.length; i++)\n                if (import_js_imported[i] == script) {\n                    found = true;\n                    break;\n                }\n\n            if (found == false) {\n                $(\"head\").append('&lt;script type=\"text/javascript\" src=\"' + script + '\"&gt;&lt;/script&gt;');\n                import_js_imported.push(script);\n            }\n        }\n    });\n\n})(jQuery);\n</code></pre>\n\n<p>So all you would need to do to import JavaScript is:</p>\n\n<pre><code>$.import_js('/path_to_project/scripts/somefunctions.js');\n</code></pre>\n\n<p>I also made a simple test for this at <a href=\"http://www.kipras.com/dev/import_js_test/\" rel=\"noreferrer\">Example</a>.</p>\n\n<p>It includes a <code>main.js</code> file in the main HTML and then the script in <code>main.js</code> uses <code>$.import_js()</code> to import an additional file called <code>included.js</code>, which defines this function:</p>\n\n<pre><code>function hello()\n{\n    alert(\"Hello world!\");\n}\n</code></pre>\n\n<p>And right after including <code>included.js</code>, the <code>hello()</code> function is called, and you get the alert.</p>\n\n<p>(This answer is in response to e-satis' comment).</p>\n"},{"score":165,"body":"<p>Another way, that in my opinion is much cleaner, is to make a synchronous Ajax request instead of using a <code>&lt;script&gt;</code> tag. Which is also how <a href=\"http://en.wikipedia.org/wiki/Node.js\">Node.js</a> handles includes.</p>\n\n<p>Here's an example using jQuery:</p>\n\n<pre><code>function require(script) {\n    $.ajax({\n        url: script,\n        dataType: \"script\",\n        async: false,           // &lt;-- This is the key\n        success: function () {\n            // all good...\n        },\n        error: function () {\n            throw new Error(\"Could not load script \" + script);\n        }\n    });\n}\n</code></pre>\n\n<p>You can then use it in your code as you'd usually use an include:</p>\n\n<pre><code>require(\"/scripts/subscript.js\");\n</code></pre>\n\n<p>And be able to call a function from the required script in the next line:</p>\n\n<pre><code>subscript.doSomethingCool(); \n</code></pre>\n"},{"score":10,"body":"<p>I came to this question because I was looking for a simple way to maintain a collection of useful JavaScript plugins. After seeing some of the solutions here, I came up with this:</p>\n\n<ol>\n<li><p>Set up a file called \"plugins.js\" (or extensions.js or whatever you want). Keep your plugin files together with that one master file.</p></li>\n<li><p>plugins.js will have an array called <code>pluginNames[]</code> that we will iterate over <code>each()</code>,\nthen append a <code>&lt;script&gt;</code> tag to the head for each plugin</p></li>\n</ol>\n\n<pre class=\"lang-js prettyprint-override\"><code>//set array to be updated when we add or remove plugin files\nvar pluginNames = [\"lettering\", \"fittext\", \"butterjam\", etc.];\n\n//one script tag for each plugin\n$.each(pluginNames, function(){\n    $('head').append('&lt;script src=\"js/plugins/' + this + '.js\"&gt;&lt;/script&gt;');\n});\n</code></pre>\n\n<ol start=\"3\">\n<li>Manually call just the one file in your head:<br>\n<code>&lt;script src=\"js/plugins/plugins.js\"&gt;&lt;/script&gt;</code></li>\n</ol>\n\n<p>BUT:</p>\n\n<p>Even though all of the plugins get dropped into the head tag the way they ought to, they don't always get run by the browser when you click into the page or refresh.</p>\n\n<p>I've found it's more reliable to just write the script tags in a PHP include. You only have to write it once and that's just as much work as calling the plugin using JavaScript.</p>\n"},{"score":9,"body":"<p>I have created a function that will allow you to use similar verbiage to C#/Java to include a JavaScript file. I've tested it a little bit even from inside of <em>another</em> JavaScript file and it seems to work. It does require jQuery though for a bit of \"magic\" at the end.</p>\n\n<p>I put this code in a file at the root of my script directory (I named it <code>global.js</code>, but you can use whatever you want. Unless I'm mistaken this and jQuery should be the only required scripts on a given page. Keep in mind this is largely untested beyond some basic usage, so there may or may not be any issues with the way I've done it; use at your own risk yadda yadda I am not responsible if you screw anything up yadda yadda:</p>\n\n<pre><code>/**\n* @fileoverview This file stores global functions that are required by other libraries.\n*/\n\nif (typeof(jQuery) === 'undefined') {\n    throw 'jQuery is required.';\n}\n\n/** Defines the base script directory that all .js files are assumed to be organized under. */\nvar BASE_DIR = 'js/';\n\n/**\n* Loads the specified file, outputting it to the &lt;head&gt; HTMLElement.\n*\n* This method mimics the use of using in C# or import in Java, allowing\n* JavaScript files to \"load\" other JavaScript files that they depend on\n* using a familiar syntax.\n*\n* This method assumes all scripts are under a directory at the root and will\n* append the .js file extension automatically.\n*\n* @param {string} file A file path to load using C#/Java \"dot\" syntax.\n*\n* Example Usage:\n* imports('core.utils.extensions');\n* This will output: &lt;script type=\"text/javascript\" src=\"/js/core/utils/extensions.js\"&gt;&lt;/script&gt;\n*/\nfunction imports(file) {\n    var fileName = file.substr(file.lastIndexOf('.') + 1, file.length);\n\n    // Convert PascalCase name to underscore_separated_name\n    var regex = new RegExp(/([A-Z])/g);\n    if (regex.test(fileName)) {\n        var separated = fileName.replace(regex, \",$1\").replace(',', '');\n        fileName = separated.replace(/[,]/g, '_');\n    }\n\n    // Remove the original JavaScript file name to replace with underscore version\n    file = file.substr(0, file.lastIndexOf('.'));\n\n    // Convert the dot syntax to directory syntax to actually load the file\n    if (file.indexOf('.') &gt; 0) {\n        file = file.replace(/[.]/g, '/');\n    }\n\n    var src = BASE_DIR + file + '/' + fileName.toLowerCase() + '.js';\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = src;\n\n    $('head').find('script:last').append(script);\n}\n</code></pre>\n"},{"score":6,"body":"<p>In a past project I had quite a bit of success using <a href=\"http://ajile.net/\" rel=\"noreferrer\">ajile</a> to do imports of reusable JavaScript files. I always wished there was a feature for this built into JavaScript itself.</p>\n"},{"score":23,"body":"<p>Or rather than including at run time, use a script to concatenate prior to upload.</p>\n\n<p>I use <a href=\"https://github.com/sstephenson/sprockets\" rel=\"noreferrer\">Sprockets</a> (I don't know if there are others). You build your JavaScript code in separate files and include comments that are processed by the Sprockets engine as includes. For development you can include files sequentially, then for production to merge them...</p>\n\n<p>See also:</p>\n\n<ul>\n<li><em><a href=\"http://37signals.com/svn/posts/1587-introducing-sprockets-javascript-dependency-management-and-concatenation\" rel=\"noreferrer\">Introducing Sprockets: JavaScript dependency management and concatenation</a></em></li>\n</ul>\n"},{"score":589,"body":"<p>If anyone is looking for something more advanced, try out <a href=\"http://requirejs.org/\" rel=\"noreferrer\">RequireJS</a>. You'll get added benefits such as dependency management, better concurrency, and avoid duplication (that is, retrieving a script more than once).</p>\n\n<p>You can write your JavaScript files in \"modules\" and then reference them as dependencies in other scripts. Or you can use RequireJS as a simple \"go get this script\" solution.</p>\n\n<p>Example:</p>\n\n<p>Define dependencies as modules:</p>\n\n<p><strong>some-dependency.js</strong></p>\n\n<pre><code>define(['lib/dependency1', 'lib/dependency2'], function (d1, d2) {\n\n     //Your actual script goes here.   \n     //The dependent scripts will be fetched if necessary.\n\n     return libraryObject;  //For example, jQuery object\n});\n</code></pre>\n\n<p><strong>implementation.js</strong> is your \"main\" JavaScript file that depends on <strong>some-dependency.js</strong></p>\n\n<pre><code>require(['some-dependency'], function(dependency) {\n\n    //Your script goes here\n    //some-dependency.js is fetched.   \n    //Then your script is executed\n});\n</code></pre>\n\n<p>Excerpt from the <a href=\"https://github.com/jrburke/requirejs\" rel=\"noreferrer\">GitHub</a> README:</p>\n\n<blockquote>\n  <p>RequireJS loads plain JavaScript files as well as more defined\n  modules. It is optimized for in-browser use, including in a Web\n  Worker, but it can be used in other JavaScript environments, like\n  Rhino and Node. It implements the Asynchronous Module API.</p>\n  \n  <p>RequireJS uses plain script tags to load modules/files, so it should\n  allow for easy debugging. It can be used simply to load existing\n  JavaScript files, so <strong>you can add it to your existing project without\n  having to re-write your JavaScript files.</strong></p>\n  \n  <p>... </p>\n</blockquote>\n"},{"score":109,"body":"<p>There is a good news for you. Very soon you will be able to load JavaScript code easily. It will become a standard way of importing modules of JavaScript code and will be part of core JavaScript itself. </p>\n\n<p>You simply have to write <code>import cond from 'cond.js';</code> to load a macro named <code>cond</code> from a file <code>cond.js</code>.</p>\n\n<p>So you don't have to rely upon any JavaScript framework nor do you have to explicitly make <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> calls.</p>\n\n<p>Refer to:</p>\n\n<ul>\n<li><p><em><a href=\"http://calculist.org/blog/2012/06/29/static-module-resolution/\">Static module resolution</a></em></p></li>\n<li><p><em><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:module_loaders\">Module loaders</a></em></p></li>\n</ul>\n"},{"score":14,"body":"<pre><code>var js = document.createElement(\"script\");\n\njs.type = \"text/javascript\";\njs.src = jsFilePath;\n\ndocument.body.appendChild(js);\n</code></pre>\n"},{"score":7,"body":"<p>Better use the <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a> way. To delay the ready event, first call <code>$.holdReady(true)</code>.\nExample (<a href=\"http://jqapi.com/#p=jQuery.holdReady\" rel=\"noreferrer\">source</a>):</p>\n\n<pre><code>$.holdReady(true);\n$.getScript(\"myplugin.js\", function() {\n    $.holdReady(false);\n});\n</code></pre>\n"},{"score":5,"body":"<p>Don't forget to check out <a href=\"http://labjs.com\" rel=\"noreferrer\">LAB.js</a>!</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n       $LAB\n       .script(\"jquery-1.8.3.js\").wait()\n       .script(\"scripts/clientscript.js\");      \n&lt;/script&gt;\n</code></pre>\n"},{"score":5,"body":"<p>Now, I may be totally misguided, but here's what I've recently started doing... \nStart and end your JavaScript files with a carriage return, place in the PHP script, followed by one more carriage return.\nThe JavaScript comment \"//\" is ignored by PHP so the inclusion happens anyway. The purpose for the carriage returns is so that the first line of your included JavaScript isn't commented out.</p>\n\n<p>Technically, you don't need the comment, but it posts errors in <a href=\"http://en.wikipedia.org/wiki/Adobe_Dreamweaver\" rel=\"nofollow\">Dreamweaver</a> that annoy me. If you're scripting in an IDE that doesn't post errors, you shouldn't need the comment or the carriage returns.</p>\n\n<pre><code>\\n\n//&lt;?php require_once(\"path/to/javascript/dependency.js\"); ?&gt;\n\nfunction myFunction(){\n    // stuff\n}\n\\n\n</code></pre>\n"},{"score":5,"body":"<pre><code>var s=[\"Hscript.js\",\"checkRobert.js\",\"Hscript.js\"];\nfor(i=0;i&lt;s.length;i++){\n  var script=document.createElement(\"script\");\n  script.type=\"text/javascript\";\n  script.src=s[i];\n  document.getElementsByTagName(\"head\")[0].appendChild(script)\n};\n</code></pre>\n"},{"score":23,"body":"<p>This should do:</p>\n\n<pre><code>xhr = new XMLHttpRequest();\nxhr.open(\"GET\", \"/soap/ajax/11.0/connection.js\", false);\nxhr.send();\neval(xhr.responseText);\n</code></pre>\n"},{"score":12,"body":"<p>I wrote a simple module that automates the job of importing/including module scripts in JavaScript. For detailed explanation of the code, refer to the blog post <em><a href=\"http://stamat.wordpress.com/2013/04/12/javascript-require-import-include-modules/\" rel=\"noreferrer\">JavaScript require / import / include modules</a></em>.</p>\n\n<pre><code>// ----- USAGE -----\n\nrequire('ivar.util.string');\nrequire('ivar.net.*');\nrequire('ivar/util/array.js');\nrequire('http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js');\n\nready(function(){\n    //Do something when required scripts are loaded\n});\n\n    //--------------------\n\nvar _rmod = _rmod || {}; //Require module namespace\n_rmod.LOADED = false;\n_rmod.on_ready_fn_stack = [];\n_rmod.libpath = '';\n_rmod.imported = {};\n_rmod.loading = {\n    scripts: {},\n    length: 0\n};\n\n_rmod.findScriptPath = function(script_name) {\n    var script_elems = document.getElementsByTagName('script');\n    for (var i = 0; i &lt; script_elems.length; i++) {\n        if (script_elems[i].src.endsWith(script_name)) {\n            var href = window.location.href;\n            href = href.substring(0, href.lastIndexOf('/'));\n            var url = script_elems[i].src.substring(0, script_elems[i].length - script_name.length);\n            return url.substring(href.length+1, url.length);\n        }\n    }\n    return '';\n};\n\n_rmod.libpath = _rmod.findScriptPath('script.js'); //Path of your main script used to mark\n                                                   //the root directory of your library, any library.\n\n\n_rmod.injectScript = function(script_name, uri, callback, prepare) {\n\n    if(!prepare)\n        prepare(script_name, uri);\n\n    var script_elem = document.createElement('script');\n    script_elem.type = 'text/javascript';\n    script_elem.title = script_name;\n    script_elem.src = uri;\n    script_elem.async = true;\n    script_elem.defer = false;\n\n    if(!callback)\n        script_elem.onload = function() {\n            callback(script_name, uri);\n        };\n    document.getElementsByTagName('head')[0].appendChild(script_elem);\n};\n\n_rmod.requirePrepare = function(script_name, uri) {\n    _rmod.loading.scripts[script_name] = uri;\n    _rmod.loading.length++;\n};\n\n_rmod.requireCallback = function(script_name, uri) {\n    _rmod.loading.length--;\n    delete _rmod.loading.scripts[script_name];\n    _rmod.imported[script_name] = uri;\n\n    if(_rmod.loading.length == 0)\n        _rmod.onReady();\n};\n\n_rmod.onReady = function() {\n    if (!_rmod.LOADED) {\n        for (var i = 0; i &lt; _rmod.on_ready_fn_stack.length; i++){\n            _rmod.on_ready_fn_stack[i]();\n        });\n        _rmod.LOADED = true;\n    }\n};\n\n_.rmod = namespaceToUri = function(script_name, url) {\n    var np = script_name.split('.');\n    if (np.getLast() === '*') {\n        np.pop();\n        np.push('_all');\n    }\n\n    if(!url)\n        url = '';\n\n    script_name = np.join('.');\n    return  url + np.join('/')+'.js';\n};\n\n//You can rename based on your liking. I chose require, but it\n//can be called include or anything else that is easy for you\n//to remember or write, except \"import\", because it is reserved\n//for future use.\nvar require = function(script_name) {\n    var uri = '';\n    if (script_name.indexOf('/') &gt; -1) {\n        uri = script_name;\n        var lastSlash = uri.lastIndexOf('/');\n        script_name = uri.substring(lastSlash+1, uri.length);\n    } \n    else {\n        uri = _rmod.namespaceToUri(script_name, ivar._private.libpath);\n    }\n\n    if (!_rmod.loading.scripts.hasOwnProperty(script_name)\n     &amp;&amp; !_rmod.imported.hasOwnProperty(script_name)) {\n        _rmod.injectScript(script_name, uri,\n            _rmod.requireCallback,\n                _rmod.requirePrepare);\n    }\n};\n\nvar ready = function(fn) {\n    _rmod.on_ready_fn_stack.push(fn);\n};\n</code></pre>\n"},{"score":13,"body":"<p>My usual method is:</p>\n\n<pre><code>var require = function (src, cb) {\n    cb = cb || function () {};\n\n    var newScriptTag = document.createElement('script'),\n        firstScriptTag = document.getElementsByTagName('script')[0];\n    newScriptTag.src = src;\n    newScriptTag.async = true;\n    newScriptTag.onload = newScriptTag.onreadystatechange = function () {\n        (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete') &amp;&amp; (cb());\n    };\n    firstScriptTag.parentNode.insertBefore(newScriptTag, firstScriptTag);\n}\n</code></pre>\n\n<p>It works great and uses no page-reloads for me. I've tried the AJAX method (one of the other answers) but it doesn't seem to work as nicely for me.</p>\n\n<p>Here's an explanation of how the code works for those that are curious: essentially, it creates a new script tag (after the first one) of the URL. It sets it to asynchronous mode so it doesn't block the rest of the code, but calls a callback when the readyState (the state of the content to be loaded) changes to 'loaded'.</p>\n"},{"score":30,"body":"<p>Most of solutions shown here imply dynamical loading. I was searching instead for a compiler which assemble all the depended files into a single output file. The same as <a href=\"http://en.wikipedia.org/wiki/Less_%28stylesheet_language%29\">Less</a>/<a href=\"http://en.wikipedia.org/wiki/Sass_%28stylesheet_language%29\">Sass</a> preprocessors deal with the CSS <code>@import</code> at-rule. Since I didn't find anything decent of this sort, I wrote a simple tool solving the issue.</p>\n\n<p>So here is the compiler, <a href=\"https://github.com/dsheiko/jsic\">https://github.com/dsheiko/jsic</a>, which replaces <code>$import(\"file-path\")</code> with the requested file content securely. Here is the corresponding <a href=\"http://gruntjs.com/\">Grunt</a> plugin: <a href=\"https://github.com/dsheiko/grunt-jsic\">https://github.com/dsheiko/grunt-jsic</a>.</p>\n\n<p>On the jQuery master branch, they simply concatenate atomic source files into a single one starting with <code>intro.js</code> and ending with <code>outtro.js</code>. That doesn't suits me as it provides no flexibility on the source code design. Check out how it works with jsic:</p>\n\n<p><em>src/main.js</em></p>\n\n<pre><code>var foo = $import(\"./Form/Input/Tel\");\n</code></pre>\n\n<p><em>src/Form/Input/Tel.js</em></p>\n\n<pre><code>function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n}\n</code></pre>\n\n<p>Now we can run the compiler:</p>\n\n<pre><code>node jsic.js src/main.js build/mail.js\n</code></pre>\n\n<p>And get the combined file</p>\n\n<p><em>build/main.js</em></p>\n\n<pre><code>var foo = function() {\n    return {\n          prop: \"\",\n          method: function(){}\n    }\n};\n</code></pre>\n"},{"score":10,"body":"<p>This script will add a JavaScript file to the top of any other <code>&lt;script&gt;</code> tag:</p>\n<pre><code>(function () {\n    var li = document.createElement('script'); \n    li.type = 'text/javascript'; \n    li.src = &quot;http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&quot;; \n    li.async = true; \n    var s = document.getElementsByTagName('script')[0]; \n    s.parentNode.insertBefore(li, s);\n})();\n</code></pre>\n"},{"score":7,"body":"<p>Here is a <a href=\"http://gruntjs.com/\" rel=\"noreferrer\">Grunt</a> plugin allowing you to use <code>@import \"path/to/file.js\";</code> syntax in any file including JavaScript files. It can be paired with uglify or watch or any other plugin.</p>\n\n<p>It can be installed with npm install: <a href=\"https://npmjs.org/package/grunt-import\" rel=\"noreferrer\">https://npmjs.org/package/grunt-import</a></p>\n"},{"score":44,"body":"<p>If you want it in pure JavaScript, you can use <code>document.write</code>.</p>\n<pre><code>document.write('&lt;script src=&quot;myscript.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;');\n</code></pre>\n<p>If you use the jQuery library, you can use the <code>$.getScript</code> method.</p>\n<pre><code>$.getScript(&quot;another_script.js&quot;);\n</code></pre>\n"},{"score":10,"body":"<p>There is also <a href=\"http://headjs.com/\" rel=\"noreferrer\">Head.js</a>. It is very easy to deal with:</p>\n\n<pre><code>head.load(\"js/jquery.min.js\",\n          \"js/jquery.someplugin.js\",\n          \"js/jquery.someplugin.css\", function() {\n  alert(\"Everything is ok!\");\n});\n</code></pre>\n\n<p>As you see, it's easier than Require.js and as convenient as jQuery's <code>$.getScript</code> method. It also has some advanced features, like conditional loading, feature detection and <a href=\"http://headjs.com/site/api/v1.00.html\" rel=\"noreferrer\">much more</a>.</p>\n"},{"score":56,"body":"<p>Here is a <strong>synchronous</strong> version <strong>without jQuery</strong>:</p>\n\n<pre><code>function myRequire( url ) {\n    var ajax = new XMLHttpRequest();\n    ajax.open( 'GET', url, false ); // &lt;-- the 'false' makes it synchronous\n    ajax.onreadystatechange = function () {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4) {\n            switch( ajax.status) {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(\"script loaded: \", url);\n                    break;\n                default:\n                    console.log(\"ERROR: script not loaded: \", url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n</code></pre>\n\n<p>Note that to get this working cross-domain, the server will need to set <code>allow-origin</code> header in its response.</p>\n"},{"score":16,"body":"<p>The <code>@import</code> syntax for achieving CSS-like JavaScript importing is possible using a tool such as Mixture via their special <code>.mix</code> file type (see <a href=\"http://docs.mixture.io/preprocessors#mix\" rel=\"nofollow noreferrer\">here</a>). I assume the application does this via one of above-mentioned methods.</p>\n<p>From the Mixture documentation on <code>.mix</code> files:</p>\n<blockquote>\n<p>Mix files are simply .js or .css files with .mix. in the file name. A\nmix file simply     extends the functionality of a normal style or\nscript file and allows you to import and combine.</p>\n</blockquote>\n<p>Here's an example <code>.mix</code> file that combines multiple <code>.js</code> files into one:</p>\n<pre><code>// scripts-global.mix.js\n// Plugins - Global\n\n@import &quot;global-plugins/headroom.js&quot;;\n@import &quot;global-plugins/retina-1.1.0.js&quot;;\n@import &quot;global-plugins/isotope.js&quot;;\n@import &quot;global-plugins/jquery.fitvids.js&quot;;\n</code></pre>\n<p>Mixture outputs this as <code>scripts-global.js</code> and also as a minified version (<code>scripts-global.min.js</code>).</p>\n<p>Note: I'm not in any way affiliated with Mixture, other than using it as a front-end development tool. I came across this question upon seeing a <code>.mix</code> JavaScript file in action (in one of the Mixture boilerplates) and being a bit confused by it (&quot;you can do this?&quot; I thought to myself). Then I realized that it was an application-specific file type (somewhat disappointing, agreed). Nevertheless, figured the knowledge might be helpful for others.</p>\n<p><strong>Note:</strong> Mixture was discontinued on 2016/07/26 (after being open sourced on 2015/04/12).</p>\n"},{"score":17,"body":"<p>In case you are using <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage\" rel=\"noreferrer\">Web Workers</a> and want to include additional scripts in the scope of the worker, the other answers provided about adding scripts to the <code>head</code> tag, etc. will not work for you.</p>\n\n<p>Fortunately, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries\" rel=\"noreferrer\">Web Workers have their own <code>importScripts</code> function</a> which is a global function in the scope of the Web Worker, native to the browser itself as it <a href=\"https://html.spec.whatwg.org/multipage/workers.html#importing-scripts-and-libraries\" rel=\"noreferrer\">is part of the specification</a>.</p>\n\n<p>Alternatively, <a href=\"https://stackoverflow.com/a/10939737/1676444\">as the second highest voted answer to your question highlights</a>, <a href=\"http://www.requirejs.org/\" rel=\"noreferrer\">RequireJS</a> can also handle including scripts inside a Web Worker (likely calling <code>importScripts</code> itself, but with a few other useful features).</p>\n"},{"score":10,"body":"<p>There are a lot of potential answers for this question. My answer is obviously based on a number of them. This is what I ended up with after reading through all the answers.</p>\n<p>The problem with <code>$.getScript</code> and really any other solution that requires a callback when loading is complete is that if you have multiple files that use it and depend on each other you no longer have a way to know when all scripts have been loaded (once they are nested in multiple files).</p>\n<h3>Example:</h3>\n<p>file3.js</p>\n<pre><code>var f3obj = &quot;file3&quot;;\n\n// Define other stuff\n</code></pre>\n<p>file2.js:</p>\n<pre><code>var f2obj = &quot;file2&quot;;\n$.getScript(&quot;file3.js&quot;, function(){\n\n    alert(f3obj);\n\n    // Use anything defined in file3.\n});\n</code></pre>\n<p>file1.js:</p>\n<pre><code>$.getScript(&quot;file2.js&quot;, function(){\n    alert(f3obj); //This will probably fail because file3 is only guaranteed to have loaded inside the callback in file2.\n    alert(f2obj);\n\n    // Use anything defined in the loaded script...\n});\n</code></pre>\n<p>You are right when you say that you could specify Ajax to run synchronously or use <a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest\" rel=\"nofollow noreferrer\">XMLHttpRequest</a>, but the current trend appears to be to deprecate synchronous requests, so you may not get full browser support now or in the future.</p>\n<p>You could try to use <code>$.when</code> to check an array of deferred objects, but now you are doing this in every file and file2 will be considered loaded as soon as the <code>$.when</code> is executed not when the callback is executed, so file1 still continues execution before file3 is loaded. This really still has the same problem.</p>\n<p>I decided to go backwards instead of forwards. Thank you <code>document.writeln</code>. I know it's taboo, but as long as it is used correctly this works well. You end up with code that can be debugged easily, shows in the DOM correctly and can ensure the order the dependencies are loaded correctly.</p>\n<p>You can of course use $ (&quot;body&quot;).append(), but then you can no longer debug correctly any more.</p>\n<p>NOTE: You must use this only while the page is loading, otherwise you get a blank screen. In other words, <strong>always place this before / outside of document.ready</strong>. I have not tested using this after the page is loaded in a click event or anything like that, but I am pretty sure it'll fail.</p>\n<p>I liked the idea of extending jQuery, but obviously you don't need to.</p>\n<p>Before calling <code>document.writeln</code>, it checks to make sure the script has not already been loading by evaluating all the script elements.</p>\n<p>I assume that a script is not fully executed until its <code>document.ready</code> event has been executed. (I know using <code>document.ready</code> is not required, but many people use it, and handling this is a safeguard.)</p>\n<p>When the additional files are loaded the <code>document.ready</code> callbacks will get executed in the wrong order. To address this when a script is actually loaded, the script that imported it is re-imported itself and execution halted. This causes the originating file to now have its <code>document.ready</code> callback executed after any from any scripts that it imports.</p>\n<p>Instead of this approach you could attempt to modify the jQuery <code>readyList</code>, but this seemed like a worse solution.</p>\n<p>Solution:</p>\n<pre><code>$.extend(true,\n{\n    import_js : function(scriptpath, reAddLast)\n    {\n        if (typeof reAddLast === &quot;undefined&quot; || reAddLast === null)\n        {\n            reAddLast = true; // Default this value to true. It is not used by the end user, only to facilitate recursion correctly.\n        }\n\n        var found = false;\n        if (reAddLast == true) // If we are re-adding the originating script we do not care if it has already been added.\n        {\n            found = $('script').filter(function () {\n                return ($(this).attr('src') == scriptpath);\n            }).length != 0; // jQuery to check if the script already exists. (replace it with straight JavaScript if you don't like jQuery.\n        }\n\n        if (found == false) {\n\n            var callingScriptPath = $('script').last().attr(&quot;src&quot;); // Get the script that is currently loading. Again this creates a limitation where this should not be used in a button, and only before document.ready.\n\n            document.writeln(&quot;&lt;script type='text/javascript' src='&quot; + scriptpath + &quot;'&gt;&lt;/script&gt;&quot;); // Add the script to the document using writeln\n\n            if (reAddLast)\n            {\n                $.import_js(callingScriptPath, false); // Call itself with the originating script to fix the order.\n                throw 'Readding script to correct order: ' + scriptpath + ' &lt; ' + callingScriptPath; // This halts execution of the originating script since it is getting reloaded. If you put a try / catch around the call to $.import_js you results will vary.\n            }\n            return true;\n        }\n        return false;\n    }\n});\n</code></pre>\n<p>Usage:</p>\n<p>File3:</p>\n<pre><code>var f3obj = &quot;file3&quot;;\n\n// Define other stuff\n$(function(){\n    f3obj = &quot;file3docready&quot;;\n});\n</code></pre>\n<p>File2:</p>\n<pre><code>$.import_js('js/file3.js');\nvar f2obj = &quot;file2&quot;;\n$(function(){\n    f2obj = &quot;file2docready&quot;;\n});\n</code></pre>\n<p>File1:</p>\n<pre><code>$.import_js('js/file2.js');\n\n// Use objects from file2 or file3\nalert(f3obj); // &quot;file3&quot;\nalert(f2obj); // &quot;file2&quot;\n\n$(function(){\n    // Use objects from file2 or file3 some more.\n    alert(f3obj); //&quot;file3docready&quot;\n    alert(f2obj); //&quot;file2docready&quot;\n});\n</code></pre>\n"},{"score":9,"body":"<p>Keep it nice, short, simple, and maintainable! :]</p>\n<pre><code>// Third-party plugins / script (don't forget the full path is necessary)\nvar FULL_PATH = '', s =\n[\n    FULL_PATH + 'plugins/script.js'      // Script example\n    FULL_PATH + 'plugins/jquery.1.2.js', // jQuery Library\n    FULL_PATH + 'plugins/crypto-js/hmac-sha1.js',      // CryptoJS\n    FULL_PATH + 'plugins/crypto-js/enc-base64-min.js'  // CryptoJS\n];\n\nfunction load(url)\n{\n    var ajax = new XMLHttpRequest();\n    ajax.open('GET', url, false);\n    ajax.onreadystatechange = function ()\n    {\n        var script = ajax.response || ajax.responseText;\n        if (ajax.readyState === 4)\n        {\n            switch(ajax.status)\n            {\n                case 200:\n                    eval.apply( window, [script] );\n                    console.log(&quot;library loaded: &quot;, url);\n                    break;\n                default:\n                    console.log(&quot;ERROR: library not loaded: &quot;, url);\n            }\n        }\n    };\n    ajax.send(null);\n}\n\n// Initialize a single load\nload('plugins/script.js');\n\n// Initialize a full load of scripts\nif (s.length &gt; 0)\n{\n    for (i = 0; i &lt; s.length; i++)\n    {\n        load(s[i]);\n    }\n}\n</code></pre>\n<p>This code is simply a short functional example that <em>could</em> require additional feature functionality for full support on any (or given) platform.</p>\n"},{"score":78,"body":"<p>Statement <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import\" rel=\"noreferrer\"><code>import</code></a> is in ECMAScript 6.</p>\n\n<p>Syntax</p>\n\n<pre><code>import name from \"module-name\";\nimport { member } from \"module-name\";\nimport { member as alias } from \"module-name\";\nimport { member1 , member2 } from \"module-name\";\nimport { member1 , member2 as alias2 , [...] } from \"module-name\";\nimport name , { member [ , [...] ] } from \"module-name\";\nimport \"module-name\" as name;\n</code></pre>\n"},{"score":46,"body":"<p>Here's the generalized version of how Facebook does it for their ubiquitous Like button:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script&gt;\r\n  var firstScript = document.getElementsByTagName('script')[0],\r\n      js = document.createElement('script');\r\n  js.src = 'https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js';\r\n  js.onload = function () {\r\n    // do stuff with your dynamically loaded script\r\n    snowStorm.snowColor = '#99ccff';\r\n  };\r\n  firstScript.parentNode.insertBefore(js, firstScript);\r\n&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>If it works for Facebook, it will work for you.</p>\n\n<p>The reason why we look for the first <code>script</code> element instead of <code>head</code> or <code>body</code> is because some browsers don't create one if missing, but we're guaranteed to have a <code>script</code> element - this one. Read more at <a href=\"http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/\">http://www.jspatterns.com/the-ridiculous-case-of-adding-a-script-element/</a>.</p>\n"},{"score":20,"body":"<p>I had a simple issue, but I was baffled by responses to this question.</p>\n\n<p>I had to use a variable (myVar1) defined in one JavaScript file (myvariables.js) in another JavaScript file (main.js).</p>\n\n<p>For this I did as below:</p>\n\n<p>Loaded the JavaScript code in the HTML file, in the correct order, myvariables.js first, then main.js:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;body onload=\"bodyReady();\" &gt;\n\n        &lt;script src=\"myvariables.js\" &gt; &lt;/script&gt;\n        &lt;script src=\"main.js\" &gt; &lt;/script&gt;\n\n        &lt;!-- Some other code --&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>File: myvariables.js</p>\n\n<pre><code>var myVar1 = \"I am variable from myvariables.js\";\n</code></pre>\n\n<p>File: main.js</p>\n\n<pre><code>// ...\nfunction bodyReady() {\n    // ...\n    alert (myVar1);    // This shows \"I am variable from myvariables.js\", which I needed\n    // ...\n}\n// ...\n</code></pre>\n\n<p>As you saw, I had use a variable in one JavaScript file in another JavaScript file, but I didn't need to include one in another. I just needed to ensure that the first JavaScript file loaded before the second JavaScript file, and, the first JavaScript file's variables are accessible in the second JavaScript file, automatically.</p>\n\n<p>This saved my day. I hope this helps.</p>\n"},{"score":28,"body":"<p>If your intention to load the JavaScript file is <strong>using the functions from the imported/included file</strong>, you can also define a global object and set the functions as object items. For instance:</p>\n\n<h3>global.js</h3>\n\n<pre><code>A = {};\n</code></pre>\n\n<h3>file1.js</h3>\n\n<pre><code>A.func1 = function() {\n  console.log(\"func1\");\n}\n</code></pre>\n\n<h3>file2.js</h3>\n\n<pre><code>A.func2 = function() {\n  console.log(\"func2\");\n}\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>A.func1();\nA.func2();\n</code></pre>\n\n<p>You just need to be careful when you are including scripts in an HTML file. The order should be as in below:</p>\n\n<pre><code>&lt;head&gt;\n  &lt;script type=\"text/javascript\" src=\"global.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file1.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"file2.js\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\" src=\"main.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n"},{"score":8,"body":"<p>I basically do it like the following, creating a new element and attach that to head:</p>\n\n<pre><code>var x = document.createElement('script');\nx.src = 'http://example.com/test.js';\ndocument.getElementsByTagName(\"head\")[0].appendChild(x);\n</code></pre>\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"noreferrer\">jQuery</a>:</p>\n\n<pre><code>// jQuery\n$.getScript('/path/to/imported/script.js', function()\n{\n    // Script is now loaded and executed.\n    // Put your dependent JavaScript code here.\n});\n</code></pre>\n"},{"score":6,"body":"<p>I have the requirement to asynchronously load an array of JavaScript files and at the final make a callback. Basically my best approach is the following:</p>\n\n<pre><code>// Load a JavaScript file from other JavaScript file\nfunction loadScript(urlPack, callback) {\n    var url = urlPack.shift();\n    var subCallback;\n\n    if (urlPack.length == 0) subCallback = callback;\n    else subCallback = function () {\n        console.log(\"Log script: \" + new Date().getTime());\n        loadScript(urlPack, callback);\n    }\n\n    // Adding the script tag to the head as suggested before\n    var head = document.getElementsByTagName('head')[0];\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = url;\n\n    // Then bind the event to the callback function.\n    // There are several events for cross browser compatibility.\n    script.onreadystatechange = subCallback;\n    script.onload = subCallback;\n\n    // Fire the loading\n    head.appendChild(script);\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>loadScript(\n[\n    \"js/DataTable/jquery.dataTables.js\",\n    \"js/DataTable/dataTables.bootstrap.js\",\n    \"js/DataTable/dataTables.buttons.min.js\",\n    \"js/DataTable/dataTables.colReorder.min.js\",\n    \"js/DataTable/dataTables.fixedHeader.min.js\",\n    \"js/DataTable/buttons.bootstrap.min.js\",\n    \"js/DataTable/buttons.colVis.min.js\",\n    \"js/DataTable/buttons.html5.min.js\"\n], function() { gpLoad(params); });\n</code></pre>\n\n<p>The second script will not load until the first is completely loaded, and so...</p>\n\n<p>Results:</p>\n\n<p><a href=\"https://i.stack.imgur.com/6Y3vU.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/6Y3vU.png\" alt=\"Result\"></a></p>\n"},{"score":3,"body":"<p>You can't import, but you can reference.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/PhpStorm\" rel=\"nofollow noreferrer\">PhpShtorm</a> IDE. To reference, in one <code>.js</code> file to another <code>.js</code>, just add this to the top of the file:</p>\n\n<pre><code>&lt;reference path=\"../js/file.js\" /&gt;\n</code></pre>\n\n<p>Of course, you should use your own PATH to the JavaScript file.</p>\n\n<p>I don't know if it will work in other IDEs. Probably yes, just try. It should work in Visual Studio too.</p>\n"},{"score":6,"body":"<h1>Here is maybe another way!</h1>\n<p>In Node.js you can do that just like the following code shows!</p>\n<p><strong>sub.js</strong></p>\n<pre class=\"lang-js prettyprint-override\"><code>    module.exports = {\n      log: function(string) {\n        if(console) console.log(string);\n      }\n      mylog: function(){\n        console.log('just for log test!');\n      }\n    }\n</code></pre>\n<p><strong>main.js</strong></p>\n<pre class=\"lang-js prettyprint-override\"><code>    const mylog = require('./sub');\n\n    mylog.log('Hurray, it works! :)');\n    mylog.mylog();\n\n</code></pre>\n<h2>refs</h2>\n<p><a href=\"http://requirejs.org/docs/node.html\" rel=\"nofollow noreferrer\">http://requirejs.org/docs/node.html</a></p>\n"},{"score":1,"body":"<pre><code>var xxx = require(\"../lib/your-library.js\")\n</code></pre>\n\n<p>or</p>\n\n<pre><code>import xxx from \"../lib/your-library.js\" //get default export\nimport {specificPart} from '../lib/your-library.js' //get named export\nimport * as _name from '../lib/your-library.js'  //get full export to alias _name\n</code></pre>\n"},{"score":3,"body":"<p>Another approach is to use HTML imports. These can contain script references as well as stylesheet references.</p>\n\n<p>You can just link an HTML file like</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"vendorScripts.html\"/&gt;\n</code></pre>\n\n<p>Within the <code>vendorScripts.html</code> file you can include your script references like:</p>\n\n<pre><code>&lt;script src=\"scripts/vendors/jquery.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/bootstrap.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular.js\"&gt;&lt;/script&gt;\n&lt;script src=\"scripts/vendors/angular-route.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Look at <a href=\"https://www.html5rocks.com/en/tutorials/webcomponents/imports/\" rel=\"nofollow noreferrer\">HTML Imports</a> for more details.</p>\n\n<p>Unfortunately this only works in Chrome.</p>\n"},{"score":6,"body":"<p>If you use Angular, then a plugin module <a href=\"https://oclazyload.readme.io/docs/getting-started\" rel=\"nofollow noreferrer\">$ocLazyLoad</a> can help you to do that. </p>\n\n<p>Here are some quotes from its documentation:</p>\n\n<blockquote>\n  <p>Load one or more modules &amp; components with multiple files:</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', 'testModuleCtrl.js', 'testModuleService.js']);\n</code></pre>\n  \n  <p>Load one or more modules with multiple files and specify a type where necessary:\n  Note: When using the requireJS style formatting (with js! at the beginning for example), do not specify a file extension. Use one or the other.</p>\n\n<pre><code>$ocLazyLoad.load([\n  'testModule.js',\n   {type: 'css', path: 'testModuleCtrl'},\n   {type: 'html', path: 'testModuleCtrl.html'},\n   {type: 'js', path: 'testModuleCtrl'},\n   'js!testModuleService',\n   'less!testModuleLessFile'\n]);\n</code></pre>\n  \n  <p>You can load external libs (not angular):</p>\n\n<pre><code>$ocLazyLoad.load(['testModule.js', \n   'bower_components/bootstrap/dist/js/bootstrap.js', 'anotherModule.js']);\n</code></pre>\n  \n  <p>You can also load css and template files:</p>\n\n<pre><code> $ocLazyLoad.load([\n     'bower_components/bootstrap/dist/js/bootstrap.js',\n     'bower_components/bootstrap/dist/css/bootstrap.css',\n     'partials/template1.html'\n ]);\n</code></pre>\n</blockquote>\n"},{"score":9,"body":"<p>Here's a workaround <strong>for browsers</strong> (not Node.js) using HTML imports.</p>\n\n<p>First, all JavaScript classes and scripts are not in <code>.js</code> files, but in <code>.js.html</code> files (the <strong>.js</strong>.<code>html</code> is just to recognize between HTML pages and complete JavaScript script/classes), inside <code>&lt;script&gt;</code> tags, like this:</p>\n\n<p><code>MyClass.js.html</code>:</p>\n\n<pre><code>&lt;script&gt;\n   class MyClass {\n\n      // Your code here..\n\n   }\n\n&lt;/script&gt;\n</code></pre>\n\n<p>Then if you wish to import your class, you just need to use HTML imports:</p>\n\n<pre><code>&lt;link rel=\"import\" href=\"relative/path/to/MyClass.js.html\"/&gt;\n\n&lt;script&gt;\n   var myClass = new MyClass();\n   // Your code here..\n&lt;/script&gt;\n</code></pre>\n\n<h1>EDIT : HTML imports will be dropped</h1>\n\n<p>HTML imports are dropped, in favor of ES6 modules. \n<strong>You should use ES6 modules.</strong></p>\n"},{"score":5,"body":"<p>It's very simple. Suppose you want to import file A.js in file B.js.</p>\n\n<p><strong>Now it's sure you have linked B.js in an HTML file, then just link A.js before B.js in that HTML file. Then the public variables of A.js will be available inside the B.js</strong></p>\n\n<p>This does not require a complicated answer.</p>\n"},{"score":18,"body":"<p>In a modern language with the check if script has already been loaded, it would be:</p>\n<pre><code>function loadJs( url ){\n  return new Promise(( resolve, reject ) =&gt; {\n    if (document.querySelector( `head &gt; script[ src = &quot;${url}&quot; ]`) !== null ){\n        console.warn( `script already loaded: ${url}` );\n        resolve();\n    }\n    const script = document.createElement( &quot;script&quot; );\n    script.src = url;\n    script.onload = resolve;\n    script.onerror = function( reason ){\n        // This can be useful for your error-handling code\n        reason.message = `error trying to load script ${url}`;\n        reject( reason );\n    };\n    document.head.appendChild( script );\n  });\n}\n</code></pre>\n<p>Usage (async/await):</p>\n<pre><code>try { await loadJs(&quot;https://.../script.js&quot;); }\ncatch(error) { console.log(error); }\n</code></pre>\n<p>or</p>\n<pre><code>await loadJs( &quot;https://.../script.js&quot; ).catch( err =&gt; {} );\n</code></pre>\n<p>Usage (Promise):</p>\n<pre><code>loadJs( &quot;https://.../script.js&quot; ).then( res =&gt; {} ).catch( err =&gt; {} );\n</code></pre>\n"},{"score":15,"body":"<p>Although these answers are great, there is a simple \"solution\" that has been around since script loading existed, and it will cover 99.999% of most people's use cases. Just include the script you need before the script that requires it. For most projects it does not take long to determine which scripts are needed and in what order.</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"script1.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"script2.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If script2 requires script1, this really is the absolute easiest way to do something like this. I'm very surprised no-one has brought this up, as it's the most obvious and simplest answer that will apply in nearly every single case.</p>\n"},{"score":1,"body":"<p>Please note that we usually use <strong>static scripts</strong>. So we want to be taken from the <strong>cache</strong> as much as possible.</p>\n<p>This saves network traffic and speeds up landing.</p>\n<p><em>Usage</em></p>\n<pre><code>$.cachedScript( &quot;ajax/test.js&quot; ).done(function( script, textStatus ) {\n  console.log( textStatus );\n});\n</code></pre>\n<p>The <strong>cache: true</strong> option has been added to the Ajax method.</p>\n"},{"score":1,"body":"<p>If you find there are two or more scripts occupying the same function when they are called, and we cannot be include them at the same time, we need to do it <strong>dynamically</strong> by user selection.</p>\n<p>Including another file in jQuery using <code>$.getScript</code> works since the script <em><a href=\"https://api.jquery.com/jquery.getscript/#caching-requests\" rel=\"nofollow noreferrer\">will not be cached by default</a></em>. So we are safe to call other scripts. The calls can be arranged like this:</p>\n<p><em><strong>HTML</strong></em></p>\n<pre><code>&lt;select class=&quot;choice&quot;&gt;\n  &lt;option value=&quot;script1&quot; selected&gt;Script-1&lt;/option&gt;\n  &lt;option value=&quot;script2&quot;&gt;Script-2&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<p><em><strong>JavaScript</strong></em></p>\n<pre><code>  $(&quot;.choice&quot;).change(on_change);\n\n    var url = &quot;https://example.com&quot;;\n    $.url1 = url + &quot;/script1.js&quot;;\n    $.url2 = url + &quot;/script2.js&quot;;\n\n  function on_change() {\n    if ($(&quot;.choice&quot;).val()==&quot;script1&quot;) {\n        script1();\n    } else {\n         script2();\n    }\n\n    // script1\n    function script1() {\n      $.getScript($.url1, function( data, textStatus, jqxhr ) {\n          // Execute here\n      });\n    }\n\n    // script2\n    function script2() {\n       $.getScript($.url2, function( data, textStatus, jqxhr ) {\n          // Execute here\n      });\n    }\n</code></pre>\n"},{"score":8,"body":"<p><strong>Yes,</strong> there is...</p>\n<p>Keep reading. In <strong>ES6</strong>, we can <code>export</code> and <code>import</code> part or whole JavaScript file into another one...</p>\n<p>But wait, <strong>ES6</strong> is not supported in all the browsers, so you need to transpile it using <code>babel.js</code> for example...</p>\n<p>So you create a class like below:</p>\n<pre><code>class Person {\n  constructor(name) {\n    this.name = name;\n  }\n\n  build() {\n    return new Person(this);\n  }\n}\n\nmodule.exports = Person;\n</code></pre>\n<p>In <em>another</em> JavaScript file, do the import like:</p>\n<pre><code>import { Person } from 'Person';\n</code></pre>\n<p>You also can require the file like:</p>\n<pre><code>const Person = require('./Person');\n</code></pre>\n<p>If you are using an older JavaScript version you can use <strong>requirejs</strong>:</p>\n<pre><code>requirejs([&quot;helper/util&quot;], function(util) {\n    // This function is called when scripts/helper/util.js is loaded.\n    // If util.js calls define(), then this function is not fired until\n    // util's dependencies have loaded, and the util argument will hold\n    // the module value for &quot;helper/util&quot;.\n});\n</code></pre>\n<p>If you want to stick to older version of stuff, like <strong>jQuery</strong>, you can also use something like <strong>getScript</strong>:</p>\n<pre><code>jQuery.getScript('./another-script.js', function() {\n    // Call back after another-script loaded\n});\n</code></pre>\n<p>Last, but not the least, don't forget you can do the traditional way of putting a script together using the <code>&lt;script&gt;</code> tag...</p>\n<pre><code>&lt;script src=&quot;./first-script.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./second-script.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;./third-script.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>There are also the <strong>async</strong> and <strong>defer</strong> attributes which I should mention here...</p>\n<blockquote>\n<p><strong>Note:</strong> There are several ways an external script can be executed:</p>\n<ul> <li>If async is present: The script is executed asynchronously\nwith the rest of the page (the script will be executed while the page\ncontinues the parsing)</li>   <li>If async is not present and defer is\npresent: The script is executed when the page has finished\nparsing</li>   <li>If neither async or defer is present: The script is\nfetched and executed immediately, before the browser  continues\nparsing the page</li> </ul>\n</blockquote>\n"},{"score":9,"body":"<p><strong>For Node.js only, this worked for me the best!</strong></p>\n<p>I've tried most solutions here, but none helped me about just being able to load another file without changing scope. Finally I used this. Which preserves the scope and everything. It is as good as your code is in that point.</p>\n<pre><code>const fs = require('fs');\neval(fs.readFileSync('file.js') + '');\n</code></pre>\n"},{"score":6,"body":"<h1>Import and export modules using ES6 that work with Node.js</h1>\n\n<p>Name files with <code>.mjs</code> extension instead of <code>.js</code></p>\n\n<h3>Create files</h3>\n\n<pre><code>touch main.mjs lib.mjs\n</code></pre>\n\n<h3>main.js</h3>\n\n<pre><code>import { add } from './lib.mjs';\nconsole.log(add(40, 2));\n</code></pre>\n\n<h3>lib.mjs</h3>\n\n<pre><code>export let add = (x,y) =&gt; {\n  return x + y\n}\n</code></pre>\n\n<h3>Run</h3>\n\n<pre><code>node --experimental-modules main.js\n</code></pre>\n"},{"score":10,"body":"<p>There are several ways to implement modules in JavaScript. Here are the two most popular ones:</p>\n<h2><strong>ES6 Modules</strong></h2>\n<p>Browsers do not support this moduling system yet, so in order for you to use this syntax you must use a bundler like <a href=\"https://en.wikipedia.org/wiki/Webpack\" rel=\"nofollow noreferrer\">Webpack</a>. Using a bundler is better anyway because this can combine all of your different files into a single (or a couple of related) files. This will serve the files from the server to the client faster because each HTTP request has some associated overhead accompanied with it. Thus by reducing the overall HTTP request we improve the performance. Here is an example of ES6 modules:</p>\n<pre><code>// main.js file\n\nexport function add (a, b) {\n  return a + b;\n}\n\nexport default function multiply (a, b) {\n  return a * b;\n}\n\n\n// test.js file\n\nimport {add}, multiply from './main';   // For named exports between curly braces {export1, export2}\n                                        // For default exports without {}\n\nconsole.log(multiply(2, 2));  // logs 4\n\nconsole.log(add(1, 2));  // logs 3\n</code></pre>\n<h2><strong>CommonJS</strong> (used in Node.js)</h2>\n<p>This moduling system is used in Node.js. You basically add your exports to an object which is called <code>module.exports</code>. You then can access this object via a <code>require('modulePath')</code>. Important here is to realize that these modules are being cached, so if you <code>require()</code> a certain module twice it will return the already created module.</p>\n<pre><code>// main.js file\n\nfunction add (a, b) {\n  return a + b;\n}\n\nmodule.exports = add;  // Here we add our 'add' function to the exports object\n\n\n// test.js file\n\nconst add = require('./main');\n\nconsole.log(add(1,2));  // logs 3\n</code></pre>\n"},{"score":5,"body":"<p>I tried this problem with another approach,</p>\n\n<p>Ordering of script importing, has no effect in here.</p>\n\n<p><strong>index.html</strong></p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;Trials&lt;/title&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"scriptA.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;h3&gt;testing js in js (check console logs)&lt;/h3&gt;\n&lt;button onclick=\"fnClick()\"&gt;TEST&lt;/button&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>main.js</strong></p>\n\n<pre><code>function fnClick() {\n  console.log('From\\tAAAAA');\n  var pro = myExpo.hello();\n  console.log(pro);\n}\n</code></pre>\n\n<p><strong>scriptA.js</strong></p>\n\n<pre><code>myExpo = {\n    hello: function () {\n        console.log('From\\tBBBBB');\n        return \"Hello\";\n    }\n}\n</code></pre>\n\n<p>and the <strong>result</strong> is</p>\n\n<pre><code>From    AAAAA\nFrom    BBBBB\nHello\n</code></pre>\n"},{"score":3,"body":"<h1>Dynamically Loading Multiple Scripts In Order</h1>\n\n<p>The above function works fine if you are loading only one script or you don't care about the loading order of multiple scripts. If you have some scripts that depends on others, you need to use <a href=\"https://javascript.info/promise-basics\" rel=\"nofollow noreferrer\">Promise</a> to specify the order of loading. The reason behind this is Javascript loads resources like scripts and images asynchronously. The loading sequence does not depends on the sequence of asynchronous calls, meaning script1 will not be guaranteed to load before script2 even if you call <code>dynamicallyLoadScript(\"scrip1\")</code> before calling <code>dynamicallyLoadScript(\"scrip2\")</code></p>\n\n<p>So here's another version of dynamicallyLoadScript that guarantees loading order:</p>\n\n<pre class=\"lang-javascript prettyprint-override\"><code>// Based on: https://javascript.info/promise-basics#example-loadscript\nfunction dynamicallyLoadScript(url) {\n        return new Promise(function(resolve, reject) {\n        var script = document.createElement(\"script\");\n        script.src = url;\n        script.onload = resolve;\n        script.onerror = () =&gt; reject(new Error(`Error when loading ${url}!`));\n        document.body.appendChild(script);\n    });\n</code></pre>\n\n<p>For more on Promises, see <a href=\"https://javascript.info/promise-basics\" rel=\"nofollow noreferrer\">this excellent page</a>.</p>\n\n<p>The usage of this new dynamicallyLoadScript is very simple:</p>\n\n\n\n<pre><code>dynamicallyLoadScript(\"script1.js\")\n.then(() =&gt; dynamicallyLoadScript(\"script2.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script3.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script4.js\"))\n.then(() =&gt; dynamicallyLoadScript(\"script5.js\"))\n//...\n</code></pre>\n\n<p>Now the scripts are loaded in the order of script1.js, script2.js, script3.js, etc. </p>\n\n<h3>Run dependent code after script loads</h3>\n\n<p>In addition, you can immediately run code that uses the scripts after they are loaded. Just add another <code>.then</code> after the loading the script:</p>\n\n\n\n<pre><code>dynamicallyLoadScript(\"script1.js\")\n.then(() =&gt; dynamicallyLoadScript(\"script2.js\"))\n.then(() =&gt; foo()) // foo can be a function defined in either script1, script2\n.then(() =&gt; dynamicallyLoadScript(\"script3.js\"))\n.then(() =&gt; {\n     if (var1){ // var1 can be a global variable defined in either script1, script2, or script3\n          bar(var1); // bar can be a function defined in either script1, script2, or script3\n     } else {\n          foo(var1);\n     }\n})\n//more .then chains...\n</code></pre>\n\n<hr>\n\n<h3>Handle loading errors</h3>\n\n<p>To display unhandled promise rejections (errors loading scripts, etc), put this <code>unhandledrejection</code> event listener at the top of your code:</p>\n\n\n\n<pre><code>// Based on: https://javascript.info/promise-error-handling#unhandled-rejections\nwindow.addEventListener('unhandledrejection', function(event) {\n     // the event object has two special properties:\n     console.error(event.promise);// the promise that generated the error\n     console.error(event.reason); // the unhandled error object\n});\n</code></pre>\n\n<p>Now you will be notified of any script loading errors.</p>\n\n<hr>\n\n<h3>Shortcut Function</h3>\n\n<p>If you are loading a lot of scripts without executing code immediately after loading, this shorthand function may come in handy:</p>\n\n\n\n<pre><code>function dynamicallyLoadScripts(urls){\n        if (urls.length === 0){\n            return;\n        }\n        let promise = dynamicallyLoadScript(urls[0]);\n        urls.slice(1).forEach(url =&gt; {\n            promise = promise.then(() =&gt; dynamicallyLoadScript(url));\n        });\n    }\n</code></pre>\n\n<p>To use it, just pass in an array of script urls like this:</p>\n\n\n\n<pre><code>const scriptURLs = [\"dist/script1.js\", \"dist/script2.js\", \"dist/script3.js\"];\ndynamicallyLoadScripts(scriptURLs);\n</code></pre>\n\n<p>The scripts will be loaded in the order they appear in the array.</p>\n"},{"score":1,"body":"<p>You can use my <a href=\"https://github.com/anhr/loadScriptNodeJS\" rel=\"nofollow noreferrer\">loadScript ES module</a> for loading of the JavaScript files.</p>\n<h2>Usage:</h2>\n<p>In your head tag, include the following code:</p>\n<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>or</p>\n<pre><code>&lt;script src=&quot;https://raw.githack.com/anhr/loadScriptNodeJS/master/build/loadScript.min.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>Now you can use window.loadScript for loading of your JavaScript files.</p>\n<h3>loadScript.async( src, [options] )</h3>\n<p>Asynchronous load JavaScript file.</p>\n<p><code>src</code>: URL of an external script file or array of the script file names.</p>\n<p><code>options</code>: the following options are available</p>\n<pre><code>onload: function () The onload event occurs when a script has been loaded. Default is undefined.\n\nonerror: function ( str, e ) The onerror event occurs when an error has been occurred. The default is undefined.\n\n    str: error details\n\n    e: event\n\nappendTo: The node to which the new script will be append. The default is the head node.\n</code></pre>\n<p>For example</p>\n<pre><code>loadScript.async( &quot;JavaScript.js&quot;,\n        {\n            onload: function () {\n\n                var str = 'file has been loaded successfully';\n                console.log( str );\n            },\n            onerror: function ( str, e ) {\n\n                console.error( str );\n            },\n        } );\n</code></pre>\n<p><a href=\"https://raw.githack.com/anhr/loadScriptNodeJS/master/index.html\" rel=\"nofollow noreferrer\">Example of usage</a></p>\n"},{"score":2,"body":"<p>A little extension to the library from <a href=\"https://stackoverflow.com/questions/950087/how-do-i-include-a-javascript-file-in-another-javascript-file/31282622#31282622\">Dan Dascalescu's answer </a> taken from the Facebook idea.</p>\n<pre><code>(function() {\nvar __ = {};\nthis._ = function(name, callback) {\n    if(__[name]==undefined) {\n        __[name] = true;\n        var firstScript = document.getElementsByTagName('script')[0],\n          js = document.createElement('script');\n          js.src =  name;\n          js.onload = callback;\n          firstScript.parentNode.insertBefore(js, firstScript);\n    }\n}\n})();\n\n(new _('https://cdnjs.cloudflare.com/ajax/libs/Snowstorm/20131208/snowstorm-min.js', function() {\n snowStorm.snowColor = '#99ccff';\n}));\n</code></pre>\n"},{"score":11,"body":"<h1>ES6 Modules</h1>\n<p><em>Yes</em>, use type=&quot;module&quot; in a script tag (<a href=\"https://caniuse.com/#search=type%3D%22module%22\" rel=\"nofollow noreferrer\">support</a>):</p>\n<pre><code>&lt;script type=&quot;module&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n<p>And in a <code>script.js</code> file include another file like this:</p>\n<pre><code>import { hello } from './module.js';\n...\n// alert(hello());\n</code></pre>\n<p>In 'module.js' you must <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export\" rel=\"nofollow noreferrer\">export the function/class</a> that you will import:</p>\n<pre><code>export function hello() {\n    return &quot;Hello World&quot;;\n}\n</code></pre>\n<p>A working <a href=\"http://plnkr.co/edit/ln6J7wfdsJPUNzaEi3u6\" rel=\"nofollow noreferrer\">example is here</a>.</p>\n"},{"score":1,"body":"<p>So this is a edge case. But if you need to load the JavaScript from a remote source, most modern browsers might block your cross-site requests due to CORS or something similar. So normal</p>\n\n<pre><code>&lt;script src=\"https://another-domain.com/example.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Won't work. And doing the <code>document.createElement('script').src = '...'</code> won't cut it either. Instead, what you could do is load the java-script as a resource via standard <code>GET</code> request, and do this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", 'https://raw.githubusercontent.com/Torxed/slimWebSocket/master/slimWebSocket.js', true);\n    xhr.onreadystatechange = function() {\n        if (this.readyState === XMLHttpRequest.DONE &amp;&amp; this.status === 200) {\n            script.innerHTML = this.responseText; // &lt;-- This one\n            document.head.appendChild(script);\n        }\n    }\n    xhr.send();\n&lt;/script&gt;\n</code></pre>\n\n<p>By grabbing the content yourself, the browser won't notice malicious intents and allow you go do the request. Then you add it in <code>&lt;script&gt;</code>'s <code>innerHTML</code> instead. This still causes the browser <em>(at least tested in Chrome)</em> to parse/execute the script.</p>\n\n<p>Again, this is a edge case use case. And you'll have no backwards compatibility or browser compliance probably. But fun/useful thing to know about.</p>\n"},{"score":0,"body":"<p>I did not see an answer whereby you create an object of all functions and variables in a file and then make that object an argument to refer to it in another file.</p>\n<p>E.g., you have files called 'jsMod.js', 'jsView' and 'jsContr.js':</p>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsMod.js file\n    JSMODOBJ = {};\n    JSMODOBJ.valueAddition = function(/* element value 1 */ val1,\n                                          /* element value 2 */ val2) {\n        return val1 + val2;\n    }\n\n</code></pre>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsView.js file\n    JSVIEWOBJ = {};\n    JSVIEWOBJ.elementColour = function(/* element id to change colour */ id,\n                                          /* css colour classname */ col) {\n        document.getElementById(id).className = col;\n    }\n\n</code></pre>\n<pre class=\"lang-js prettyprint-override\"><code>\n    //jsContr.js file\n    JSCONTROBJ = {};\n    var jsMod = JSMODOBJ;\n    var jsView = JSVIEWOBJ;\n\n    JSCONTROBJ.changeColourByValue = function (val1, val2, id, clss) {\n        if (jsMod.valueAddition(val1,val2) !== 0) {\n            jsView.elementColour(id, clss);\n        }\n    }\n\n</code></pre>\n<p>Then you can set the .js files dynamically by echoeing the <code>scripts</code> into your .html or .php file:</p>\n<pre class=\"lang-php prettyprint-override\"><code>&lt;?php\n    echo &quot;&lt;script src = './js/dleafView.js'&gt;&lt;/script&gt;\n        &lt;script src = './js/dleafModule.js'&gt;&lt;/script&gt;\n        &lt;script src = './js/dleafContr.js'&gt;&lt;/script&gt;&quot;;\n?&gt;\n</code></pre>\n<p>Then just call the control function within a <code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code> tag.  Of course this will take a lot of time in the beginning to set up, but it saves you time in the long run.</p>\n<p>I use this in a slightly different way, but this way also work.</p>\n"},{"score":0,"body":"<p>You can also use <code>gulp</code>, <code>gulp-concat</code>, <code>gulp-typescript</code> with <code>/// &lt;reference path=</code> includes:</p>\n\n<p><strong>packages.json</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n  \"scripts\": {\n    \"gulp\": \"gulp main\"\n  },\n  \"dependencies\": {\n    \"@types/gulp\": \"^4.0.6\",\n    \"@types/gulp-concat\",\n    \"@types/gulp-typescript\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-resolve-dependencies\": \"^3.0.1\",\n    \"gulp-typescript\": \"^6.0.0-alpha.1\",\n    \"typescript\": \"^3.7.3\"\n  }\n}\n</code></pre>\n\n<p><strong>src/someimport.ts</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>class SomeClass {\n    delay: number;\n}\n</code></pre>\n\n<p><strong>src/main.ts</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>/// &lt;reference path=\"./someimport.ts\" /&gt;\n\nsomeclass = new SomeClass();\nsomeclass.delay = 1;\n</code></pre>\n\n<p>This <code>main</code> gulp task (on <code>gulpfile.js</code>) targets only the <code>src/main.js</code> file, resolving all its <code>/// &lt;reference path=...</code> include references. These includes are know as <code>Triple-Slash Directives</code> and they are used only for transpilers tools to combine files. In our case, they are used explicitly by <code>.pipe(resolveDependencies({</code> and by typescript itself when checking the file for missing types, variables, etc.</p>\n\n<ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html\" rel=\"nofollow noreferrer\">https://www.typescriptlang.org/docs/handbook/triple-slash-directives.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/22684802/when-do-i-need-a-triple-slash-reference\">When do I need a triple slash reference?</a></li>\n</ol>\n\n<p>Refer to <a href=\"https://github.com/ivogabe/gulp-typescript#api-overview\" rel=\"nofollow noreferrer\">https://github.com/ivogabe/gulp-typescript#api-overview</a> if you would like to customize the <code>var tsProject = ts.createProject</code> call and not use a <code>tsconfig.json</code> file or override its parameters.</p>\n\n<p><strong>gulpfile.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var gulp = require(\"gulp\");\nvar concat = require('gulp-concat');\nvar resolveDependencies = require('gulp-resolve-dependencies');\n\nvar ts = require(\"gulp-typescript\");\nvar tsProject = ts.createProject(\"tsconfig.json\");\n\ngulp.task(\"main\", function() {\n  return gulp\n    .src([\"src/main.ts\"])\n    .pipe(resolveDependencies({\n      pattern: /^\\s*\\/\\/\\/\\s*&lt;\\s*reference\\s*path\\s*=\\s*(?:\"|')([^'\"\\n]+)/gm\n    }))\n    .on('error', function(err) {\n        console.log(err.message);\n    })\n    .pipe(tsProject())\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest(\"build/\"));\n});\n</code></pre>\n\n<p>If you wold like to target all your type script project files instead of only <code>src/main.ts</code>, you can replace this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>  return gulp\n    .src([\"src/main.ts\"])\n    .pipe(resolveDependencies({\n    ...\n// --&gt;\n  return tsProject\n    .src()\n    .pipe(resolveDependencies({\n    ...\n</code></pre>\n\n<p>If you do not want to use <code>typescript</code>, you can use this simplified <code>gulpfile.js</code> and remove all <code>typescript</code> includes from <code>package.json</code>:</p>\n\n<p><strong>gulpfile.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var gulp = require(\"gulp\");\nvar concat = require('gulp-concat');\nvar resolveDependencies = require('gulp-resolve-dependencies');\n\ngulp.task(\"main\", function() {\n  return gulp\n    .src([\"src/main.js\"])\n    .pipe(resolveDependencies({\n      pattern: /^\\s*\\/\\/\\/\\s*&lt;\\s*reference\\s*path\\s*=\\s*(?:\"|')([^'\"\\n]+)/gm\n    }))\n    .on('error', function(err) {\n        console.log(err.message);\n    })\n    .pipe(concat('main.js'))\n    .pipe(gulp.dest(\"build/\"));\n});\n</code></pre>\n\n<p><strong>packages.json</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>{\n  \"scripts\": {\n    \"gulp\": \"gulp main\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^4.0.2\",\n    \"gulp-concat\": \"^2.6.1\",\n    \"gulp-resolve-dependencies\": \"^3.0.1\"\n  }\n}\n</code></pre>\n\n<p>Then, after running the command <code>npm run gulp</code>, the file <code>build/main.js</code> is created with the following as its contents:</p>\n\n<p><strong>build/main.js</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>class SomeClass {\n}\n/// &lt;reference path=\"./someimport.ts\" /&gt;\nsomeclass = new SomeClass();\nsomeclass.delay = 1;\n</code></pre>\n\n<p>Which allows me to include it in the browser with the <code>script</code> tag, after serving the <code>build</code> directory files:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;script src=\"main.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            console.log(someclass.delay);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Related questions:</p>\n\n<ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/gulp.html\" rel=\"nofollow noreferrer\">https://www.typescriptlang.org/docs/handbook/gulp.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/36710768/can-i-use-the-typescript-without-requirejs\">Can I use the typescript without requireJS?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/52338233/gulp-simple-concatenation-of-main-file-that-requires-another-js-file\">Gulp simple concatenation of main file that requires another JS file</a></li>\n<li><a href=\"https://stackoverflow.com/questions/19059580/client-on-node-uncaught-referenceerror-require-is-not-defined\">Client on node: Uncaught ReferenceError: require is not defined</a></li>\n<li><a href=\"https://stackoverflow.com/questions/47318837/how-can-typescript-browser-node-modules-be-compiled-with-gulp\">How can typescript browser node modules be compiled with gulp?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/38381621/concatenate-files-using-babel\">Concatenate files using babel</a></li>\n<li><a href=\"https://stackoverflow.com/questions/7576001/how-to-require-commonjs-modules-in-the-browser\">How to require CommonJS modules in the browser?</a></li>\n<li><a href=\"https://stackoverflow.com/questions/34438378/is-there-an-alternative-to-browserify\">Is there an alternative to Browserify?</a></li>\n</ol>\n"},{"score":-3,"body":"<p>You shall use this:</p>\n\n<pre><code>&lt;script src=\"your_file.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Easy!</p>\n"},{"score":1,"body":"<pre><code>Step 1: Declare the function in another class.\n\n    export const myreport = (value) =&gt; {\n    color = value.color;\n    name = value.name;\n    \n    var mytext = name + &quot; | &quot; + color;\n    return mytext;\n    }\n\nStep 2:- Import that function which is needed to be used.\n\n    import {myreport} from '../../Test'\n\nStep 3:- Use that function.\n\nlet val = { color: &quot;red&quot;, name: &quot;error&quot; }\nvar resultText = myreport(val)\nconsole.log(&quot;resultText :- &quot;, resultText)\n</code></pre>\n"}],"score":5425}